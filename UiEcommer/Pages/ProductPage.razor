@page "/{categorylink}/{productlink}"
@using UiEcommer.Models
@using UiEcommer.Client
@using System.Text.Json
@using UiEcommer.Shared.ProductComponent

@inject NavigationManager UriHelper
@inject IHttpClientFactory ClientFactory
@inject IConfiguration Configuration
<PageTitle>@product.Name</PageTitle>
<section class="page">
    <BreadcrumbComponent pathCategory="@pathCategory" product="@product" />
    <ContainerComponent 
    product="@product" 
    brand="@brand" 
    childProduct="@childProduct" 
    images="@imageEntitys" 
    attributes="@attributes" 
    attribute2s="@attribute2s" />
</section>
@code {
    [Parameter]
    public string categorylink { get; set; }
    [Parameter]
    public string productlink { get; set; }
    private Product product = new Product();
    private Brand brand = new Brand();
    private List<Category> pathCategory = new List<Category>();
    private List<ImageEntity> imageEntitys = new List<ImageEntity>();
    private List<UiEcommer.Models.Attribute> attributes = new List<UiEcommer.Models.Attribute>();
    private List<UiEcommer.Models.Attribute> attribute2s = new List<UiEcommer.Models.Attribute>();
    private List<Product> childProduct = new List<Product>();
    private bool shouldRender;
    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnParametersSetAsync()
    {
        var url = UriHelper.ToAbsoluteUri(UriHelper.Uri).LocalPath;
        if (url != null && url != "/")
        {
            var data = await new Client(nameof(Product), Configuration).FirstOfDefault<Product>($"?$filter=Link eq '{url}'");
            if (data != null)
            {
                product = data;
                if (product.Path != null)
                {
                    var pathIds = product.Path.Split(@"\").Where(x => x != null && x != "").ToList();
                    var pathCte = new Client(nameof(Category), Configuration).GetList<Category>($"?$select=Name,Link&$filter=Id in ({string.Join(",", pathIds)})");
                    var brandCte = new Client(nameof(Brand), Configuration).FirstOfDefault<Brand>($"?$filter=Id eq {product.BrandId}");
                    var childP = new Client(nameof(Product), Configuration).GetList<Product>($"?$filter=ParentId eq {product.Id}");
                    var images = new Client(nameof(ImageEntity), Configuration).GetList<ImageEntity>($"?$filter=EntityId eq 5004 and RecordId eq {product.Id}");
                    await Task.WhenAll(pathCte, brandCte, childP, images);
                    var rsChildProduct = childP.Result;
                    if (rsChildProduct.Count > 0)
                    {
                        var attr = rsChildProduct.Select(x => x.AttributeId).Distinct().ToList();
                        var attr2 = rsChildProduct.Select(x => x.Attribute2Id).Distinct().ToList();
                        if (attr.Any())
                        {
                            attributes = await new Client(nameof(UiEcommer.Models.Attribute), Configuration).GetList<UiEcommer.Models.Attribute>($"?$filter=Id in ({string.Join(",", attr)})");
                        }
                        if (attr2.Any())
                        {
                            attribute2s = await new Client(nameof(UiEcommer.Models.Attribute), Configuration).GetList<UiEcommer.Models.Attribute>($"?$filter=Id in ({string.Join(",", attr2)})");
                        }
                    }
                    imageEntitys = images.Result;
                    pathCategory = pathCte.Result;
                    brand = brandCte.Result;
                    childProduct = childP.Result;
                }
                else
                {
                    pathCategory = new List<Category>();
                }
            }
            else
            {
                UriHelper.NavigateTo("/404");
            }
            shouldRender = true;
        }
    }
}
