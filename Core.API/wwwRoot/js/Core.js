/**
 * @version 1.0.0.0
 * @copyright Copyright Â©  2020
 * @compiler Bridge.NET 17.10.1
 */
Bridge.assembly("Core", function ($asm, globals) {
    "use strict";

    Bridge.define("Core.Clients.BadGatewayQueue", {
        fields: {
            _queue: null
        },
        props: {
            Count: {
                get: function () {
                    return this._queue.Count;
                }
            }
        },
        ctors: {
            init: function () {
                this._queue = new (System.Collections.Generic.Queue$1(Core.Clients.XHRWrapper)).ctor();
            }
        },
        methods: {
            Enqueue: function (options) {
                if (!options.NoQueue && options.Method !== Core.Enums.HttpMethod.GET) {
                    options.Retry = true;
                    this._queue.Enqueue(options);
                }
            },
            Dequeue: function () {
                return this._queue.Dequeue();
            },
            Peek: function () {
                return this._queue.Peek();
            }
        }
    });

    Bridge.define("Core.Clients.Client", {
        statics: {
            fields: {
                ErrorMessage: null,
                ModelNamespace: null,
                token: null,
                BadGatewayRequest: null,
                _errorMessageAwaiter: 0,
                UnAuthorizedEventHandler: null,
                SignOutEventHandler: null
            },
            props: {
                EpsilonNow: {
                    get: function () {
                        return System.DateTime.addSeconds(System.DateTime.getNow(), 10);
                    }
                },
                Host: {
                    get: function () {
                        return window.Host != null ? Bridge.toString(window.Host) : window.location.host;
                    }
                },
                Origin: {
                    get: function () {
                        return window.OriginLocation != null ? Bridge.toString(window.OriginLocation) : ((window.location.origin || "") + "/");
                    }
                },
                Prefix: {
                    get: function () {
                        return (Core.Clients.Client.Origin || "") + "api";
                    }
                },
                Tenant: {
                    get: function () {
                        var $t;
                        return ($t = System.Linq.Enumerable.from(document.head.children, HTMLElement).where(function (x) {
                                    return Bridge.is(x, HTMLMetaElement);
                                }).select(function (x) {{ return Bridge.cast(x, HTMLMetaElement); }}).firstOrDefault(function (x) {
                                    var meta;
                                    return ((meta = x)) != null && Bridge.referenceEquals(meta.name, "tenant");
                                }, null)) != null ? $t.content : null;
                    }
                },
                Token: {
                    get: function () {
                        var $t;
                        if (Core.Clients.Client.token != null) {
                            return Core.Clients.Client.token;
                        }

                        return Newtonsoft.Json.JsonConvert.DeserializeObject(($t = window.localStorage.getItem("UserInfo")) != null ? Bridge.toString($t) : null, Core.ViewModels.Token);
                    },
                    set: function (value) {
                        Core.Clients.Client.token = value;
                        window.localStorage.setItem("UserInfo", value == null ? null : JSON.stringify(value));
                    }
                },
                SystemRole: false
            },
            ctors: {
                init: function () {
                    this.ErrorMessage = "\u0110\u00e3 c\u00f3 l\u1ed7i x\u1ea3y ra trong qu\u00e1 tr\u00ecnh x\u1eed l\u00fd.<br /> Vui l\u00f2ng th\u1eed l\u1ea1i ho\u1eb7c li\u00ean h\u1ec7 h\u1ed7 tr\u1ee3!";
                    this.BadGatewayRequest = new Core.Clients.BadGatewayQueue();
                }
            },
            methods: {
                CheckHasRole: function (role) {
                    if (Core.Clients.Client.Token == null) {
                        return false;
                    }

                    return System.Linq.Enumerable.from(Core.Clients.Client.Token.RoleNames, System.String).any(function (x) {
                            return System.String.indexOf(x, System.String.replaceAll(System.Enum.toString(Core.Enums.RoleEnum, role), "_", " "), 0, null, 5) >= 0;
                        });
                },
                CheckHasRole$1: function (roleNames, role) {
                    return System.Linq.Enumerable.from(roleNames, System.String).any(function (x) {
                            return System.String.indexOf(x, System.String.replaceAll(System.Enum.toString(Core.Enums.RoleEnum, role), "_", " "), 0, null, 5) >= 0;
                        });
                },
                CheckIsRole: function (roleName, role) {
                    return System.String.indexOf(roleName, System.String.replaceAll(System.Enum.toString(Core.Enums.RoleEnum, role), "_", " "), 0, null, 5) >= 0;
                },
                ApplyParameter: function (T, param) {
                    var propVal = System.Linq.Enumerable.from(Bridge.Reflection.getMembers(Bridge.getType(param, T), 16, 28), System.Reflection.PropertyInfo).select(function (prop) {
                            return System.String.format("{0}={1}", prop.n, Bridge.Reflection.midel(prop.g, param)());
                        });
                    return Bridge.toArray(propVal).join("&");
                },
                ErrorHandler: function (T, options, tcs, xhr) {
                    var $t;
                    if (options.Retry) {
                        tcs.setResult(false);
                        return;
                    }
                    var exp;
                    try {
                        exp = Newtonsoft.Json.JsonConvert.DeserializeObject(xhr.responseText, Core.Clients.TmpException);
                        exp.StatusCode = xhr.status;
                    } catch ($e1) {
                        $e1 = System.Exception.create($e1);
                        exp = ($t = new Core.Clients.TmpException(), $t.Message = "\u0110\u00e3 c\u00f3 l\u1ed7i x\u1ea3y ra trong qu\u00e1 tr\u00ecnh x\u1eed l\u00fd", $t.StackTrace = xhr.responseText, $t);
                    }
                    if (!Bridge.staticEquals(options.ErrorHandler, null)) {
                        options.ErrorHandler(xhr);
                        tcs.trySetException(($t = new Core.Clients.HttpException.$ctor1(exp.Message), $t.XHR = xhr, $t));
                        return;
                    }
                    if (xhr.status >= Core.Enums.HttpStatusCode.BadRequest && xhr.status < Core.Enums.HttpStatusCode.InternalServerError) {
                        Core.Extensions.Toast.Warning(exp != null ? exp.Message : null);
                        System.Console.WriteLine(exp);
                    } else if (xhr.status === Core.Enums.HttpStatusCode.InternalServerError || xhr.status === Core.Enums.HttpStatusCode.NotFound) {
                        System.Console.WriteLine(exp);
                    } else if (xhr.status === Core.Enums.HttpStatusCode.Unauthorized) {
                        !Bridge.staticEquals(Core.Clients.Client.UnAuthorizedEventHandler, null) ? Core.Clients.Client.UnAuthorizedEventHandler(options) : null;
                    } else if (xhr.status === 0 || xhr.status >= Core.Enums.HttpStatusCode.BadGateway || xhr.status === Core.Enums.HttpStatusCode.GatewayTimeout || xhr.status === Core.Enums.HttpStatusCode.ServiceUnavailable) {
                        window.clearTimeout(Core.Clients.Client._errorMessageAwaiter);
                        Core.Clients.Client._errorMessageAwaiter = window.setTimeout(function () {
                            Core.Extensions.Toast.Warning("L\u1ed7i k\u1ebft n\u1ed1i t\u1edbi m\u00e1y ch\u1ee7, vui l\u00f2ng ch\u1edd trong gi\u00e2y l\u00e1t...");
                        }, 100);
                        if (!options.Retry) {
                            Core.Clients.Client.BadGatewayRequest.Enqueue(options);
                        }
                    } else {
                        if (!System.String.isNullOrWhiteSpace(xhr.responseText)) {
                            Core.Extensions.Toast.Warning(xhr.responseText);
                        }
                    }
                    tcs.trySetException(($t = new Core.Clients.HttpException.$ctor1(exp.Message), $t.XHR = xhr, $t));
                },
                ProcessSuccessRequest: function (T, options, tcs, xhr) {
                    if (options.Retry) {
                        tcs.setResult(true);
                        return;
                    }
                    if (Core.Extensions.StringExt.IsNullOrEmpty(xhr.responseText)) {
                        tcs.setResult(Bridge.getDefaultValue(T));
                        return;
                    }
                    if (!Bridge.staticEquals(options.CustomParser, null)) {
                        tcs.setResult(Bridge.unbox(options.CustomParser(xhr.response)));
                        return;
                    }
                    var type = T;
                    if (Core.Extensions.ReflectionExt.IsInt32(type)) {
                        tcs.setResult(Core.Extensions.Utils.TryParseInt(xhr.responseText));
                    } else if (Core.Extensions.ReflectionExt.IsDecimal(type)) {
                        tcs.setResult(Core.Extensions.Utils.TryParseDecimal(xhr.responseText));
                    } else if (Bridge.referenceEquals(T, System.String)) {
                        tcs.setResult(xhr.responseText);
                    } else if (Bridge.referenceEquals(T, Blob)) {
                        var result = null;
                        var blob = new Blob([xhr.response], xhr.responseType);
                        tcs.setResult(result);
                    } else {
                        var parsed = Newtonsoft.Json.JsonConvert.DeserializeObject(xhr.responseText, T);
                        tcs.setResult(parsed);
                    }
                },
                ClearCacheHeader: function (clearCache) {
                    var headers = new (System.Collections.Generic.Dictionary$2(System.String,System.String)).ctor();
                    if (clearCache) {
                        headers.add("Pragma", "no-cache");
                        headers.add("Expires", "0");
                        headers.add("Last-Modified", System.DateTime.format(System.DateTime.getDefaultValue()));
                        headers.add("If-Modified-Since", System.DateTime.format(System.DateTime.getDefaultValue()));
                        headers.add("Cache-Control", "no-store, no-cache, must-revalidate, post-check=0, pre-check=0");
                    }

                    return headers;
                },
                LoadScript: function (src) {
                    var tcs = new System.Threading.Tasks.TaskCompletionSource();
                    var scriptExists = System.Linq.Enumerable.from(document.head.children, HTMLElement).where(function (x) {
                            return Bridge.is(x, HTMLScriptElement);
                        }).select(function (x) {{ return Bridge.cast(x, HTMLScriptElement); }}).any(function (x) {
                        return Bridge.referenceEquals(System.Linq.Enumerable.from(x.src.split("/"), System.String).lastOrDefault(null, null), System.Linq.Enumerable.from(src.split("/"), System.String).lastOrDefault(null, null));
                    });
                    if (scriptExists) {
                        tcs.setResult(true);
                        return tcs.task;
                    }
                    var script = document.createElement(System.Enum.toString(System.String, "script"));
                    script.src = src;
                    script.onload = Bridge.fn.combine(script.onload, function (e) {
                        tcs.setResult(true);
                    });
                    script.onerror = Bridge.fn.combine(script.onerror, function (message, url, lineNumber, columnNumber, error) {
                        tcs.setResult(true);
                        return false;
                    });
                    document.head.appendChild(script);
                    return tcs.task;
                },
                LoadLink: function (src) {
                    var tcs = new System.Threading.Tasks.TaskCompletionSource();
                    var scriptExists = System.Linq.Enumerable.from(document.head.children, HTMLElement).any(function (x) {
                            var styleElement;
                            return ((styleElement = Bridge.as(x, HTMLLinkElement))) != null && Bridge.referenceEquals(System.String.replaceAll(styleElement.href, document.location.origin, ""), src);
                        });
                    if (scriptExists) {
                        tcs.setResult(true);
                        return tcs.task;
                    }
                    var link = document.createElement(System.Enum.toString(System.String, "style"));
                    link.href = src;
                    link.onload = Bridge.fn.combine(link.onload, function (e) {
                        tcs.setResult(true);
                    });
                    link.onerror = Bridge.fn.combine(link.onerror, function (message, url, lineNumber, columnNumber, error) {
                        tcs.setResult(true);
                        return false;
                    });
                    document.head.appendChild(link);
                    return tcs.task;
                },
                RefreshToken: function (success) {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        oldToken, 
                        newToken, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1,2,3], $step);
                                    switch ($step) {
                                        case 0: {
                                            if (success === void 0) { success = null; }
                                            oldToken = Core.Clients.Client.Token;
                                            if (oldToken == null || System.DateTime.lte(oldToken.RefreshTokenExp, Core.Clients.Client.EpsilonNow)) {
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            if (System.DateTime.gt(oldToken.AccessTokenExp, Core.Clients.Client.EpsilonNow)) {
                                                $tcs.setResult(oldToken);
                                                return;
                                            }
                                            if (System.DateTime.lte(oldToken.AccessTokenExp, Core.Clients.Client.EpsilonNow) && System.DateTime.gt(oldToken.RefreshTokenExp, Core.Clients.Client.EpsilonNow)) {
                                                $step = 1;
                                                continue;
                                            } 
                                            $step = 3;
                                            continue;
                                        }
                                        case 1: {
                                            $task1 = Core.Clients.Client.GetToken(oldToken);
                                            $step = 2;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 2: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            newToken = $taskResult1;
                                            if (newToken != null) {
                                                Core.Clients.Client.Token = newToken;
                                                if (!Bridge.staticEquals(success, null)) {
                                                    success(newToken);
                                                }
                                            }
                                            $step = 3;
                                            continue;
                                        }
                                        case 3: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                },
                GetToken: function (oldToken) {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        client, 
                        newToken, 
                        $t, 
                        $t1, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            client = new Core.Clients.Client.$ctor1("User", Bridge.Reflection.getTypeNamespace(Core.Models.User));
                                            $task1 = client.SubmitAsync(Core.ViewModels.Token, ($t = new Core.Clients.XHRWrapper(), $t.NoQueue = true, $t.Url = System.String.format("Refresh?t={0}", [Core.Clients.Client.Token.TenantCode]), $t.Method = Core.Enums.HttpMethod.POST, $t.Value = ($t1 = new Core.ViewModels.RefreshVM(), $t1.AccessToken = oldToken.AccessToken, $t1.RefreshToken = oldToken.RefreshToken, $t1), $t.AllowAnonymous = true, $t.ErrorHandler = function (xhr) {
                                                if (xhr.status === Core.Enums.HttpStatusCode.BadRequest) {
                                                    Core.Clients.Client.Token = null;
                                                    Core.Extensions.Toast.Warning("Phi\u00ean truy c\u1eadp \u0111\u00e3 h\u1ebft h\u1ea1n! Vui l\u00f2ng ch\u1edd trong gi\u00e2y l\u00e1t, h\u1ec7 th\u1ed1ng \u0111ang t\u1ea3i l\u1ea1i trang");
                                                    window.location.reload();
                                                }
                                            }, $t));
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            newToken = $taskResult1;
                                            $tcs.setResult(newToken);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }
            }
        },
        fields: {
            _nameSpace: null
        },
        props: {
            NameSpace: {
                get: function () {
                    return Core.Extensions.StringExt.IsNullOrEmpty(this._nameSpace) ? Core.Clients.Client.ModelNamespace : this._nameSpace;
                }
            },
            CustomPrefix: null,
            EntityName: null,
            FileName: null,
            FileType: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();

            },
            $ctor1: function (entityName, ns) {
                if (ns === void 0) { ns = ""; }

                this.$initialize();
                this._nameSpace = ns;
                if (Core.Extensions.StringExt.HasAnyChar(this._nameSpace) && System.Linq.Enumerable.from(this._nameSpace, System.Char).last() !== 46) {
                    this._nameSpace = (this._nameSpace || "") + String.fromCharCode(46);
                }
                this.EntityName = entityName;
            }
        },
        methods: {
            SubmitAsync: function (T, options) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4], $step);
                                switch ($step) {
                                    case 0: {
                                        if (!options.AllowAnonymous) {
                                            $step = 1;
                                            continue;
                                        } 
                                        $step = 3;
                                        continue;
                                    }
                                    case 1: {
                                        $task1 = Core.Clients.Client.RefreshToken();
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $step = 3;
                                        continue;
                                    }
                                    case 3: {
                                        $task2 = this.SubmitAsyncWithToken(T, options);
                                        $step = 4;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        $tcs.setResult($taskResult2);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            SubmitAsyncWithToken: function (T, options) {
                var $t, $t1, $t2, $t3;
                var isNotFormData = options.FormData == null;
                var tcs = new System.Threading.Tasks.TaskCompletionSource();
                var xhr = new XMLHttpRequest();
                if (options.Headers == null && options.FormData == null) {
                    options.Headers = function (_o1) {
                            _o1.add("content-type", "application/json");
                            return _o1;
                        }(new (System.Collections.Generic.Dictionary$2(System.String,System.String)).ctor());
                }
                if (Core.Extensions.StringExt.HasAnyChar(options.Url) && options.Url.charCodeAt(0) === 47) {
                    options.Url = options.Url.substr(1);
                }

                if (options.FinalUrl == null) {
                    var url = options.Url;
                    var tenant = Core.Extensions.Utils.GetUrlParam(Core.Extensions.Utils.TenantField);
                    if (Core.Extensions.StringExt.IsNullOrEmpty(tenant)) {
                        tenant = Core.Clients.Client.Tenant;
                    }
                    if (Core.Extensions.StringExt.IsNullOrEmpty(Core.Extensions.Utils.GetUrlParam(Core.Extensions.Utils.TenantField, options.Url)) && Core.Clients.Client.Token == null && options.AddTenant) {
                        var tenantQuery = ($t = "t=" + (Core.Clients.Client.Tenant || ""), $t != null ? $t : "wr1");
                        url = (url || "") + ((System.String.contains(url,Core.Extensions.Utils.QuestionMark) ? "&" : Core.Extensions.Utils.QuestionMark) || "");
                    }
                    options.FinalUrl = encodeURI(System.IO.Path.Combine([($t1 = this.CustomPrefix, $t1 != null ? $t1 : Core.Clients.Client.Prefix), this.EntityName, url]));
                }
                xhr.open(System.Enum.toString(Core.Enums.HttpMethod, options.Method), options.FinalUrl, true);
                Core.Extensions.IEnumerableExtensions.ForEach(System.Collections.Generic.KeyValuePair$2(System.String,System.String), options.Headers, function (x) {
                    xhr.setRequestHeader(x.key, x.value);
                });
                if (!options.AllowAnonymous) {
                    xhr.setRequestHeader(Core.Extensions.Utils.Authorization, "Bearer " + ((($t2 = Core.Clients.Client.Token) != null ? $t2.AccessToken : null) || ""));
                }

                xhr.onreadystatechange = Bridge.fn.combine(xhr.onreadystatechange, function () {
                    if (xhr.readyState !== 4) {
                        return;
                    }

                    if (xhr.status >= Core.Enums.HttpStatusCode.OK && xhr.status < Core.Enums.HttpStatusCode.MultipleChoices) {
                        Core.Clients.Client.ProcessSuccessRequest(T, options, tcs, xhr);
                    } else {
                        Core.Clients.Client.ErrorHandler(T, options, tcs, xhr);
                    }
                });
                if (!Bridge.staticEquals(options.ProgressHandler, null)) {
                    xhr.addEventListener("progress", options.ProgressHandler);
                }
                if (isNotFormData) {
                    if (!options.AllowNestedObject) {
                        options != null && ($t3 = options.Value) != null ? Core.Extensions.ReflectionExt.ClearReferences($t3) : null;
                    }
                    xhr.send(options.JsonData);
                } else {
                    xhr.send(options.FormData);
                }
                return tcs.task;
            },
            GetList: function (T, filter, clearCache) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    headers, 
                    xhr, 
                    $t, 
                    type, 
                    refType, 
                    request, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4], $step);
                                switch ($step) {
                                    case 0: {
                                        if (filter === void 0) { filter = null; }
                                        if (clearCache === void 0) { clearCache = false; }
                                        if (!Bridge.referenceEquals(T, System.Object)) {
                                            $step = 1;
                                            continue;
                                        } 
                                        $step = 3;
                                        continue;
                                    }
                                    case 1: {
                                        headers = Core.Clients.Client.ClearCacheHeader(clearCache);
                                        xhr = ($t = new Core.Clients.XHRWrapper(), $t.Value = null, $t.Url = filter, $t.Headers = headers, $t.Method = Core.Enums.HttpMethod.GET, $t);
                                        type = T;
                                        this.EntityName = type != null ? Bridge.Reflection.getTypeName(type) : null;
                                        $task1 = this.SubmitAsync(Core.Models.OdataResult$1(T), xhr);
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult($taskResult1);
                                        return;
                                    }
                                    case 3: {
                                        refType = Bridge.Reflection.getType((this.NameSpace || "") + (this.EntityName || ""));
                                        request = System.Linq.Enumerable.from(Bridge.Reflection.getMembers(Bridge.getType(this), 8, 28), System.Reflection.MethodInfo).firstOrDefault(function (x) {
                                            return Bridge.referenceEquals(x.n, "GetList") && Bridge.Reflection.isGenericMethodDefinition(x);
                                        }, null);
                                        if (request == null) {
                                            $tcs.setResult(new (Core.Models.OdataResult$1(T))());
                                            return;
                                        }

                                        $task2 = Bridge.unbox(Bridge.Reflection.midel(Bridge.Reflection.makeGenericMethod(request, [refType]), this)(filter, clearCache));
                                        $step = 4;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        $tcs.setResult($taskResult2);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            GetRawList: function (T, filter, clearCache, addTenant) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    headers, 
                    res, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (filter === void 0) { filter = null; }
                                        if (clearCache === void 0) { clearCache = false; }
                                        if (addTenant === void 0) { addTenant = false; }
                                        this.EntityName = Bridge.Reflection.getTypeName(T);
                                        headers = Core.Clients.Client.ClearCacheHeader(clearCache);
                                        $task1 = this.SubmitAsync(Core.Models.OdataResult$1(T), ($t = new Core.Clients.XHRWrapper(), $t.Value = null, $t.AddTenant = addTenant, $t.Url = filter, $t.Headers = headers, $t.Method = Core.Enums.HttpMethod.GET, $t));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        res = $taskResult1;
                                        $tcs.setResult(res != null ? res.Value : null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            FirstOrDefaultAsync: function (T, filter, clearCache, addTenant) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    headers, 
                    res, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (filter === void 0) { filter = null; }
                                        if (clearCache === void 0) { clearCache = false; }
                                        if (addTenant === void 0) { addTenant = false; }
                                        filter = Core.Extensions.OdataExt.ApplyClause(filter, Bridge.toString((1)), Core.Extensions.OdataExt.TopKeyword);
                                        this.EntityName = Bridge.Reflection.getTypeName(T);
                                        headers = Core.Clients.Client.ClearCacheHeader(clearCache);
                                        $task1 = this.SubmitAsync(Core.Models.OdataResult$1(T), ($t = new Core.Clients.XHRWrapper(), $t.Value = null, $t.AddTenant = addTenant, $t.Url = filter, $t.Headers = headers, $t.Method = Core.Enums.HttpMethod.GET, $t));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        res = $taskResult1;
                                        $tcs.setResult(res != null && ($t = res.Value) != null ? System.Linq.Enumerable.from($t, T).firstOrDefault(null, null) : null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            FirstOrDefaultAsync$1: function (type, filter, clearCache) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    headers, 
                    response, 
                    $t, 
                    res, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (filter === void 0) { filter = null; }
                                        if (clearCache === void 0) { clearCache = false; }
                                        filter = Core.Extensions.OdataExt.ApplyClause(filter, Bridge.toString((1)), Core.Extensions.OdataExt.TopKeyword);
                                        this.EntityName = Bridge.Reflection.getTypeName(type);
                                        headers = Core.Clients.Client.ClearCacheHeader(clearCache);
                                        $task1 = this.SubmitAsync(System.String, ($t = new Core.Clients.XHRWrapper(), $t.Value = null, $t.Url = filter, $t.Headers = headers, $t.Method = Core.Enums.HttpMethod.GET, $t));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        response = $taskResult1;
                                        res = Newtonsoft.Json.JsonConvert.DeserializeObject(response, type);
                                        $tcs.setResult(res);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            LoadById: function (listId, tenant, action) {
                var $t;
                if (tenant === void 0) { tenant = ""; }
                if (action === void 0) { action = "ById"; }
                return this.SubmitAsync(Core.Models.OdataResult$1(System.Object), ($t = new Core.Clients.XHRWrapper(), $t.Value = listId, $t.Method = Core.Enums.HttpMethod.POST, $t.Url = action, $t.Headers = function (_o1) {
                        _o1.add("content-type", "application/json");
                        return _o1;
                    }(new (System.Collections.Generic.Dictionary$2(System.String,System.String)).ctor()), $t));
            },
            GetRawListById: function (T, listId, tenant, action, clearCache) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    refType, 
                    httpGetList, 
                    filter, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (tenant === void 0) { tenant = ""; }
                                        if (action === void 0) { action = ""; }
                                        if (clearCache === void 0) { clearCache = false; }
                                        if (Core.Extensions.IEnumerableExtensions.Nothing(System.Int32, listId)) {
                                            $tcs.setResult(new (System.Collections.Generic.List$1(T)).ctor());
                                            return;
                                        }
                                        listId = System.Linq.Enumerable.from(listId, System.Int32).distinct().toList(System.Int32);
                                        refType = Bridge.Reflection.getType((this.NameSpace || "") + (this.EntityName || ""));
                                        httpGetList = System.Linq.Enumerable.from(Bridge.Reflection.getMembers(Bridge.getType(this), 8, 28), System.Reflection.MethodInfo).firstOrDefault(function (x) {
                                            return Bridge.referenceEquals(x.n, "GetRawList") && Bridge.Reflection.isGenericMethodDefinition(x);
                                        }, null);
                                        if (httpGetList == null) {
                                            $tcs.setResult(new (System.Collections.Generic.List$1(T)).ctor());
                                            return;
                                        }
                                        filter = System.String.format("{0}/?{1}$filter=Id in ({2})", action, (!Bridge.referenceEquals(tenant, "") ? System.String.format("t={0}&", [tenant]) : ""), Bridge.toArray(listId).join(","));
                                        $task1 = Bridge.unbox(Bridge.Reflection.midel(Bridge.Reflection.makeGenericMethod(httpGetList, [refType]), this)(filter, clearCache));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult($taskResult1);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            GetAsync: function (T, id) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    odata, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (id == null || System.Nullable.lte(id, 0)) {
                                            $tcs.setResult(Bridge.getDefaultValue(T));
                                            return;
                                        }
                                        this.EntityName = Bridge.Reflection.getTypeName(T);
                                        $task1 = this.SubmitAsync(Core.Models.OdataResult$1(T), ($t = new Core.Clients.XHRWrapper(), $t.Url = System.String.format("/Public/?ids={0}", [Bridge.box(id, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]), $t.Method = Core.Enums.HttpMethod.GET, $t));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        odata = $taskResult1;
                                        $tcs.setResult(System.Linq.Enumerable.from(odata.Value, T).firstOrDefault(null, function () {
                                            return Bridge.getDefaultValue(T);
                                        }));
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            GetAsync$2: function (id) {
                var refType = Bridge.Reflection.getType((this.NameSpace || "") + (this.EntityName || ""));
                var get = System.Linq.Enumerable.from(Bridge.Reflection.getMembers(Bridge.getType(this), 8, 28), System.Reflection.MethodInfo).firstOrDefault(function (x) {
                        return Bridge.referenceEquals(x.n, "GetAsync") && Bridge.Reflection.isGenericMethodDefinition(x);
                    }, null);
                if (get == null) {
                    return null;
                }

                return Bridge.unbox(Bridge.Reflection.midel(Bridge.Reflection.makeGenericMethod(get, [refType]), this)(id));
            },
            GetAsync$1: function (T, subUrl) {
                var $t;
                return this.SubmitAsync(T, ($t = new Core.Clients.XHRWrapper(), $t.Url = subUrl, $t.Method = Core.Enums.HttpMethod.GET, $t));
            },
            /**
             * This method is used when we don't have return type at compiled time
             *
             * @instance
             * @public
             * @this Core.Clients.Client
             * @memberof Core.Clients.Client
             * @param   {System.Object}                    value     
             * @param   {string}                           subUrl
             * @return  {System.Threading.Tasks.Task$1}
             */
            CreateAsync$1: function (value, subUrl) {
                if (subUrl === void 0) { subUrl = ""; }
                var refType = Bridge.Reflection.getType((this.NameSpace || "") + (this.EntityName || ""));
                var httpGetList = System.Linq.Enumerable.from(Bridge.Reflection.getMembers(Bridge.getType(this), 8, 28), System.Reflection.MethodInfo).firstOrDefault(function (x) {
                        return Bridge.referenceEquals(x.n, "PostAsync") && Bridge.Reflection.isGenericMethodDefinition(x);
                    }, null);
                if (httpGetList == null) {
                    return System.Threading.Tasks.Task.fromResult({ }, System.Object);
                }

                return Bridge.unbox(Bridge.Reflection.midel(Bridge.Reflection.makeGenericMethod(httpGetList, [refType]), this)(Bridge.unbox(value), subUrl));
            },
            CreateAsync: function (T, value, subUrl) {
                if (subUrl === void 0) { subUrl = ""; }
                return this.PostAsync(T, value, subUrl);
            },
            PostAsync: function (T, value, subUrl, annonymous, allowNested) {
                var $t;
                if (subUrl === void 0) { subUrl = ""; }
                if (annonymous === void 0) { annonymous = false; }
                if (allowNested === void 0) { allowNested = false; }
                return this.SubmitAsync(T, ($t = new Core.Clients.XHRWrapper(), $t.Value = value, $t.Url = subUrl, $t.Method = Core.Enums.HttpMethod.POST, $t.AllowAnonymous = annonymous, $t.AllowNestedObject = allowNested, $t));
            },
            PutAsync: function (T, value, subUrl, annonymous, allowNested) {
                var $t;
                if (subUrl === void 0) { subUrl = ""; }
                if (annonymous === void 0) { annonymous = false; }
                if (allowNested === void 0) { allowNested = false; }
                return this.SubmitAsync(T, ($t = new Core.Clients.XHRWrapper(), $t.Value = value, $t.Url = subUrl, $t.Method = Core.Enums.HttpMethod.PUT, $t.AllowAnonymous = annonymous, $t.AllowNestedObject = allowNested, $t));
            },
            /**
             * This method is used when we don't have return type at compiled time
             *
             * @instance
             * @public
             * @this Core.Clients.Client
             * @memberof Core.Clients.Client
             * @param   {System.Object}                    value     
             * @param   {string}                           subUrl
             * @return  {System.Threading.Tasks.Task$1}
             */
            UpdateAsync$1: function (value, subUrl) {
                if (subUrl === void 0) { subUrl = ""; }
                var refType = Bridge.Reflection.getType((this.NameSpace || "") + (this.EntityName || ""));
                var httpGetList = System.Linq.Enumerable.from(Bridge.Reflection.getMembers(Bridge.getType(this), 8, 28), System.Reflection.MethodInfo).firstOrDefault(function (x) {
                        return Bridge.referenceEquals(x.n, "UpdateAsync") && Bridge.Reflection.isGenericMethodDefinition(x);
                    }, null);
                if (httpGetList == null) {
                    return System.Threading.Tasks.Task.fromResult({ }, System.Object);
                }

                return Bridge.Reflection.midel(Bridge.Reflection.makeGenericMethod(httpGetList, [refType]), this)(Bridge.unbox(value), subUrl);
            },
            UpdateAsync: function (T, value, subUrl, annonymous, allowNested) {
                var $t;
                if (subUrl === void 0) { subUrl = ""; }
                if (annonymous === void 0) { annonymous = false; }
                if (allowNested === void 0) { allowNested = false; }
                return this.SubmitAsync(T, ($t = new Core.Clients.XHRWrapper(), $t.Value = value, $t.Url = subUrl, $t.Method = Core.Enums.HttpMethod.PUT, $t.AllowAnonymous = annonymous, $t.AllowNestedObject = allowNested, $t));
            },
            PatchAsync: function (T, value, subUrl, annonymous, allowNested) {
                var $t;
                if (subUrl === void 0) { subUrl = ""; }
                if (annonymous === void 0) { annonymous = false; }
                if (allowNested === void 0) { allowNested = false; }
                return this.SubmitAsync(T, ($t = new Core.Clients.XHRWrapper(), $t.Value = value, $t.Url = (subUrl || "") + (System.String.format("?$filter=Id eq {0}", [value[Core.Extensions.Utils.IdField]]) || ""), $t.Headers = function (_o1) {
                        _o1.add("Content-type", "application/json");
                        return _o1;
                    }(new (System.Collections.Generic.Dictionary$2(System.String,System.String)).ctor()), $t.Method = Core.Enums.HttpMethod.PATCH, $t.AllowAnonymous = annonymous, $t.AllowNestedObject = allowNested, $t));
            },
            PatchAsync$1: function (T, value, reasonOfChange, multipleThread) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    tasks, 
                    res, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (reasonOfChange === void 0) { reasonOfChange = ""; }
                                        if (multipleThread === void 0) { multipleThread = true; }
                                        tasks = System.Linq.Enumerable.from(value, Core.ViewModels.PatchUpdate).select(Bridge.fn.bind(this, function (x) {
                                            return this.PatchAsync(T, x);
                                        }));
                                        $task1 = System.Threading.Tasks.Task.whenAll(tasks);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        res = $taskResult1;
                                        $tcs.setResult(($t = T, System.Linq.Enumerable.from(res, $t).toList($t)));
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            PostFilesAsync: function (T, file, url, progressHandler) {
                var $t;
                if (url === void 0) { url = ""; }
                if (progressHandler === void 0) { progressHandler = null; }
                var formData = new FormData();
                formData.append("file", file);
                return this.SubmitAsync(T, ($t = new Core.Clients.XHRWrapper(), $t.FormData = formData, $t.File = file, $t.ProgressHandler = progressHandler, $t.Method = Core.Enums.HttpMethod.POST, $t.Url = url, $t));
            },
            SendMail: function (email) {
                var $t;
                return this.SubmitAsync(System.Boolean, ($t = new Core.Clients.XHRWrapper(), $t.Value = email, $t.Method = Core.Enums.HttpMethod.POST, $t.Url = "Email", $t));
            },
            CloneFeatureAsync: function (id) {
                var $t;
                return this.SubmitAsync(System.Boolean, ($t = new Core.Clients.XHRWrapper(), $t.Url = "Clone", $t.Value = Bridge.box(id, System.Int32), $t.Method = Core.Enums.HttpMethod.POST, $t));
            },
            DeactivateAsync: function (ids) {
                var $t;
                return this.SubmitAsync(System.Boolean, ($t = new Core.Clients.XHRWrapper(), $t.Url = "Delete", $t.Value = Core.Extensions.IEnumerableExtensions.Combine(System.Int32, ids), $t.AllowNestedObject = true, $t.Method = Core.Enums.HttpMethod.POST, $t));
            },
            BulkUpdateAsync: function (T, value, reasonOfChange, multipleThread) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $t, 
                    tasks, 
                    res, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4], $step);
                                switch ($step) {
                                    case 0: {
                                        if (reasonOfChange === void 0) { reasonOfChange = ""; }
                                        if (multipleThread === void 0) { multipleThread = true; }
                                        if (!multipleThread) {
                                            $step = 1;
                                            continue;
                                        } 
                                        $step = 3;
                                        continue;
                                    }
                                    case 1: {
                                        $task1 = this.SubmitAsync(System.Collections.Generic.List$1(T), ($t = new Core.Clients.XHRWrapper(), $t.Url = System.String.format("BulkUpdate/?reasonOfChange={0}", [reasonOfChange]), $t.Value = value, $t.Method = Core.Enums.HttpMethod.PUT, $t));
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult($taskResult1);
                                        return;
                                    }
                                    case 3: {
                                        tasks = System.Linq.Enumerable.from(value, T).select(Bridge.fn.bind(this, function (x) {
                                            if (Bridge.unbox(x[Core.Extensions.Utils.IdField]) > 0) {
                                                return this.UpdateAsync(T, x, System.String.format("?reasonOfChange={0}", [reasonOfChange]));
                                            } else {
                                                return this.CreateAsync(T, x, System.String.format("?reasonOfChange=Th\u00eam m\u1edbi d\u1eef li\u1ec7u", null));
                                            }
                                        }));
                                        $task2 = System.Threading.Tasks.Task.whenAll(tasks);
                                        $step = 4;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        res = $taskResult2;
                                        $tcs.setResult(($t = T, System.Linq.Enumerable.from(res, $t).toList($t)));
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            HardDeleteAsync$1: function (id) {
                return this.HardDeleteAsync(function (_o1) {
                        _o1.add(id);
                        return _o1;
                    }(new (System.Collections.Generic.List$1(System.Int32)).ctor()));
            },
            HardDeleteAsync: function (ids) {
                var $t;
                return this.SubmitAsync(System.Boolean, ($t = new Core.Clients.XHRWrapper(), $t.Url = "HardDelete", $t.Value = Core.Extensions.IEnumerableExtensions.Combine(System.Int32, ids), $t.AllowNestedObject = true, $t.Method = Core.Enums.HttpMethod.POST, $t));
            }
        }
    });

    Bridge.define("Core.Clients.EntityAction", {
        props: {
            EntityId: 0,
            Action: null
        }
    });

    Bridge.define("Core.Clients.HttpException", {
        inherits: [System.Exception],
        props: {
            XHR: null,
            StatusCode: {
                get: function () {
                    return this.XHR.status;
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                System.Exception.ctor.call(this);
            },
            $ctor1: function (message) {
                this.$initialize();
                System.Exception.ctor.call(this, message);
            },
            $ctor2: function (message, innerException) {
                this.$initialize();
                System.Exception.ctor.call(this, message, innerException);
            }
        }
    });

    Bridge.define("Core.Clients.TmpException", {
        props: {
            StatusCode: 0,
            Message: null,
            StackTrace: null,
            InnerException: null
        }
    });

    Bridge.define("Core.Clients.WebSocketClient", {
        fields: {
            _socket: null,
            EntityAction: null
        },
        ctors: {
            ctor: function (url) {
                this.$initialize();
                this.EntityAction = new (System.Collections.Generic.List$1(Core.Clients.EntityAction)).ctor();
                var wsUri = (System.String.format("wss://{0}/{1}?access_token=", Core.Clients.Client.Host, url) || "") + (Core.Clients.Client.Token.AccessToken || "");
                this._socket = new WebSocket(wsUri);
                this._socket.onopen = Bridge.fn.combine(this._socket.onopen, function (e) {
                    System.Console.WriteLine(System.String.format("Socket opened", e));
                });

                this._socket.onclose = Bridge.fn.combine(this._socket.onclose, function (e) {
                    System.Console.WriteLine(System.String.format("Socket closed", e));
                });

                this._socket.onerror = Bridge.fn.combine(this._socket.onerror, function (e) {
                    System.Console.WriteLine(e);
                });

                this._socket.onmessage = Bridge.fn.combine(this._socket.onmessage, Bridge.fn.bind(this, function (e) {
                    var responseStr = Bridge.toString(e.data);
                    var start = System.String.indexOf(responseStr, ":");
                    var end = System.String.indexOf(responseStr, ",");
                    var entityIdStr = responseStr.substr(((start + 1) | 0), ((((end - start) | 0) - 1) | 0));
                    var entityId = { };
                    var parsed = System.Int32.tryParse(entityIdStr, entityId);
                    if (!parsed) {
                        return;
                    }

                    var entityEnum = entityId.v;
                    var entityTypeName = (Core.Clients.Client.ModelNamespace || "") + (Core.Extensions.ReflectionExt.GetEnumDescription(Bridge.box(entityEnum, Core.Enums.EntityEnum, System.Enum.toStringFn(Core.Enums.EntityEnum)), Core.Enums.EntityEnum) || "");
                    var entityType = Bridge.Reflection.getType(entityTypeName);
                    if (entityType == null) {
                        return;
                    }
                    var responseType = Core.Models.WebSocketResponse$1.apply(null, System.Array.init([entityType], System.Type));
                    var result = Bridge.unbox(Newtonsoft.Json.JsonConvert.DeserializeObject(responseStr, responseType));
                    var entity = result.Data;
                    System.Linq.Enumerable.from(this.EntityAction, Core.Clients.EntityAction).where(function (x) {
                            return x.EntityId === entityId.v;
                        }).forEach(function (x) {
                        x.Action(entity);
                    });
                }));
                this._socket.binaryType = "arraybuffer";
            }
        },
        methods: {
            Send: function (message) {
                this._socket.send(message);
            },
            AddListener: function (entityEnum, entityAction) {
                var $t;
                this.EntityAction.add(($t = new Core.Clients.EntityAction(), $t.EntityId = entityEnum, $t.Action = entityAction, $t));
            },
            RemoveListener: function (action) {
                this.EntityAction.RemoveAll(function (x) {
                    return Bridge.staticEquals(x.Action, action);
                });
            },
            Close: function () {
                this._socket.close();
            }
        }
    });

    Bridge.define("Core.Clients.XHRBinary", {
        props: {
            AllowAnonymous: false,
            AllowNestedObject: false,
            Method: 0,
            Url: null,
            FinalUrl: null,
            ResponseMimeType: null,
            JsonData: null,
            File: null,
            Headers: null
        },
        ctors: {
            init: function () {
                this.Method = Core.Enums.HttpMethod.GET;
            }
        }
    });

    Bridge.define("Core.Clients.XHRWrapper", {
        props: {
            NoQueue: false,
            Retry: false,
            AllowAnonymous: false,
            AddTenant: false,
            AllowNestedObject: false,
            Method: 0,
            Url: null,
            NameSpace: null,
            FinalUrl: null,
            ResponseMimeType: null,
            Value: null,
            JsonData: {
                get: function () {
                    return Newtonsoft.Json.JsonConvert.SerializeObject(this.Value);
                }
            },
            FormData: null,
            File: null,
            ProgressHandler: null,
            Headers: null,
            CustomParser: null,
            ErrorHandler: null
        },
        ctors: {
            init: function () {
                this.Method = Core.Enums.HttpMethod.GET;
            }
        }
    });

    Bridge.define("Core.Components.BaseComponent", {
        statics: {
            fields: {
                IdField: null,
                SmallScreen: 0,
                ExSmallScreen: 0,
                MediumScreen: 0,
                LargeScreen: 0,
                ExLargeScreen: 0
            },
            props: {
                IsSmallUp: {
                    get: function () {
                        return document.documentElement.clientWidth > Core.Components.BaseComponent.SmallScreen;
                    }
                },
                IsMediumUp: {
                    get: function () {
                        return document.documentElement.clientWidth > Core.Components.BaseComponent.MediumScreen;
                    }
                },
                IsLargeUp: {
                    get: function () {
                        return document.documentElement.clientWidth > Core.Components.BaseComponent.LargeScreen;
                    }
                }
            },
            ctors: {
                init: function () {
                    this.IdField = "Id";
                    this.SmallScreen = 768;
                    this.ExSmallScreen = 567;
                    this.MediumScreen = 992;
                    this.LargeScreen = 1200;
                    this.ExLargeScreen = 1452;
                }
            }
        },
        fields: {
            _show: false,
            OnToggle: null,
            editForm: null,
            rootTab: null,
            emptyRow: null,
            _updateViewAwaiter: 0
        },
        events: {
            Disposed: null
        },
        props: {
            Id: null,
            ComponentType: null,
            Name: null,
            Parent: null,
            GuiInfo: null,
            Children: null,
            FirstChild: {
                get: function () {
                    return System.Linq.Enumerable.from(this.Children, Core.Components.BaseComponent).firstOrDefault(null, null);
                }
            },
            /**
             * The root element of tab or popup
             *
             * @instance
             * @public
             * @memberof Core.Components.BaseComponent
             * @function ParentElement
             * @type HTMLElement
             */
            ParentElement: null,
            Element: null,
            DOMContentLoaded: null,
            EntityType: null,
            Entity: null,
            IsSingleton: false,
            EmptyRow: {
                get: function () {
                    var $t, $t1;
                    if (this.emptyRow == null) {
                        this.emptyRow = ($t = (($t1 = Core.Components.Extensions.ComponentExt.FindClosest(Core.Components.ListViewItem, this)) != null ? $t1.EmptyRow : null), $t != null ? $t : false);
                    }
                    return System.Nullable.getValue(this.emptyRow);
                },
                set: function (value) {
                    this.emptyRow = value;
                }
            },
            Show: {
                get: function () {
                    return this._show;
                },
                set: function (value) {
                    this.Toggle(value);
                }
            },
            /**
             * The root tab of all component
             *
             * @instance
             * @public
             * @memberof Core.Components.BaseComponent
             * @function TabEditor
             * @type Core.Components.Forms.TabEditor
             */
            TabEditor: {
                get: function () {
                    return this.rootTab || Core.Components.Extensions.ComponentExt.FindClosest$1(Core.Components.Forms.TabEditor, this, function (x) {
                        return !x.Popup;
                    });
                },
                set: function (value) {
                    this.rootTab = value;
                }
            },
            /**
             * Current form
             *
             * @instance
             * @public
             * @memberof Core.Components.BaseComponent
             * @function EditForm
             * @type Core.Components.Forms.EditForm
             */
            EditForm: {
                get: function () {
                    return this.editForm || Core.Components.Extensions.ComponentExt.FindClosest(Core.Components.Forms.EditForm, this);
                },
                set: function (value) {
                    this.editForm = value;
                }
            },
            UserInput: null,
            AlwaysLogHistory: false,
            OldValue: null
        },
        ctors: {
            init: function () {
                this.Children = new (System.Collections.Generic.List$1(Core.Components.BaseComponent)).ctor();
            }
        },
        methods: {
            Toggle: function (value) {
                if (this.Element == null) {
                    return;
                }

                this._show = value;
                if (!this._show) {
                    this.Element.style.display = "none";
                } else {
                    this.Element.style.display = "";
                }

                !Bridge.staticEquals(this.OnToggle, null) ? this.OnToggle(this._show) : null;
            },
            AddChild: function (child, index, showExp) {
                var $t, $t1;
                if (index === void 0) { index = null; }
                if (showExp === void 0) { showExp = null; }
                if (child.IsSingleton) {
                    child.Render();
                    return;
                }
                if (child.ParentElement == null) {
                    var tab;
                    if (((tab = Bridge.as(child, Core.Components.Forms.TabEditor))) != null) {
                        if (tab.Popup) {
                            child.ParentElement = this.Element || Core.Components.Forms.TabEditor.TabContainer;
                        } else {
                            tab.ParentElement = Core.Components.Forms.TabEditor.TabContainer;
                        }
                    } else {
                        child.ParentElement = Core.MVVM.Html.Context;
                    }
                }

                if (child.Entity == null) {
                    child.Entity = this.Entity;
                }

                if (this.Children == null) {
                    this.Children = new (System.Collections.Generic.List$1(Core.Components.BaseComponent)).ctor();
                }

                if (index == null || System.Nullable.gte(index, this.Children.Count) || System.Nullable.lt(index, 0)) {
                    this.Children.add(child);
                } else {
                    this.Children.insert(System.Nullable.getValue(index), child);
                }

                if (child.Parent == null) {
                    child.Parent = this;
                }

                Core.MVVM.Html.Take(child.ParentElement);
                child.Render();
                child.ToggleShow(($t = showExp, $t != null ? $t : (($t1 = child.GuiInfo) != null ? $t1.ShowExp : null)));
            },
            RemoveChild: function (child) {
                this.Children.remove(child);
            },
            Focus: function () {
                var $t;
                ($t = this.Element) != null ? $t.focus() : null;
            },
            UpdateViewAwait: function () {
                window.clearTimeout(this._updateViewAwaiter);
                this._updateViewAwaiter = window.setTimeout(Bridge.fn.bind(this, function () {
                    this.UpdateView();
                }), 100);
            },
            UpdateView$1: function (force, componentNames) {
                if (componentNames === void 0) { componentNames = []; }
                this.UpdateView(force, null, componentNames);
            },
            UpdateViewInternal: function (force, dirty) {
                var $t;
                if (force) {
                    this.EmptyRow = false;
                }
                this.ToggleShow(($t = this.GuiInfo) != null ? $t.ShowExp : null);
            },
            PrepareForceAndDirty: function (force, dirty) {
                if (force) {
                    this.EmptyRow = false;
                }
            },
            Dispose: function () {
                this.DisposeChildren();
                this.RemoveDOM();
                this.Children = null;
                this.DOMContentLoaded = null;
                this.OnToggle = null;
                if (this.Parent != null && Core.Extensions.IEnumerableExtensions.HasElement(Core.Components.BaseComponent, this.Parent.Children) && this.Parent.Children.contains(this)) {
                    this.Parent.Children.remove(this);
                }
                !Bridge.staticEquals(this.Disposed, null) ? this.Disposed() : null;
            },
            DisposeChildren: function () {
                while (Core.Extensions.IEnumerableExtensions.HasElement(Core.Components.BaseComponent, this.Children)) {
                    var child = System.Linq.Enumerable.from(this.Children, Core.Components.BaseComponent).elementAt(0);
                    child.Dispose();
                }
            },
            RemoveDOM: function () {
                if (this.Element != null) {
                    this.Element.remove();
                    this.Element = null;
                }
            },
            SetDefaultVal: function () {
                var $t;
                var id = ($t = this.Entity) != null ? Bridge.unbox($t[Core.Components.BaseComponent.IdField]) : null;
                if (this.Entity == null || (id != null && System.Nullable.gt(id, 0)) || Core.Extensions.StringExt.IsNullOrWhiteSpace(this.GuiInfo.DefaultVal)) {
                    return;
                }
                var old = this.Entity[this.GuiInfo.FieldName];
                var type = Bridge.Reflection.getMembers(Bridge.getType(this.Entity), 16, 284, this.GuiInfo.FieldName);
                if (type == null) {
                    this.TrySetDFValue();
                    return;
                }
                var defaultVal = Bridge.createInstance(type.rt);
                if (!Bridge.equals(defaultVal, old) && (!Bridge.referenceEquals(type.rt, System.String) || !(old == null))) {
                    return;
                }
                this.TrySetDFValue();
            },
            TrySetDFValue: function () {
                try {
                    var obj = eval(this.GuiInfo.DefaultVal);
                    this.Entity[this.GuiInfo.FieldName] = Bridge.is(obj, Function) ? (Bridge.as(obj, Function)).call(this) : obj;
                } catch ($e1) {
                    $e1 = System.Exception.create($e1);

                }
            },
            FilterChildren$1: function (predicate) {
                return this.FilterChildren(Core.Components.BaseComponent, predicate);
            },
            FilterChildren: function (T, predicate, ignorePredicate, visited) {
                return new (Bridge.GeneratorEnumerable$1(T))(Bridge.fn.bind(this, function (T, predicate, ignorePredicate, visited) {
                    var $step = 0,
                        $jumpFromFinally,
                        $returnValue,
                        $t,
                        child,
                        t,
                        $t1,
                        inner,
                        $async_e;

                    var $enumerator = new (Bridge.GeneratorEnumerator$1(T))(Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                switch ($step) {
                                    case 0: {
                                        if (predicate === void 0) { predicate = null; }
                                            if (ignorePredicate === void 0) { ignorePredicate = null; }
                                            if (visited === void 0) { visited = null; }
                                            if (Core.Extensions.IEnumerableExtensions.Nothing(Core.Components.BaseComponent, this.Children)) {
                                                $step = 1;
                                                continue;
                                            } 
                                            $step = 2;
                                            continue;
                                    }
                                    case 1: {
                                        return false;
                                    }
                                    case 2: {
                                        if (visited == null) {
                                                visited = new (System.Collections.Generic.HashSet$1(T)).ctor();
                                            }
                                            $t = Bridge.getEnumerator(this.Children);
                                            $step = 3;
                                            continue;
                                    }
                                    case 3: {
                                        if ($t.moveNext()) {
                                                child = $t.Current;
                                                $step = 4;
                                                continue;
                                            }
                                        $step = 12;
                                        continue;
                                    }
                                    case 4: {
                                        t = Bridge.as(child, T);
                                            if (t == null && Core.Extensions.IEnumerableExtensions.Nothing(Core.Components.BaseComponent, child.Children)) {
                                                $step = 3;
                                                continue;
                                            }
                                            if (Bridge.is(child, Core.Components.FloatingGridView) || !Bridge.staticEquals(ignorePredicate, null) && ignorePredicate(t)) {
                                                $step = 3;
                                                continue;
                                            }

                                            if (t != null && (Bridge.staticEquals(predicate, null) || predicate(t)) && !visited.contains(t)) {
                                                $step = 5;
                                                continue;
                                            } 
                                            $step = 7;
                                            continue;
                                    }
                                    case 5: {
                                        visited.add(t);
                                            $enumerator.current = t;
                                            $step = 6;
                                            return true;
                                    }
                                    case 6: {
                                        $step = 7;
                                        continue;
                                    }
                                    case 7: {
                                        $t1 = Bridge.getEnumerator(child.FilterChildren(T, predicate, ignorePredicate, visited), T);
                                            $step = 8;
                                            continue;
                                    }
                                    case 8: {
                                        if ($t1.moveNext()) {
                                                inner = $t1.Current;
                                                $step = 9;
                                                continue;
                                            }
                                        $step = 11;
                                        continue;
                                    }
                                    case 9: {
                                        $enumerator.current = inner;
                                            $step = 10;
                                            return true;
                                    }
                                    case 10: {
                                        $step = 8;
                                        continue;
                                    }
                                    case 11: {
                                        $step = 3;
                                        continue;
                                    }
                                    case 12: {

                                    }
                                    default: {
                                        return false;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            throw $async_e;
                        }
                    }));
                    return $enumerator;
                }, arguments));
            },
            ToggleShow: function (showExp) {
                var fn = { };
                if (Core.Extensions.StringExt.HasAnyChar(showExp) && Core.Extensions.Utils.IsFunction(showExp, fn)) {
                    var shown = Bridge.as(fn.v.call(null, this), System.Boolean, true);
                    if (System.Nullable.hasValue(shown)) {
                        this.Show = System.Nullable.getValue(shown);
                    }
                }
            }
        }
    });

    Bridge.define("Core.Components.Direction", {
        $kind: "enum",
        statics: {
            fields: {
                top: 0,
                right: 1,
                bottom: 2,
                left: 3
            }
        }
    });

    Bridge.define("Core.Components.Extensions.ComponentExt", {
        statics: {
            props: {
                FeatureMap: null
            },
            ctors: {
                init: function () {
                    this.FeatureMap = new (System.Collections.Generic.Dictionary$2(System.String,Core.Models.Feature)).ctor();
                }
            },
            methods: {
                /**
                 * This method is used to dispatch UI event to event handler, not from data change
                 *
                 * @static
                 * @public
                 * @this Core.Components.Extensions.ComponentExt
                 * @memberof Core.Components.Extensions.ComponentExt
                 * @param   {Core.Components.BaseComponent}    com           
                 * @param   {string}                           events        
                 * @param   {Bridge.Html5.EventType}           eventType     
                 * @param   {Array.<System.Object>}            parameters
                 * @return  {System.Threading.Tasks.Task}
                 */
                DispatchEventToHandlerAsync: function (com, events, eventType, parameters) {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        eventTypeName, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            if (parameters === void 0) { parameters = []; }
                                            if (Core.Extensions.StringExt.IsNullOrEmpty(events)) {
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            eventTypeName = System.Enum.toString(System.String, eventType);
                                            $task1 = Core.Components.Extensions.ComponentExt.InvokeEventAsync(com, events, eventTypeName, parameters);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                },
                InvokeEventAsync: function (com, events, eventTypeName, parameters) {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        eventObj, 
                        $e1, 
                        form, 
                        eventName, 
                        $t, 
                        func, 
                        isFn, 
                        method, 
                        task, 
                        ex, 
                        $async_e, 
                        $async_e1, 
                        $async_e2, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1,2,3,4,6,7], $step);
                                    switch ($step) {
                                        case 0: {
                                            if (parameters === void 0) { parameters = []; }
                                            try {
                                                eventObj = Newtonsoft.Json.JsonConvert.DeserializeObject(events, System.Object);
                                            } catch ($e1) {
                                                $e1 = System.Exception.create($e1);
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            form = com.EditForm;
                                            if (form == null) {
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            eventName = ($t = eventObj[eventTypeName]) != null ? Bridge.toString($t) : null;
                                            func = { };
                                            isFn = Core.Extensions.Utils.IsFunction(eventName, func);
                                            if (isFn) {
                                                func.v.call(form, form, com);
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            if (Core.Extensions.StringExt.IsNullOrEmpty(eventName)) {
                                                $tcs.setResult(null);
                                                return;
                                            }

                                            method = form[eventName];
                                            if (method == null) {
                                                form = Core.Components.Extensions.ComponentExt.FindComponentEvent(form, eventName);
                                                if (form == null) {
                                                    $tcs.setResult(null);
                                                    return;
                                                }
                                                method = form[eventName];
                                            }
                                            if (method == null) {
                                                $tcs.setResult(null);
                                                return;
                                            }

                                            task = null;
                                            $step = 1;
                                            continue;
                                        }
                                        case 1: {
                                            var task = method.apply(form, parameters);
                                            if (task == null || task.isCompleted == null) {
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            $step = 2;
                                            continue;
                                        }
                                        case 2: {
                                            $task1 = task;
                                            $step = 3;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 3: {
                                            $task1.getAwaitedResult();
                                            $step = 5;
                                            continue;
                                        }
                                        case 4: {
                                            System.Console.WriteLine(ex.Message);
                                            System.Console.WriteLine(ex.StackTrace);
                                            throw ex;
                                            $async_e = null;
                                            $step = 5;
                                            continue;
                                        }

                                        case 6: {
                                            if (Bridge.hasValue(task)) task.System$IDisposable$Dispose();

                                            if ($jumpFromFinally > -1) {
                                                $step = $jumpFromFinally;
                                                $jumpFromFinally = null;
                                            } else if ($async_e) {
                                                $tcs.setException($async_e);
                                                return;
                                            } else if (Bridge.isDefined($returnValue)) {
                                                $tcs.setResult($returnValue);
                                                return;
                                            }
                                            $step = 7;
                                            continue;
                                        }
                                        case 7: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                if ( $step >= 2 && $step <= 3 ) {
                                    ex = $async_e;
                                    $step = 4;
                                    $asyncBody();
                                    return;
                                }
                                if ($step >= 1 && $step <= 5) {
                                    $step = 6;
                                    $asyncBody();
                                    return;
                                }
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                },
                InvokeMethodAsync: function (bl, methodName, parameters) {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        method, 
                        task, 
                        $async_e, 
                        $async_e1, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1,2,3,4], $step);
                                    switch ($step) {
                                        case 0: {
                                            if (parameters === void 0) { parameters = []; }
                                            method = bl[methodName];
                                            if (method == null) {
                                                $tcs.setResult(null);
                                                return;
                                            }

                                            task = null;
                                            $step = 1;
                                            continue;
                                        }
                                        case 1: {
                                            var task = method.apply(bl, parameters);
                                            if (task == null || task.isCompleted == null) {
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            $task1 = task;
                                            $step = 2;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 2: {
                                            $task1.getAwaitedResult();
                                            $step = 3;
                                            continue;
                                        }
                                        case 3: {
                                            if (Bridge.hasValue(task)) task.System$IDisposable$Dispose();

                                            if ($jumpFromFinally > -1) {
                                                $step = $jumpFromFinally;
                                                $jumpFromFinally = null;
                                            } else if ($async_e) {
                                                $tcs.setException($async_e);
                                                return;
                                            } else if (Bridge.isDefined($returnValue)) {
                                                $tcs.setResult($returnValue);
                                                return;
                                            }
                                            $step = 4;
                                            continue;
                                        }
                                        case 4: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                if ($step >= 1 && $step <= 2) {
                                    $step = 3;
                                    $asyncBody();
                                    return;
                                }
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                },
                DispatchCustomEventAsync: function (com, events, eventType, parameters) {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        eventTypeName, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            if (parameters === void 0) { parameters = []; }
                                            if (Core.Extensions.StringExt.IsNullOrEmpty(events)) {
                                                $tcs.setResult(null);
                                                return;
                                            }

                                            eventTypeName = System.Enum.toString(Core.Enums.CustomEventType, eventType);
                                            $task1 = Core.Components.Extensions.ComponentExt.InvokeEventAsync(com, events, eventTypeName, parameters);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                },
                MapToFilterOperator: function (gp, searchTerm) {
                    if (Core.Extensions.StringExt.IsNullOrWhiteSpace(searchTerm) || !gp.HasFilter || Core.Extensions.StringExt.IsNullOrEmpty(gp.FieldName)) {
                        return "";
                    }

                    searchTerm = searchTerm.trim();
                    var fieldName = System.String.replaceAll(gp.FieldName, ".", "/");
                    if (Bridge.referenceEquals(gp.FieldName, "Id") || Bridge.referenceEquals(gp.FieldName.substr(((gp.FieldName.length - 2) | 0)), "Id") && Core.Extensions.StringExt.IsNullOrEmpty(gp.FilterTemplate)) {
                        return "";
                    }

                    if (Bridge.referenceEquals(gp.ComponentType, "Datepicker")) {
                        var date = { };
                        var parsedDate = System.DateTime.tryParseExact(searchTerm, "dd/MM/yyyy", System.Globalization.CultureInfo.invariantCulture, date);
                        if (parsedDate) {
                            return System.String.format("{0} eq cast({1},Edm.DateTimeOffset)", fieldName, Core.Extensions.DateTimeExt.ToISOFormat(date.v));
                        }

                        return "";
                    } else if (Bridge.referenceEquals(gp.ComponentType, "Checkbox")) {
                        var val = { };
                        var parseBool = System.Boolean.tryParse(searchTerm, val);
                        if (!parseBool) {
                            return "";
                        }

                        return System.String.format("{0} eq {1}", fieldName, Bridge.box(val.v, System.Boolean, System.Boolean.toString));
                    } else if (Bridge.referenceEquals(gp.ComponentType, "Number")) {
                        var searchNumber = { };
                        var parsedNumber = System.Int32.tryParse(searchTerm, searchNumber);
                        if (!parsedNumber) {
                            return "";
                        }

                        return Core.Extensions.StringExt.HasAnyChar(gp.FilterTemplate) ? System.String.format(gp.FilterTemplate, [Bridge.box(searchNumber.v, System.Int32)]) : System.String.format("{0} eq {1}", fieldName, Bridge.box(searchNumber.v, System.Int32));
                    }
                    return Core.Extensions.StringExt.HasAnyChar(gp.FilterTemplate) ? System.String.format(gp.FilterTemplate, [searchTerm]) : System.String.format("contains({0}, '{1}')", fieldName, searchTerm);
                },
                FilterById: function (searchTerm, headers) {
                    var $t;
                    if (Core.Extensions.StringExt.IsNullOrWhiteSpace(searchTerm)) {
                        return "";
                    }

                    var searchQuery = "";
                    var searchTermPattern = searchTerm.replace(new RegExp("\\d+"), "");
                    if (Core.Extensions.StringExt.IsNullOrWhiteSpace(searchTermPattern)) {
                        return "";
                    }

                    var idHeader = System.Linq.Enumerable.from(headers, Core.Models.GridPolicy).firstOrDefault(function (header) {
                            var format = Core.Extensions.StringExt.IsNullOrEmpty(header.FormatCell) ? header.FormatRow : header.FormatCell;
                            if (Core.Extensions.StringExt.IsNullOrEmpty(format)) {
                                return false;
                            }

                            var fieldPattern = format.replace(new RegExp("\\{[\\s\\S]*?\\}"), "");
                            return Bridge.referenceEquals(fieldPattern.toLowerCase(), searchTermPattern.toLowerCase());
                        }, null);
                    if (idHeader != null) {
                        var strId = System.Text.RegularExpressions.Regex.match(searchTerm, "\\d+").getValue();
                        if (Core.Extensions.StringExt.HasAnyChar(strId)) {
                            searchQuery = System.String.format("{0} eq {1}", System.String.replaceAll(idHeader.FieldName, ".", "/"), Bridge.box(($t = Core.Extensions.Utils.TryParseInt(strId), $t != null ? $t : 0), System.Int32));
                        }
                    }
                    return searchQuery;
                },
                OpenTab: function (com, id, factory) {
                    var tab;
                    if (((tab = Bridge.as(Core.Components.Forms.TabEditor.FindTab(id), Core.Components.Forms.TabEditor))) != null) {
                        tab.Focus();
                        return tab;
                    }
                    tab = factory();
                    Core.Components.Extensions.ComponentExt.OpenTabOrPopup(com, tab);
                    return tab;
                },
                OpenTab$1: function (com, id, featureName, factory, popup, anonymous) {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        exists, 
                        feature, 
                        tab, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            if (popup === void 0) { popup = false; }
                                            if (anonymous === void 0) { anonymous = false; }
                                            if (!popup && ((exists = Bridge.as(Core.Components.Forms.TabEditor.FindTab(id), Core.Components.Forms.TabEditor))) != null) {
                                                exists.Focus();
                                                $tcs.setResult(exists);
                                                return;
                                            }
                                            $task1 = Core.Components.Extensions.ComponentExt.LoadFeatureByName(featureName, anonymous);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            feature = $taskResult1;
                                            tab = factory();
                                            tab.Popup = popup;
                                            tab.Name = featureName;
                                            tab.Id = id;
                                            tab.Feature = feature;
                                            Core.Components.Extensions.ComponentExt.OpenTabOrPopup(com, tab);
                                            $tcs.setResult(tab);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                },
                OpenTabOrPopup: function (com, tab) {
                    var $t;
                    var editForm;
                    var parentTab = ((editForm = Bridge.as(com, Core.Components.Forms.EditForm))) != null ? editForm : com.EditForm || Core.Components.Extensions.ComponentExt.FindClosest(Core.Components.Forms.EditForm, com);
                    if (tab.Popup) {
                        com.AddChild(tab);
                    } else {
                        tab.Render();
                    }
                    tab.ParentForm = parentTab;
                    tab.OpenFrom = parentTab != null && ($t = parentTab.FilterChildren(Core.Components.ListViewItem, function (x) {
                            return Bridge.referenceEquals(x.Entity, tab.Entity);
                        })) != null ? System.Linq.Enumerable.from($t, Core.Components.ListViewItem).firstOrDefault(null, null) : null;
                },
                OpenPopup: function (com, featureName, factory, anonymous) {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            if (anonymous === void 0) { anonymous = false; }
                                            $task1 = Core.Components.Extensions.ComponentExt.OpenTab$1(com, Bridge.toString(Bridge.getHashCode(com)), featureName, factory, true, anonymous);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            $tcs.setResult($taskResult1);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                },
                InitFeatureByName: function (hash, portal) {
                    if (portal === void 0) { portal = true; }
                    var tcs = new System.Threading.Tasks.TaskCompletionSource();
                    var featureName = System.String.replaceAll(System.String.replaceAll(hash, "-", " "), "#", "");
                    System.Threading.Tasks.Task.run(function () {
                        var $step = 0,
                            $task1, 
                            $taskResult1, 
                            $jumpFromFinally, 
                            $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                            $returnValue, 
                            feature, 
                            type, 
                            instance, 
                            $async_e, 
                            $asyncBody = Bridge.fn.bind(this, function () {
                                try {
                                    for (;;) {
                                        $step = System.Array.min([0,1], $step);
                                        switch ($step) {
                                            case 0: {
                                                $task1 = Core.Components.Extensions.ComponentExt.LoadFeatureByName(featureName, true);
                                                $step = 1;
                                                if ($task1.isCompleted()) {
                                                    continue;
                                                }
                                                $task1.continue($asyncBody);
                                                return;
                                            }
                                            case 1: {
                                                $taskResult1 = $task1.getAwaitedResult();
                                                feature = $taskResult1;
                                                if (feature == null) {
                                                    $tcs.setResult(null);
                                                    return;
                                                }

                                                type = Bridge.Reflection.getType(feature.ViewClass);
                                                instance = type == null ? new Core.Components.Forms.EditForm("") : Bridge.as(Bridge.createInstance(type), Core.Components.Forms.EditForm);
                                                instance.Feature = feature;
                                                instance.Id = feature.Name;
                                                Core.Components.Forms.EditForm.Portal = portal;
                                                instance.Render();
                                                tcs.setResult(instance);
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            default: {
                                                $tcs.setResult(null);
                                                return;
                                            }
                                        }
                                    }
                                } catch($async_e1) {
                                    $async_e = System.Exception.create($async_e1);
                                    $tcs.setException($async_e);
                                }
                            }, arguments);

                        $asyncBody();
                        return $tcs.task;
                    });
                    return tcs.task;
                },
                LoadFeatureByName: function (featureName, publicForm) {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        prefix, 
                        featureOdata, 
                        policyOdata, 
                        componentGroupTask, 
                        feature, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            if (publicForm === void 0) { publicForm = false; }
                                            prefix = publicForm ? "/Public/" : "";
                                            featureOdata = new Core.Clients.Client.$ctor1("Feature", Bridge.Reflection.getTypeNamespace(Core.Models.User)).FirstOrDefaultAsync(Core.Models.Feature, System.String.format("{0}?$filter=Active eq true and Name eq '{1}'", prefix, featureName), false, true);
                                            policyOdata = publicForm ? System.Threading.Tasks.Task.fromResult(new (System.Collections.Generic.List$1(Core.Models.FeaturePolicy)).ctor(), System.Collections.Generic.List$1(Core.Models.FeaturePolicy)) : new Core.Clients.Client.$ctor1("FeaturePolicy", Bridge.Reflection.getTypeNamespace(Core.Models.User)).GetRawList(Core.Models.FeaturePolicy, System.String.format("?$filter=Active eq true and Feature/Name eq '{0}'", [featureName]));
                                            componentGroupTask = new Core.Clients.Client.$ctor1("ComponentGroup", Bridge.Reflection.getTypeNamespace(Core.Models.User)).GetRawList(Core.Models.ComponentGroup, (System.String.format("?$expand=Component($filter=Active eq true;$expand=Reference($select=Id,Name))", null) || "") + (System.String.format("&$filter=Active eq true and Feature/Name eq '{0}'", [featureName]) || ""), false, true);
                                            $task1 = System.Threading.Tasks.Task.whenAll(featureOdata, policyOdata, componentGroupTask);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            feature = featureOdata.getResult();
                                            feature.FeaturePolicy = policyOdata.getResult();
                                            feature.ComponentGroup = componentGroupTask.getResult();
                                            System.Collections.Generic.CollectionExtensions.TryAdd(System.String, Core.Models.Feature, Core.Components.Extensions.ComponentExt.FeatureMap, featureName, feature);
                                            Core.Components.Extensions.ComponentExt.ExecuteFeatureScript(feature);
                                            $tcs.setResult(feature);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                },
                LoadFeatureByNameOrViewClass: function (nameOrViewClass) {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        exists, 
                        featureTask, 
                        policyTask, 
                        componentGroupTask, 
                        feature, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            exists = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FeatureMap.Values, Core.Models.Feature).firstOrDefault(function (x) {
                                                return Bridge.referenceEquals(x.ViewClass, nameOrViewClass);
                                            }, null);
                                            if (exists != null) {
                                                $tcs.setResult(exists);
                                                return;
                                            }
                                            featureTask = new Core.Clients.Client.$ctor1("Feature", Bridge.Reflection.getTypeNamespace(Core.Models.User)).FirstOrDefaultAsync(Core.Models.Feature, System.String.format("?$expand=Entity($select=Name)&$filter=Active eq true and (Name eq '{0}' or ViewClass eq '{1}')", nameOrViewClass, nameOrViewClass));
                                            policyTask = new Core.Clients.Client.$ctor1("FeaturePolicy", Bridge.Reflection.getTypeNamespace(Core.Models.User)).GetRawList(Core.Models.FeaturePolicy, System.String.format("?$filter=Active eq true and (Feature/Name eq '{0}' or Feature/ViewClass eq '{1}')", nameOrViewClass, nameOrViewClass));
                                            componentGroupTask = new Core.Clients.Client.$ctor1("ComponentGroup", Bridge.Reflection.getTypeNamespace(Core.Models.User)).GetRawList(Core.Models.ComponentGroup, (System.String.format("?$expand=Component($filter=Active eq true;$expand=Reference($select=Id,Name))", null) || "") + (System.String.format("&$filter=Active eq true and (Feature/Name eq '{0}' or Feature/ViewClass eq '{1}')", nameOrViewClass, nameOrViewClass) || ""));
                                            $task1 = System.Threading.Tasks.Task.whenAll(featureTask, policyTask, componentGroupTask);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            feature = featureTask.getResult();
                                            feature.FeaturePolicy = policyTask.getResult();
                                            feature.ComponentGroup = componentGroupTask.getResult();
                                            System.Collections.Generic.CollectionExtensions.TryAdd(System.String, Core.Models.Feature, Core.Components.Extensions.ComponentExt.FeatureMap, feature.Name, feature);
                                            Core.Components.Extensions.ComponentExt.ExecuteFeatureScript(feature);
                                            $tcs.setResult(feature);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                },
                LoadEditorFeatureByNameByEntity: function (entity) {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        exists, 
                        featureTask, 
                        policyTask, 
                        componentGroupTask, 
                        feature, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            exists = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FeatureMap.Values, Core.Models.Feature).firstOrDefault(function (x) {
                                                return System.Nullable.eq(x.EntityId, entity) && System.String.indexOf(x.Name, "editor", 0, null, 5) >= 0;
                                            }, null);
                                            if (exists != null) {
                                                $tcs.setResult(exists);
                                                return;
                                            }
                                            featureTask = new Core.Clients.Client.$ctor1("Feature", Bridge.Reflection.getTypeNamespace(Core.Models.User)).FirstOrDefaultAsync(Core.Models.Feature, System.String.format("?$expand=Entity($select=Name)&$filter=Active eq true and EntityId eq {0}  ", [Bridge.box(entity, System.Int32)]));
                                            policyTask = new Core.Clients.Client.$ctor1("FeaturePolicy", Bridge.Reflection.getTypeNamespace(Core.Models.User)).GetRawList(Core.Models.FeaturePolicy, System.String.format("?$filter=Active eq true and Feature/EntityId eq {0}", [Bridge.box(entity, System.Int32)]));
                                            componentGroupTask = new Core.Clients.Client.$ctor1("ComponentGroup", Bridge.Reflection.getTypeNamespace(Core.Models.User)).GetRawList(Core.Models.ComponentGroup, (System.String.format("?$expand=Component($filter=Active eq true;$expand=Reference($select=Id,Name))", null) || "") + (System.String.format("&$filter=Active eq true and Feature/EntityId eq {0} ", [Bridge.box(entity, System.Int32)]) || ""));
                                            $task1 = System.Threading.Tasks.Task.whenAll(featureTask, policyTask, componentGroupTask);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            feature = featureTask.getResult();
                                            feature.FeaturePolicy = policyTask.getResult();
                                            feature.ComponentGroup = componentGroupTask.getResult();
                                            System.Collections.Generic.CollectionExtensions.TryAdd(System.String, Core.Models.Feature, Core.Components.Extensions.ComponentExt.FeatureMap, feature.Name, feature);
                                            Core.Components.Extensions.ComponentExt.ExecuteFeatureScript(feature);
                                            $tcs.setResult(feature);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                },
                LoadRecordPolicy: function (ids, entity) {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            if (Core.Extensions.IEnumerableExtensions.Nothing(System.Int32, ids) || System.Linq.Enumerable.from(ids, System.Int32).all(function (x) {
                                                return x <= 0;
                                            })) {
                                                $tcs.setResult(new (System.Collections.Generic.List$1(Core.Models.FeaturePolicy)).ctor());
                                                return;
                                            }
                                            $task1 = new Core.Clients.Client.$ctor1("FeaturePolicy", Bridge.Reflection.getTypeNamespace(Core.Models.User)).GetRawList(Core.Models.FeaturePolicy, System.String.format("?$filter=Active eq true and EntityId eq {0} and RecordId in ({1})", Bridge.box(entity, System.Int32), Core.Extensions.IEnumerableExtensions.Combine(System.Int32, ids, ",")));
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            $tcs.setResult($taskResult1);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                },
                ExecuteFeatureScript: function (feature) {
                    if (Core.Extensions.StringExt.IsNullOrWhiteSpace(feature.ViewClass)) {
                        return;
                    }

                    var type = Bridge.Reflection.getType(feature.ViewClass);
                    if (type != null) {
                        return;
                    }

                    var script = Bridge.as(document.createElement(System.Enum.toString(System.String, "script")), HTMLScriptElement);
                    script.textContent = feature.Script;
                    script.type = "text/javascript";
                    document.head.appendChild(script);
                    script.remove();
                },
                AddChild: function (com, id, featureName, className) {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        type, 
                        instance, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = Core.Components.Extensions.ComponentExt.LoadFeatureByName(featureName);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            type = Bridge.Reflection.getType(className);
                                            instance = Bridge.as(Bridge.createInstance(type), Core.Components.BaseComponent);
                                            instance.Id = id;
                                            com.AddChild(instance);
                                            $tcs.setResult(instance);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                },
                FirstOrDefault: function (component, predicate, ignorePredicate) {
                    var $t, $t1;
                    if (ignorePredicate === void 0) { ignorePredicate = null; }
                    if (component == null || Core.Extensions.IEnumerableExtensions.Nothing(Core.Components.BaseComponent, component.Children)) {
                        return null;
                    }

                    $t = Bridge.getEnumerator(component.Children);
                    try {
                        while ($t.moveNext()) {
                            var child = $t.Current;
                            if (!Bridge.staticEquals(ignorePredicate, null) && ignorePredicate(child)) {
                                continue;
                            }

                            if (predicate(child)) {
                                return child;
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    $t1 = Bridge.getEnumerator(component.Children);
                    try {
                        while ($t1.moveNext()) {
                            var child1 = $t1.Current;
                            if (Core.Extensions.IEnumerableExtensions.HasElement(Core.Components.BaseComponent, child1.Children)) {
                                var res = Core.Components.Extensions.ComponentExt.FirstOrDefault(child1, predicate, ignorePredicate);
                                if (res != null) {
                                    return res;
                                }
                            }
                        }
                    } finally {
                        if (Bridge.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$Dispose();
                        }
                    }
                    return null;
                },
                FindActiveComponent: function (T, component, predicate) {
                    var $t;
                    if (predicate === void 0) { predicate = null; }
                    var result = new (System.Collections.Generic.HashSet$1(T)).ctor();
                    var type = T;
                    if (Core.Extensions.IEnumerableExtensions.Nothing(Core.Components.BaseComponent, component.Children)) {
                        return System.Linq.Enumerable.empty();
                    }

                    $t = Bridge.getEnumerator(component.Children);
                    try {
                        while ($t.moveNext()) {
                            var child = $t.Current;
                            if (Bridge.Reflection.isAssignableFrom(type, Bridge.getType(child)) && child.ParentElement != null && !Core.Extensions.HtmlElementExtension.Hidden(child.ParentElement) && (Bridge.staticEquals(predicate, null) || predicate(Bridge.as(child, T)))) {
                                result.add(Bridge.as(child, T));
                            }

                            if (Core.Extensions.IEnumerableExtensions.Nothing(Core.Components.BaseComponent, child.Children)) {
                                continue;
                            }

                            var res = Core.Components.Extensions.ComponentExt.FindActiveComponent(T, child);
                            Core.Extensions.IEnumerableExtensions.ForEach(T, res, function (x) {
                                result.add(x);
                            });
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    return System.Linq.Enumerable.from(result, T).distinct();
                },
                FindComponentByName: function (T, component, name) {
                    return Bridge.as(Core.Components.Extensions.ComponentExt.FirstOrDefault(component, function (x) {
                        return Bridge.referenceEquals(x.Name, name) && Bridge.Reflection.isAssignableFrom(T, Bridge.getType(x));
                    }), T);
                },
                SetValue: function (component, name, value) {
                    var match = Core.Components.Extensions.ComponentExt.FirstOrDefault(component, function (x) {
                        var $t;
                        return Bridge.referenceEquals((($t = x.GuiInfo) != null ? $t.FieldName : null), name);
                    });
                    if (match == null) {
                        return;
                    }
                    var text;
                    if (((text = Bridge.as(match, Core.Components.Textbox))) != null) {
                        text.Value = value;
                    } else {
                        var search;
                        if (((search = Bridge.as(match, Core.Components.SearchEntry))) != null && (value == null || Core.Extensions.ReflectionExt.IsInt32(Bridge.getType(value)))) {
                            search.Value = Bridge.cast(Bridge.unbox(value, System.Int32), System.Int32, true);
                        } else {
                            var number;
                            if (((number = Bridge.as(match, Core.Components.Number))) != null && (value == null || Core.Extensions.ReflectionExt.IsNumber(Bridge.getType(value)))) {
                                number.Value = System.Convert.toDecimal(value);
                            } else {
                                var checkbox;
                                if (((checkbox = Bridge.as(match, Core.Components.Checkbox))) != null && (value == null || Core.Extensions.ReflectionExt.IsBool(Bridge.getType(value)))) {
                                    checkbox.Value = Bridge.as(value, System.Boolean, true);
                                } else {
                                    var dpk;
                                    if (((dpk = Bridge.as(match, Core.Components.Datepicker))) != null && (value == null || Core.Extensions.ReflectionExt.IsDate(Bridge.getType(value)))) {
                                        dpk.Value = Bridge.as(value, System.DateTime, true);
                                    }
                                }
                            }
                        }
                    }
                },
                GetValue: function (com, simple) {
                    if (simple === void 0) { simple = false; }
                    var text;
                    if (((text = Bridge.as(com, Core.Components.Textbox))) != null) {
                        return text.Value;
                    } else {
                        var multiple;
                        if (((multiple = Bridge.as(com, Core.Components.MultipleSearchEntry))) != null) {
                            return simple ? Core.Extensions.IEnumerableExtensions.Combine(System.Int32, multiple.ListValues) : multiple.ListValues;
                        } else {
                            var search;
                            if (((search = Bridge.as(com, Core.Components.SearchEntry))) != null) {
                                return Bridge.box(search.Value, System.Int32, System.Nullable.toString, System.Nullable.getHashCode);
                            } else {
                                var number;
                                if (((number = Bridge.as(com, Core.Components.Number))) != null) {
                                    return number.Value;
                                } else {
                                    var chk;
                                    if (((chk = Bridge.as(com, Core.Components.Checkbox))) != null) {
                                        return Bridge.box(chk.Value, System.Boolean, System.Nullable.toStringFn(System.Boolean.toString), System.Nullable.getHashCode);
                                    } else {
                                        var dpk;
                                        if (((dpk = Bridge.as(com, Core.Components.Datepicker))) != null) {
                                            return Bridge.box(dpk.Value, System.DateTime, System.Nullable.toStringFn(System.DateTime.format), System.Nullable.getHashCode);
                                        } else {
                                            var uploader;
                                            if (((uploader = Bridge.as(com, Core.Components.ImageUploader))) != null) {
                                                return uploader.Path;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    return null;
                },
                SetAutoWidth: function (component, text, font, padding) {
                    if (padding === void 0) { padding = 8; }
                    component.ParentElement.style.minWidth = Core.Extensions.BridgeExt.TextWidth(text, font).add(System.Decimal(8)) + "px";
                    component.ParentElement.style.maxWidth = Core.Extensions.BridgeExt.TextWidth(text, font).add(System.Decimal(8)) + "px";
                },
                SetDisabled: function (component, disabled) {
                    var editable;
                    if (component != null && ((editable = Bridge.as(component, Core.Components.EditableComponent))) != null) {
                        editable.Disabled = disabled;
                    }
                },
                SetDisabled$2: function (T, component, name, disabled) {
                    component = Bridge.as(Core.Components.Extensions.ComponentExt.FirstOrDefault(component, function (x) {
                        return Bridge.referenceEquals(x.Name, name) && Bridge.is(x, T);
                    }), T);
                    var editable;
                    if (component != null && ((editable = Bridge.as(component, Core.Components.EditableComponent))) != null) {
                        editable.Disabled = disabled;
                    }
                },
                SetDisabled$1: function (component, disabled, fieldNames) {
                    if (fieldNames === void 0) { fieldNames = []; }
                    if (component == null) {
                        return;
                    }
                    Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, component.FilterChildren(Core.Components.EditableComponent, function (x) {
                        return System.Array.contains(fieldNames, x.Name, System.String);
                    }), function (x) {
                        x.Disabled = disabled;
                    });
                },
                SetDataSourceSearchEntry: function (component, name, datasource) {
                    var search = Bridge.as(Core.Components.Extensions.ComponentExt.FirstOrDefault(component, function (x) {
                        return Bridge.referenceEquals(x.Name, name) && Bridge.is(x, Core.Components.SearchEntry);
                    }), Core.Components.SearchEntry);
                    if (search != null) {
                        search.DataSourceFilter = datasource;
                    }
                },
                SetDataSourceGridView: function (component, name, datasource) {
                    var search = Bridge.as(Core.Components.Extensions.ComponentExt.FirstOrDefault(component, function (x) {
                        return Bridge.referenceEquals(x.Name, name) && Bridge.is(x, Core.Components.GridView);
                    }), Core.Components.GridView);
                    if (search != null) {
                        search.DataSourceFilter = datasource;
                    }
                },
                FindClosest: function (T, component) {
                    var type = T;
                    if (Bridge.Reflection.isAssignableFrom(type, Bridge.getType(component))) {
                        return Bridge.as(component, T);
                    }

                    while (component.Parent != null) {
                        component = component.Parent;
                        if (Bridge.Reflection.isAssignableFrom(type, Bridge.getType(component))) {
                            return Bridge.as(component, T);
                        }
                    }
                    return Bridge.as(component, T);
                },
                FindClosest$1: function (T, component, predicate) {
                    var type = T;
                    if (Bridge.Reflection.isAssignableFrom(type, Bridge.getType(component)) && predicate(Bridge.as(component, T))) {
                        return Bridge.as(component, T);
                    }

                    while (component.Parent != null) {
                        component = component.Parent;
                        if (Bridge.Reflection.isAssignableFrom(type, Bridge.getType(component)) && predicate(Bridge.as(component, T))) {
                            return Bridge.as(component, T);
                        }
                    }
                    return Bridge.as(component, T);
                },
                FindComponentEvent: function (component, eventName) {
                    if (component == null) {
                        return null;
                    }

                    var parent = component.ParentForm;
                    while (parent != null && parent[eventName] == null) {
                        parent = parent.ParentForm;
                    }
                    var parentForm;
                    if (parent == null && ((parentForm = Bridge.as(component.Parent, Core.Components.Forms.EditForm))) != null) {
                        parent = parentForm;
                        while (parent != null && parent[eventName] == null) {
                            parent = parent.ParentForm;
                        }
                    }

                    return parent;
                },
                SetShow: function (component, show, fieldNames) {
                    if (fieldNames === void 0) { fieldNames = []; }
                    if (component == null) {
                        return;
                    }
                    Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.BaseComponent, component.FilterChildren$1(function (x) {
                        return System.Array.contains(fieldNames, x.Name, System.String);
                    }), function (x) {
                        x.Show = show;
                    });
                },
                AlterPosition: function (Element, parentEle) {
                    if (Element == null || Element.parentElement == null || parentEle == null) {
                        return;
                    }
                    var containerRect = parentEle.getBoundingClientRect();
                    var containerBottom = containerRect.bottom;
                    var left = containerRect.left;
                    Core.Components.Renderer.Floating(Core.MVVM.Html.Take(Element), containerBottom, left);
                    var clientRect = Element.getBoundingClientRect();
                    var outOfViewPort = Core.Extensions.HtmlElementExtension.OutOfViewport(Element);
                    if (outOfViewPort.Bottom) {
                        Core.Components.Renderer.Position(Core.MVVM.Html.Take(Element), Core.Components.Direction.top, containerBottom - clientRect.height - Element.parentElement.clientHeight);
                    }
                    if (outOfViewPort.Right) {
                        Core.Components.Renderer.Position(Core.MVVM.Html.Take(Element), Core.Components.Direction.left, left - clientRect.width);
                        Core.Components.Renderer.Position(Core.MVVM.Html.Take(Element), Core.Components.Direction.top, containerBottom - Element.parentElement.clientHeight);
                    }
                    outOfViewPort = Core.Extensions.HtmlElementExtension.OutOfViewport(Element);
                    if (outOfViewPort.Left) {
                        Core.Components.Renderer.Position(Core.MVVM.Html.Take(Element), Core.Components.Direction.left, 0);
                    }
                    outOfViewPort = Core.Extensions.HtmlElementExtension.OutOfViewport(Element);
                    if (outOfViewPort.Bottom) {
                        Core.Components.Renderer.Position(Core.MVVM.Html.Take(Element), Core.Components.Direction.top, containerBottom - clientRect.height - Element.parentElement.clientHeight);
                    }
                    outOfViewPort = Core.Extensions.HtmlElementExtension.OutOfViewport(Element);
                    if (outOfViewPort.Top) {
                        Core.Components.Renderer.Position(Core.MVVM.Html.Take(Element), Core.Components.Direction.top, containerBottom);
                    }
                },
                BuildGroupTree: function (list, groupKeys) {
                    if (Core.Extensions.IEnumerableExtensions.Nothing(System.String, groupKeys)) {
                        return list;
                    }

                    var firstKey = System.Linq.Enumerable.from(groupKeys, System.String).first();
                    if (Core.Extensions.StringExt.IsNullOrWhiteSpace(firstKey)) {
                        return list;
                    }

                    return System.Linq.Enumerable.from(list, System.Object).groupBy(function (x) {
                            return x[firstKey];
                        }).select(function (x) {
                        var $t, $t1;
                        return ($t = new Core.Components.GroupRowData(), $t.Key = x.key(), $t.Children = ($t1 = System.Object, System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.BuildGroupTree(x.toList(System.Object), System.Linq.Enumerable.from(groupKeys, System.String).skip(1).ToArray(System.String)), $t1).toList($t1)), $t);
                    }).select(function (x) {{ return Bridge.cast(x, System.Object); }});
                },
                DownloadFile: function (filename, blob) {
                    var a = Bridge.as(document.createElement("a"), HTMLAnchorElement);
                    a.style.display = "none";
                    a.href = window.URL.createObjectURL(blob);
                    a.download = filename;

                    // Append anchor to body.
                    document.body.appendChild(a);
                    a.click();

                    // Remove anchor from body
                    document.body.removeChild(a);
                },
                CheckValidity: function (com, showMessage) {
                    if (showMessage === void 0) { showMessage = true; }
                    var invalidFields = com.GetInvalid();
                    if (Core.Extensions.IEnumerableExtensions.Nothing(Core.Components.EditableComponent, invalidFields)) {
                        return true;
                    }

                    if (showMessage) {
                        Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, invalidFields, function (x) {
                            x.Disabled = false;
                        });
                        System.Linq.Enumerable.from(invalidFields, Core.Components.EditableComponent).firstOrDefault(null, null).Focus();
                        var message = Bridge.toArray(System.Linq.Enumerable.from(invalidFields, Core.Components.EditableComponent).selectMany(function (x) {
                                    return x.ValidationResult.Values;
                                })).join("<br />");
                        Core.Extensions.Toast.Warning(message);
                    }
                    return false;
                }
            }
        }
    });

    Bridge.define("Core.Components.Extensions.ComponentFactory", {
        statics: {
            methods: {
                GetComponent: function (ui, form) {
                    var $t;
                    if (ui == null) {
                        throw new System.ArgumentNullException.$ctor1("ui");
                    }

                    if (Core.Extensions.StringExt.IsNullOrEmpty(ui.ComponentType)) {
                        throw new System.InvalidOperationException.$ctor1(System.String.format("Component type of {0} is null.", [Bridge.box(ui.Id, System.Int32)]));
                    }

                    ui.ComponentType = ui.ComponentType.trim();
                    var childComponent;
                    switch (ui.ComponentType) {
                        case "Link": 
                            childComponent = new Core.Components.Link(ui);
                            break;
                        case "Input": 
                            childComponent = new Core.Components.Textbox(ui);
                            break;
                        case "Timepicker": 
                            childComponent = new Core.Components.Timepicker(ui);
                            break;
                        case "Password": 
                            childComponent = ($t = new Core.Components.Textbox(ui), $t.Password = true, $t);
                            break;
                        case "Label": 
                            childComponent = new Core.Components.CellText(ui);
                            break;
                        case "Textarea": 
                            childComponent = ($t = new Core.Components.Textbox(ui), $t.MultipleLine = true, $t);
                            break;
                        case "Dropdown": 
                            childComponent = ui.Precision != null && System.Nullable.gte(ui.Precision, 2) ? new Core.Components.MultipleSearchEntry(ui) : new Core.Components.SearchEntry(ui);
                            break;
                        case "Image": 
                            childComponent = new Core.Components.ImageUploader(ui);
                            break;
                        case "GridView": 
                            if (Core.Extensions.StringExt.IsNullOrWhiteSpace(ui.GroupBy)) {
                                childComponent = new Core.Components.GridView(ui);
                            } else {
                                childComponent = new Core.Components.GroupGridView(ui);
                            }
                            break;
                        case "ListView": 
                            if (Core.Extensions.StringExt.IsNullOrWhiteSpace(ui.GroupBy)) {
                                childComponent = new Core.Components.ListView(ui);
                            } else {
                                childComponent = new Core.Components.GroupListView(ui);
                            }
                            break;
                        default: 
                            var current = Core.Components.BaseComponent;
                            var type = Bridge.Reflection.getType((Bridge.Reflection.getTypeNamespace(current) || "") + "." + (ui.ComponentType || ""));
                            if (type == null) {
                                return Core.Components.Extensions.ComponentFactory.CompositedComponents(ui, form);
                            }
                            childComponent = Bridge.as(Bridge.createInstance(type, [ui]), Core.Components.BaseComponent);
                            break;
                    }
                    childComponent.Id = (ui.FieldName || "") + (Bridge.toString(ui.Id) || "");
                    childComponent.Name = ui.FieldName;
                    childComponent.ComponentType = ui.ComponentType;
                    childComponent.EditForm = form;
                    return childComponent;
                },
                CompositedComponents: function (gui, form) {
                    if (Core.Extensions.StringExt.IsNullOrWhiteSpace(gui.FieldName) || Core.Extensions.StringExt.IsNullOrWhiteSpace(gui.ComponentType)) {
                        return null;
                    }

                    var fields = System.String.split(gui.FieldName, [44].map(function (i) {{ return String.fromCharCode(i); }}));
                    if (Core.Extensions.IEnumerableExtensions.Nothing(System.String, fields)) {
                        return null;
                    }

                    gui.ComponentType = gui.ComponentType.trim();
                    var nonChar = System.Linq.Enumerable.from(gui.ComponentType, System.Char).where(function (x) {
                            return !(x >= 97 && x <= 122 || x >= 65 && x <= 90);
                        }).ToArray(System.Char);
                    if (System.Linq.Enumerable.from(fields, System.String).count() !== ((nonChar.length + 1) | 0)) {
                        return null;
                    }

                    var section = new Core.Components.Section.$ctor1(Core.MVVM.ElementType.div);
                    section.DOMContentLoaded = Bridge.fn.combine(section.DOMContentLoaded, function () {
                        Core.Extensions.IEnumerableExtensions.ForEach$1(System.String, fields, function (field, index) {
                            var startIndex = index === 0 ? 0 : System.String.indexOf(gui.ComponentType, String.fromCharCode(nonChar[System.Array.index(((index - 1) | 0), nonChar)]));
                            var endIndex = index === ((fields.length - 1) | 0) ? ((gui.ComponentType.length - 1) | 0) : ((System.String.indexOf(gui.ComponentType, String.fromCharCode(nonChar[System.Array.index(index, nonChar)])) - 1) | 0);
                            var componentType = gui.ComponentType.substr(startIndex, ((endIndex - startIndex) | 0));
                            var childGui = new Core.Models.Component();
                            Core.Extensions.ReflectionExt.CopyPropFrom$1(childGui, gui);
                            childGui.ComponentType = componentType;
                            childGui.FieldName = field;
                            section.AddChild(Core.Components.Extensions.ComponentFactory.GetComponent(childGui, form));
                            if (nonChar.length > index) {
                                section.Element.appendChild(document.createTextNode(String.fromCharCode(nonChar[System.Array.index(index, nonChar)])));
                            }
                        });
                    });
                    return section;
                }
            }
        }
    });

    Bridge.define("Core.Components.Forms.ContextMenuItem", {
        props: {
            Icon: null,
            Text: null,
            Click: null,
            Disabled: false,
            Parameter: null,
            MenuItems: null
        }
    });

    Bridge.define("Core.Components.GroupRowData", {
        props: {
            Key: null,
            Children: null
        }
    });

    Bridge.define("Core.Components.ListViewSearchVM", {
        props: {
            SearchTerm: null,
            StartDate: null,
            EndDate: null
        }
    });

    Bridge.define("Core.Components.PaginationOptions", {
        props: {
            Total: 0,
            PageSize: 0,
            PageIndex: 0,
            PageNumber: 0,
            CurrentPageCount: 0,
            StartIndex: 0,
            EndIndex: 0,
            ClickHandler: null
        }
    });

    Bridge.define("Core.Components.Position", {
        $kind: "enum",
        statics: {
            fields: {
                absolute: 0,
                fixed: 1,
                inherit: 2,
                initial: 3,
                relative: 4,
                static: 5,
                sticky: 6,
                unset: 7
            }
        }
    });

    Bridge.define("Core.Components.Renderer", {
        statics: {
            methods: {
                ColSpan: function (html, colSpan) {
                    return html.Attr$1("colspan", Bridge.toString(colSpan));
                },
                RowSpan: function (html, colSpan) {
                    return html.Attr$1("rowspan", Bridge.toString(colSpan));
                },
                Panel: function (html, text) {
                    if (text === void 0) { text = ""; }
                    html.Div.Render();
                    if (!System.String.isNullOrEmpty(text)) {
                        Core.Components.Renderer.IText(Core.Components.Renderer.ClassName(html.Label, "header"), text).End.Render();
                    }

                    return html;
                },
                Button: function (html, text, className, icon) {
                    if (text === void 0) { text = ""; }
                    if (className === void 0) { className = "button info small"; }
                    if (icon === void 0) { icon = ""; }
                    html.Button.Render();
                    if (!System.String.isNullOrEmpty(icon)) {
                        Core.Components.Renderer.ClassName(html.Span, icon).End.Text(" ").Render();
                    }
                    return Core.Components.Renderer.IText(Core.Components.Renderer.ClassName(html, className), text);
                },
                SmallInput: function (html, value, align) {
                    if (value === void 0) { value = ""; }
                    if (align === void 0) { align = "left"; }
                    return Core.Components.Renderer.ClassName(html.Input, "input-small " + (align || "")).Attr$1("data-role", "input").Value(value);
                },
                PlaceHolder: function (html, langKey) {
                    if (Core.Extensions.StringExt.IsNullOrWhiteSpace(langKey)) {
                        return html;
                    }
                    Core.Components.Renderer.MarkLangProp(html.GetContext(), langKey, "placeholder");

                    return html.Attr$1("placeholder", Core.Components.LangSelect.Get(langKey));
                },
                MarkLangProp: function (ctx, langKey, propName, parameters) {
                    if (parameters === void 0) { parameters = []; }
                    ctx[(Core.Components.LangSelect.LangKey || "") + (propName || "")] = langKey;
                    if (Core.Extensions.IEnumerableExtensions.HasElement(System.Object, parameters)) {
                        ctx[(Core.Components.LangSelect.LangParam || "") + (propName || "")] = parameters;
                    }

                    var prop = ctx[Core.Components.LangSelect.LangProp];
                    var newProp = prop == null ? propName : System.String.concat(prop, ",", propName);
                    ctx[Core.Components.LangSelect.LangProp] = Core.Extensions.IEnumerableExtensions.Combine(System.String, System.Linq.Enumerable.from(newProp.split(","), System.String).distinct());
                },
                Title: function (html, langKey) {
                    if (Core.Extensions.StringExt.IsNullOrWhiteSpace(langKey)) {
                        return html;
                    }
                    Core.Components.Renderer.MarkLangProp(html.GetContext(), langKey, "title");
                    return html.Attr$1("placeholder", Core.Components.LangSelect.Get(langKey));
                },
                SmallCheckbox: function (html, value) {
                    if (value === void 0) { value = false; }
                    Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(html.Label, "checkbox input-small transition-on style2").Input.Attr$1("type", "checkbox").Type$1("checkbox").End.Span, "check myCheckbox");
                    var chk = Bridge.as(Core.MVVM.Html.Context.previousElementSibling, HTMLInputElement);
                    chk.checked = value;
                    return html;
                },
                Disabled: function (html, disabled) {
                    if (disabled === false) {
                        Core.MVVM.Html.Context.removeAttribute("disabled");
                        return html;
                    }
                    return html.Attr$1("disabled", "disabled");
                },
                Margin: function (html, direction, margin, unit) {
                    if (unit === void 0) { unit = "px"; }
                    return html.Style$1(System.String.format("margin-{0} : {1}{2}", Bridge.box(direction, Core.Components.Direction, System.Enum.toStringFn(Core.Components.Direction)), Bridge.box(margin, System.Double, System.Double.format, System.Double.getHashCode), unit));
                },
                MarginRem: function (html, direction, margin) {
                    return html.Style$1(System.String.format("margin-{0} : {1}rem", Bridge.box(direction, Core.Components.Direction, System.Enum.toStringFn(Core.Components.Direction)), Bridge.box(margin, System.Double, System.Double.format, System.Double.getHashCode)));
                },
                Padding: function (html, direction, padding, unit) {
                    if (unit === void 0) { unit = "px"; }
                    return html.Style$1(System.String.format("padding-{0} : {1}{2}", Bridge.box(direction, Core.Components.Direction, System.Enum.toStringFn(Core.Components.Direction)), Bridge.box(padding, System.Double, System.Double.format, System.Double.getHashCode), unit));
                },
                Width: function (html, width) {
                    return html.Style$1(System.String.format("width: {0}", [width]));
                },
                /**
                 * Set sticky position to the Html Context
                 *
                 * @static
                 * @public
                 * @this Core.Components.Renderer
                 * @memberof Core.Components.Renderer
                 * @param   {Core.MVVM.Html}    html    
                 * @param   {string}            top     Set top to 0 if it's aligned top with previous element
                 * @param   {string}            left    Set top to 0 if it's aligned left with previous element
                 * @return  {Core.MVVM.Html}
                 */
                Sticky: function (html, top, left) {
                    if (top === void 0) { top = null; }
                    if (left === void 0) { left = null; }
                    var context = Core.MVVM.Html.Context;
                    if (context == null) {
                        return html;
                    }
                    if (context.previousElementSibling != null && Bridge.referenceEquals(Bridge.getType(context), Bridge.getType(context.previousElementSibling))) {
                        if (Bridge.referenceEquals(left, Bridge.toString((0)))) {
                            left = context.offsetLeft + (Core.Extensions.Utils.Pixel || "");
                        } else if (Bridge.referenceEquals(top, Bridge.toString((0)))) {
                            top = context.offsetTop + (Core.Extensions.Utils.Pixel || "");
                        }
                    }
                    if (top != null) {
                        html.Style$1(System.String.format("top: {0};", [top]));
                    }
                    if (left != null) {
                        html.Style$1(System.String.format("left: {0};", [left]));
                    }
                    return html.Style$1("position: sticky; z-index: 1;");
                },
                TextAlign: function (html, alignment) {
                    if (alignment === void 0) { alignment = 8; }
                    return html.Style$1("text-align: " + (System.Nullable.toString(alignment, System.Enum.toStringFn(Core.Enums.TextAlign)) || ""));
                },
                Position: function (html, direction, value) {
                    return html.Style$1(System.String.format("{0}: {1}px", Core.Extensions.ReflectionExt.GetEnumDescription(Bridge.box(direction, Core.Components.Direction, System.Enum.toStringFn(Core.Components.Direction))), Bridge.box(value, System.Double, System.Double.format, System.Double.getHashCode)));
                },
                Position$1: function (html, position) {
                    return html.Style$1(System.String.format("position: {0}", [Core.Extensions.ReflectionExt.GetEnumDescription(Bridge.box(position, Core.Components.Position, System.Enum.toStringFn(Core.Components.Position)))]));
                },
                /**
                 * Render icon inside span, non auto-closing
                 *
                 * @static
                 * @public
                 * @this Core.Components.Renderer
                 * @memberof Core.Components.Renderer
                 * @param   {Core.MVVM.Html}    html    
                 * @param   {string}            icon
                 * @return  {Core.MVVM.Html}
                 */
                Icon: function (html, icon) {
                    var isIconClass = System.String.contains(icon,"mif") || System.String.contains(icon,"fa") || System.String.contains(icon,"fa-");
                    Core.Components.Renderer.ClassName(html.Span, "icon");
                    if (isIconClass) {
                        Core.Components.Renderer.ClassName(html, icon).Render();
                    } else {
                        Core.Components.Renderer.ClassName(html.Style$1(System.String.format("background-image: url({0});", [(Core.Clients.Client.Origin || "") + (icon || "")])), "iconBg").Render();
                    }

                    return html;
                },
                Escape: function (html, action) {
                    var div = Core.MVVM.Html.Context;
                    div.tabIndex = -1;
                    div.focus();
                    div.addEventListener("keydown", function (e) {
                        if (System.Nullable.eq(Bridge.unbox(e.keyCode), 27)) {
                            var parent = div.parentElement;
                            e.stopPropagation();
                            action(e);
                            parent.focus();
                        }
                    });
                    return html;
                },
                IconForSpan: function (html, iconClass) {
                    if (Core.Extensions.StringExt.IsNullOrWhiteSpace(iconClass)) {
                        return html;
                    }

                    iconClass = iconClass.trim();
                    var span = Core.MVVM.Html.Context;
                    Core.Components.Renderer.ClassName(html, "icon");
                    var isIconClass = System.String.contains(iconClass,"mif") || System.String.contains(iconClass,"fa") || System.String.contains(iconClass,"fa-");
                    if (isIconClass) {
                        Core.Extensions.HtmlElementExtension.AddClass(span, iconClass);
                    } else {
                        Core.Extensions.HtmlElementExtension.AddClass(span, "iconBg");
                        span.style["background-image"] = "url(" + (iconClass || "") + ")";
                    }
                    return html;
                },
                Floating: function (html, top, left) {
                    return Core.Components.Renderer.Position(Core.Components.Renderer.Position(Core.Components.Renderer.Position$1(html, Core.Components.Position.fixed), Core.Components.Direction.top, top), Core.Components.Direction.left, left);
                },
                TabIndex: function (html, tabIndex) {
                    return html.Attr$1("tabindex", Bridge.toString(tabIndex));
                },
                ClassName: function (html, className) {
                    if (System.String.isNullOrEmpty(className)) {
                        return html;
                    }
                    var ctx = Core.MVVM.Html.Context;
                    var translated = Core.Components.LangSelect.Get(className);
                    Core.Components.Renderer.MarkLangProp(ctx, className, "ClassName");
                    var res = (ctx.className || "") + " " + (translated || "");
                    ctx.className = res.trim();
                    return html;
                },
                IHtml: function (html, langKey, parameters) {
                    if (parameters === void 0) { parameters = []; }
                    if (System.String.isNullOrEmpty(langKey)) {
                        return html;
                    }
                    var ctx = Core.MVVM.Html.Context;
                    var translated = Core.Components.LangSelect.Get(langKey);
                    Core.Components.Renderer.MarkLangProp(ctx, langKey, "InnerHTML", parameters);
                    ctx.innerHTML = translated;
                    return html;
                },
                IText: function (html, langKey, parameters) {
                    if (parameters === void 0) { parameters = []; }
                    if (System.String.isNullOrEmpty(langKey)) {
                        return html;
                    }
                    var translated = Core.Components.LangSelect.Get(langKey);
                    var textNode = document.createTextNode(Core.Extensions.IEnumerableExtensions.HasElement(System.Object, parameters) ? System.String.format.apply(System.String, [translated].concat(parameters)) : translated);
                    Core.Components.Renderer.MarkLangProp(textNode, langKey, "TextContent", parameters);
                    html.GetContext().appendChild(textNode);
                    return html;
                }
            }
        }
    });

    Bridge.define("Core.Components.SortedField", {
        props: {
            Field: null,
            Desc: false
        }
    });

    Bridge.define("Core.Components.Spinner", {
        statics: {
            fields: {
                _instance: null,
                _span: null,
                _backdrop: null,
                _hiddenAwaiter: 0
            },
            props: {
                Instance: {
                    get: function () {
                        if (Core.Components.Spinner._instance != null) {
                            return Core.Components.Spinner._instance;
                        }

                        Core.Components.Spinner._instance = new Core.Components.Spinner();
                        var existing = document.getElementById("spinner");
                        if (existing == null) {
                            Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.MVVM.Html.Take(document.body).Div, "backdrop").Style$1("background: transparent !important;").End.Span, "spinner");
                            Core.Components.Spinner._span = Core.MVVM.Html.Context;
                        } else {
                            Core.Components.Spinner._span = existing;
                        }
                        Core.Components.Spinner._backdrop = Core.Components.Spinner._span.previousElementSibling;
                        Core.Components.Spinner._span.style.display = System.Enum.toString(System.String, "none");
                        Core.Components.Spinner._backdrop.style.display = System.Enum.toString(System.String, "none");

                        return Core.Components.Spinner._instance;
                    }
                }
            },
            methods: {
                AppendTo: function (node, lockScreen, autoHide, timeout) {
                    if (lockScreen === void 0) { lockScreen = true; }
                    if (autoHide === void 0) { autoHide = true; }
                    if (timeout === void 0) { timeout = 7000; }
                    if (node != null) {
                        node.appendChild(Core.Components.Spinner._span);
                    } else {
                        document.body.appendChild(Core.Components.Spinner._span);
                    }

                    Core.Components.Spinner._span.style.display = "";
                    if (lockScreen) {
                        Core.Components.Spinner._backdrop.style.display = "";
                    }
                    if (!autoHide) {
                        return;
                    }
                    window.clearTimeout(Core.Components.Spinner._hiddenAwaiter);
                    Core.Components.Spinner._hiddenAwaiter = window.setTimeout(Core.Components.Spinner.Hide, timeout);
                },
                Hide: function () {
                    Core.Components.Spinner._span.style.display = System.Enum.toString(System.String, "none");
                    Core.Components.Spinner._backdrop.style.display = System.Enum.toString(System.String, "none");
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        }
    });

    Bridge.define("Core.Enums.ActiveStateEnum", {
        $kind: "enum",
        statics: {
            fields: {
                All: 1,
                Yes: 2,
                No: 3
            }
        }
    });

    Bridge.define("Core.Enums.AdvSearchOperation", {
        $kind: "enum",
        statics: {
            fields: {
                Equal: 1,
                NotEqual: 2,
                GreaterThan: 3,
                GreaterThanOrEqual: 4,
                LessThan: 5,
                LessThanOrEqual: 6,
                Contains: 7,
                NotContains: 8,
                StartWith: 9,
                NotStartWith: 10,
                EndWidth: 11,
                NotEndWidth: 12,
                In: 13,
                NotIn: 14
            }
        }
    });

    Bridge.define("Core.Enums.ApprovalStatusEnum", {
        $kind: "enum",
        statics: {
            fields: {
                Approved: 1,
                New: 2,
                Rejected: 3,
                Approving: 4
            }
        }
    });

    Bridge.define("Core.Enums.AuthVerEnum", {
        $kind: "enum",
        statics: {
            fields: {
                None: 100,
                Simple: 0,
                OAuth1: 1,
                OAuth2: 2,
                ApiKey: 3
            }
        }
    });

    Bridge.define("Core.Enums.ComponentTypeTypeEnum", {
        $kind: "enum",
        statics: {
            fields: {
                Dropdown: 1,
                SearchEntry: 1,
                MultipleSearchEntry: 1,
                Datepicker: 2,
                Number: 3,
                Textbox: 4,
                Checkbox: 5
            }
        }
    });

    Bridge.define("Core.Enums.CurrencyEnum", {
        $kind: "enum",
        statics: {
            fields: {
                USD: 71,
                VND: 72
            }
        }
    });

    Bridge.define("Core.Enums.CustomEventType", {
        $kind: "enum",
        statics: {
            fields: {
                BeforeCopied: 0,
                AfterCopied: 1,
                BeforeDeleted: 2,
                AfterDeleted: 3,
                Deactivated: 4,
                BeforePasted: 5,
                AfterPasted: 6,
                BeforeCreated: 7,
                AfterCreated: 8,
                BeforeEmptyRowCreated: 9,
                AfterEmptyRowCreated: 10,
                BeforeCreatedList: 11,
                AfterCreatedList: 12,
                Selected: 13,
                RowFocusIn: 14,
                RowFocusOut: 15,
                RowMouseEnter: 16,
                RowMouseLeave: 17
            }
        }
    });

    Bridge.define("Core.Enums.DebtStatusEnum", {
        $kind: "enum",
        statics: {
            fields: {
                Approved: 1,
                New: 2,
                Rejected: 3,
                Approving: 4,
                Paying: 5,
                Paid: 6,
                Overdue: 7,
                BadDebt: 8
            }
        }
    });

    Bridge.define("Core.Enums.EntityActionEnum", {
        $kind: "enum",
        statics: {
            fields: {
                Create: 1,
                Update: 2,
                Deactivate: 3,
                Delete: 4
            }
        }
    });

    Bridge.define("Core.Enums.EntityEnum", {
        $kind: "enum",
        statics: {
            fields: {
                Accessory: 1,
                OrderDetail: 2,
                Payment: 3,
                Policy: 4,
                Quotation: 5,
                Role: 6,
                Surcharge: 8,
                Terminal: 9,
                Truck: 14,
                TruckMaintenance: 15,
                TruckMaintenanceDetail: 16,
                TruckMonitorConfig: 17,
                User: 19,
                Component: 20,
                Vendor: 21,
                ComponentGroup: 30,
                Container: 31,
                Contract: 33,
                Coordination: 34,
                Customer: 35,
                Entity: 38,
                Feature: 40,
                FeaturePolicy: 41,
                GroupMember: 47,
                Ledger: 49,
                Order: 54,
                SurchargeType: 1059,
                CoordinationDetail: 1061,
                MasterData: 1067,
                CustomerCare: 1068,
                CustomerCareLog: 2068,
                GridPolicy: 2077,
                FuelHistory: 2086,
                Depreciation: 2087,
                UserRole: 2088,
                VendorService: 2089,
                AdvPayment: 2090,
                AdvRequest: 2090,
                PaybackPayment: 2093,
                ContainerFee: 2094,
                Receivable: 2096,
                ReceivableDetail: 2097,
                Payable: 2098,
                PayableDetail: 2099,
                Payslip: 2100,
                PayslipDetail: 2101,
                TaskNotification: 2102,
                QuotationDetail: 2103,
                Block: 2104,
                CoordinationDetailBlock: 2105,
                SurchargePayable: 2108,
                Allocation: 2109,
                ParkingFee: 2115,
                RegistrationFee: 2116,
                RouteCommissionSetting: 2117,
                MonthlyPaid: 3125,
                IncomeTax: 3126,
                SaleCommissionSetting: 3127,
                ApprovalConfig: 3128,
                Approvement: 3126,
                AllocationDetail: 4128,
                PaybackPaymentDetail: 4131,
                WorkingDayDetail: 4133,
                FamilyAllowances: 4134,
                CustomerContact: 4135,
                ExchangeRate: 4136,
                CustomerContract: 4137,
                QuotationSurcharge: 4138,
                VendorBranch: 4139,
                Route: 4140,
                Dictionary: 4141,
                OrderCont: 4170,
                OrderTruck: 4171,
                TruckStopHistory: 4148,
                CoordinationDetailDriver: 4172,
                SurchargePayableDriver: 4173,
                FieldCondition: 4177,
                OrderByCondition: 4182,
                FuelPrice: 4191,
                Receipt: 4197,
                TerminalTruckType: 4198,
                History: 4199,
                DepreciationSetUp: 4200,
                Webhook: 5000,
                Inventory: 4205,
                InvMove: 4204,
                RegBooking: 6000,
                RegSi: 6001,
                RegSiDetail: 6002
            }
        }
    });

    Bridge.define("Core.Enums.HttpMethod", {
        $kind: "enum",
        statics: {
            fields: {
                GET: 0,
                POST: 1,
                PUT: 2,
                PATCH: 3,
                DELETE: 4
            }
        }
    });

    /** @namespace Core.Enums */

    /**
     * @public
     * @class Core.Enums.HttpStatusCode
     */
    Bridge.define("Core.Enums.HttpStatusCode", {
        $kind: "enum",
        statics: {
            fields: {
                /**
                 * @static
                 * @public
                 * @memberof Core.Enums.HttpStatusCode
                 * @constant
                 * @default 100
                 * @type Core.Enums.HttpStatusCode
                 */
                Continue: 100,
                /**
                 * @static
                 * @public
                 * @memberof Core.Enums.HttpStatusCode
                 * @constant
                 * @default 101
                 * @type Core.Enums.HttpStatusCode
                 */
                SwitchingProtocols: 101,
                /**
                 * @static
                 * @public
                 * @memberof Core.Enums.HttpStatusCode
                 * @constant
                 * @default 200
                 * @type Core.Enums.HttpStatusCode
                 */
                OK: 200,
                /**
                 * @static
                 * @public
                 * @memberof Core.Enums.HttpStatusCode
                 * @constant
                 * @default 201
                 * @type Core.Enums.HttpStatusCode
                 */
                Created: 201,
                /**
                 * @static
                 * @public
                 * @memberof Core.Enums.HttpStatusCode
                 * @constant
                 * @default 202
                 * @type Core.Enums.HttpStatusCode
                 */
                Accepted: 202,
                /**
                 * @static
                 * @public
                 * @memberof Core.Enums.HttpStatusCode
                 * @constant
                 * @default 203
                 * @type Core.Enums.HttpStatusCode
                 */
                NonAuthoritativeInformation: 203,
                /**
                 * @static
                 * @public
                 * @memberof Core.Enums.HttpStatusCode
                 * @constant
                 * @default 204
                 * @type Core.Enums.HttpStatusCode
                 */
                NoContent: 204,
                /**
                 * @static
                 * @public
                 * @memberof Core.Enums.HttpStatusCode
                 * @constant
                 * @default 205
                 * @type Core.Enums.HttpStatusCode
                 */
                ResetContent: 205,
                /**
                 * @static
                 * @public
                 * @memberof Core.Enums.HttpStatusCode
                 * @constant
                 * @default 206
                 * @type Core.Enums.HttpStatusCode
                 */
                PartialContent: 206,
                /**
                 * @static
                 * @public
                 * @memberof Core.Enums.HttpStatusCode
                 * @constant
                 * @default 300
                 * @type Core.Enums.HttpStatusCode
                 */
                MultipleChoices: 300,
                /**
                 * @static
                 * @public
                 * @memberof Core.Enums.HttpStatusCode
                 * @constant
                 * @default 300
                 * @type Core.Enums.HttpStatusCode
                 */
                Ambiguous: 300,
                /**
                 * @static
                 * @public
                 * @memberof Core.Enums.HttpStatusCode
                 * @constant
                 * @default 301
                 * @type Core.Enums.HttpStatusCode
                 */
                MovedPermanently: 301,
                /**
                 * @static
                 * @public
                 * @memberof Core.Enums.HttpStatusCode
                 * @constant
                 * @default 301
                 * @type Core.Enums.HttpStatusCode
                 */
                Moved: 301,
                /**
                 * @static
                 * @public
                 * @memberof Core.Enums.HttpStatusCode
                 * @constant
                 * @default 302
                 * @type Core.Enums.HttpStatusCode
                 */
                Found: 302,
                /**
                 * @static
                 * @public
                 * @memberof Core.Enums.HttpStatusCode
                 * @constant
                 * @default 302
                 * @type Core.Enums.HttpStatusCode
                 */
                Redirect: 302,
                /**
                 * @static
                 * @public
                 * @memberof Core.Enums.HttpStatusCode
                 * @constant
                 * @default 303
                 * @type Core.Enums.HttpStatusCode
                 */
                SeeOther: 303,
                /**
                 * @static
                 * @public
                 * @memberof Core.Enums.HttpStatusCode
                 * @constant
                 * @default 303
                 * @type Core.Enums.HttpStatusCode
                 */
                RedirectMethod: 303,
                /**
                 * @static
                 * @public
                 * @memberof Core.Enums.HttpStatusCode
                 * @constant
                 * @default 304
                 * @type Core.Enums.HttpStatusCode
                 */
                NotModified: 304,
                /**
                 * @static
                 * @public
                 * @memberof Core.Enums.HttpStatusCode
                 * @constant
                 * @default 305
                 * @type Core.Enums.HttpStatusCode
                 */
                UseProxy: 305,
                /**
                 * @static
                 * @public
                 * @memberof Core.Enums.HttpStatusCode
                 * @constant
                 * @default 306
                 * @type Core.Enums.HttpStatusCode
                 */
                Unused: 306,
                /**
                 * @static
                 * @public
                 * @memberof Core.Enums.HttpStatusCode
                 * @constant
                 * @default 307
                 * @type Core.Enums.HttpStatusCode
                 */
                TemporaryRedirect: 307,
                /**
                 * @static
                 * @public
                 * @memberof Core.Enums.HttpStatusCode
                 * @constant
                 * @default 307
                 * @type Core.Enums.HttpStatusCode
                 */
                RedirectKeepVerb: 307,
                /**
                 * @static
                 * @public
                 * @memberof Core.Enums.HttpStatusCode
                 * @constant
                 * @default 400
                 * @type Core.Enums.HttpStatusCode
                 */
                BadRequest: 400,
                /**
                 * @static
                 * @public
                 * @memberof Core.Enums.HttpStatusCode
                 * @constant
                 * @default 401
                 * @type Core.Enums.HttpStatusCode
                 */
                Unauthorized: 401,
                /**
                 * @static
                 * @public
                 * @memberof Core.Enums.HttpStatusCode
                 * @constant
                 * @default 402
                 * @type Core.Enums.HttpStatusCode
                 */
                PaymentRequired: 402,
                /**
                 * @static
                 * @public
                 * @memberof Core.Enums.HttpStatusCode
                 * @constant
                 * @default 403
                 * @type Core.Enums.HttpStatusCode
                 */
                Forbidden: 403,
                /**
                 * @static
                 * @public
                 * @memberof Core.Enums.HttpStatusCode
                 * @constant
                 * @default 404
                 * @type Core.Enums.HttpStatusCode
                 */
                NotFound: 404,
                /**
                 * @static
                 * @public
                 * @memberof Core.Enums.HttpStatusCode
                 * @constant
                 * @default 405
                 * @type Core.Enums.HttpStatusCode
                 */
                MethodNotAllowed: 405,
                /**
                 * @static
                 * @public
                 * @memberof Core.Enums.HttpStatusCode
                 * @constant
                 * @default 406
                 * @type Core.Enums.HttpStatusCode
                 */
                NotAcceptable: 406,
                /**
                 * @static
                 * @public
                 * @memberof Core.Enums.HttpStatusCode
                 * @constant
                 * @default 407
                 * @type Core.Enums.HttpStatusCode
                 */
                ProxyAuthenticationRequired: 407,
                /**
                 * @static
                 * @public
                 * @memberof Core.Enums.HttpStatusCode
                 * @constant
                 * @default 408
                 * @type Core.Enums.HttpStatusCode
                 */
                RequestTimeout: 408,
                /**
                 * @static
                 * @public
                 * @memberof Core.Enums.HttpStatusCode
                 * @constant
                 * @default 409
                 * @type Core.Enums.HttpStatusCode
                 */
                Conflict: 409,
                /**
                 * @static
                 * @public
                 * @memberof Core.Enums.HttpStatusCode
                 * @constant
                 * @default 410
                 * @type Core.Enums.HttpStatusCode
                 */
                Gone: 410,
                /**
                 * @static
                 * @public
                 * @memberof Core.Enums.HttpStatusCode
                 * @constant
                 * @default 411
                 * @type Core.Enums.HttpStatusCode
                 */
                LengthRequired: 411,
                /**
                 * @static
                 * @public
                 * @memberof Core.Enums.HttpStatusCode
                 * @constant
                 * @default 412
                 * @type Core.Enums.HttpStatusCode
                 */
                PreconditionFailed: 412,
                /**
                 * @static
                 * @public
                 * @memberof Core.Enums.HttpStatusCode
                 * @constant
                 * @default 413
                 * @type Core.Enums.HttpStatusCode
                 */
                RequestEntityTooLarge: 413,
                /**
                 * @static
                 * @public
                 * @memberof Core.Enums.HttpStatusCode
                 * @constant
                 * @default 414
                 * @type Core.Enums.HttpStatusCode
                 */
                RequestUriTooLong: 414,
                /**
                 * @static
                 * @public
                 * @memberof Core.Enums.HttpStatusCode
                 * @constant
                 * @default 415
                 * @type Core.Enums.HttpStatusCode
                 */
                UnsupportedMediaType: 415,
                /**
                 * @static
                 * @public
                 * @memberof Core.Enums.HttpStatusCode
                 * @constant
                 * @default 416
                 * @type Core.Enums.HttpStatusCode
                 */
                RequestedRangeNotSatisfiable: 416,
                /**
                 * @static
                 * @public
                 * @memberof Core.Enums.HttpStatusCode
                 * @constant
                 * @default 417
                 * @type Core.Enums.HttpStatusCode
                 */
                ExpectationFailed: 417,
                UpgradeRequired: 426,
                /**
                 * @static
                 * @public
                 * @memberof Core.Enums.HttpStatusCode
                 * @constant
                 * @default 500
                 * @type Core.Enums.HttpStatusCode
                 */
                InternalServerError: 500,
                /**
                 * @static
                 * @public
                 * @memberof Core.Enums.HttpStatusCode
                 * @constant
                 * @default 501
                 * @type Core.Enums.HttpStatusCode
                 */
                NotImplemented: 501,
                /**
                 * @static
                 * @public
                 * @memberof Core.Enums.HttpStatusCode
                 * @constant
                 * @default 502
                 * @type Core.Enums.HttpStatusCode
                 */
                BadGateway: 502,
                /**
                 * @static
                 * @public
                 * @memberof Core.Enums.HttpStatusCode
                 * @constant
                 * @default 503
                 * @type Core.Enums.HttpStatusCode
                 */
                ServiceUnavailable: 503,
                /**
                 * @static
                 * @public
                 * @memberof Core.Enums.HttpStatusCode
                 * @constant
                 * @default 504
                 * @type Core.Enums.HttpStatusCode
                 */
                GatewayTimeout: 504,
                /**
                 * @static
                 * @public
                 * @memberof Core.Enums.HttpStatusCode
                 * @constant
                 * @default 505
                 * @type Core.Enums.HttpStatusCode
                 */
                HttpVersionNotSupported: 505
            }
        }
    });

    Bridge.define("Core.Enums.KeyCodeEnum", {
        $kind: "enum",
        statics: {
            fields: {
                Backspace: 8,
                Tab: 9,
                Enter: 13,
                Shift: 16,
                Ctrl: 17,
                Alt: 18,
                PauseBreak: 19,
                CapsLock: 20,
                Escape: 27,
                PageUp: 33,
                PageDown: 34,
                End: 35,
                Home: 36,
                LeftArrow: 37,
                UpArrow: 38,
                RightArrow: 39,
                DownArrow: 40,
                Insert: 45,
                Delete: 46,
                Zero: 48,
                One: 49,
                Two: 50,
                Three: 51,
                Four: 52,
                Five: 53,
                Six: 54,
                Seven: 55,
                Eight: 56,
                Nine: 57,
                A: 65,
                B: 66,
                C: 67,
                D: 68,
                E: 69,
                F: 70,
                G: 71,
                H: 72,
                I: 73,
                J: 74,
                K: 75,
                L: 76,
                M: 77,
                N: 78,
                O: 79,
                P: 80,
                Q: 81,
                R: 82,
                S: 83,
                T: 84,
                U: 85,
                V: 86,
                W: 87,
                X: 88,
                Y: 89,
                Z: 90,
                LeftWindowKey: 91,
                RightWindowKey: 92,
                SelectKey: 93,
                Numpad0: 96,
                Numpad1: 97,
                Numpad2: 98,
                Numpad3: 99,
                Numpad4: 100,
                Numpad5: 101,
                Numpad6: 102,
                Numpad7: 103,
                Numpad8: 104,
                Numpad9: 105,
                Multiply: 106,
                Add: 107,
                Subtract: 109,
                DecimalPoint: 110,
                Divide: 111,
                F1: 112,
                F2: 113,
                F3: 114,
                F4: 115,
                F5: 116,
                F6: 117,
                F7: 118,
                F8: 119,
                F9: 120,
                F10: 121,
                F11: 122,
                F12: 123,
                NumLock: 144,
                ScrollLock: 145,
                SemiColon: 186,
                EqualSign: 187,
                Comma: 188,
                Dash: 189,
                Period: 190,
                ForwardSlash: 191,
                GraveAccent: 192,
                OpenBracket: 219,
                BackSlash: 220,
                CloseBraket: 221,
                SingleQuote: 222
            }
        }
    });

    Bridge.define("Core.Enums.LogicOperation", {
        $kind: "enum",
        statics: {
            fields: {
                And: 0,
                Or: 1
            }
        }
    });

    Bridge.define("Core.Enums.OrderbyOption", {
        $kind: "enum",
        statics: {
            fields: {
                ASC: 1,
                DESC: 2
            }
        }
    });

    Bridge.define("Core.Enums.PaybackPaymentTypeEnum", {
        $kind: "enum",
        statics: {
            fields: {
                TruckMaintenance: 1,
                AdvPayment: 2
            }
        }
    });

    Bridge.define("Core.Enums.ReceiptStatusEnum", {
        $kind: "enum",
        statics: {
            fields: {
                Approved: 1,
                New: 2,
                Rejected: 3,
                Approving: 4,
                Finished: 5
            }
        }
    });

    Bridge.define("Core.Enums.ResponseApproveEnum", {
        $kind: "enum",
        statics: {
            fields: {
                NonRole: 414,
                NonUser: 415,
                Approved: 416,
                Success: 200,
                Fail: 300
            }
        }
    });

    Bridge.define("Core.Enums.RoleEnum", {
        $kind: "enum",
        statics: {
            fields: {
                Assistant: 1,
                Driver: 2,
                Truck_Coordinator: 20,
                Vendor_Coordination_Truck: 25,
                Vendor_Coordination_Cont: 28,
                Cont_Coordinator: 19,
                Sale_Staff: 4,
                Accountant: 5,
                Director: 6,
                Customer: 7,
                System: 8,
                Sale_Leader: 9,
                Transportation_Manager: 29,
                Accountant_Leader: 11,
                Driver_Cont: 23,
                Driver_Truck: 24,
                Container_Leader: 10,
                Truck_Leader: 18,
                Super_Admin: 40
            }
        }
    });

    Bridge.define("Core.Enums.RoleSelection", {
        $kind: "enum",
        statics: {
            fields: {
                TopFirst: 1,
                BottomFirst: 2
            }
        }
    });

    Bridge.define("Core.Enums.SystemType", {
        $kind: "enum",
        statics: {
            fields: {
                EDO: 1,
                TMS: 2,
                CD: 3,
                FastDemo: 4,
                FastNew: 5,
                FastExsiting: 6
            }
        }
    });

    Bridge.define("Core.Enums.TaskStateEnum", {
        $kind: "enum",
        statics: {
            fields: {
                UnreadStatus: 339,
                Read: 340,
                Processing: 341,
                Proceeded: 342
            }
        }
    });

    Bridge.define("Core.Enums.TextAlign", {
        $kind: "enum",
        statics: {
            fields: {
                center: 0,
                end: 1,
                inherit: 2,
                initial: 3,
                justify: 4,
                left: 5,
                right: 6,
                start: 7,
                unset: 8
            }
        }
    });

    Bridge.define("Core.Enums.VendorTypeEnum", {
        $kind: "enum",
        statics: {
            fields: {
                Customer: 1,
                Vendor: 2,
                Mixed: 3
            }
        }
    });

    Bridge.define("Core.Extensions.AdvOptionExt", {
        statics: {
            fields: {
                OperationToOdata: null
            },
            ctors: {
                init: function () {
                    this.OperationToOdata = function (_o1) {
                            _o1.add(Core.Enums.AdvSearchOperation.Equal, "{0} eq {1}");
                            _o1.add(Core.Enums.AdvSearchOperation.NotEqual, "{0} ne {1}");
                            _o1.add(Core.Enums.AdvSearchOperation.GreaterThan, "{0} gt {1}");
                            _o1.add(Core.Enums.AdvSearchOperation.GreaterThanOrEqual, "{0} ge {1}");
                            _o1.add(Core.Enums.AdvSearchOperation.LessThan, "{0} lt {1}");
                            _o1.add(Core.Enums.AdvSearchOperation.LessThanOrEqual, "{0} le {1}");
                            _o1.add(Core.Enums.AdvSearchOperation.Contains, "contains({0}, {1})");
                            _o1.add(Core.Enums.AdvSearchOperation.NotContains, "contains({0}, {1}) eq false");
                            _o1.add(Core.Enums.AdvSearchOperation.StartWith, "startswith({0}, {1})");
                            _o1.add(Core.Enums.AdvSearchOperation.NotStartWith, "indexof({0}, {1}) ne 0");
                            _o1.add(Core.Enums.AdvSearchOperation.EndWidth, "endswith({0}, {1})");
                            _o1.add(Core.Enums.AdvSearchOperation.NotEndWidth, "endswith({0}, {1}) eq false");
                            _o1.add(Core.Enums.AdvSearchOperation.In, "{0} in ({1})");
                            _o1.add(Core.Enums.AdvSearchOperation.NotIn, "{0} in ({1}) eq false");
                            return _o1;
                        }(new (System.Collections.Generic.Dictionary$2(Core.Enums.AdvSearchOperation,System.String)).ctor());
                }
            }
        }
    });

    Bridge.define("Core.Extensions.BridgeExt", {
        statics: {
            methods: {
                SetComplexPropValue: function (obj, propName, value) {
                    if (obj == null || System.String.isNullOrWhiteSpace(propName)) {
                        return;
                    }

                    var hierarchy = System.String.split(propName, [46].map(function (i) {{ return String.fromCharCode(i); }}));
                    if (hierarchy.length === 0) {
                        return;
                    }

                    if (hierarchy.length === 1) {
                        Core.Extensions.BridgeExt.SetPropValue(obj, propName, value);
                        return;
                    }
                    var leaf = obj;
                    for (var i = 0; i < ((hierarchy.length - 1) | 0); i = (i + 1) | 0) {
                        if (leaf == null) {
                            return;
                        }

                        var key = hierarchy[System.Array.index(i, hierarchy)];
                        leaf = Core.Extensions.BridgeExt.GetPropValue(leaf, key);
                    }
                    if (leaf == null) {
                        return;
                    }

                    Core.Extensions.BridgeExt.SetPropValue(leaf, Bridge.toString(hierarchy[System.Array.index(((hierarchy.length - 1) | 0), hierarchy)]), value);
                },
                CustomFormat: function (date, format) {
                    if (format === void 0) { format = "dd/MM/yyyy"; }
                    if (Bridge.equals(date, null)) {
                        return "";
                    }

                    var dateTime = System.DateTime.parse(date);
                    return System.DateTime.format(dateTime, format);
                },
                CastProp: function (T, obj) {
                    if (obj == null) {
                        return Bridge.getDefaultValue(T);
                    }

                    var res;
                    try {
                        return Bridge.cast(Bridge.unbox(obj, T), T);
                    } catch ($e1) {
                        $e1 = System.Exception.create($e1);
                        res = Bridge.cast(Bridge.unbox(Bridge.createInstance(T), T), T);
                        Core.Extensions.ReflectionExt.CopyPropFrom$1(res, obj);
                        return res;
                    }
                },
                GetPropValue: function (obj, propName) {
                    return obj == null ? null : obj[propName];
                },
                SetPropValue: function (instance, propertyName, value) {
                    var type = Bridge.getType(instance);
                    var prop = Bridge.Reflection.getMembers(type, 16, 284, propertyName);
                    if (prop != null && type != null && (!!prop.s)) {
                        Bridge.Reflection.midel(prop.s, instance).apply(null, (null || []).concat(value));
                    } else if (prop == null && instance != null) {
                        instance[propertyName] = value;
                    }
                },
                /**
                 * @static
                 * @public
                 * @this Core.Extensions.BridgeExt
                 * @memberof Core.Extensions.BridgeExt
                 * @param   {System.Object}          obj         
                 * @param   {string}                 propName
                 * @return  {System.ValueTuple$2}                T1: The object has the complex key <br /> T2: The complex propperty value
                 */
                GetComplexProp: function (obj, propName) {
                    var $t;
                    if (obj == null || System.String.isNullOrWhiteSpace(propName)) {
                        return new (System.ValueTuple$2(System.Boolean,System.Object)).$ctor1(false, null);
                    }

                    var hierarchy = System.String.split(propName, [46].map(function (i) {{ return String.fromCharCode(i); }}));
                    if (hierarchy.length === 0) {
                        return new (System.ValueTuple$2(System.Boolean,System.Object)).$ctor1(false, null);
                    }

                    if (hierarchy.length === 1) {
                        return new (System.ValueTuple$2(System.Boolean,System.Object)).$ctor1(obj.hasOwnProperty(propName) || Bridge.Reflection.getMembers(Bridge.getType(obj), 16, 284, propName) != null, obj[propName]);
                    }

                    var lastField = System.Linq.Enumerable.from(hierarchy, System.String).lastOrDefault(null, null);
                    hierarchy = System.Linq.Enumerable.from(hierarchy, System.String).take(((hierarchy.length - 1) | 0)).ToArray(System.String);
                    var res = obj;
                    $t = Bridge.getEnumerator(hierarchy);
                    try {
                        while ($t.moveNext()) {
                            var key = $t.Current;
                            if (res == null) {
                                return new (System.ValueTuple$2(System.Boolean,System.Object)).$ctor1(false, null);
                            }

                            res = res[key];
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    if (res == null) {
                        return new (System.ValueTuple$2(System.Boolean,System.Object)).$ctor1(false, null);
                    }

                    return new (System.ValueTuple$2(System.Boolean,System.Object)).$ctor1(res.hasOwnProperty(lastField) || Bridge.Reflection.getMembers(Bridge.getType(res), 16, 284, lastField) != null, res[lastField]);
                },
                /**
                 * Get complex property value and type
                 *
                 * @static
                 * @public
                 * @this Core.Extensions.BridgeExt
                 * @memberof Core.Extensions.BridgeExt
                 * @param   {System.Type}      type        
                 * @param   {string}           propName    
                 * @param   {System.Object}    obj
                 * @return  {System.Type}                  T1: The type of the complex property<br /> T2: The complex propperty value
                 */
                GetComplexPropType: function (type, propName, obj) {
                    var $t, $t1;
                    if (obj === void 0) { obj = null; }
                    if (type == null || System.String.isNullOrWhiteSpace(propName)) {
                        return null;
                    }

                    obj = ($t = obj, $t != null ? $t : Bridge.createInstance(type));
                    var hierarchy = System.String.split(propName, [46].map(function (i) {{ return String.fromCharCode(i); }}));
                    if (hierarchy.length === 0) {
                        return null;
                    }

                    if (hierarchy.length === 1) {
                        return Core.Extensions.BridgeExt.GetObjType(propName, obj);
                    }
                    var lastField = System.Linq.Enumerable.from(hierarchy, System.String).lastOrDefault(null, null);
                    hierarchy = System.Linq.Enumerable.from(hierarchy, System.String).take(((hierarchy.length - 1) | 0)).ToArray(System.String);
                    $t1 = Bridge.getEnumerator(hierarchy);
                    try {
                        while ($t1.moveNext()) {
                            var key = $t1.Current;
                            if (obj == null) {
                                return null;
                            }

                            obj = obj[key];
                        }
                    } finally {
                        if (Bridge.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$Dispose();
                        }
                    }
                    if (obj == null) {
                        return null;
                    }

                    return Core.Extensions.BridgeExt.GetObjType(lastField, obj);
                },
                GetObjType: function (propName, obj) {
                    var $t;
                    if (obj.hasOwnProperty(propName)) {
                        var value = Core.Extensions.BridgeExt.GetPropValue(obj, propName);
                        return value != null ? Bridge.getType(value) : null;
                    } else if (Bridge.Reflection.getMembers(Bridge.getType(obj), 16, 284, propName) != null) {
                        return ($t = Bridge.Reflection.getMembers(Bridge.getType(obj), 16, 284, propName)) != null ? $t.rt : null;
                    }

                    return null;
                },
                DistinctBy: function (T, Key, source, keySelector) {
                    if (source == null) {
                        return null;
                    }

                    return System.Linq.Enumerable.from(source, T).groupBy(keySelector).select(function (g) {
                        return g.first();
                    });
                },
                TextWidth: function (text, font) {
                    var $t;
                    var div = document.createElement("div");
                    div.textContent = text;
                    div.style.cssText = System.String.format("position: absolute; float: left; white-space: nowrap; visibility: hidden, font: {0}", [font]);
                    document.body.appendChild(div);
                    var css = window.getComputedStyle(div, "width");
                    return ($t = Core.Extensions.Utils.TryParse(System.Decimal, System.String.replaceAll(css.width, "px", "")), $t != null ? $t : System.Decimal(0));
                }
            }
        }
    });

    Bridge.define("Core.Extensions.DateTimeExt", {
        statics: {
            methods: {
                ToISOFormat: function (date) {
                    return System.DateTime.format(date, "yyyy-MM-ddTHH:mm:ssz");
                },
                DateConverter: function (str) {
                    var datestr = "";
                    var date = new Date(str);
                    var mnth = ("0" + (date.getMonth()+1)).slice(-2);
                    var day  = ("0" + date.getDate()).slice(-2);
                    var hours1  = ("0" + date.getHours()).slice(-2);
                    var minutes = ("0" + date.getMinutes()).slice(-2);
                    var seconds  = ("0" + date.getSeconds()).slice(-2);
                    var year = date.getFullYear();
                    datestr= `${year}/${mnth}/${day} ${hours1}:${minutes}:${seconds}`
                    return datestr;
                },
                ToOdataFormat: function (date) {
                    return System.String.concat("cast(", Core.Extensions.DateTimeExt.ToISOFormat(date), ",Edm.DateTimeOffset)");
                },
                ToDayHourMinute: function (span) {
                    var days = Bridge.Int.clip32(span.getTotalDays());
                    var minute = (Bridge.Int.clip32(span.getTotalMinutes()) - Bridge.Int.mul(Bridge.Int.mul(days, 24), 60)) | 0;
                    var leftMinute = minute % 60;
                    var hour = (Bridge.Int.div(minute, 60)) | 0;
                    return new (System.ValueTuple$3(System.Int32,System.Int32,System.Int32)).$ctor1(days, hour, leftMinute);
                },
                DateString: function (yourDate) {
                    var SECOND = 1;
                    var MINUTE = 60;
                    var HOUR = 3600;
                    var DAY = 86400;
                    var MONTH = 2592000;

                    var ts = new System.TimeSpan(System.DateTime.getTicks(System.DateTime.getNow()).sub(System.DateTime.getTicks(yourDate)));
                    var delta = Math.abs(ts.getTotalSeconds());

                    if (delta < 60) {
                        return ts.getSeconds() === 1 ? "one second ago" : ts.getSeconds() + " seconds ago";
                    }

                    if (delta < 120) {
                        return "a minute ago";
                    }

                    if (delta < 2700) {
                        return ts.getMinutes() + " minutes ago";
                    }

                    if (delta < 5400) {
                        return "an hour ago";
                    }

                    if (delta < 86400) {
                        return ts.getHours() + " hours ago";
                    }

                    if (delta < 172800) {
                        return "yesterday";
                    }

                    if (delta < 2592000) {
                        return ts.getDays() + " days ago";
                    }

                    if (delta < 31104000) {
                        var months = System.Convert.toInt32(Bridge.box(Math.floor(ts.getDays() / 30), System.Double, System.Double.format, System.Double.getHashCode));
                        return months <= 1 ? "one month ago" : months + " months ago";
                    } else {
                        var years = System.Convert.toInt32(Bridge.box(Math.floor(ts.getDays() / 365), System.Double, System.Double.format, System.Double.getHashCode));
                        return years <= 1 ? "one year ago" : years + " years ago";
                    }
                },
                ToUserFormat: function (date) {
                    return System.DateTime.format(date, "yyyy/MM/dd HH:mm");
                },
                TryParseDateTime: function (date) {
                    if (Core.Extensions.StringExt.IsNullOrWhiteSpace(date)) {
                        return null;
                    }
                    var res = { };

                    var parsed = System.DateTime.tryParse(date, null, res);
                    if (!parsed) {
                        return null;
                    }

                    return res.v;
                },
                GetBusinessDays: function (start) {
                    var end = System.DateTime.getDate(System.DateTime.getNow());
                    if (System.DateTime.getDayOfWeek(start) === System.DayOfWeek.Saturday) {
                        start = System.DateTime.addDays(start, 2);
                    } else if (System.DateTime.getDayOfWeek(start) === System.DayOfWeek.Sunday) {
                        start = System.DateTime.addDays(start, 1);
                    }

                    if (System.DateTime.getDayOfWeek(end) === System.DayOfWeek.Saturday) {
                        end = System.DateTime.addDays(end, -1);
                    } else if (System.DateTime.getDayOfWeek(end) === System.DayOfWeek.Sunday) {
                        end = System.DateTime.addDays(end, -2);
                    }

                    var diff = Bridge.Int.clip32(System.DateTime.subdd(end, System.DateTime.getDate(start)).getTotalDays());

                    var result = (Bridge.Int.mul(((Bridge.Int.div(diff, 7)) | 0), 5) + diff % 7) | 0;

                    if (System.DateTime.getDayOfWeek(end) < System.DateTime.getDayOfWeek(start)) {
                        return ((result - 2) | 0);
                    } else {
                        return result;
                    }
                },
                GetDays: function (start, end) {
                    var result = Bridge.Int.clip32(System.DateTime.subdd(end, start).getTotalDays());
                    return result;
                },
                TotalMonth: function (start, end) {
                    return ((((((Bridge.Int.mul(System.DateTime.getYear(end), 12) + System.DateTime.getMonth(end)) | 0) - Bridge.Int.mul(System.DateTime.getYear(start), 12)) | 0) - System.DateTime.getMonth(start)) | 0);
                },
                FirstDayOfMonth: function (dt) {
                    return System.DateTime.create(System.DateTime.getYear(dt), System.DateTime.getMonth(dt), 1);
                },
                LastDayOfMonth: function (dt) {
                    return System.DateTime.addDays(System.DateTime.addMonths(Core.Extensions.DateTimeExt.FirstDayOfMonth(dt), 1), -1);
                },
                FirstDayOfNextMonth: function (dt) {
                    return System.DateTime.addMonths(Core.Extensions.DateTimeExt.FirstDayOfMonth(dt), 1);
                }
            }
        }
    });

    Bridge.define("Core.Extensions.EventExt", {
        statics: {
            methods: {
                Top: function (e) {
                    return System.Nullable.getValue(Bridge.cast(Bridge.unbox(e.clientY, System.Single), System.Single));
                },
                Left: function (e) {
                    return System.Nullable.getValue(Bridge.cast(Bridge.unbox(e.clientX, System.Single), System.Single));
                },
                KeyCode: function (e) {
                    return System.Nullable.getValue(Bridge.cast(Bridge.unbox(e.keyCode, System.Int32), System.Int32));
                },
                Key: function (e) {
                    var res = { v : new Core.Enums.KeyCodeEnum() };
                    var parsed = System.Enum.tryParse(Core.Enums.KeyCodeEnum, Bridge.toString(e.keyCode).toUpperCase(), res);
                    return parsed ? Bridge.cast(res.v, System.Int32, true) : null;
                },
                KeyCodeEnum: function (e) {
                    return System.Nullable.getValue(Bridge.cast(Bridge.unbox(e.keyCode, Core.Enums.KeyCodeEnum), System.Int32));
                },
                ShiftKey: function (e) {
                    return System.Nullable.getValue(Bridge.cast(Bridge.unbox(e.shiftKey, System.Boolean), System.Boolean));
                },
                /**
                 * Detect if the user press Ctrl or Command key while the event occurs
                 *
                 * @static
                 * @public
                 * @this Core.Extensions.EventExt
                 * @memberof Core.Extensions.EventExt
                 * @param   {Event}      e
                 * @return  {boolean}
                 */
                CtrlOrMetaKey: function (e) {
                    return System.Nullable.getValue(Bridge.cast(Bridge.unbox(e.ctrlKey, System.Boolean), System.Boolean)) || System.Nullable.getValue(Bridge.cast(Bridge.unbox(e.metaKey, System.Boolean), System.Boolean));
                },
                AltKey: function (e) {
                    return System.Nullable.getValue(Bridge.cast(Bridge.unbox(e.altKey, System.Boolean), System.Boolean));
                }
            }
        }
    });

    Bridge.define("Core.Extensions.ExcelExt", {
        statics: {
            methods: {
                ExportTableToExcel: function (tableId, filename, table) {
                    if (table === void 0) { table = null; }
                    var dataType = "application/vnd.ms-excel";
                    var extension = ".xls";
                    let base64 = function(s) {
                        return window.btoa(unescape(encodeURIComponent(s)))
                    };
                    let template = '<html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:x="urn:schemas-microsoft-com:office:excel" xmlns="http://www.w3.org/TR/REC-html40"><head><!--[if gte mso 9]><xml><x:ExcelWorkbook><x:ExcelWorksheets><x:ExcelWorksheet><x:Name>{worksheet}</x:Name><x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions></x:ExcelWorksheet></x:ExcelWorksheets></x:ExcelWorkbook></xml><![endif]--></head><body><table>{table}</table></body></html>';
                    let render = function(template, content) {
                        return template.replace(/{(\w+)}/g, function(m, p) { return content[p]; });
                    };

                    let tableElement = table || document.getElementById(tableId);

                    let tableExcel = render(template, {
                        worksheet: filename,
                        table: tableElement.innerHTML
                    });

                    filename = filename + extension;

                    if (navigator.msSaveOrOpenBlob)
                    {
                        let blob = new Blob(
                            [ '\ufeff', tableExcel ],
                            { type: dataType }
                        );

                        navigator.msSaveOrOpenBlob(blob, filename);
                    } else {
                        let downloadLink = document.createElement("a");

                        document.body.appendChild(downloadLink);

                        downloadLink.href = 'data:' + dataType + ';base64,' + base64(tableExcel);

                        downloadLink.download = filename;

                        downloadLink.click();
                    }
                }
            }
        }
    });

    Bridge.define("Core.Extensions.HtmlElementExtension", {
        statics: {
            methods: {
                HasClass: function (node, className) {
                    if (node == null) {
                        throw new System.InvalidOperationException.$ctor1(System.String.format("{0} is null", ["node"]));
                    }

                    if (!Core.Extensions.StringExt.HasAnyChar(className)) {
                        return false;
                    }

                    var ele = Bridge.as(node, Element);
                    return System.String.contains(ele.className,className);
                },
                ReplaceClass: function (node, oldClass, newClass) {
                    if (System.String.isNullOrEmpty(oldClass)) {
                        return;
                    }

                    var element = Bridge.as(node, Element);
                    element.className = System.String.replaceAll(element.className, oldClass, newClass).trim().replace(new RegExp("\\s+"), " ");
                },
                AddClass: function (node, className) {
                    if (node == null || System.String.isNullOrEmpty(className) || Core.Extensions.HtmlElementExtension.HasClass(node, className)) {
                        return;
                    }

                    var element = Bridge.as(node, Element);
                    element.className = ((element.className || "") + " " + (className || "")).trim();
                },
                Closest: function (node, selector) {
                    if (node == null || System.String.isNullOrEmpty(selector)) {
                        return null;
                    }
                    var func = node.closest;
                    return Bridge.cast(func.call(node, selector), HTMLElement);
                },
                RemoveClass: function (node, className) {
                    if (node == null || System.String.isNullOrEmpty(className)) {
                        return;
                    }

                    Core.Extensions.HtmlElementExtension.ReplaceClass(node, className, "");
                },
                ToggleClass: function (node, className) {
                    if (node == null || System.String.isNullOrEmpty(className)) {
                        return;
                    }

                    var hasClass = System.String.contains((Bridge.as(node, HTMLElement)).className,className);
                    if (hasClass) {
                        Core.Extensions.HtmlElementExtension.RemoveClass(node, className);
                    } else {
                        Core.Extensions.HtmlElementExtension.AddClass(node, className);
                    }
                },
                Show: function (ele) {
                    ele.style.display = "";
                },
                GetComputedStyle: function (ele) {
                    return window.getComputedStyle(ele);
                },
                Hide: function (ele) {
                    ele.style.display = "none";
                },
                Hidden: function (ele) {
                    if (ele == null) {
                        return true;
                    }

                    var x = ele.getBoundingClientRect();
                    var style = window.getComputedStyle(ele);
                    return Bridge.referenceEquals(Bridge.toString(style.display), "none") || x.bottom === 0 && x.top === 0 && x.width === 0 && x.height === 0;
                },
                OutOfViewport: function (elem) {
                    var $t;
                    // Get element's bounding
                    var bounding = elem.getBoundingClientRect();

                    // Check if it's out of the viewport on each side
                    var res = ($t = new Core.Extensions.OutOfViewPort(), $t.Top = bounding.top < 0, $t.Left = bounding.left < 0, $t.Bottom = bounding.bottom > window.innerHeight, $t.Right = bounding.right > window.innerWidth, $t);
                    res.Any = res.Top || res.Left || res.Bottom || res.Right;
                    res.All = res.Top && res.Left && res.Bottom && res.Right;

                    return res;
                },
                FilterElement: function (ele, predicate, visited) {
                    return new (Bridge.GeneratorEnumerable$1(HTMLElement))(Bridge.fn.bind(this, function (ele, predicate, visited) {
                        var $step = 0,
                            $jumpFromFinally,
                            $returnValue,
                            $t,
                            child,
                            $t1,
                            match,
                            $async_e;

                        var $enumerator = new (Bridge.GeneratorEnumerator$1(HTMLElement))(Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    switch ($step) {
                                        case 0: {
                                            if (visited === void 0) { visited = null; }
                                                if (ele == null) {
                                                    $step = 1;
                                                    continue;
                                                } 
                                                $step = 2;
                                                continue;
                                        }
                                        case 1: {
                                            return false;
                                        }
                                        case 2: {
                                            if (visited == null) {
                                                    visited = new (System.Collections.Generic.HashSet$1(HTMLElement)).ctor();
                                                }
                                                if (visited.contains(ele)) {
                                                    $step = 3;
                                                    continue;
                                                } 
                                                $step = 4;
                                                continue;
                                        }
                                        case 3: {
                                            return false;
                                        }
                                        case 4: {
                                            visited.add(ele);
                                                if (Bridge.staticEquals(predicate, null) || predicate(ele)) {
                                                    $step = 5;
                                                    continue;
                                                } 
                                                $step = 7;
                                                continue;
                                        }
                                        case 5: {
                                            $enumerator.current = ele;
                                                $step = 6;
                                                return true;
                                        }
                                        case 6: {
                                            $step = 7;
                                            continue;
                                        }
                                        case 7: {
                                            $t = Bridge.getEnumerator(ele.children, "getEnumerator");
                                                $step = 8;
                                                continue;
                                        }
                                        case 8: {
                                            if ($t.moveNext()) {
                                                    child = $t.Current;
                                                    $step = 9;
                                                    continue;
                                                }
                                            $step = 14;
                                            continue;
                                        }
                                        case 9: {
                                            $t1 = Bridge.getEnumerator(Core.Extensions.HtmlElementExtension.FilterElement(child, predicate, visited), HTMLElement);
                                                $step = 10;
                                                continue;
                                        }
                                        case 10: {
                                            if ($t1.moveNext()) {
                                                    match = $t1.Current;
                                                    $step = 11;
                                                    continue;
                                                }
                                            $step = 13;
                                            continue;
                                        }
                                        case 11: {
                                            $enumerator.current = match;
                                                $step = 12;
                                                return true;
                                        }
                                        case 12: {
                                            $step = 10;
                                            continue;
                                        }
                                        case 13: {
                                            $step = 8;
                                            continue;
                                        }
                                        case 14: {

                                        }
                                        default: {
                                            return false;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                throw $async_e;
                            }
                        }));
                        return $enumerator;
                    }, arguments));
                }
            }
        }
    });

    Bridge.define("Core.Extensions.IEnumerableExtensions", {
        statics: {
            methods: {
                GetSourceByType: function (sources, type) {
                    if (sources == null) {
                        return null;
                    }

                    return System.Linq.Enumerable.from(sources, System.Collections.Generic.IEnumerable$1(System.Object)).firstOrDefault(function (x) {
                            var $t;
                            return Bridge.referenceEquals(($t = Bridge.Reflection.getGenericArguments(Bridge.getType(x)))[System.Array.index(0, $t)], type);
                        }, null);
                },
                ForEach: function (T, source, action) {
                    var $t;
                    if (Core.Extensions.IEnumerableExtensions.Nothing(T, source) || Bridge.staticEquals(action, null)) {
                        return source;
                    }

                    $t = Bridge.getEnumerator(source, T);
                    try {
                        while ($t.moveNext()) {
                            var item = $t.Current;
                            action(item);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    return source;
                },
                ForEach$1: function (T, source, action) {
                    var $t;
                    if (Core.Extensions.IEnumerableExtensions.Nothing(T, source) || Bridge.staticEquals(action, null)) {
                        return source;
                    }

                    var index = 0;
                    $t = Bridge.getEnumerator(source, T);
                    try {
                        while ($t.moveNext()) {
                            var item = $t.Current;
                            action(item, index);
                            index = (index + 1) | 0;
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    return source;
                },
                ForEachAsync: function (T, source, action) {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        tasks, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            if (Core.Extensions.IEnumerableExtensions.Nothing(T, source) || Bridge.staticEquals(action, null)) {
                                                $tcs.setResult(source);
                                                return;
                                            }

                                            tasks = System.Linq.Enumerable.from(source, T).select(action);
                                            $task1 = System.Threading.Tasks.Task.whenAll(tasks);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            $tcs.setResult(source);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                },
                Nothing: function (T, source) {
                    return source == null || !System.Linq.Enumerable.from(source, T).any();
                },
                HasElementAndAll: function (T, source, predicate) {
                    if (source == null || !System.Linq.Enumerable.from(source, T).any()) {
                        return false;
                    }

                    return System.Linq.Enumerable.from(source, T).all(predicate);
                },
                FindItemAndIndex: function (T, source, predicate) {
                    var $t;
                    var index = -1;
                    $t = Bridge.getEnumerator(source, T);
                    try {
                        while ($t.moveNext()) {
                            var item = $t.Current;
                            index = (index + 1) | 0;
                            if (predicate(item)) {
                                return new (System.ValueTuple$2(T,System.Int32)).$ctor1(item, index);
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    return new (System.ValueTuple$2(T,System.Int32)).$ctor1(Bridge.getDefaultValue(T), -1);
                },
                IndexOf: function (T, source, predicate) {
                    var $t;
                    var index = -1;
                    $t = Bridge.getEnumerator(source, T);
                    try {
                        while ($t.moveNext()) {
                            var item = $t.Current;
                            index = (index + 1) | 0;
                            if (predicate(item)) {
                                return index;
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    return -1;
                },
                HasElement: function (T, source) {
                    return source != null && System.Linq.Enumerable.from(source, T).any();
                },
                Except: function (T, source, ele) {
                    if (source == null) {
                        return source;
                    }

                    return System.Linq.Enumerable.from(source, T).where(function (x) {
                            return !Bridge.equals(x, ele);
                        });
                },
                ToEntity: function (T) {
                    var $t, $t1;
                    var enumType = T;
                    var values = System.Enum.getValues(enumType);
                    var res = new (System.Collections.Generic.List$1(System.Object)).ctor();
                    $t = Bridge.getEnumerator(values);
                    try {
                        while ($t.moveNext()) {
                            var value = $t.Current;
                            var val = System.Enum.parse(enumType, Bridge.toString(value));
                            var desc = Bridge.toString(val);
                            var fi = Bridge.Reflection.getMembers(enumType, 4, 284, desc);
                            var attributes = Bridge.as((fi != null ? System.Attribute.getCustomAttributes(fi, System.ComponentModel.DescriptionAttribute, false) : null), System.Array.type(System.ComponentModel.DescriptionAttribute));
                            if (Core.Extensions.IEnumerableExtensions.HasElement(System.ComponentModel.DescriptionAttribute, attributes)) {
                                desc = System.Linq.Enumerable.from(attributes, System.ComponentModel.DescriptionAttribute).first().Description;
                            }
                            res.add(($t1 = new Core.Models.Entity(), $t1.Id = System.Nullable.getValue(Bridge.cast(Bridge.unbox(value, System.Int32), System.Int32)), $t1.Name = Bridge.toString(val), $t1.Description = desc, $t1.Active = true, $t1));
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    return res;
                },
                Combine: function (T, source, combinator) {
                    if (combinator === void 0) { combinator = ","; }
                    if (combinator == null || source == null) {
                        return "";
                    }
                    return Bridge.toArray(source).join(combinator);
                },
                Combine$1: function (T, K, source, mapper, combinator) {
                    if (combinator === void 0) { combinator = ","; }
                    if (Bridge.staticEquals(mapper, null) || source == null) {
                        return "";
                    }
                    return Core.Extensions.IEnumerableExtensions.Combine(K, System.Linq.Enumerable.from(source, T).select(mapper), combinator);
                },
                All: function (source) {
                    return System.Linq.Enumerable.from(source, System.Boolean).all(function (x) {
                            return x;
                        });
                },
                Any: function (source) {
                    return System.Linq.Enumerable.from(source, System.Boolean).any(function (x) {
                            return x;
                        });
                },
                WhereNotNull$1: function (T, source) {
                    if (source == null) {
                        return null;
                    }

                    return System.Linq.Enumerable.from(source, System.Nullable$1(T)).where(function (x) {
                            return System.Nullable.hasValue(x);
                        }).select(function (g) {
                        return System.Nullable.getValue(g);
                    });
                },
                WhereNotNull: function (T, source) {
                    if (source == null) {
                        return null;
                    }

                    return System.Linq.Enumerable.from(source, T).where(function (x) {
                            return x != null;
                        });
                }
            }
        }
    });

    Bridge.define("Core.Extensions.NumberExtensions", {
        statics: {
            methods: {
                RoundUp: function (value, decimals) {
                    return System.Decimal.toDecimalPlaces(value, decimals, 4);
                },
                ToRealDecimal: function (value) {
                    return System.Nullable.getValue(Bridge.cast(Bridge.unbox(System.Convert.changeType(value, System.Decimal), System.Decimal), System.Decimal));
                },
                NumberToText: function (inputNumber) {
                    var suffix = true;
                    var unitNumbers = System.Array.init(["kh\u00f4ng", "m\u1ed9t", "hai", "ba", "b\u1ed1n", "n\u0103m", "s\u00e1u", "b\u1ea3y", "t\u00e1m", "ch\u00edn"], System.String);
                    var placeValues = System.Array.init(["", "ngh\u00ecn", "tri\u1ec7u", "t\u1ef7"], System.String);
                    var isNegative = false;
                    var sNumber = Bridge.Int.format(inputNumber, "#");
                    var number = System.Convert.toDouble(sNumber);

                    if (number < 0) {
                        number = -number;
                        sNumber = System.Double.format(number);
                        isNegative = true;
                    }

                    var ones, tens, hundreds;
                    var positionDigit = sNumber.length;
                    var result = " ";

                    if (positionDigit === 0) {
                        result = (unitNumbers[System.Array.index(0, unitNumbers)] || "") + (result || "");
                    } else {
                        var placeValue = 0;

                        while (positionDigit > 0) {
                            tens = (hundreds = -1);
                            ones = System.Convert.toInt32(sNumber.substr(((positionDigit - 1) | 0), 1));
                            positionDigit = (positionDigit - 1) | 0;
                            if (positionDigit > 0) {
                                tens = System.Convert.toInt32(sNumber.substr(((positionDigit - 1) | 0), 1));
                                positionDigit = (positionDigit - 1) | 0;
                                if (positionDigit > 0) {
                                    hundreds = System.Convert.toInt32(sNumber.substr(((positionDigit - 1) | 0), 1));
                                    positionDigit = (positionDigit - 1) | 0;
                                }
                            }

                            if ((ones > 0) || (tens > 0) || (hundreds > 0) || (placeValue === 3)) {
                                result = (placeValues[System.Array.index(placeValue, placeValues)] || "") + (result || "");
                            }

                            placeValue = (placeValue + 1) | 0;
                            if (placeValue > 3) {
                                placeValue = 1;
                            }

                            if ((ones === 1) && (tens > 1)) {
                                result = "m\u1ed9t " + (result || "");
                            } else {
                                if ((ones === 5) && (tens > 0)) {
                                    result = "l\u0103m " + (result || "");
                                } else if (ones > 0) {
                                    result = (unitNumbers[System.Array.index(ones, unitNumbers)] || "") + " " + (result || "");
                                }
                            }
                            if (tens < 0) {
                                break;
                            } else {
                                if ((tens === 0) && (ones > 0)) {
                                    result = "l\u1ebb " + (result || "");
                                }

                                if (tens === 1) {
                                    result = "m\u01b0\u1eddi " + (result || "");
                                }

                                if (tens > 1) {
                                    result = (unitNumbers[System.Array.index(tens, unitNumbers)] || "") + " m\u01b0\u01a1i " + (result || "");
                                }
                            }
                            if (hundreds < 0) {
                                break;
                            } else {
                                if ((hundreds > 0) || (tens > 0) || (ones > 0)) {
                                    result = (unitNumbers[System.Array.index(hundreds, unitNumbers)] || "") + " tr\u0103m " + (result || "");
                                }
                            }
                            result = " " + (result || "");
                        }
                    }
                    result = result.trim();
                    if (isNegative) {
                        result = "\u00c2m " + (result || "");
                    }

                    return (result || "") + ((suffix ? " \u0111\u1ed3ng ch\u1eb5n" : "") || "");
                }
            }
        }
    });

    Bridge.define("Core.Extensions.OdataExt", {
        statics: {
            fields: {
                TopKeyword: null,
                FilterKeyword: null,
                OrderByKeyword: null,
                QuestionMark: null
            },
            ctors: {
                init: function () {
                    this.TopKeyword = "$top=";
                    this.FilterKeyword = "$filter=";
                    this.OrderByKeyword = "$orderby=";
                    this.QuestionMark = "?";
                }
            },
            methods: {
                RemoveClause: function (dataSource, clauseType, removeKeyword) {
                    if (clauseType === void 0) { clauseType = "$filter="; }
                    if (removeKeyword === void 0) { removeKeyword = false; }
                    if (Core.Extensions.StringExt.IsNullOrWhiteSpace(dataSource)) {
                        return "";
                    }

                    var noClauseQuery = dataSource;
                    var clauseIndex = dataSource.lastIndexOf(clauseType);

                    if (clauseIndex >= 0) {
                        var fromFilter = dataSource.substr(clauseIndex);
                        var endClauseIndex = System.String.indexOf(fromFilter, "&");
                        endClauseIndex = endClauseIndex === -1 ? fromFilter.length : endClauseIndex;
                        noClauseQuery = (dataSource.substr(0, clauseIndex) || "") + (fromFilter.substr(endClauseIndex, fromFilter.length) || "");
                    }
                    var endChar = noClauseQuery.charCodeAt(((noClauseQuery.length - 1) | 0));
                    if (noClauseQuery.length > 0 && endChar === 38 || endChar === 63) {
                        noClauseQuery = noClauseQuery.substr(0, ((noClauseQuery.length - 1) | 0));
                    }
                    return removeKeyword ? System.String.replaceAll(noClauseQuery, clauseType, "") : noClauseQuery;
                },
                GetClausePart: function (dataSource, clauseKeyword) {
                    if (clauseKeyword === void 0) { clauseKeyword = "$filter="; }
                    var clauseIndex = dataSource.lastIndexOf(clauseKeyword);
                    if (clauseIndex >= 0) {
                        var clause = dataSource.substr(clauseIndex);
                        var endClauseIndex = System.String.indexOf(clause, "&");
                        endClauseIndex = endClauseIndex === -1 ? clause.length : endClauseIndex;
                        return clause.substr(clauseKeyword.length, ((endClauseIndex - clauseKeyword.length) | 0)).trim();
                    }
                    return "";
                },
                GetOrderByPart: function (dataSourceFilter) {
                    var filterIndex = dataSourceFilter.lastIndexOf(Core.Extensions.OdataExt.OrderByKeyword);
                    if (filterIndex >= 0) {
                        var filter = dataSourceFilter.substr(filterIndex);
                        var endFilterIndex = System.String.indexOf(filter, "&");
                        endFilterIndex = endFilterIndex === -1 ? filter.length : endFilterIndex;
                        return filter.substr(Core.Extensions.OdataExt.OrderByKeyword.length, ((endFilterIndex - Core.Extensions.OdataExt.OrderByKeyword.length) | 0)).trim();
                    }
                    return "";
                },
                AppendClause: function (datasource, clauseValue, clauseKeyword) {
                    if (clauseKeyword === void 0) { clauseKeyword = "$filter="; }
                    if (Core.Extensions.StringExt.IsNullOrWhiteSpace(clauseValue)) {
                        return datasource;
                    }

                    if (Core.Extensions.StringExt.IsNullOrWhiteSpace(datasource)) {
                        datasource = "";
                    }

                    if (!System.String.contains(datasource,Core.Extensions.OdataExt.QuestionMark)) {
                        datasource = (datasource || "") + (Core.Extensions.OdataExt.QuestionMark || "");
                    }

                    var originalFilter = Core.Extensions.OdataExt.GetClausePart(datasource, clauseKeyword);
                    var index;
                    if (Core.Extensions.StringExt.IsNullOrEmpty(originalFilter)) {
                        datasource = (datasource || "") + ((System.String.indexOf(datasource, "?") < 0 ? clauseKeyword : "&" + (clauseKeyword || "")) || "");
                        index = datasource.length;
                    } else {
                        index = (System.String.indexOf(datasource, originalFilter) + originalFilter.length) | 0;
                    }
                    var finalStatement = (datasource.substr(0, index) || "") + (clauseValue || "") + (datasource.substr(index) || "");
                    return finalStatement;
                },
                ApplyClause: function (dataSource, clauseValue, clauseKeyword) {
                    if (clauseKeyword === void 0) { clauseKeyword = "$filter="; }
                    var statement = Core.Extensions.OdataExt.RemoveClause(dataSource, clauseKeyword, true);
                    return Core.Extensions.OdataExt.AppendClause(statement, clauseValue, clauseKeyword);
                }
            }
        }
    });

    Bridge.define("Core.Extensions.OutOfViewPort", {
        props: {
            Top: false,
            Left: false,
            Right: false,
            Bottom: false,
            Any: false,
            All: false
        }
    });

    Bridge.define("Core.Extensions.ReflectionExt", {
        statics: {
            fields: {
                IdField: null,
                StatusIdField: null,
                FreightStateId: null
            },
            ctors: {
                init: function () {
                    this.IdField = "Id";
                    this.StatusIdField = "StatusId";
                    this.FreightStateId = "FreightStateId";
                }
            },
            methods: {
                IsSimple: function (type) {
                    var $t;
                    if (type == null) {
                        throw new System.ArgumentNullException.$ctor1(System.String.format("{0} is null", ["type"]));
                    }

                    if (Bridge.Reflection.isGenericType(type) && Bridge.referenceEquals(Bridge.Reflection.getGenericTypeDefinition(type), System.Nullable$1)) {
                        return Core.Extensions.ReflectionExt.IsSimple(($t = Bridge.Reflection.getGenericArguments(type))[System.Array.index(0, $t)]);
                    }
                    return Bridge.Reflection.isPrimitive(type) || Bridge.Reflection.isEnum(type) || Bridge.equals(type, System.String) || Bridge.equals(type, System.DateTime) || Bridge.equals(type, System.DateTimeOffset) || Bridge.equals(type, System.TimeSpan) || Bridge.equals(type, System.Decimal);
                },
                IsDate: function (type) {
                    return Bridge.equals(type, System.DateTime) || Bridge.equals(type, System.Nullable$1(System.DateTime)) || Bridge.equals(type, System.DateTimeOffset) || Bridge.equals(type, System.Nullable$1(System.DateTimeOffset));
                },
                IsNumber: function (type) {
                    var $t;
                    if (Bridge.Reflection.isGenericType(type) && Bridge.referenceEquals(Bridge.Reflection.getGenericTypeDefinition(type), System.Nullable$1)) {
                        return Core.Extensions.ReflectionExt.IsNumber(($t = Bridge.Reflection.getGenericArguments(type))[System.Array.index(0, $t)]);
                    }
                    return Bridge.referenceEquals(type, System.SByte) || Bridge.referenceEquals(type, System.Byte) || Bridge.referenceEquals(type, System.Int16) || Bridge.referenceEquals(type, System.UInt16) || Bridge.referenceEquals(type, System.Int32) || Bridge.referenceEquals(type, System.UInt32) || Bridge.referenceEquals(type, System.Int32) || Bridge.referenceEquals(type, System.UInt64) || Bridge.referenceEquals(type, System.Single) || Bridge.referenceEquals(type, System.Double) || Bridge.referenceEquals(type, System.Decimal);
                },
                IsDecimal: function (type) {
                    return Bridge.referenceEquals(type, System.Decimal) || Bridge.referenceEquals(type, System.Nullable$1(System.Decimal));
                },
                IsInt32: function (type) {
                    return Bridge.referenceEquals(type, System.Int32) || Bridge.referenceEquals(type, System.Nullable$1(System.Int32));
                },
                IsBool: function (type) {
                    return Bridge.referenceEquals(type, System.Boolean) || Bridge.referenceEquals(type, System.Nullable$1(System.Boolean));
                },
                CopyPropFrom$1: function (target, source, ignoreFields) {
                    if (ignoreFields === void 0) { ignoreFields = []; }
                    Core.Extensions.ReflectionExt.CopyPropFromInternal(target, source, new (System.Collections.Generic.HashSet$1(System.Int32)).ctor(), 0, 0, ignoreFields);
                },
                CopyPropFrom: function (target, source, maxLevel, ignoreFields) {
                    if (maxLevel === void 0) { maxLevel = 0; }
                    if (ignoreFields === void 0) { ignoreFields = []; }
                    Core.Extensions.ReflectionExt.CopyPropFromInternal(target, source, new (System.Collections.Generic.HashSet$1(System.Int32)).ctor(), 0, maxLevel, ignoreFields);
                },
                CopyPropFromInternal: function (target, source, visited, currentLevel, maxLevel, ignoreFields) {
                    var $t;
                    if (currentLevel === void 0) { currentLevel = 0; }
                    if (maxLevel === void 0) { maxLevel = 0; }
                    if (ignoreFields === void 0) { ignoreFields = []; }
                    var shouldProcessNested = maxLevel === 0 || currentLevel < maxLevel;
                    if (source == null || target == null || !shouldProcessNested) {
                        return;
                    }

                    var targetType = Bridge.getType(target);
                    if (Core.Extensions.ReflectionExt.IsSimple(targetType)) {
                        return;
                    }

                    var hash = Bridge.getHashCode(source);
                    if (visited.contains(hash)) {
                        return;
                    }

                    visited.add(hash);
                    if (Bridge.Reflection.isAssignableFrom(System.Collections.IEnumerable, targetType)) {
                        var sourceEnumerator = Bridge.getEnumerator((Bridge.as(source, System.Collections.IEnumerable)));
                        var targetEnumerator = Bridge.getEnumerator((Bridge.as(target, System.Collections.IEnumerable)));
                        while (sourceEnumerator.System$Collections$IEnumerator$moveNext() && targetEnumerator.System$Collections$IEnumerator$moveNext()) {
                            Core.Extensions.ReflectionExt.CopyPropFromInternal(targetEnumerator.System$Collections$IEnumerator$Current, sourceEnumerator.System$Collections$IEnumerator$Current, visited, ((currentLevel + 1) | 0), maxLevel, ignoreFields);
                        }
                        return;
                    }
                    var targetProps = System.Linq.Enumerable.from(Bridge.Reflection.getMembers(targetType, 16, 28), System.Reflection.PropertyInfo).where(function (x) {
                            return (!!x.g) && (!!x.s);
                        });
                    $t = Bridge.getEnumerator(targetProps);
                    try {
                        while ($t.moveNext()) {
                            var targetProp = $t.Current;
                            if (ignoreFields != null && System.Array.contains(ignoreFields, targetProp.n, System.String)) {
                                continue;
                            }

                            var value = Core.Extensions.BridgeExt.GetPropValue(source, targetProp.n);
                            if (Core.Extensions.ReflectionExt.IsDecimal(targetProp.rt)) {
                                if (value != null && !Core.Extensions.ReflectionExt.IsDecimal(Bridge.getType(value))) {
                                    value = System.Convert.toDecimal(value);
                                }

                                Core.Extensions.BridgeExt.SetPropValue(target, targetProp.n, value);
                            } else if (Core.Extensions.ReflectionExt.IsSimple(targetProp.rt)) {
                                Core.Extensions.BridgeExt.SetPropValue(target, targetProp.n, value);
                            } else {
                                Core.Extensions.ReflectionExt.CopyPropFromInternal(Core.Extensions.BridgeExt.GetPropValue(target, targetProp.n), value, visited, ((currentLevel + 1) | 0), maxLevel, ignoreFields);
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                },
                ClearReferences: function (obj, clearInnerEnum, visited) {
                    var $t;
                    if (clearInnerEnum === void 0) { clearInnerEnum = false; }
                    if (visited === void 0) { visited = null; }
                    if (visited == null) {
                        visited = new (System.Collections.Generic.HashSet$1(System.Object)).ctor();
                    }
                    if (obj == null || visited.contains(obj) || Core.Extensions.ReflectionExt.IsSimple(Bridge.getType(obj))) {
                        return;
                    }
                    visited.add(obj);
                    var list;
                    if (((list = Bridge.as(obj, System.Collections.IEnumerable))) != null) {
                        $t = Bridge.getEnumerator(list);
                        try {
                            while ($t.moveNext()) {
                                var item = $t.Current;
                                Core.Extensions.ReflectionExt.ClearReferences(item, clearInnerEnum, visited);
                            }
                        } finally {
                            if (Bridge.is($t, System.IDisposable)) {
                                $t.System$IDisposable$Dispose();
                            }
                        }
                    } else {
                        Core.Extensions.ReflectionExt.ClearRefInternal(obj, clearInnerEnum, visited);
                    }
                },
                ClearRefInternal: function (obj, clearInnerEnum, visited) {
                    var $t, $t1;
                    $t = Bridge.getEnumerator(System.Linq.Enumerable.from(Bridge.Reflection.getMembers(Bridge.getType(obj), 16, 28), System.Reflection.PropertyInfo).where(function (x) {
                            return (!!x.s) && (!!x.s);
                        }));
                    try {
                        while ($t.moveNext()) {
                            var prop = $t.Current;
                            var enumerable = Bridge.as(Bridge.Reflection.midel(prop.g, Bridge.unbox(obj))(), System.Collections.IEnumerable);
                            if (!Core.Extensions.ReflectionExt.IsSimple(prop.rt) && enumerable == null) {
                                Bridge.Reflection.midel(prop.s, obj)(null);
                            }

                            if (!Bridge.referenceEquals(prop.rt, System.String) && enumerable != null) {
                                if (clearInnerEnum) {
                                    Bridge.Reflection.midel(prop.s, obj)(null);
                                    continue;
                                }
                                $t1 = Bridge.getEnumerator(enumerable);
                                try {
                                    while ($t1.moveNext()) {
                                        var item = $t1.Current;
                                        Core.Extensions.ReflectionExt.ClearReferences(item, clearInnerEnum, visited);
                                    }
                                } finally {
                                    if (Bridge.is($t1, System.IDisposable)) {
                                        $t1.System$IDisposable$Dispose();
                                    }
                                }
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                },
                GetEnumDescription: function (value, enumType) {
                    if (enumType === void 0) { enumType = null; }
                    enumType = enumType || Bridge.getType(value);
                    var fi = Bridge.Reflection.getMembers(enumType, 4, 284, System.Enum.toString(Bridge.getType(value), value));
                    if (fi == null) {
                        return "";
                    }

                    var attributes = Bridge.as(System.Attribute.getCustomAttributes(fi, System.ComponentModel.DescriptionAttribute, false), System.Array.type(System.ComponentModel.DescriptionAttribute));
                    if (attributes != null && System.Linq.Enumerable.from(attributes, System.ComponentModel.DescriptionAttribute).any()) {
                        return System.Linq.Enumerable.from(attributes, System.ComponentModel.DescriptionAttribute).first().Description;
                    }
                    return System.Enum.toString(Bridge.getType(value), value);
                },
                DeepCopy: function (obj) {
                    var $t, $t1, $t2;
                    if (obj == null) {
                        return null;
                    }

                    var type = Bridge.getType(obj);

                    if (Core.Extensions.ReflectionExt.IsSimple(type)) {
                        return obj;
                    } else if (Bridge.Reflection.isAssignableFrom(System.Collections.IEnumerable, type)) {
                        var copied = Bridge.createInstance(type);
                        var childrenType = ($t = Bridge.Reflection.getGenericArguments(type))[System.Array.index(0, $t)];
                        var enumerator = Bridge.getEnumerator((Bridge.as(obj, System.Collections.IEnumerable)));
                        var addMethod = Bridge.Reflection.getMembers(Bridge.getType(copied), 8, 16 | 256, "Add");
                        while (enumerator.System$Collections$IEnumerator$moveNext()) {
                            ($t1 = Bridge.Reflection.makeGenericMethod(addMethod, [childrenType])) != null ? Bridge.Reflection.midel($t1, Bridge.unbox(copied)).apply(null, Bridge.unbox(System.Array.init([Core.Extensions.ReflectionExt.DeepCopy(enumerator.System$Collections$IEnumerator$Current)], System.Object))) : null;
                        }
                        return copied;
                    } else if (Bridge.Reflection.isClass(type)) {
                        var toret = Bridge.createInstance(Bridge.getType(obj));
                        var fields = Bridge.Reflection.getMembers(type, 4, 52);
                        $t2 = Bridge.getEnumerator(fields);
                        try {
                            while ($t2.moveNext()) {
                                var field = $t2.Current;
                                var fieldValue = Bridge.Reflection.fieldAccess(field, Bridge.unbox(obj));
                                if (fieldValue == null) {
                                    continue;
                                }

                                Bridge.Reflection.fieldAccess(field, Bridge.unbox(toret), Bridge.unbox(Core.Extensions.ReflectionExt.DeepCopy(fieldValue)));
                            }
                        } finally {
                            if (Bridge.is($t2, System.IDisposable)) {
                                $t2.System$IDisposable$Dispose();
                            }
                        }
                        return toret;
                    }
                    return null;
                },
                CopyRowWithoutId: function (T, selectedRows) {
                    var copiedRows = System.Linq.Enumerable.from(selectedRows, T).select(function (x) {
                            var res = Bridge.cast(Bridge.unbox(Core.Extensions.ReflectionExt.DeepCopy(x), T), T);
                            Core.Extensions.BridgeExt.SetPropValue(res, Core.Extensions.ReflectionExt.IdField, Bridge.box(0, System.Int32));
                            Core.Extensions.ReflectionExt.ProcessObjectRecursive(res, function (obj) {
                                var id = Bridge.as(Core.Extensions.BridgeExt.GetPropValue(obj, Core.Extensions.ReflectionExt.IdField), System.Int32, true);
                                if (System.Nullable.hasValue(id) && System.Nullable.getValue(id) > 0) {
                                    Core.Extensions.BridgeExt.SetPropValue(obj, Core.Extensions.ReflectionExt.IdField, Bridge.box(0, System.Int32));
                                }

                                var status = Bridge.as(Core.Extensions.BridgeExt.GetPropValue(obj, Core.Extensions.ReflectionExt.StatusIdField), System.Int32, true);
                                if (System.Nullable.hasValue(status)) {
                                    Core.Extensions.BridgeExt.SetPropValue(obj, Core.Extensions.ReflectionExt.StatusIdField, Bridge.box(Core.Enums.ApprovalStatusEnum.New, System.Int32));
                                }
                                var freightState = Bridge.as(Core.Extensions.BridgeExt.GetPropValue(obj, Core.Extensions.ReflectionExt.FreightStateId), System.Int32, true);
                                if (System.Nullable.hasValue(status)) {
                                    Core.Extensions.BridgeExt.SetPropValue(obj, Core.Extensions.ReflectionExt.FreightStateId, Bridge.box(1, System.Int32));
                                }
                            });
                            Core.Extensions.ReflectionExt.ClearReferences(res);
                            return res;
                        }).toList(T);
                    return copiedRows;
                },
                ProcessObjectRecursive: function (obj, action, visited) {
                    var $t;
                    if (visited === void 0) { visited = null; }
                    if (obj == null || Core.Extensions.ReflectionExt.IsSimple(Bridge.getType(obj))) {
                        return;
                    }

                    if (visited == null) {
                        visited = new (System.Collections.Generic.HashSet$1(System.Object)).ctor();
                    }

                    if (visited.contains(obj)) {
                        return;
                    }

                    visited.add(obj);
                    var list;
                    if (((list = Bridge.as(obj, System.Collections.IEnumerable))) != null) {
                        try {
                            var enumerator = Bridge.getEnumerator(list);
                            while (enumerator.System$Collections$IEnumerator$moveNext()) {
                                Core.Extensions.ReflectionExt.ProcessObjectRecursive(enumerator.System$Collections$IEnumerator$Current, action, visited);
                            }
                        } catch ($e1) {
                            $e1 = System.Exception.create($e1);
                        }
                        return;
                    }
                    action(obj);
                    var childrenList = System.Linq.Enumerable.from(Bridge.Reflection.getMembers(Bridge.getType(obj), 16, 28), System.Reflection.PropertyInfo).where(function (x) {
                            return !Core.Extensions.ReflectionExt.IsSimple(x.rt) && Bridge.Reflection.isAssignableFrom(System.Collections.IEnumerable, x.rt);
                        });
                    $t = Bridge.getEnumerator(childrenList);
                    try {
                        while ($t.moveNext()) {
                            var child = $t.Current;
                            Core.Extensions.ReflectionExt.ProcessObjectRecursive(Bridge.Reflection.midel(child.g, Bridge.unbox(obj))(), action, visited);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                },
                ToDictionaryDistinct: function (T, Key, source, keySelector) {
                    if (source == null) {
                        return null;
                    }

                    return System.Linq.Enumerable.from(source, T).groupBy(keySelector).select(function (g) {
                        return g.first();
                    }).toDictionary(keySelector, null, Key, T);
                }
            }
        }
    });

    Bridge.define("Core.Extensions.StringExt", {
        statics: {
            fields: {
                trimmer: null
            },
            ctors: {
                init: function () {
                    this.trimmer = new System.Text.RegularExpressions.Regex.ctor("\\s\\s+");
                }
            },
            methods: {
                IsNullOrEmpty: function (value) {
                    return System.String.isNullOrEmpty(value);
                },
                IsNullOrWhiteSpace: function (value) {
                    return System.String.isNullOrWhiteSpace(value);
                },
                HasAnyChar: function (value) {
                    return value != null && !System.String.isNullOrEmpty(value);
                },
                HasNonSpaceChar: function (value) {
                    return value != null && !System.String.isNullOrWhiteSpace(value);
                },
                CountChar: function (word, countableLetter) {
                    var $t;
                    var count = 0;
                    $t = Bridge.getEnumerator(word);
                    try {
                        while ($t.moveNext()) {
                            var c = $t.Current;
                            if (countableLetter === c) {
                                count = (count + 1) | 0;
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    return count;
                },
                IsMatch: function (text, regText) {
                    var regEx = new System.Text.RegularExpressions.Regex.ctor(regText);
                    return regEx.isMatch(text);
                },
                TrimAndRemoveWhiteSpace: function (text) {
                    if (text == null) {
                        return null;
                    }

                    return Core.Extensions.StringExt.trimmer.replace(text.trim(), " ");
                },
                ToLower: function (val) {
                    return System.Boolean.toString(val).toLowerCase();
                },
                SubStrIndex: function (value, startIndex) {
                    if (value == null) {
                        return value;
                    }
                    if (startIndex < 0 || startIndex > ((value.length - 1) | 0)) {
                        startIndex = 0;
                    }
                    return value.substr(startIndex, ((value.length - startIndex) | 0));
                },
                SubStrIndex$1: function (value, startIndex, endIndex) {
                    if (value == null) {
                        return value;
                    }
                    if (startIndex < 0 || startIndex > ((value.length - 1) | 0)) {
                        startIndex = 0;
                    }
                    if (endIndex < 0 || endIndex > ((value.length - 1) | 0)) {
                        endIndex = (value.length - 1) | 0;
                    }
                    return value.substr(startIndex, ((endIndex - startIndex) | 0));
                }
            }
        }
    });

    Bridge.define("Core.Extensions.Toast", {
        statics: {
            methods: {
                Create: function (options) {
                    Core.Components.Renderer.IText(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.MVVM.Html.Take(document.body).Div, "toast"), options.ClassName), options.Message, options.Params);
                    var toast = Core.MVVM.Html.Context;

                    window.setTimeout(function () {
                        toast.remove();
                    }, options.Timeout);
                },
                Success: function (message, timeout, parameters) {
                    var $t;
                    if (timeout === void 0) { timeout = 2500; }
                    if (parameters === void 0) { parameters = []; }
                    Core.Extensions.Toast.Create(($t = new Core.Extensions.ToastOptions(), $t.ClassName = "success", $t.Timeout = timeout, $t.Message = message, $t.Params = parameters, $t));
                },
                Warning: function (message) {
                    var $t;
                    Core.Extensions.Toast.Create(($t = new Core.Extensions.ToastOptions(), $t.ClassName = "warning", $t.Timeout = 2500, $t.Message = message, $t));
                },
                Small: function (message, timeout) {
                    var $t;
                    if (timeout === void 0) { timeout = 2500; }
                    Core.Extensions.Toast.Create(($t = new Core.Extensions.ToastOptions(), $t.ClassName = "sm-tran", $t.Timeout = timeout, $t.Message = message, $t));
                }
            }
        }
    });

    Bridge.define("Core.Extensions.ToastOptions", {
        props: {
            Timeout: 0,
            ClassName: null,
            Message: null,
            Params: null
        }
    });

    Bridge.define("Core.Extensions.Utils", {
        statics: {
            fields: {
                SystemId: 0,
                TenantField: null,
                Pixel: null,
                FeatureField: null,
                QuestionMark: null,
                Amp: null,
                ApplicationJson: null,
                Authorization: null,
                SelfVendorId: 0,
                AutoSaveReason: null,
                IdField: null,
                NewLine: null,
                Indent: null,
                Dot: null,
                Comma: null,
                Semicolon: null,
                Space: null,
                GOOGLE_MAP: null,
                GOOGLE_MAP_PLACES: null,
                GOOGLE_MAP_GEOMETRY: null,
                GOOGLE_MAP_WEEKLY: null,
                GOOGLE_MAP_GEO_REQUEST: null,
                SpecialChar: null,
                ReverseSpecialChar: null,
                NullFormatHandler: null,
                NotFoundHandler: null,
                EmptyFormat: null
            },
            ctors: {
                init: function () {
                    this.SystemId = 1;
                    this.TenantField = "t";
                    this.Pixel = "px";
                    this.FeatureField = "f";
                    this.QuestionMark = "?";
                    this.Amp = "&";
                    this.ApplicationJson = "application/json";
                    this.Authorization = "Authorization";
                    this.SelfVendorId = 65;
                    this.AutoSaveReason = "T\u1ef1 \u0111\u1ed9ng c\u1eadp nh\u1eadt";
                    this.IdField = "Id";
                    this.NewLine = "\r\n";
                    this.Indent = "\t";
                    this.Dot = ".";
                    this.Comma = ",";
                    this.Semicolon = ";";
                    this.Space = " ";
                    this.GOOGLE_MAP = "https://maps.googleapis.com/maps/api/js?key=AIzaSyCr_2PaKJplCyvwN4q78lBkX3UBpfZ_HsY";
                    this.GOOGLE_MAP_PLACES = "https://maps.googleapis.com/maps/api/js?key=AIzaSyBfVrTUFatsZTyqaCKwRzbj09DD72VxSwc&libraries=places";
                    this.GOOGLE_MAP_GEOMETRY = "https://maps.googleapis.com/maps/api/js?key=AIzaSyBfVrTUFatsZTyqaCKwRzbj09DD72VxSwc&libraries=geometry";
                    this.GOOGLE_MAP_WEEKLY = "https://maps.googleapis.com/maps/api/js?key=AIzaSyBfVrTUFatsZTyqaCKwRzbj09DD72VxSwc&libraries=&v=weekly";
                    this.GOOGLE_MAP_GEO_REQUEST = "https://maps.googleapis.com/maps/api/geocode/json?key=AIzaSyBfVrTUFatsZTyqaCKwRzbj09DD72VxSwc";
                    this.SpecialChar = function (_o1) {
                            _o1.add(43, "%2B");
                            _o1.add(47, "%2F");
                            _o1.add(63, "%3F");
                            _o1.add(37, "%25");
                            _o1.add(35, "%23");
                            _o1.add(38, "%26");
                            return _o1;
                        }(new (System.Collections.Generic.Dictionary$2(System.Char,System.String)).ctor());
                    this.ReverseSpecialChar = System.Linq.Enumerable.from(Core.Extensions.Utils.SpecialChar, System.Collections.Generic.KeyValuePair$2(System.Char,System.String)).toDictionary(function (x) {
                            return x.value;
                        }, function (x) {
                            return x.key;
                        }, System.String, System.Char);
                    this.NullFormatHandler = function (x) {
                        return "null";
                    };
                    this.NotFoundHandler = function (x) {
                        return "{" + (x || "") + "}";
                    };
                    this.EmptyFormat = function (x) {
                        return "";
                    };
                }
            },
            methods: {
                EncodeSpecialChar: function (str) {
                    if (str == null) {
                        return null;
                    }

                    var arr = System.String.toCharArray(str, 0, str.length);
                    var res = new System.Text.StringBuilder();
                    for (var i = 0; i < arr.length; i = (i + 1) | 0) {
                        if (Core.Extensions.Utils.SpecialChar.containsKey(arr[System.Array.index(i, arr)])) {
                            res.append(Core.Extensions.Utils.SpecialChar.getItem(arr[System.Array.index(i, arr)]));
                        } else {
                            res.append(String.fromCharCode(arr[System.Array.index(i, arr)]));
                        }
                    }
                    return res.toString();
                },
                GetUrlParam: function (key, origin) {
                    var $t;
                    if (key === void 0) { key = "f"; }
                    if (origin === void 0) { origin = null; }
                    var search = Core.Extensions.Utils.GetSearchParams(($t = origin, $t != null ? $t : window.location.href));
                    return search.get(key);
                },
                GetSearchParams: function (href) {
                    var $t;
                    href = ($t = href, $t != null ? $t : window.location.href);
                    if (!System.String.contains(href,"http")) {
                        href = System.IO.Path.Combine([window.location.origin, href]);
                    }
                    var search = null;
                    search = new URL(href).searchParams;
                    return search;
                },
                IsNullable: function (T, entityType, fieldName, obj) {
                    var type = Core.Extensions.BridgeExt.GetComplexPropType(entityType, fieldName, obj);
                    return type == null || Bridge.referenceEquals(type, System.Nullable$1(T));
                },
                DecodeSpecialChar: function (str) {
                    if (str == null) {
                        return null;
                    }

                    var arr = System.String.toCharArray(str, 0, str.length);
                    var res = new System.Text.StringBuilder();
                    for (var i = 0; i < arr.length; i = (i + 1) | 0) {
                        if (arr[System.Array.index(i, arr)] === 37 && ((i + 3) | 0) < arr.length && Core.Extensions.Utils.ReverseSpecialChar.containsKey(str.substr(i, 3))) {
                            res.append(String.fromCharCode(Core.Extensions.Utils.ReverseSpecialChar.getItem(str.substr(i, 3))));
                            i = (i + 2) | 0;
                        } else {
                            res.append(String.fromCharCode(arr[System.Array.index(i, arr)]));
                        }
                    }
                    return res.toString();
                },
                GetComplexPropValue: function (obj, propName) {
                    var $t;
                    if (obj == null || System.String.isNullOrWhiteSpace(propName)) {
                        return null;
                    }

                    var hierarchy = System.String.split(propName, [46].map(function (i) {{ return String.fromCharCode(i); }}));
                    var res = obj;
                    $t = Bridge.getEnumerator(hierarchy);
                    try {
                        while ($t.moveNext()) {
                            var key = $t.Current;
                            if (res == null) {
                                return null;
                            }

                            res = Core.Extensions.BridgeExt.GetPropValue(res, key);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    return res;
                },
                FormatEntity$1: function (format, source) {
                    if (!Core.Extensions.StringExt.HasAnyChar(format)) {
                        return "";
                    }

                    if (source == null) {
                        return format;
                    }

                    return Core.Extensions.Utils.FormatEntity(format, null, source);
                },
                FormatEntity: function (format, provider, source, nullHandler, notFoundHandler) {
                    if (nullHandler === void 0) { nullHandler = null; }
                    if (notFoundHandler === void 0) { notFoundHandler = null; }
                    if (format == null) {
                        return null;
                    }

                    if (source == null) {
                        return format;
                    }

                    if (Bridge.staticEquals(nullHandler, null)) {
                        nullHandler = Core.Extensions.Utils.NullFormatHandler;
                    }

                    if (Bridge.staticEquals(notFoundHandler, null)) {
                        notFoundHandler = Core.Extensions.Utils.NotFoundHandler;
                    }

                    var formatted = new System.Text.StringBuilder();
                    var index = 0;
                    var isInGroup = false;
                    var beforeColon = false;
                    var field = new System.Text.StringBuilder();
                    var objList = new (System.Collections.Generic.List$1(System.Object)).ctor();
                    for (var i = 0; i < format.length; i = (i + 1) | 0) {
                        var ch = format.charCodeAt(i);
                        switch (ch) {
                            case 123: 
                                isInGroup = true;
                                beforeColon = true;
                                formatted.append(String.fromCharCode(ch) + (Bridge.toString(index) || ""));
                                break;
                            case 58: 
                                if (isInGroup && !beforeColon) {
                                    formatted.append(String.fromCharCode(ch));
                                } else if (isInGroup) {
                                    beforeColon = false;
                                    formatted.append(String.fromCharCode(ch));
                                    Core.Extensions.Utils.GetValues(source, nullHandler, notFoundHandler, field.toString(), objList);
                                    field.clear();
                                } else {
                                    formatted.append(String.fromCharCode(ch));
                                }
                                break;
                            case 125: 
                                if (isInGroup) {
                                    isInGroup = false;
                                    formatted.append(String.fromCharCode(ch));
                                    index = (index + 1) | 0;
                                    Core.Extensions.Utils.GetValues(source, nullHandler, notFoundHandler, field.toString(), objList);
                                    field.clear();
                                }
                                break;
                            default: 
                                if (isInGroup && beforeColon) {
                                    field.append(String.fromCharCode(ch));
                                } else {
                                    formatted.append(String.fromCharCode(ch));
                                }
                                break;
                        }
                    }
                    return System.String.formatProvider.apply(System.String, [provider, formatted.toString()].concat(objList.ToArray()));
                },
                GetValues: function (source, nullHandler, notFoundHandler, field, objList) {
                    if (Core.Extensions.StringExt.IsNullOrEmpty(field)) {
                        return;
                    }
                    var hasKey = { };
                    var value = { };
                    Bridge.Deconstruct(Core.Extensions.BridgeExt.GetComplexProp(source, field).$clone(), hasKey, value);
                    if (value.v == null && hasKey.v) {
                        value.v = nullHandler(field);
                    } else if (value.v == null && !hasKey.v) {
                        value.v = notFoundHandler(field);
                    }

                    objList.add(Bridge.referenceEquals(field, "0") ? source : value.v);
                },
                GenerateRandomToken: function (maxLength) {
                    if (maxLength === void 0) { maxLength = 32; }
                    var builder = new System.Text.StringBuilder();
                    var random = new System.Random.ctor();
                    var ch;
                    for (var i = 0; System.Nullable.lt(i, maxLength); i = (i + 1) | 0) {
                        ch = System.Convert.toChar(System.Convert.toInt32(Bridge.box(Math.floor(26 * random.NextDouble() + 65), System.Double, System.Double.format, System.Double.getHashCode)), null, 9);
                        builder.append(String.fromCharCode(ch));
                    }
                    return builder.toString();
                },
                CheckDataPath: function (path, parentId) {
                    return System.String.contains(path,"\\" + parentId + "\\");
                },
                UniqueNegativeId: function (data) {
                    return ((-Math.abs(Bridge.getHashCode(data))) | 0);
                },
                GetCellText: function (header, cellData, row, refData, server, emptyRow) {
                    if (emptyRow === void 0) { emptyRow = false; }
                    return Core.Extensions.Utils.DecodeSpecialChar(Core.Extensions.Utils.GetCellTextInternal(header, cellData, row, refData, server, emptyRow));
                },
                GetCellTextInternal: function (header, cellData, row, refData, server, emptyRow) {
                    var $t, $t1;
                    if (emptyRow === void 0) { emptyRow = false; }
                    var isRef = Core.Extensions.IEnumerableExtensions.HasElement(System.Object, header.LocalData) || System.Nullable.hasValue(header.ReferenceId) || header.Reference != null && Core.Extensions.StringExt.HasAnyChar(header.Reference.Name);
                    if (emptyRow) {
                        return "";
                    }
                    var cellInt;
                    if (Bridge.referenceEquals(header.FieldName, Core.Extensions.Utils.IdField) && cellData != null && ((cellInt = Bridge.is(cellData, System.Int32) ? System.Nullable.getValue(Bridge.cast(Bridge.unbox(cellData, System.Int32), System.Int32)) : null)) != null && cellInt <= 0) {
                        return "";
                    }
                    if ((!isRef || !server) && Core.Extensions.StringExt.HasAnyChar(header.FormatEntity)) {
                        var fn = { };
                        if (Core.Extensions.Utils.IsFunction(header.FormatEntity, fn)) {
                            return Bridge.toString(fn.v.call(Bridge.unbox(row), Bridge.unbox(row)));
                        }
                        return Core.Extensions.Utils.GetFormattedRow(header.FormatEntity, row);
                    } else if (cellData == null) {
                        return ($t = header.PlainText, $t != null ? $t : "");
                    } else if (Bridge.is(cellData, System.DateTime)) {
                        return System.String.format(($t1 = header.FormatData, $t1 != null ? $t1 : "{0:dd/MM/yyyy}"), [Bridge.box(Bridge.as(cellData, System.DateTime, true), System.DateTime, System.Nullable.toStringFn(System.DateTime.format), System.Nullable.getHashCode)]);
                    } else if (isRef) {
                        var source = header.LocalData || (refData != null ? System.Collections.Generic.CollectionExtensions.GetValueOrDefault(System.String, System.Collections.Generic.List$1(System.Object), refData, header.RefName) : null);
                        var found = source != null ? System.Linq.Enumerable.from(source, System.Object).firstOrDefault(function (x) {
                                return Core.Extensions.Utils.CompareIdField(x, cellData);
                            }, null) : null;
                        if (found == null) {
                            return ""; // Should find data source here if not found
                        }
                        if (Core.Extensions.StringExt.HasAnyChar(header.FormatData)) {
                            return Core.Extensions.Utils.FormatEntity(header.FormatData, null, found, Core.Extensions.Utils.EmptyFormat, Core.Extensions.Utils.EmptyFormat);
                        } else {
                            System.Console.WriteLine(System.String.format("Format of {0} is null", [header.FieldName]));
                            throw new System.InvalidOperationException.$ctor1(System.String.format("Format of {0} is null", [header.FieldName]));
                        }
                    } else if (Core.Extensions.StringExt.HasAnyChar(header.FormatData)) {
                        return System.String.format(header.FormatData, [cellData]);
                    } else {
                        return Bridge.toString(cellData);
                    }
                },
                CompareIdField: function (entity, cellData) {
                    var idVal = Core.Extensions.BridgeExt.GetPropValue(entity, Core.Extensions.Utils.IdField);
                    var idLong;
                    var idInt;
                    return System.Nullable.liftne("ne", ((idLong = Bridge.is(idVal, System.Int64) ? System.Nullable.getValue(Bridge.cast(Bridge.unbox(idVal, System.Int64), System.Int64)) : null)), System.Int64.lift(null)) && idLong.equals(System.Nullable.getValue(Bridge.cast(Bridge.unbox(cellData, System.Int64), System.Int64))) || ((idInt = Bridge.is(idVal, System.Int32) ? System.Nullable.getValue(Bridge.cast(Bridge.unbox(idVal, System.Int32), System.Int32)) : null)) != null && idInt === System.Nullable.getValue(Bridge.cast(Bridge.unbox(cellData, System.Int32), System.Int32));
                },
                GetFormattedRow: function (exp, row) {
                    var $t;
                    var func = { };
                    var isFunc = Core.Extensions.Utils.IsFunction(exp, func);
                    if (!isFunc) {
                        return Core.Extensions.Utils.FormatEntity(exp, null, row, Core.Extensions.Utils.EmptyFormat, Core.Extensions.Utils.EmptyFormat);
                    }
                    return ($t = func.v.call(null, Bridge.unbox(row))) != null ? Bridge.toString($t) : null;
                },
                IsFunction: function (exp, obj) {
                    obj.v = null;
                    if (Core.Extensions.StringExt.IsNullOrEmpty(exp) || !System.String.contains(exp,"=>")) {
                        return false;
                    }
                    try {
                        obj.v = eval(exp);
                        if (obj.v != null && Bridge.hasValue(obj.v)) {
                            return true;
                        }
                    } catch ($e1) {
                        $e1 = System.Exception.create($e1);
                        return false;
                    }
                    return obj.v != null;
                },
                MapToComponent: function (header) {
                    var res = new Core.Models.Component();
                    Core.Extensions.ReflectionExt.CopyPropFrom$1(res, header);
                    res.Label = header.ShortDesc;
                    res.FormatData = header.FormatCell;
                    res.FormatEntity = header.FormatRow;
                    res.DataSourceFilter = header.DataSource;
                    res.LocalHeader = header.LocalHeader;
                    res.LocalData = header.LocalData;
                    if (!Core.Extensions.StringExt.IsNullOrEmpty(header.Query)) {
                        res.LocalData = System.Linq.Enumerable.from(Newtonsoft.Json.JsonConvert.DeserializeObject(header.Query, System.Collections.Generic.List$1(Core.Models.Entity))).select(function (x) { return Bridge.cast(x, System.Object); }).toList(System.Object);
                    }
                    return res;
                },
                LastDayOfMonth: function (time) {
                    var $t;
                    if (time === void 0) { time = null; }

                    var current = ($t = time, $t != null ? $t : System.DateTime.getNow());
                    return System.DateTime.create(System.DateTime.getYear(current), System.DateTime.getMonth(current), System.DateTime.getDaysInMonth(System.DateTime.getYear(current), System.DateTime.getMonth(current)));
                },
                TryParseInt: function (value) {
                    var res = { };
                    var parsed = System.Int32.tryParse(value, res);
                    if (parsed) {
                        return res.v;
                    }

                    return null;
                },
                TryParseBool: function (value) {
                    var res = { };
                    var parsed = System.Boolean.tryParse(value, res);
                    if (parsed) {
                        return res.v;
                    }

                    return null;
                },
                TryParseDecimal: function (value) {
                    if (Core.Extensions.StringExt.IsNullOrWhiteSpace(value)) {
                        return System.Decimal.lift(null);
                    }
                    var res = { };

                    var parsed = System.Decimal.tryParse(value, null, res);
                    if (parsed) {
                        return res.v;
                    }

                    return System.Decimal.lift(null);
                },
                TryParse: function (T, value) {
                    if (Core.Extensions.StringExt.IsNullOrWhiteSpace(value)) {
                        return null;
                    }

                    var type = T;
                    if (Bridge.Reflection.isEnum(type)) {
                        var t = { };
                        var parsed = System.Enum.tryParse(T, value, t);
                        return parsed ? t.v : null;
                    } else if (Bridge.referenceEquals(type, System.Int32) || Bridge.referenceEquals(type, System.Nullable$1(System.Int32))) {
                        return Bridge.as(System.Convert.toInt32(value), T, true);
                    } else if (Bridge.referenceEquals(type, System.Int64) || Bridge.referenceEquals(type, System.Nullable$1(System.Int64))) {
                        return Bridge.as(System.Convert.toInt64(value), T, true);
                    } else if (Bridge.referenceEquals(type, System.Int16) || Bridge.referenceEquals(type, System.Nullable$1(System.Int16))) {
                        return Bridge.as(System.Convert.toInt16(value), T, true);
                    } else if (Bridge.referenceEquals(type, System.Boolean) || Bridge.referenceEquals(type, System.Nullable$1(System.Boolean))) {
                        return Bridge.as(System.Convert.toBoolean(value), T, true);
                    } else if (Bridge.referenceEquals(type, System.TimeSpan) || Bridge.referenceEquals(type, System.Nullable$1(System.TimeSpan))) {
                        var res = { };
                        var parsed1 = System.TimeSpan.tryParse(value, null, res);
                        return parsed1 ? Bridge.as(res.v, T, true) : null;
                    } else if (Bridge.referenceEquals(type, System.DateTime) || Bridge.referenceEquals(type, System.Nullable$1(System.DateTime))) {
                        var res1 = { };
                        var parsed2 = System.DateTime.tryParse(value, null, res1);
                        return parsed2 ? Bridge.as(res1.v, T, true) : null;
                    } else if (Bridge.referenceEquals(type, System.DateTimeOffset) || Bridge.referenceEquals(type, System.Nullable$1(System.DateTimeOffset))) {
                        var res2 = { v : new System.DateTimeOffset() };
                        var parsed3 = System.DateTimeOffset.TryParse(value, res2);
                        return parsed3 ? Bridge.as(res2.v, T, true) : null;
                    } else if (Bridge.referenceEquals(type, System.Byte) || Bridge.referenceEquals(type, System.Nullable$1(System.Byte))) {
                        return Bridge.as(System.Convert.toByte(value), T, true);
                    } else if (Bridge.referenceEquals(type, System.Char) || Bridge.referenceEquals(type, System.Nullable$1(System.Char))) {
                        return Bridge.as(System.Convert.toChar(value, null, 18), T, true);
                    } else if (Bridge.referenceEquals(type, System.Decimal) || Bridge.referenceEquals(type, System.Nullable$1(System.Decimal))) {
                        return Bridge.as(System.Convert.toDecimal(value), T, true);
                    } else if (Bridge.referenceEquals(type, System.Double) || Bridge.referenceEquals(type, System.Nullable$1(System.Double))) {
                        return Bridge.as(System.Convert.toDouble(value), T, true);
                    } else if (Bridge.referenceEquals(type, System.Single) || Bridge.referenceEquals(type, System.Nullable$1(System.Single))) {
                        var res3 = { };
                        var parsed4 = System.Single.tryParse(value, null, res3);
                        return parsed4 ? Bridge.as(res3.v, T, true) : null;
                    }
                    return null;
                },
                ChangeType: function (value, type) {
                    if (Core.Extensions.StringExt.IsNullOrWhiteSpace(value)) {
                        return null;
                    }

                    if (Bridge.referenceEquals(type, System.Int32) || Bridge.referenceEquals(type, System.Nullable$1(System.Int32))) {
                        var res = { };
                        var parsed = System.Int32.tryParse(value, res);
                        return Bridge.box(parsed ? res.v : (Bridge.referenceEquals(type, System.Int32) ? 0 : null), System.Int32, System.Nullable.toString, System.Nullable.getHashCode);
                    } else if (Bridge.referenceEquals(type, System.Int64) || Bridge.referenceEquals(type, System.Nullable$1(System.Int64))) {
                        var res1 = { };
                        var parsed1 = System.Int64.tryParse(value, res1);
                        return parsed1 ? res1.v : (Bridge.referenceEquals(type, System.Int64) ? System.Int64(0) : System.Int64.lift(null));
                    } else if (Bridge.referenceEquals(type, System.Int16) || Bridge.referenceEquals(type, System.Nullable$1(System.Int16))) {
                        var res2 = { };
                        var parsed2 = System.Int16.tryParse(value, res2);
                        return Bridge.box(parsed2 ? res2.v : (Bridge.referenceEquals(type, System.Int16) ? 0 : null), System.Int16, System.Nullable.toString, System.Nullable.getHashCode);
                    } else if (Bridge.referenceEquals(type, System.Boolean) || Bridge.referenceEquals(type, System.Nullable$1(System.Boolean))) {
                        return Bridge.box(System.Convert.toBoolean(value), System.Boolean, System.Boolean.toString);
                    } else if (Bridge.referenceEquals(type, System.TimeSpan) || Bridge.referenceEquals(type, System.Nullable$1(System.TimeSpan))) {
                        var res3 = { };
                        var parsed3 = System.TimeSpan.tryParse(value, null, res3);
                        return parsed3 ? res3.v : null;
                    } else if (Bridge.referenceEquals(type, System.DateTime) || Bridge.referenceEquals(type, System.Nullable$1(System.DateTime))) {
                        var res4 = { };
                        var parsed4 = System.DateTime.tryParse(value, null, res4);
                        return Bridge.box(parsed4 ? res4.v : null, System.DateTime, System.Nullable.toStringFn(System.DateTime.format), System.Nullable.getHashCode);
                    } else if (Bridge.referenceEquals(type, System.DateTimeOffset) || Bridge.referenceEquals(type, System.Nullable$1(System.DateTimeOffset))) {
                        var res5 = { v : new System.DateTimeOffset() };
                        var parsed5 = System.DateTimeOffset.TryParse(value, res5);
                        return System.Nullable.lift1("$clone", parsed5 ? res5.v : null);
                    } else if (Bridge.referenceEquals(type, System.Byte) || Bridge.referenceEquals(type, System.Nullable$1(System.Byte))) {
                        return Bridge.box(System.Convert.toByte(value), System.Byte);
                    } else if (Bridge.referenceEquals(type, System.Char) || Bridge.referenceEquals(type, System.Nullable$1(System.Char))) {
                        return Bridge.box(System.Convert.toChar(value, null, 18), System.Char, String.fromCharCode, System.Char.getHashCode);
                    } else if (Bridge.referenceEquals(type, System.Decimal) || Bridge.referenceEquals(type, System.Nullable$1(System.Decimal))) {
                        var res6 = { };
                        var parsed6 = System.Decimal.tryParse(value, null, res6);
                        return parsed6 ? res6.v : (Bridge.referenceEquals(type, System.Decimal) ? System.Decimal(0) : System.Decimal.lift(null));
                    } else if (Bridge.referenceEquals(type, System.Double) || Bridge.referenceEquals(type, System.Nullable$1(System.Double))) {
                        var res7 = { };
                        var parsed7 = System.Single.tryParse(value, null, res7);
                        return Bridge.box(parsed7 ? res7.v : (Bridge.referenceEquals(type, System.Double) ? 0 : null), System.Double, System.Nullable.toStringFn(System.Double.format), System.Nullable.getHashCodeFn(System.Double.getHashCode));
                    } else if (Bridge.referenceEquals(type, System.Single) || Bridge.referenceEquals(type, System.Nullable$1(System.Single))) {
                        var res8 = { };
                        var parsed8 = System.Single.tryParse(value, null, res8);
                        return Bridge.box(parsed8 ? res8.v : (Bridge.referenceEquals(type, System.Single) ? 0 : null), System.Single, System.Nullable.toStringFn(System.Single.format), System.Nullable.getHashCodeFn(System.Single.getHashCode));
                    }
                    return null;
                },
                GetMimeType: function (extension) {
                    if (extension == null) {
                        throw new System.ArgumentNullException.$ctor1("extension");
                    }

                    if (System.String.startsWith(extension, ".")) {
                        extension = extension.substr(1);
                    }

                    extension = extension.toLowerCase();
                    switch (extension) {
                        case "323": 
                            return "text/h323";
                        case "3g2": 
                            return "video/3gpp2";
                        case "3gp": 
                            return "video/3gpp";
                        case "3gp2": 
                            return "video/3gpp2";
                        case "3gpp": 
                            return "video/3gpp";
                        case "7z": 
                            return "application/x-7z-compressed";
                        case "aa": 
                            return "audio/audible";
                        case "aac": 
                            return "audio/aac";
                        case "aaf": 
                            return "application/octet-stream";
                        case "aax": 
                            return "audio/vnd.audible.aax";
                        case "ac3": 
                            return "audio/ac3";
                        case "aca": 
                            return "application/octet-stream";
                        case "accda": 
                            return "application/msaccess.addin";
                        case "accdb": 
                            return "application/msaccess";
                        case "accdc": 
                            return "application/msaccess.cab";
                        case "accde": 
                            return "application/msaccess";
                        case "accdr": 
                            return "application/msaccess.runtime";
                        case "accdt": 
                            return "application/msaccess";
                        case "accdw": 
                            return "application/msaccess.webapplication";
                        case "accft": 
                            return "application/msaccess.ftemplate";
                        case "acx": 
                            return "application/internet-property-stream";
                        case "addin": 
                            return "text/xml";
                        case "ade": 
                            return "application/msaccess";
                        case "adobebridge": 
                            return "application/x-bridge-url";
                        case "adp": 
                            return "application/msaccess";
                        case "adt": 
                            return "audio/vnd.dlna.adts";
                        case "adts": 
                            return "audio/aac";
                        case "afm": 
                            return "application/octet-stream";
                        case "ai": 
                            return "application/postscript";
                        case "aif": 
                            return "audio/x-aiff";
                        case "aifc": 
                            return "audio/aiff";
                        case "aiff": 
                            return "audio/aiff";
                        case "air": 
                            return "application/vnd.adobe.air-application-installer-package+zip";
                        case "amc": 
                            return "application/x-mpeg";
                        case "application": 
                            return "application/x-ms-application";
                        case "art": 
                            return "image/x-jg";
                        case "asa": 
                            return "application/xml";
                        case "asax": 
                            return "application/xml";
                        case "ascx": 
                            return "application/xml";
                        case "asd": 
                            return "application/octet-stream";
                        case "asf": 
                            return "video/x-ms-asf";
                        case "ashx": 
                            return "application/xml";
                        case "asi": 
                            return "application/octet-stream";
                        case "asm": 
                            return "text/plain";
                        case "asmx": 
                            return "application/xml";
                        case "aspx": 
                            return "application/xml";
                        case "asr": 
                            return "video/x-ms-asf";
                        case "asx": 
                            return "video/x-ms-asf";
                        case "atom": 
                            return "application/atom+xml";
                        case "au": 
                            return "audio/basic";
                        case "avi": 
                            return "video/x-msvideo";
                        case "axs": 
                            return "application/olescript";
                        case "bas": 
                            return "text/plain";
                        case "bcpio": 
                            return "application/x-bcpio";
                        case "bin": 
                            return "application/octet-stream";
                        case "bmp": 
                            return "image/bmp";
                        case "c": 
                            return "text/plain";
                        case "cab": 
                            return "application/octet-stream";
                        case "caf": 
                            return "audio/x-caf";
                        case "calx": 
                            return "application/vnd.ms-office.calx";
                        case "cat": 
                            return "application/vnd.ms-pki.seccat";
                        case "cc": 
                            return "text/plain";
                        case "cd": 
                            return "text/plain";
                        case "cdda": 
                            return "audio/aiff";
                        case "cdf": 
                            return "application/x-cdf";
                        case "cer": 
                            return "application/x-x509-ca-cert";
                        case "chm": 
                            return "application/octet-stream";
                        case "class": 
                            return "application/x-java-applet";
                        case "clp": 
                            return "application/x-msclip";
                        case "cmx": 
                            return "image/x-cmx";
                        case "cnf": 
                            return "text/plain";
                        case "cod": 
                            return "image/cis-cod";
                        case "config": 
                            return "application/xml";
                        case "contact": 
                            return "text/x-ms-contact";
                        case "coverage": 
                            return "application/xml";
                        case "cpio": 
                            return "application/x-cpio";
                        case "cpp": 
                            return "text/plain";
                        case "crd": 
                            return "application/x-mscardfile";
                        case "crl": 
                            return "application/pkix-crl";
                        case "crt": 
                            return "application/x-x509-ca-cert";
                        case "cs": 
                            return "text/plain";
                        case "csdproj": 
                            return "text/plain";
                        case "csh": 
                            return "application/x-csh";
                        case "csproj": 
                            return "text/plain";
                        case "css": 
                            return "text/css";
                        case "csv": 
                            return "text/csv";
                        case "cur": 
                            return "application/octet-stream";
                        case "cxx": 
                            return "text/plain";
                        case "dat": 
                            return "application/octet-stream";
                        case "datasource": 
                            return "application/xml";
                        case "dbproj": 
                            return "text/plain";
                        case "dcr": 
                            return "application/x-director";
                        case "def": 
                            return "text/plain";
                        case "deploy": 
                            return "application/octet-stream";
                        case "der": 
                            return "application/x-x509-ca-cert";
                        case "dgml": 
                            return "application/xml";
                        case "dib": 
                            return "image/bmp";
                        case "dif": 
                            return "video/x-dv";
                        case "dir": 
                            return "application/x-director";
                        case "disco": 
                            return "text/xml";
                        case "dll": 
                            return "application/x-msdownload";
                        case "dll.config": 
                            return "text/xml";
                        case "dlm": 
                            return "text/dlm";
                        case "doc": 
                            return "application/msword";
                        case "docm": 
                            return "application/vnd.ms-word.document.macroenabled.12";
                        case "docx": 
                            return "application/vnd.openxmlformats-officedocument.wordprocessingml.document";
                        case "dot": 
                            return "application/msword";
                        case "dotm": 
                            return "application/vnd.ms-word.template.macroenabled.12";
                        case "dotx": 
                            return "application/vnd.openxmlformats-officedocument.wordprocessingml.template";
                        case "dsp": 
                            return "application/octet-stream";
                        case "dsw": 
                            return "text/plain";
                        case "dtd": 
                            return "text/xml";
                        case "dtsconfig": 
                            return "text/xml";
                        case "dv": 
                            return "video/x-dv";
                        case "dvi": 
                            return "application/x-dvi";
                        case "dwf": 
                            return "drawing/x-dwf";
                        case "dwp": 
                            return "application/octet-stream";
                        case "dxr": 
                            return "application/x-director";
                        case "eml": 
                            return "message/rfc822";
                        case "emz": 
                            return "application/octet-stream";
                        case "eot": 
                            return "application/octet-stream";
                        case "eps": 
                            return "application/postscript";
                        case "etl": 
                            return "application/etl";
                        case "etx": 
                            return "text/x-setext";
                        case "evy": 
                            return "application/envoy";
                        case "exe": 
                            return "application/octet-stream";
                        case "exe.config": 
                            return "text/xml";
                        case "fdf": 
                            return "application/vnd.fdf";
                        case "fif": 
                            return "application/fractals";
                        case "filters": 
                            return "application/xml";
                        case "fla": 
                            return "application/octet-stream";
                        case "flr": 
                            return "x-world/x-vrml";
                        case "flv": 
                            return "video/x-flv";
                        case "fsscript": 
                            return "application/fsharp-script";
                        case "fsx": 
                            return "application/fsharp-script";
                        case "generictest": 
                            return "application/xml";
                        case "gif": 
                            return "image/gif";
                        case "group": 
                            return "text/x-ms-group";
                        case "gsm": 
                            return "audio/x-gsm";
                        case "gtar": 
                            return "application/x-gtar";
                        case "gz": 
                            return "application/x-gzip";
                        case "h": 
                            return "text/plain";
                        case "hdf": 
                            return "application/x-hdf";
                        case "hdml": 
                            return "text/x-hdml";
                        case "hhc": 
                            return "application/x-oleobject";
                        case "hhk": 
                            return "application/octet-stream";
                        case "hhp": 
                            return "application/octet-stream";
                        case "hlp": 
                            return "application/winhlp";
                        case "hpp": 
                            return "text/plain";
                        case "hqx": 
                            return "application/mac-binhex40";
                        case "hta": 
                            return "application/hta";
                        case "htc": 
                            return "text/x-component";
                        case "htm": 
                            return "text/html";
                        case "html": 
                            return "text/html";
                        case "htt": 
                            return "text/webviewhtml";
                        case "hxa": 
                            return "application/xml";
                        case "hxc": 
                            return "application/xml";
                        case "hxd": 
                            return "application/octet-stream";
                        case "hxe": 
                            return "application/xml";
                        case "hxf": 
                            return "application/xml";
                        case "hxh": 
                            return "application/octet-stream";
                        case "hxi": 
                            return "application/octet-stream";
                        case "hxk": 
                            return "application/xml";
                        case "hxq": 
                            return "application/octet-stream";
                        case "hxr": 
                            return "application/octet-stream";
                        case "hxs": 
                            return "application/octet-stream";
                        case "hxt": 
                            return "text/html";
                        case "hxv": 
                            return "application/xml";
                        case "hxw": 
                            return "application/octet-stream";
                        case "hxx": 
                            return "text/plain";
                        case "i": 
                            return "text/plain";
                        case "ico": 
                            return "image/x-icon";
                        case "ics": 
                            return "application/octet-stream";
                        case "idl": 
                            return "text/plain";
                        case "ief": 
                            return "image/ief";
                        case "iii": 
                            return "application/x-iphone";
                        case "inc": 
                            return "text/plain";
                        case "inf": 
                            return "application/octet-stream";
                        case "inl": 
                            return "text/plain";
                        case "ins": 
                            return "application/x-internet-signup";
                        case "ipa": 
                            return "application/x-itunes-ipa";
                        case "ipg": 
                            return "application/x-itunes-ipg";
                        case "ipproj": 
                            return "text/plain";
                        case "ipsw": 
                            return "application/x-itunes-ipsw";
                        case "iqy": 
                            return "text/x-ms-iqy";
                        case "isp": 
                            return "application/x-internet-signup";
                        case "ite": 
                            return "application/x-itunes-ite";
                        case "itlp": 
                            return "application/x-itunes-itlp";
                        case "itms": 
                            return "application/x-itunes-itms";
                        case "itpc": 
                            return "application/x-itunes-itpc";
                        case "ivf": 
                            return "video/x-ivf";
                        case "jar": 
                            return "application/java-archive";
                        case "java": 
                            return "application/octet-stream";
                        case "jck": 
                            return "application/liquidmotion";
                        case "jcz": 
                            return "application/liquidmotion";
                        case "jfif": 
                            return "image/pjpeg";
                        case "jnlp": 
                            return "application/x-java-jnlp-file";
                        case "jpb": 
                            return "application/octet-stream";
                        case "jpe": 
                            return "image/jpeg";
                        case "jpeg": 
                            return "image/jpeg";
                        case "jpg": 
                            return "image/jpeg";
                        case "js": 
                            return "application/x-javascript";
                        case "jsx": 
                            return "text/jscript";
                        case "jsxbin": 
                            return "text/plain";
                        case "latex": 
                            return "application/x-latex";
                        case "library-ms": 
                            return "application/windows-library+xml";
                        case "lit": 
                            return "application/x-ms-reader";
                        case "loadtest": 
                            return "application/xml";
                        case "lpk": 
                            return "application/octet-stream";
                        case "lsf": 
                            return "video/x-la-asf";
                        case "lst": 
                            return "text/plain";
                        case "lsx": 
                            return "video/x-la-asf";
                        case "lzh": 
                            return "application/octet-stream";
                        case "m13": 
                            return "application/x-msmediaview";
                        case "m14": 
                            return "application/x-msmediaview";
                        case "m1v": 
                            return "video/mpeg";
                        case "m2t": 
                            return "video/vnd.dlna.mpeg-tts";
                        case "m2ts": 
                            return "video/vnd.dlna.mpeg-tts";
                        case "m2v": 
                            return "video/mpeg";
                        case "m3u": 
                            return "audio/x-mpegurl";
                        case "m3u8": 
                            return "audio/x-mpegurl";
                        case "m4a": 
                            return "audio/m4a";
                        case "m4b": 
                            return "audio/m4b";
                        case "m4p": 
                            return "audio/m4p";
                        case "m4r": 
                            return "audio/x-m4r";
                        case "m4v": 
                            return "video/x-m4v";
                        case "mac": 
                            return "image/x-macpaint";
                        case "mak": 
                            return "text/plain";
                        case "man": 
                            return "application/x-troff-man";
                        case "manifest": 
                            return "application/x-ms-manifest";
                        case "map": 
                            return "text/plain";
                        case "master": 
                            return "application/xml";
                        case "mda": 
                            return "application/msaccess";
                        case "mdb": 
                            return "application/x-msaccess";
                        case "mde": 
                            return "application/msaccess";
                        case "mdp": 
                            return "application/octet-stream";
                        case "me": 
                            return "application/x-troff-me";
                        case "mfp": 
                            return "application/x-shockwave-flash";
                        case "mht": 
                            return "message/rfc822";
                        case "mhtml": 
                            return "message/rfc822";
                        case "mid": 
                            return "audio/mid";
                        case "midi": 
                            return "audio/mid";
                        case "mix": 
                            return "application/octet-stream";
                        case "mk": 
                            return "text/plain";
                        case "mmf": 
                            return "application/x-smaf";
                        case "mno": 
                            return "text/xml";
                        case "mny": 
                            return "application/x-msmoney";
                        case "mod": 
                            return "video/mpeg";
                        case "mov": 
                            return "video/quicktime";
                        case "movie": 
                            return "video/x-sgi-movie";
                        case "mp2": 
                            return "video/mpeg";
                        case "mp2v": 
                            return "video/mpeg";
                        case "mp3": 
                            return "audio/mpeg";
                        case "mp4": 
                            return "video/mp4";
                        case "mp4v": 
                            return "video/mp4";
                        case "mpa": 
                            return "video/mpeg";
                        case "mpe": 
                            return "video/mpeg";
                        case "mpeg": 
                            return "video/mpeg";
                        case "mpf": 
                            return "application/vnd.ms-mediapackage";
                        case "mpg": 
                            return "video/mpeg";
                        case "mpp": 
                            return "application/vnd.ms-project";
                        case "mpv2": 
                            return "video/mpeg";
                        case "mqv": 
                            return "video/quicktime";
                        case "ms": 
                            return "application/x-troff-ms";
                        case "msi": 
                            return "application/octet-stream";
                        case "mso": 
                            return "application/octet-stream";
                        case "mts": 
                            return "video/vnd.dlna.mpeg-tts";
                        case "mtx": 
                            return "application/xml";
                        case "mvb": 
                            return "application/x-msmediaview";
                        case "mvc": 
                            return "application/x-miva-compiled";
                        case "mxp": 
                            return "application/x-mmxp";
                        case "nc": 
                            return "application/x-netcdf";
                        case "nsc": 
                            return "video/x-ms-asf";
                        case "nws": 
                            return "message/rfc822";
                        case "ocx": 
                            return "application/octet-stream";
                        case "oda": 
                            return "application/oda";
                        case "odc": 
                            return "text/x-ms-odc";
                        case "odh": 
                            return "text/plain";
                        case "odl": 
                            return "text/plain";
                        case "odp": 
                            return "application/vnd.oasis.opendocument.presentation";
                        case "ods": 
                            return "application/oleobject";
                        case "odt": 
                            return "application/vnd.oasis.opendocument.text";
                        case "one": 
                            return "application/onenote";
                        case "onea": 
                            return "application/onenote";
                        case "onepkg": 
                            return "application/onenote";
                        case "onetmp": 
                            return "application/onenote";
                        case "onetoc": 
                            return "application/onenote";
                        case "onetoc2": 
                            return "application/onenote";
                        case "orderedtest": 
                            return "application/xml";
                        case "osdx": 
                            return "application/opensearchdescription+xml";
                        case "p10": 
                            return "application/pkcs10";
                        case "p12": 
                            return "application/x-pkcs12";
                        case "p7b": 
                            return "application/x-pkcs7-certificates";
                        case "p7c": 
                            return "application/pkcs7-mime";
                        case "p7m": 
                            return "application/pkcs7-mime";
                        case "p7r": 
                            return "application/x-pkcs7-certreqresp";
                        case "p7s": 
                            return "application/pkcs7-signature";
                        case "pbm": 
                            return "image/x-portable-bitmap";
                        case "pcast": 
                            return "application/x-podcast";
                        case "pct": 
                            return "image/pict";
                        case "pcx": 
                            return "application/octet-stream";
                        case "pcz": 
                            return "application/octet-stream";
                        case "pdf": 
                            return "application/pdf";
                        case "pfb": 
                            return "application/octet-stream";
                        case "pfm": 
                            return "application/octet-stream";
                        case "pfx": 
                            return "application/x-pkcs12";
                        case "pgm": 
                            return "image/x-portable-graymap";
                        case "pic": 
                            return "image/pict";
                        case "pict": 
                            return "image/pict";
                        case "pkgdef": 
                            return "text/plain";
                        case "pkgundef": 
                            return "text/plain";
                        case "pko": 
                            return "application/vnd.ms-pki.pko";
                        case "pls": 
                            return "audio/scpls";
                        case "pma": 
                            return "application/x-perfmon";
                        case "pmc": 
                            return "application/x-perfmon";
                        case "pml": 
                            return "application/x-perfmon";
                        case "pmr": 
                            return "application/x-perfmon";
                        case "pmw": 
                            return "application/x-perfmon";
                        case "png": 
                            return "image/png";
                        case "pnm": 
                            return "image/x-portable-anymap";
                        case "pnt": 
                            return "image/x-macpaint";
                        case "pntg": 
                            return "image/x-macpaint";
                        case "pnz": 
                            return "image/png";
                        case "pot": 
                            return "application/vnd.ms-powerpoint";
                        case "potm": 
                            return "application/vnd.ms-powerpoint.template.macroenabled.12";
                        case "potx": 
                            return "application/vnd.openxmlformats-officedocument.presentationml.template";
                        case "ppa": 
                            return "application/vnd.ms-powerpoint";
                        case "ppam": 
                            return "application/vnd.ms-powerpoint.addin.macroenabled.12";
                        case "ppm": 
                            return "image/x-portable-pixmap";
                        case "pps": 
                            return "application/vnd.ms-powerpoint";
                        case "ppsm": 
                            return "application/vnd.ms-powerpoint.slideshow.macroenabled.12";
                        case "ppsx": 
                            return "application/vnd.openxmlformats-officedocument.presentationml.slideshow";
                        case "ppt": 
                            return "application/vnd.ms-powerpoint";
                        case "pptm": 
                            return "application/vnd.ms-powerpoint.presentation.macroenabled.12";
                        case "pptx": 
                            return "application/vnd.openxmlformats-officedocument.presentationml.presentation";
                        case "prf": 
                            return "application/pics-rules";
                        case "prm": 
                            return "application/octet-stream";
                        case "prx": 
                            return "application/octet-stream";
                        case "ps": 
                            return "application/postscript";
                        case "psc1": 
                            return "application/powershell";
                        case "psd": 
                            return "application/octet-stream";
                        case "psess": 
                            return "application/xml";
                        case "psm": 
                            return "application/octet-stream";
                        case "psp": 
                            return "application/octet-stream";
                        case "pub": 
                            return "application/x-mspublisher";
                        case "pwz": 
                            return "application/vnd.ms-powerpoint";
                        case "qht": 
                            return "text/x-html-insertion";
                        case "qhtm": 
                            return "text/x-html-insertion";
                        case "qt": 
                            return "video/quicktime";
                        case "qti": 
                            return "image/x-quicktime";
                        case "qtif": 
                            return "image/x-quicktime";
                        case "qtl": 
                            return "application/x-quicktimeplayer";
                        case "qxd": 
                            return "application/octet-stream";
                        case "ra": 
                            return "audio/x-pn-realaudio";
                        case "ram": 
                            return "audio/x-pn-realaudio";
                        case "rar": 
                            return "application/octet-stream";
                        case "ras": 
                            return "image/x-cmu-raster";
                        case "rat": 
                            return "application/rat-file";
                        case "rc": 
                            return "text/plain";
                        case "rc2": 
                            return "text/plain";
                        case "rct": 
                            return "text/plain";
                        case "rdlc": 
                            return "application/xml";
                        case "resx": 
                            return "application/xml";
                        case "rf": 
                            return "image/vnd.rn-realflash";
                        case "rgb": 
                            return "image/x-rgb";
                        case "rgs": 
                            return "text/plain";
                        case "rm": 
                            return "application/vnd.rn-realmedia";
                        case "rmi": 
                            return "audio/mid";
                        case "rmp": 
                            return "application/vnd.rn-rn_music_package";
                        case "roff": 
                            return "application/x-troff";
                        case "rpm": 
                            return "audio/x-pn-realaudio-plugin";
                        case "rqy": 
                            return "text/x-ms-rqy";
                        case "rtf": 
                            return "application/rtf";
                        case "rtx": 
                            return "text/richtext";
                        case "ruleset": 
                            return "application/xml";
                        case "s": 
                            return "text/plain";
                        case "safariextz": 
                            return "application/x-safari-safariextz";
                        case "scd": 
                            return "application/x-msschedule";
                        case "sct": 
                            return "text/scriptlet";
                        case "sd2": 
                            return "audio/x-sd2";
                        case "sdp": 
                            return "application/sdp";
                        case "sea": 
                            return "application/octet-stream";
                        case "searchconnector-ms": 
                            return "application/windows-search-connector+xml";
                        case "setpay": 
                            return "application/set-payment-initiation";
                        case "setreg": 
                            return "application/set-registration-initiation";
                        case "settings": 
                            return "application/xml";
                        case "sgimb": 
                            return "application/x-sgimb";
                        case "sgml": 
                            return "text/sgml";
                        case "sh": 
                            return "application/x-sh";
                        case "shar": 
                            return "application/x-shar";
                        case "shtml": 
                            return "text/html";
                        case "sit": 
                            return "application/x-stuffit";
                        case "sitemap": 
                            return "application/xml";
                        case "skin": 
                            return "application/xml";
                        case "sldm": 
                            return "application/vnd.ms-powerpoint.slide.macroenabled.12";
                        case "sldx": 
                            return "application/vnd.openxmlformats-officedocument.presentationml.slide";
                        case "slk": 
                            return "application/vnd.ms-excel";
                        case "sln": 
                            return "text/plain";
                        case "slupkg-ms": 
                            return "application/x-ms-license";
                        case "smd": 
                            return "audio/x-smd";
                        case "smi": 
                            return "application/octet-stream";
                        case "smx": 
                            return "audio/x-smd";
                        case "smz": 
                            return "audio/x-smd";
                        case "snd": 
                            return "audio/basic";
                        case "snippet": 
                            return "application/xml";
                        case "snp": 
                            return "application/octet-stream";
                        case "sol": 
                            return "text/plain";
                        case "sor": 
                            return "text/plain";
                        case "spc": 
                            return "application/x-pkcs7-certificates";
                        case "spl": 
                            return "application/futuresplash";
                        case "src": 
                            return "application/x-wais-source";
                        case "srf": 
                            return "text/plain";
                        case "ssisdeploymentmanifest": 
                            return "text/xml";
                        case "ssm": 
                            return "application/streamingmedia";
                        case "sst": 
                            return "application/vnd.ms-pki.certstore";
                        case "stl": 
                            return "application/vnd.ms-pki.stl";
                        case "sv4cpio": 
                            return "application/x-sv4cpio";
                        case "sv4crc": 
                            return "application/x-sv4crc";
                        case "svc": 
                            return "application/xml";
                        case "swf": 
                            return "application/x-shockwave-flash";
                        case "t": 
                            return "application/x-troff";
                        case "tar": 
                            return "application/x-tar";
                        case "tcl": 
                            return "application/x-tcl";
                        case "testrunconfig": 
                            return "application/xml";
                        case "testsettings": 
                            return "application/xml";
                        case "tex": 
                            return "application/x-tex";
                        case "texi": 
                            return "application/x-texinfo";
                        case "texinfo": 
                            return "application/x-texinfo";
                        case "tgz": 
                            return "application/x-compressed";
                        case "thmx": 
                            return "application/vnd.ms-officetheme";
                        case "thn": 
                            return "application/octet-stream";
                        case "tif": 
                            return "image/tiff";
                        case "tiff": 
                            return "image/tiff";
                        case "tlh": 
                            return "text/plain";
                        case "tli": 
                            return "text/plain";
                        case "toc": 
                            return "application/octet-stream";
                        case "tr": 
                            return "application/x-troff";
                        case "trm": 
                            return "application/x-msterminal";
                        case "trx": 
                            return "application/xml";
                        case "ts": 
                            return "video/vnd.dlna.mpeg-tts";
                        case "tsv": 
                            return "text/tab-separated-values";
                        case "ttf": 
                            return "application/octet-stream";
                        case "tts": 
                            return "video/vnd.dlna.mpeg-tts";
                        case "txt": 
                            return "text/plain";
                        case "u32": 
                            return "application/octet-stream";
                        case "uls": 
                            return "text/iuls";
                        case "user": 
                            return "text/plain";
                        case "ustar": 
                            return "application/x-ustar";
                        case "vb": 
                            return "text/plain";
                        case "vbdproj": 
                            return "text/plain";
                        case "vbk": 
                            return "video/mpeg";
                        case "vbproj": 
                            return "text/plain";
                        case "vbs": 
                            return "text/vbscript";
                        case "vcf": 
                            return "text/x-vcard";
                        case "vcproj": 
                            return "application/xml";
                        case "vcs": 
                            return "text/plain";
                        case "vcxproj": 
                            return "application/xml";
                        case "vddproj": 
                            return "text/plain";
                        case "vdp": 
                            return "text/plain";
                        case "vdproj": 
                            return "text/plain";
                        case "vdx": 
                            return "application/vnd.ms-visio.viewer";
                        case "vml": 
                            return "text/xml";
                        case "vscontent": 
                            return "application/xml";
                        case "vsct": 
                            return "text/xml";
                        case "vsd": 
                            return "application/vnd.visio";
                        case "vsi": 
                            return "application/ms-vsi";
                        case "vsix": 
                            return "application/vsix";
                        case "vsixlangpack": 
                            return "text/xml";
                        case "vsixmanifest": 
                            return "text/xml";
                        case "vsmdi": 
                            return "application/xml";
                        case "vspscc": 
                            return "text/plain";
                        case "vss": 
                            return "application/vnd.visio";
                        case "vsscc": 
                            return "text/plain";
                        case "vssettings": 
                            return "text/xml";
                        case "vssscc": 
                            return "text/plain";
                        case "vst": 
                            return "application/vnd.visio";
                        case "vstemplate": 
                            return "text/xml";
                        case "vsto": 
                            return "application/x-ms-vsto";
                        case "vsw": 
                            return "application/vnd.visio";
                        case "vsx": 
                            return "application/vnd.visio";
                        case "vtx": 
                            return "application/vnd.visio";
                        case "wav": 
                            return "audio/wav";
                        case "wave": 
                            return "audio/wav";
                        case "wax": 
                            return "audio/x-ms-wax";
                        case "wbk": 
                            return "application/msword";
                        case "wbmp": 
                            return "image/vnd.wap.wbmp";
                        case "wcm": 
                            return "application/vnd.ms-works";
                        case "wdb": 
                            return "application/vnd.ms-works";
                        case "wdp": 
                            return "image/vnd.ms-photo";
                        case "webarchive": 
                            return "application/x-safari-webarchive";
                        case "webtest": 
                            return "application/xml";
                        case "wiq": 
                            return "application/xml";
                        case "wiz": 
                            return "application/msword";
                        case "wks": 
                            return "application/vnd.ms-works";
                        case "wlmp": 
                            return "application/wlmoviemaker";
                        case "wlpginstall": 
                            return "application/x-wlpg-detect";
                        case "wlpginstall3": 
                            return "application/x-wlpg3-detect";
                        case "wm": 
                            return "video/x-ms-wm";
                        case "wma": 
                            return "audio/x-ms-wma";
                        case "wmd": 
                            return "application/x-ms-wmd";
                        case "wmf": 
                            return "application/x-msmetafile";
                        case "wml": 
                            return "text/vnd.wap.wml";
                        case "wmlc": 
                            return "application/vnd.wap.wmlc";
                        case "wmls": 
                            return "text/vnd.wap.wmlscript";
                        case "wmlsc": 
                            return "application/vnd.wap.wmlscriptc";
                        case "wmp": 
                            return "video/x-ms-wmp";
                        case "wmv": 
                            return "video/x-ms-wmv";
                        case "wmx": 
                            return "video/x-ms-wmx";
                        case "wmz": 
                            return "application/x-ms-wmz";
                        case "wpl": 
                            return "application/vnd.ms-wpl";
                        case "wps": 
                            return "application/vnd.ms-works";
                        case "wri": 
                            return "application/x-mswrite";
                        case "wrl": 
                            return "x-world/x-vrml";
                        case "wrz": 
                            return "x-world/x-vrml";
                        case "wsc": 
                            return "text/scriptlet";
                        case "wsdl": 
                            return "text/xml";
                        case "wvx": 
                            return "video/x-ms-wvx";
                        case "x": 
                            return "application/directx";
                        case "xaf": 
                            return "x-world/x-vrml";
                        case "xaml": 
                            return "application/xaml+xml";
                        case "xap": 
                            return "application/x-silverlight-app";
                        case "xbap": 
                            return "application/x-ms-xbap";
                        case "xbm": 
                            return "image/x-xbitmap";
                        case "xdr": 
                            return "text/plain";
                        case "xht": 
                            return "application/xhtml+xml";
                        case "xhtml": 
                            return "application/xhtml+xml";
                        case "xla": 
                            return "application/vnd.ms-excel";
                        case "xlam": 
                            return "application/vnd.ms-excel.addin.macroenabled.12";
                        case "xlc": 
                            return "application/vnd.ms-excel";
                        case "xld": 
                            return "application/vnd.ms-excel";
                        case "xlk": 
                            return "application/vnd.ms-excel";
                        case "xll": 
                            return "application/vnd.ms-excel";
                        case "xlm": 
                            return "application/vnd.ms-excel";
                        case "xls": 
                            return "application/vnd.ms-excel";
                        case "xlsb": 
                            return "application/vnd.ms-excel.sheet.binary.macroenabled.12";
                        case "xlsm": 
                            return "application/vnd.ms-excel.sheet.macroenabled.12";
                        case "xlsx": 
                            return "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                        case "xlt": 
                            return "application/vnd.ms-excel";
                        case "xltm": 
                            return "application/vnd.ms-excel.template.macroenabled.12";
                        case "xltx": 
                            return "application/vnd.openxmlformats-officedocument.spreadsheetml.template";
                        case "xlw": 
                            return "application/vnd.ms-excel";
                        case "xml": 
                            return "text/xml";
                        case "xmta": 
                            return "application/xml";
                        case "xof": 
                            return "x-world/x-vrml";
                        case "xoml": 
                            return "text/plain";
                        case "xpm": 
                            return "image/x-xpixmap";
                        case "xps": 
                            return "application/vnd.ms-xpsdocument";
                        case "xrm-ms": 
                            return "text/xml";
                        case "xsc": 
                            return "application/xml";
                        case "xsd": 
                            return "text/xml";
                        case "xsf": 
                            return "text/xml";
                        case "xsl": 
                            return "text/xml";
                        case "xslt": 
                            return "text/xml";
                        case "xsn": 
                            return "application/octet-stream";
                        case "xss": 
                            return "application/xml";
                        case "xtp": 
                            return "application/octet-stream";
                        case "xwd": 
                            return "image/x-xwindowdump";
                        case "z": 
                            return "application/x-compress";
                        case "zip": 
                            return "application/x-zip-compressed";
                        default: 
                            return "application/octet-stream";
                    }
                }
            }
        }
    });

    Bridge.define("Core.Extensions.ValidationExtensions", {
        statics: {
            methods: {
                IsUnique: function (T, entity, fieldName, filter) {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        id, 
                        isExists, 
                        $t, 
                        $t1, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            if (filter === void 0) { filter = null; }
                                            id = "Id";
                                            if (filter == null) {
                                                filter = System.String.format("Active eq true and {0} eq '{1}' and Id ne {2}", fieldName, Core.Extensions.BridgeExt.GetPropValue(entity, fieldName), Bridge.box(Bridge.unbox(entity.Id), System.Int32));
                                            }
                                            $task1 = new Core.Clients.Client.$ctor1(Bridge.Reflection.getTypeName(T)).GetAsync$1(Core.Models.OdataResult$1(T), System.String.format("?$select={0},{1}&$filter={2}", id, fieldName, filter));
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            isExists = $taskResult1;
                                            $tcs.setResult(System.Nullable.eq((isExists != null && ($t = isExists.Value) != null ? $t.Count : null), 0) || System.Nullable.eq((isExists != null && ($t1 = isExists.Value) != null ? $t1.Count : null), 1) && Bridge.referenceEquals(entity[id], System.Linq.Enumerable.from(isExists.Value, T).first()[id]));
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }
            }
        }
    });

    Bridge.define("Core.Extensions.ValidationRule", {
        statics: {
            fields: {
                Required: null,
                MinLength: null,
                CheckLength: null,
                MaxLength: null,
                GreaterThanOrEqual: null,
                LessThanOrEqual: null,
                GreaterThan: null,
                LessThan: null,
                Equal: null,
                NotEqual: null,
                RegEx: null,
                Unique: null
            },
            ctors: {
                init: function () {
                    this.Required = "required";
                    this.MinLength = "minLength";
                    this.CheckLength = "checkLength";
                    this.MaxLength = "maxLength";
                    this.GreaterThanOrEqual = "min";
                    this.LessThanOrEqual = "max";
                    this.GreaterThan = "gt";
                    this.LessThan = "lt";
                    this.Equal = "eq";
                    this.NotEqual = "ne";
                    this.RegEx = "regEx";
                    this.Unique = "unique";
                }
            }
        },
        props: {
            Rule: null,
            Message: null,
            Value1: null,
            Value2: null,
            Condition: null,
            RejectInvalid: false
        }
    });

    Bridge.define("Core.Fw.User.VendorListVM", {
        props: {
            Vendor: null
        }
    });

    Bridge.define("Core.Models.AdvSearchVM", {
        props: {
            ActiveState: 0,
            Conditions: null,
            OrderBy: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                this.Conditions = new (System.Collections.Generic.List$1(Core.Models.FieldCondition)).ctor();
                this.OrderBy = new (System.Collections.Generic.List$1(Core.Models.OrderBy)).ctor();
            }
        }
    });

    Bridge.define("Core.Models.ApprovalConfig", {
        props: {
            Id: 0,
            Level: 0,
            Description: null,
            UserId: null,
            RoleId: null,
            DataSource: null,
            EntityId: 0,
            WorkflowId: null,
            MinAmount: System.Decimal(0.0),
            MaxAmount: null,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null,
            RoleLevel: null,
            IsSameCostCenter: false,
            IsSupervisor: false,
            CostCenterId: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            }
        }
    });

    Bridge.define("Core.Models.Approvement", {
        props: {
            Id: 0,
            ReasonOfChange: null,
            EntityId: null,
            LevelName: null,
            RecordId: null,
            StatusId: null,
            Amount: System.Decimal(0.0),
            UserApproveId: 0,
            IsEnd: false,
            NextLevel: null,
            CurrentLevel: 0,
            Approved: false,
            ApprovedBy: null,
            ApprovedDate: null,
            RejectBy: null,
            RejectDate: null,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            }
        }
    });

    Bridge.define("Core.Models.Component", {
        props: {
            Id: 0,
            FieldName: null,
            Order: null,
            ComponentType: null,
            ComponentGroupId: 0,
            DataSourceFilter: null,
            ReferenceId: null,
            FormatData: null,
            FormatEntity: null,
            PlainText: null,
            Column: null,
            Offset: null,
            Row: null,
            CanSearch: false,
            CanCache: false,
            Precision: null,
            GroupBy: null,
            GroupFormat: null,
            Label: null,
            ShowLabel: false,
            Icon: null,
            ClassName: null,
            Style: null,
            ChildStyle: null,
            HotKey: null,
            RefClass: null,
            Events: null,
            Disabled: false,
            Visibility: false,
            Hidden: false,
            Validation: null,
            Focus: false,
            Width: null,
            PopulateField: null,
            CascadeField: null,
            GroupEvent: null,
            XsCol: null,
            SmCol: null,
            LgCol: null,
            XlCol: null,
            XxlCol: null,
            DefaultVal: null,
            DateTimeField: null,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null,
            RoleId: null,
            IgnoreSync: false,
            CanAdd: false,
            ShowAudit: false,
            IsPrivate: false,
            IdField: null,
            DescFieldName: null,
            DescValue: null,
            MonthCount: null,
            IsDoubleLine: null,
            Query: null,
            RefName: null,
            Headers: null,
            FormatExSmall: null,
            FormatSmall: null,
            FormatMedium: null,
            FormatLarge: null,
            FormatExLarge: null,
            ShowExp: null,
            ParentId: null,
            IsRealtime: false,
            ComponentGroup: null,
            Parent: null,
            Reference: null,
            InverseParent: null,
            TextAlignEnum: null,
            IsPivot: false,
            AutoFit: false,
            MaxWidth: null,
            PostOrder: 0,
            LocalData: null,
            LocalHeader: null,
            StatusBar: false,
            SimpleText: false,
            MinWidth: null,
            DataSourceOptimized: null,
            LocalRender: false,
            IgnoreConfirmHardDelete: false,
            Editable: false,
            Frozen: false
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            },
            ctor: function () {
                this.$initialize();
                this.InverseParent = new (System.Collections.Generic.HashSet$1(Core.Models.Component)).ctor();
            }
        }
    });

    Bridge.define("Core.Models.ComponentGroup", {
        props: {
            Id: 0,
            FeatureId: 0,
            Name: null,
            Label: null,
            Description: null,
            ClassName: null,
            IsTab: false,
            TabGroup: null,
            IsVertialTab: false,
            Responsive: false,
            Events: null,
            Width: null,
            Style: null,
            Column: 0,
            Row: 0,
            PolicyId: null,
            Hidden: false,
            ParentId: null,
            Order: null,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null,
            Disabled: false,
            XsCol: null,
            SmCol: null,
            LgCol: null,
            XlCol: null,
            XxlCol: null,
            OuterColumn: null,
            XsOuterColumn: null,
            SmOuterColumn: null,
            LgOuterColumn: null,
            XlOuterColumn: null,
            XxlOuterColumn: null,
            RoleId: null,
            Icon: null,
            IgnoreSync: false,
            IsPrivate: false,
            BadgeMonth: null,
            IsCollapsible: null,
            ShowExp: null,
            Feature: null,
            Parent: null,
            Component: null,
            InverseParent: null,
            ItemInRow: 0
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            },
            ctor: function () {
                this.$initialize();
                this.Component = new (System.Collections.Generic.HashSet$1(Core.Models.Component)).ctor();
                this.InverseParent = new (System.Collections.Generic.HashSet$1(Core.Models.ComponentGroup)).ctor();
            }
        }
    });

    Bridge.define("Core.Models.Dictionary", {
        props: {
            Id: 0,
            LangCode: null,
            Key: null,
            Value: null,
            Active: false,
            InsertedBy: 0,
            InsertedDate: null,
            UpdatedBy: null,
            UpdatedDate: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            }
        }
    });

    Bridge.define("Core.Models.Entity", {
        props: {
            Id: 0,
            Name: null,
            Description: null,
            AliasFor: null,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null,
            RefDetailClass: null,
            RefListClass: null,
            Component: null,
            Feature: null,
            GridPolicyEntity: null,
            GridPolicyReference: null,
            TaskNotification: null,
            Namespace: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            },
            ctor: function () {
                this.$initialize();
                this.Component = new (System.Collections.Generic.HashSet$1(Core.Models.Component)).ctor();
                this.Feature = new (System.Collections.Generic.HashSet$1(Core.Models.Feature)).ctor();
                this.GridPolicyEntity = new (System.Collections.Generic.HashSet$1(Core.Models.GridPolicy)).ctor();
                this.GridPolicyReference = new (System.Collections.Generic.HashSet$1(Core.Models.GridPolicy)).ctor();
                this.TaskNotification = new (System.Collections.Generic.HashSet$1(Core.Models.TaskNotification)).ctor();
            }
        }
    });

    Bridge.define("Core.Models.Feature", {
        props: {
            Id: 0,
            Name: null,
            Label: null,
            ParentId: null,
            Order: null,
            ClassName: null,
            Style: null,
            StyleSheet: null,
            Script: null,
            Events: null,
            Icon: null,
            IsDevider: false,
            IsGroup: false,
            IsMenu: false,
            IsPublic: false,
            StartUp: false,
            ViewClass: null,
            EntityId: null,
            Description: null,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null,
            IsSystem: false,
            IgnoreEncode: false,
            RequireJS: null,
            GuiInfo: null,
            RoleId: 0,
            IsPermissionInherited: false,
            FeatureGroup: null,
            InheritParentFeature: false,
            Properties: null,
            Template: null,
            LayoutId: null,
            DataSource: null,
            Gallery: null,
            Entity: null,
            Parent: null,
            ComponentGroup: null,
            FeaturePolicy: null,
            GridPolicy: null,
            InverseParent: null,
            Component: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            },
            ctor: function () {
                this.$initialize();
                this.ComponentGroup = new (System.Collections.Generic.HashSet$1(Core.Models.ComponentGroup)).ctor();
                this.FeaturePolicy = new (System.Collections.Generic.HashSet$1(Core.Models.FeaturePolicy)).ctor();
                this.GridPolicy = new (System.Collections.Generic.HashSet$1(Core.Models.GridPolicy)).ctor();
                this.InverseParent = new (System.Collections.Generic.HashSet$1(Core.Models.Feature)).ctor();
            }
        }
    });

    Bridge.define("Core.Models.FeaturePolicy", {
        props: {
            Id: 0,
            FeatureId: null,
            RoleId: null,
            CanRead: false,
            CanWrite: false,
            CanDelete: false,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null,
            CanDeactivate: false,
            LockDeleteAfterCreated: null,
            LockUpdateAfterCreated: null,
            EntityId: null,
            RecordId: 0,
            UserId: null,
            CanShare: false,
            Desc: null,
            Feature: null,
            Role: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            }
        }
    });

    Bridge.define("Core.Models.FieldCondition", {
        props: {
            Id: 0,
            FieldId: 0,
            Field: null,
            CompareOperatorId: null,
            Value: null,
            LogicOperatorId: null,
            LogicOperator: null,
            Level: 0
        }
    });

    Bridge.define("Core.Models.GridPolicy", {
        props: {
            Id: 0,
            UniqueId: null,
            FeatureId: null,
            EntityId: 0,
            FieldName: null,
            Order: null,
            GroupOrder: null,
            ShortDesc: null,
            Description: null,
            IsPivot: false,
            ReferenceId: null,
            FilterTemplate: null,
            RefClass: null,
            DataSource: null,
            GroupName: null,
            FormatCell: null,
            FormatRow: null,
            PlainText: null,
            Width: null,
            MinWidth: null,
            MaxWidth: null,
            Precision: null,
            Validation: null,
            TextAlign: null,
            Frozen: false,
            Hidden: false,
            Events: null,
            ClassName: null,
            Style: null,
            ChildStyle: null,
            Icon: null,
            AdvancedSearch: false,
            HasFilter: false,
            Editable: false,
            Disabled: false,
            ComponentType: null,
            PopulateField: null,
            CascadeField: null,
            Summary: null,
            SummaryColSpan: null,
            ComponentId: null,
            DefaultVal: null,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null,
            RoleId: null,
            IgnoreSync: false,
            AutoFit: false,
            IsPrivate: false,
            BasicSearch: false,
            FormatExcell: null,
            Query: null,
            RefName: null,
            IdField: null,
            ShowExp: null,
            Entity: null,
            Feature: null,
            Reference: null,
            DataSourceOptimized: null,
            SimpleText: false,
            StatusBar: false,
            TextAlignEnum: null,
            PostOrder: 0,
            LocalData: null,
            LocalHeader: null,
            LocalRender: false,
            IgnoreConfirmHardDelete: false
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            }
        }
    });

    Bridge.define("Core.Models.History", {
        props: {
            Id: System.Int64(0),
            TanentCode: null,
            EntityId: 0,
            RecordId: 0,
            ReasonOfChange: null,
            JsonHistory: null,
            TextHistory: null,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            }
        }
    });

    Bridge.define("Core.Models.MasterData", {
        props: {
            Id: 0,
            Name: null,
            Description: null,
            ParentId: null,
            Path: null,
            Additional: null,
            Order: null,
            Enum: null,
            Level: 0,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null,
            InterDesc: null,
            CostCenterId: null,
            Code: null,
            Parent: null,
            InverseParent: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            },
            ctor: function () {
                this.$initialize();
                this.InverseParent = new (System.Collections.Generic.HashSet$1(Core.Models.MasterData)).ctor();
            }
        }
    });

    Bridge.define("Core.Models.Odata", {
        props: {
            Count: null
        }
    });

    Bridge.define("Core.Models.OdataResult$1", function (T) { return {
        props: {
            Odata: null,
            Value: null,
            Query: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                this.Odata = new Core.Models.Odata();
                this.Value = new (System.Collections.Generic.List$1(T)).ctor();
            }
        }
    }; });

    Bridge.define("Core.Models.OrderBy", {
        props: {
            Id: 0,
            FieldId: 0,
            Field: null,
            OrderbyOptionId: null
        }
    });

    Bridge.define("Core.Models.Role", {
        props: {
            Id: 0,
            VendorId: null,
            RoleName: null,
            Description: null,
            ParentRoleId: null,
            CostCenterId: null,
            Level: 0,
            Path: null,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null,
            AccRoleId: null,
            ParentRole: null,
            FeaturePolicy: null,
            InverseParentRole: null,
            TaskNotification: null,
            UserRole: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            },
            ctor: function () {
                this.$initialize();
                this.FeaturePolicy = new (System.Collections.Generic.HashSet$1(Core.Models.FeaturePolicy)).ctor();
                this.InverseParentRole = new (System.Collections.Generic.HashSet$1(Core.Models.Role)).ctor();
                this.TaskNotification = new (System.Collections.Generic.HashSet$1(Core.Models.TaskNotification)).ctor();
                this.UserRole = new (System.Collections.Generic.HashSet$1(Core.Models.UserRole)).ctor();
            }
        }
    });

    Bridge.define("Core.Models.TaskNotification", {
        props: {
            Id: 0,
            Title: null,
            Description: null,
            EntityId: null,
            RecordId: null,
            Deadline: null,
            StatusId: null,
            Attachment: null,
            AssignedId: null,
            RoleId: null,
            TimeConsumed: System.Decimal(0.0),
            TimeRemained: System.Decimal(0.0),
            Progress: System.Decimal(0.0),
            RemindBefore: null,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null,
            Badge: null,
            Entity: null,
            Role: null
        },
        ctors: {
            init: function () {
                this.Deadline = System.DateTime.getDefaultValue();
                this.InsertedDate = System.DateTime.getDefaultValue();
            }
        }
    });

    Bridge.define("Core.Models.User", {
        props: {
            Id: 0,
            VendorId: 0,
            FirstName: null,
            LastName: null,
            MiddleName: null,
            FullName: null,
            IsInternal: false,
            DoB: null,
            Ssn: null,
            Passport: null,
            Address: null,
            Address2: null,
            PhoneNumber: null,
            PhoneNumber2: null,
            NationalityId: null,
            ContractId: null,
            BankId: null,
            BankBranchId: null,
            BankAccountNo: null,
            BankAccountName: null,
            DepartmentId: null,
            Avatar: null,
            SupervisorId: null,
            Password: null,
            UserName: null,
            Salt: null,
            LoginFailedCount: null,
            LastLogin: null,
            LastFailedLogin: null,
            Email: null,
            GenderId: 0,
            Recover: null,
            Reported: false,
            HasVerifiedEmail: false,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null,
            CreatedRoleId: null,
            CostCenterId: null,
            TeamId: null,
            PartnerID: null,
            Supervisor: null,
            Vendor: null,
            InverseSupervisor: null,
            UserRole: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            },
            ctor: function () {
                this.$initialize();
                this.InverseSupervisor = new (System.Collections.Generic.HashSet$1(Core.Models.User)).ctor();
                this.UserRole = new (System.Collections.Generic.HashSet$1(Core.Models.UserRole)).ctor();
            }
        }
    });

    Bridge.define("Core.Models.UserLogin", {
        props: {
            Id: 0,
            UserId: 0,
            IpAddress: null,
            SignInDate: null,
            RefreshToken: null,
            ExpiredDate: null
        }
    });

    Bridge.define("Core.Models.UserRole", {
        props: {
            Id: 0,
            UserId: 0,
            RoleId: 0,
            Active: false,
            EffectiveDate: null,
            ExpiredDate: null,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null,
            Role: null,
            User: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            }
        }
    });

    Bridge.define("Core.Models.UserSeq", {
        props: {
            Id: 0,
            EntityId: 0,
            IsMonthlyRecycle: false,
            LastKey: 0,
            Active: false,
            InsertedBy: 0,
            InsertedDate: null,
            UpdatedBy: null,
            UpdatedDate: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            }
        }
    });

    Bridge.define("Core.Models.UserSetting", {
        props: {
            Id: 0,
            RoleId: null,
            UserId: null,
            Name: null,
            Value: null,
            ParentId: null,
            Path: null,
            Description: null,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null,
            Role: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            }
        }
    });

    Bridge.define("Core.Models.Vendor", {
        props: {
            Id: 0,
            VendorTypeId: null,
            Description: null,
            Avatar: null,
            CustomerGroupId: null,
            SaleId: 0,
            UserId: null,
            CustomerStateId: null,
            LastContactDate: null,
            IsSelf: false,
            IsInternal: false,
            PhoneNumber: null,
            PhoneNumber2: null,
            Address: null,
            Address2: null,
            Note: null,
            Email: null,
            Fax: null,
            Skype: null,
            Zalo: null,
            Viber: null,
            OtherContact: null,
            TaxCode: null,
            CompanyLocalShortName: null,
            CompanyInterShortName: null,
            CompanyLocalFullName: null,
            CompanyInterFullName: null,
            CompanyLocalAddress: null,
            CompanyInterAddress: null,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null,
            RoleId: null,
            IsTenant: false,
            ParentId: null,
            TenantId: null,
            ConStr: null,
            NationalityId: null,
            SeqKey: null,
            DebtCountFinished: false,
            DebtDate: null,
            DebtDateTypeId: null,
            DebtExportDate: null,
            OwnerId: null,
            CollectOnBehalfDay: null,
            GlobalId: null,
            PartnerId: null,
            Parent: null,
            Tenant: null,
            InverseParent: null,
            InverseTenant: null,
            User: null,
            VendorBranch: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            },
            ctor: function () {
                this.$initialize();
                this.InverseParent = new (System.Collections.Generic.HashSet$1(Core.Models.Vendor)).ctor();
                this.InverseTenant = new (System.Collections.Generic.HashSet$1(Core.Models.Vendor)).ctor();
                this.User = new (System.Collections.Generic.HashSet$1(Core.Models.User)).ctor();
                this.VendorBranch = new (System.Collections.Generic.HashSet$1(Core.Models.VendorBranch)).ctor();
            }
        }
    });

    Bridge.define("Core.Models.VendorBranch", {
        props: {
            Id: 0,
            CustomerId: null,
            VendorId: null,
            RegionId: null,
            Address: null,
            PhoneNumber: null,
            InsertedDate: null,
            InsertedBy: null,
            UpdatedDate: null,
            UpdatedBy: null,
            Active: false,
            Name: null,
            Description: null,
            TaxCode: null,
            ParentId: null,
            Path: null,
            Level: null,
            Parent: null,
            Vendor: null,
            InverseParent: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            },
            ctor: function () {
                this.$initialize();
                this.InverseParent = new (System.Collections.Generic.HashSet$1(Core.Models.VendorBranch)).ctor();
            }
        }
    });

    Bridge.define("Core.Models.Webhook", {
        props: {
            Id: 0,
            EntityId: null,
            SubName: null,
            SubUrl: null,
            SubUsername: null,
            SubPassword: null,
            AuthVersionId: 0,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null,
            EventTypeId: 0,
            Method: null,
            ApiKey: null,
            ApiKeyHeader: null,
            LoginUrl: null,
            UsernameKey: null,
            PasswordKey: null,
            AccessTokenField: null,
            TokenPrefix: null,
            SavedToken: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            }
        }
    });

    Bridge.define("Core.Models.WebSocketResponse$1", function (T) { return {
        props: {
            EntityId: 0,
            Data: Bridge.getDefaultValue(T),
            DataList: null
        }
    }; });

    Bridge.define("Core.MVVM.ElementType", {
        $kind: "enum",
        statics: {
            fields: {
                a: 0,
                abbr: 1,
                address: 2,
                area: 3,
                article: 4,
                aside: 5,
                audio: 6,
                b: 7,
                base: 8,
                bdi: 9,
                bdo: 10,
                blockquote: 11,
                button: 12,
                canvas: 13,
                caption: 14,
                cite: 15,
                code: 16,
                col: 17,
                colgroup: 18,
                datalist: 19,
                dd: 20,
                del: 21,
                details: 22,
                dfn: 23,
                div: 24,
                dl: 25,
                dt: 26,
                em: 27,
                embed: 28,
                fieldset: 29,
                figcaption: 30,
                figure: 31,
                footer: 32,
                form: 33,
                h1: 34,
                h2: 35,
                h3: 36,
                h4: 37,
                h5: 38,
                h6: 39,
                head: 40,
                header: 41,
                i: 42,
                iframe: 43,
                img: 44,
                input: 45,
                ins: 46,
                kbd: 47,
                keygen: 48,
                label: 49,
                legend: 50,
                li: 51,
                link: 52,
                main: 53,
                map: 54,
                mark: 55,
                menu: 56,
                menuitem: 57,
                meta: 58,
                meter: 59,
                nav: 60,
                object: 61,
                ol: 62,
                ptgroup: 63,
                option: 64,
                output: 65,
                p: 66,
                param: 67,
                pre: 68,
                progress: 69,
                q: 70,
                rp: 71,
                rt: 72,
                ruby: 73,
                s: 74,
                samp: 75,
                script: 76,
                section: 77,
                select: 78,
                small: 79,
                source: 80,
                span: 81,
                strong: 82,
                style: 83,
                sub: 84,
                summary: 85,
                sup: 86,
                table: 87,
                tbody: 88,
                td: 89,
                textarea: 90,
                tfoot: 91,
                th: 92,
                thead: 93,
                time: 94,
                title: 95,
                tr: 96,
                track: 97,
                u: 98,
                ul: 99,
                var: 100,
                video: 101
            }
        }
    });

    Bridge.define("Core.MVVM.Html", {
        statics: {
            fields: {
                _instance: null
            },
            props: {
                Context: null,
                Instance: {
                    get: function () {
                        if (Core.MVVM.Html._instance == null) {
                            Core.MVVM.Html._instance = new Core.MVVM.Html.ctor();
                        }

                        return Core.MVVM.Html._instance;
                    }
                }
            },
            methods: {
                Take$1: function (selector) {
                    Core.MVVM.Html.Context = Bridge.as(document.querySelector(selector), HTMLElement);
                    return Core.MVVM.Html.Instance;
                },
                Take: function (ele) {
                    Core.MVVM.Html.Context = ele;
                    return Core.MVVM.Html.Instance;
                },
                SetObservableValue: function (T, val, value) {
                    val.Data = System.String.isNullOrEmpty(value) ? Bridge.getDefaultValue(T) : Bridge.cast(Bridge.unbox(System.Convert.changeType(value, T), T), T);
                },
                SwapElement: function (T, observableArray, newIndex, oldIndex) {
                    var tmpData = observableArray.getItem(newIndex);
                    observableArray.setItem(newIndex, observableArray.getItem(oldIndex));
                    observableArray.setItem(oldIndex, tmpData);
                }
            }
        },
        props: {
            Div: {
                get: function () {
                    return this.Add(Core.MVVM.ElementType.div);
                }
            },
            Link: {
                get: function () {
                    return this.Add(Core.MVVM.ElementType.link);
                }
            },
            Script: {
                get: function () {
                    return this.Add(Core.MVVM.ElementType.script);
                }
            },
            Header: {
                get: function () {
                    return this.Add(Core.MVVM.ElementType.header);
                }
            },
            Section: {
                get: function () {
                    return this.Add(Core.MVVM.ElementType.section);
                }
            },
            Canvas: {
                get: function () {
                    return this.Add(Core.MVVM.ElementType.canvas);
                }
            },
            Video: {
                get: function () {
                    return this.Add(Core.MVVM.ElementType.video);
                }
            },
            Audio: {
                get: function () {
                    return this.Add(Core.MVVM.ElementType.audio);
                }
            },
            H1: {
                get: function () {
                    return this.Add(Core.MVVM.ElementType.h1);
                }
            },
            H2: {
                get: function () {
                    return this.Add(Core.MVVM.ElementType.h2);
                }
            },
            H3: {
                get: function () {
                    return this.Add(Core.MVVM.ElementType.h3);
                }
            },
            H4: {
                get: function () {
                    return this.Add(Core.MVVM.ElementType.h4);
                }
            },
            H5: {
                get: function () {
                    return this.Add(Core.MVVM.ElementType.h5);
                }
            },
            H6: {
                get: function () {
                    return this.Add(Core.MVVM.ElementType.h6);
                }
            },
            Nav: {
                get: function () {
                    return this.Add(Core.MVVM.ElementType.nav);
                }
            },
            Input: {
                get: function () {
                    return this.Add(Core.MVVM.ElementType.input);
                }
            },
            Select: {
                get: function () {
                    return this.Add(Core.MVVM.ElementType.select);
                }
            },
            Option: {
                get: function () {
                    return this.Add(Core.MVVM.ElementType.option);
                }
            },
            Span: {
                get: function () {
                    return this.Add(Core.MVVM.ElementType.span);
                }
            },
            Small: {
                get: function () {
                    return this.Add(Core.MVVM.ElementType.small);
                }
            },
            I: {
                get: function () {
                    return this.Add(Core.MVVM.ElementType.i);
                }
            },
            Img: {
                get: function () {
                    return this.Add(Core.MVVM.ElementType.img);
                }
            },
            Button: {
                get: function () {
                    return this.Add(Core.MVVM.ElementType.button);
                }
            },
            Table: {
                get: function () {
                    return this.Add(Core.MVVM.ElementType.table);
                }
            },
            Thead: {
                get: function () {
                    return this.Add(Core.MVVM.ElementType.thead);
                }
            },
            Th: {
                get: function () {
                    return this.Add(Core.MVVM.ElementType.th);
                }
            },
            TBody: {
                get: function () {
                    return this.Add(Core.MVVM.ElementType.tbody);
                }
            },
            TFooter: {
                get: function () {
                    return this.Add(Core.MVVM.ElementType.tfoot);
                }
            },
            TRow: {
                get: function () {
                    return this.Add(Core.MVVM.ElementType.tr);
                }
            },
            TData: {
                get: function () {
                    return this.Add(Core.MVVM.ElementType.td);
                }
            },
            P: {
                get: function () {
                    return this.Add(Core.MVVM.ElementType.p);
                }
            },
            TextArea: {
                get: function () {
                    return this.Add(Core.MVVM.ElementType.textarea);
                }
            },
            Br: {
                get: function () {
                    var br = document.createElement("br");
                    Core.MVVM.Html.Context.appendChild(br);
                    return this;
                }
            },
            Hr: {
                get: function () {
                    var hr = document.createElement("hr");
                    Core.MVVM.Html.Context.appendChild(hr);
                    return this;
                }
            },
            Ul: {
                get: function () {
                    return this.Add(Core.MVVM.ElementType.ul);
                }
            },
            Li: {
                get: function () {
                    return this.Add(Core.MVVM.ElementType.li);
                }
            },
            Aside: {
                get: function () {
                    return this.Add(Core.MVVM.ElementType.aside);
                }
            },
            A: {
                get: function () {
                    return this.Add(Core.MVVM.ElementType.a);
                }
            },
            Form: {
                get: function () {
                    return this.Add(Core.MVVM.ElementType.form);
                }
            },
            Label: {
                get: function () {
                    return this.Add(Core.MVVM.ElementType.label);
                }
            },
            End: {
                get: function () {
                    Core.MVVM.Html.Context = Core.MVVM.Html.Context.parentElement;
                    return this;
                }
            }
        },
        ctors: {
            $ctor2: function (selector) {
                this.$initialize();
                Core.MVVM.Html.Context = Bridge.as(document.querySelector(selector), HTMLElement);
            },
            ctor: function () {
                this.$initialize();

            },
            $ctor1: function (ele) {
                this.$initialize();
                Core.MVVM.Html.Context = ele;
            }
        },
        methods: {
            GetContext: function () {
                return Core.MVVM.Html.Context;
            },
            EndOf: function (type) {
                return this.EndOf$1(System.Enum.toString(Core.MVVM.ElementType, type));
            },
            EndOf$1: function (selector) {
                var result = Core.MVVM.Html.Context;
                while (result != null) {
                    if (result.querySelector(selector) != null) {
                        break;
                    } else {
                        result = result.parentElement;
                    }
                }

                Core.MVVM.Html.Context = result || (function () {
                    throw new System.InvalidOperationException.$ctor1("Cannot find the element of selector " + (selector || ""));
                })();
                return this;
            },
            Closest: function (type) {
                var func = Core.MVVM.Html.Context.closest;
                Core.MVVM.Html.Context = Bridge.cast(func.call(Core.MVVM.Html.Context, System.Enum.toString(Core.MVVM.ElementType, type)), HTMLElement);
                return this;
            },
            Render$1: function (html) {
                Core.MVVM.Html.Context.innerHTML = html;
            },
            Render: function () {
                // Method intentionally left empty.
            },
            Add: function (type) {
                var ele = document.createElement(System.Enum.toString(Core.MVVM.ElementType, type));
                Core.MVVM.Html.Context.appendChild(ele);
                Core.MVVM.Html.Context = ele;
                return this;
            },
            Id: function (id) {
                Core.MVVM.Html.Context.id = id;
                return this;
            },
            Style$1: function (style) {
                if (System.String.isNullOrWhiteSpace(style)) {
                    return this;
                }

                var oldStyle = Core.MVVM.Html.Context.style.cssText;
                if (oldStyle.charCodeAt(((oldStyle.length - 1) | 0)) !== 59) {
                    oldStyle = (oldStyle || "") + String.fromCharCode(59);
                }

                if (style.charCodeAt(((style.length - 1) | 0)) !== 59) {
                    style = (style || "") + String.fromCharCode(59);
                }

                var styleComputed = (oldStyle || "") + (style.trim() || "");
                var distinctStyle = System.Linq.Enumerable.from(styleComputed.trim().split(";"), System.String).select(function (x) {
                        var keyValue = x.trim();
                        var splitterIndex = System.String.indexOf(keyValue, ":");
                        return new $asm.$AnonymousType$1(System.String.trimEnd(keyValue.substr(0, splitterIndex)), System.String.trimStart(keyValue.substr(((splitterIndex + 1) | 0))));
                    }).where(function (x) {
                    return !System.String.isNullOrEmpty(x.Key);
                }).groupBy(function (x) {
                    return x.Key;
                }).select(function (x) {
                    return x.last();
                }).select(function (x) {
                    return System.String.format("{0}: {1}", x.Key, x.Value);
                });
                Core.MVVM.Html.Context.style.cssText = Bridge.toArray(distinctStyle).join(";");
                return this;
            },
            Style: function (style) {
                var $t;
                $t = Bridge.getEnumerator(Object.getOwnPropertyNames(Bridge.unbox(style)));
                try {
                    while ($t.moveNext()) {
                        var key = $t.Current;
                        Core.MVVM.Html.Context.style[key] = style[key];
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                return this;
            },
            Clear: function () {
                if (Core.MVVM.Html.Context != null) {
                    Core.MVVM.Html.Context.textContent = "";
                    Core.MVVM.Html.Context.innerHTML = "";
                }
                return this;
            },
            If: function (condition, doif, doelse) {
                if (doelse === void 0) { doelse = null; }
                if (condition) {
                    doif();
                } else {
                    doelse();
                }

                return this;
            },
            Checkbox: function (value) {
                var $t;
                this.Add(Core.MVVM.ElementType.input);
                var checkbox = Bridge.as(Core.MVVM.Html.Context, HTMLInputElement);
                checkbox.setAttribute("type", "checkbox");
                checkbox.checked = ($t = value, $t != null ? $t : false);
                this.Event$1("change", function (e) {
                    value = (Bridge.as(e.target, HTMLInputElement)).checked;
                });
                this.Event$1("click", function (e) {
                    value = (Bridge.as(e.target, HTMLInputElement)).checked;
                });
                return this;
            },
            Value: function (val) {
                var input = Core.MVVM.Html.Context;
                input.value = val;
                return this;
            },
            Value$1: function (T, val) {
                var $t;
                var input = Core.MVVM.Html.Context;
                if (input != null) {
                    input.value = ($t = val.Data) != null ? Bridge.toString($t) : null;
                    this.Event$1("input", function (e) {
                        var $t1;
                        Core.MVVM.Html.SetObservableValue(T, val, ($t1 = input.value) != null ? Bridge.toString($t1) : null);
                    });
                    val.addChanged(function (arg) {
                        input.value = arg.NewData != null ? Bridge.toString(arg.NewData) : "";
                    });
                }
                return this;
            },
            Attr$1: function (attr, val) {
                Core.MVVM.Html.Context.setAttribute(attr, val);
                return this;
            },
            Attr: function (attr, val) {
                Core.MVVM.Html.Context.setAttribute(attr, Bridge.toString(val));
                return this;
            },
            DataAttr$1: function (attr, val) {
                Core.MVVM.Html.Context.setAttribute("data-" + (attr || ""), val);
                return this;
            },
            DataAttr: function (attr, obj) {
                Core.MVVM.Html.Context.setAttribute("data-" + (attr || ""), Bridge.toString(obj));
                return this;
            },
            Type$1: function (val) {
                Core.MVVM.Html.Context.setAttribute("type", val);
                return this;
            },
            Type: function (type) {
                Core.MVVM.Html.Context.setAttribute("type", System.Enum.toString(System.String, type));
                return this;
            },
            Href: function (val) {
                Core.MVVM.Html.Context.setAttribute("href", val);
                return this;
            },
            Src: function (val) {
                Core.MVVM.Html.Context.setAttribute("src", val);
                return this;
            },
            /**
             * Append text node, auto enclosing
             *
             * @instance
             * @public
             * @this Core.MVVM.Html
             * @memberof Core.MVVM.Html
             * @param   {string}            val
             * @return  {Core.MVVM.Html}
             */
            Text: function (val) {
                if (System.String.isNullOrEmpty(val)) {
                    return this;
                }
                var text = document.createTextNode(val);
                Core.MVVM.Html.Context.appendChild(text);
                return this;
            },
            Text$1: function (T, val) {
                var text = document.createTextNode(Bridge.toString(val.Data));
                val.addChanged(function (arg) {
                    var $t;
                    text.textContent = ($t = arg.NewData) != null ? Bridge.toString($t) : null;
                });
                Core.MVVM.Html.Context.appendChild(text);
                return this;
            },
            InnerHTML: function (val) {
                Core.MVVM.Html.Context.innerHTML = val;
                return this;
            },
            Number: function (val) {
                var text = document.createTextNode(System.String.format("{0:n0}", [Bridge.box(val.Data, System.Int32)]));
                val.addChanged(function (arg) {
                    text.textContent = System.String.format("{0:n0}", [Bridge.box(arg.NewData, System.Int32)]);
                });
                Core.MVVM.Html.Context.appendChild(text);
                return this;
            },
            Event: function (type, action) {
                Core.MVVM.Html.Context.addEventListener(type, action);
                return this;
            },
            Event$1: function (type, action) {
                Core.MVVM.Html.Context.addEventListener(type, action);
                return this;
            },
            Event$4: function (T, type, action, model) {
                Core.MVVM.Html.Context.addEventListener(type, function (e) {
                    action(e, model);
                });
                return this;
            },
            Event$2: function (T, type, action, model) {
                Core.MVVM.Html.Context.addEventListener(type, function (e) {
                    action(model);
                });
                return this;
            },
            Event$3: function (T, type, action, model) {
                Core.MVVM.Html.Context.addEventListener(type, function (e) {
                    action(model, e);
                });
                return this;
            },
            AsyncEvent$2: function (T, type, action, model) {
                Core.MVVM.Html.Context.addEventListener(type, Bridge.fn.bind(this, function (e) {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = action(model);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }));
                return this;
            },
            AsyncEvent$3: function (T, type, action, model) {
                Core.MVVM.Html.Context.addEventListener(type, Bridge.fn.bind(this, function (e) {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = action(model, e);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }));
                return this;
            },
            AsyncEvent: function (type, action) {
                Core.MVVM.Html.Context.addEventListener(type, Bridge.fn.bind(this, function (e) {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = action();
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }));
                return this;
            },
            AsyncEvent$1: function (type, action) {
                Core.MVVM.Html.Context.addEventListener(type, Bridge.fn.bind(this, function (e) {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = action(e);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }));
                return this;
            },
            Trigger: function (type) {
                var e = new Event(System.Enum.toString(System.String, type), new Object());
                Core.MVVM.Html.Context.dispatchEvent(e);
                return this;
            },
            ClearContextContent: function () {
                Core.MVVM.Html.Context.innerHTML = "";
            },
            ForEach$2: function (T, list, renderer) {
                if (list == null) {
                    throw new System.ArgumentNullException.$ctor1("list");
                }

                var element = Core.MVVM.Html.Context;

                var length = System.Linq.Enumerable.from(list, T).count();
                var index = -1;
                var enumerator = Bridge.getEnumerator(list, T);

                while (((index = (index + 1) | 0)) < length) {
                    Core.MVVM.Html.Context = element;
                    enumerator.System$Collections$IEnumerator$moveNext();
                    renderer.call(element, enumerator[Bridge.geti(enumerator, "System$Collections$Generic$IEnumerator$1$" + Bridge.getTypeAlias(T) + "$Current$1", "System$Collections$Generic$IEnumerator$1$Current$1")], Bridge.box(index, System.Int32));
                }
                Core.MVVM.Html.Context = element;
                return this;
            },
            ForEach$1: function (T, list, renderer) {
                if (list == null) {
                    throw new System.ArgumentNullException.$ctor1("list");
                }

                var element = Core.MVVM.Html.Context;

                var length = System.Linq.Enumerable.from(list, T).count();
                var index = -1;
                var enumerator = Bridge.getEnumerator(list, T);

                while (((index = (index + 1) | 0)) < length) {
                    Core.MVVM.Html.Context = element;
                    enumerator.System$Collections$IEnumerator$moveNext();
                    renderer.call(element, enumerator[Bridge.geti(enumerator, "System$Collections$Generic$IEnumerator$1$" + Bridge.getTypeAlias(T) + "$Current$1", "System$Collections$Generic$IEnumerator$1$Current$1")], Bridge.box(index, System.Int32));
                }
                Core.MVVM.Html.Context = element;
                return this;
            },
            ForEach: function (T, observableArray, renderer) {
                if (observableArray == null) {
                    throw new System.ArgumentNullException.$ctor1("observableArray");
                }

                var element = Core.MVVM.Html.Context;

                var list = observableArray.Data;
                var length = list.Count;
                var index = -1;

                while (((index = (index + 1) | 0)) < length) {
                    Core.MVVM.Html.Context = element;
                    renderer(list.getItem(index), index);
                }
                observableArray.ListChanged = Bridge.fn.combine(observableArray.ListChanged, Bridge.fn.bind(this, function (e) {
                    var $t;
                    e.Element = element;
                    e.Renderer = renderer;
                    e.Action = ($t = e.Action, $t != null ? $t : Core.MVVM.ObservableAction.Render);
                    this.Update(T, e, observableArray);
                }));
                return this;
            },
            Update: function (T, arg, observableArray) {
                Core.MVVM.Html.Context = arg.Element;
                var numOfElement;
                switch (arg.Action) {
                    case Core.MVVM.ObservableAction.Add: 
                        observableArray.Data.insert(arg.Index, arg.Item);
                        if (arg.Index === ((arg.ListData.Count - 1) | 0)) {
                            arg.Renderer.call(arg.Element, arg.Item, Bridge.box(arg.Index, System.Int32));
                            return;
                        }
                        var div = document.createElement("div");
                        Core.MVVM.Html.Context = div;
                        arg.Renderer.call(div, arg.Item, Bridge.box(arg.Index, System.Int32));
                        this.AppendChildList(arg.Element, div, arg.Index);
                        break;
                    case Core.MVVM.ObservableAction.Remove: 
                        observableArray.Data.remove(arg.Item);
                        numOfElement = (Bridge.Int.div(arg.Element.children.length, (((arg.ListData.Count + 1) | 0)))) | 0;
                        this.RemoveChildList(arg.Element, arg.Index, numOfElement);
                        break;
                    case Core.MVVM.ObservableAction.Move: 
                        numOfElement = (Bridge.Int.div(arg.Element.children.length, arg.ListData.Count)) | 0;
                        var newIndex = arg.Index;
                        var oldIndex = arg.ListData.indexOf(arg.Item);
                        if (newIndex === oldIndex) {
                            return;
                        }
                        Core.MVVM.Html.SwapElement(T, observableArray.Data, newIndex, oldIndex);
                        var firstOldElementIndex = Bridge.Int.mul(oldIndex, numOfElement);
                        var nodeToInsert = oldIndex < newIndex ? arg.Element.children[Bridge.Int.mul((((newIndex + 1) | 0)), numOfElement)] : arg.Element.children[Bridge.Int.mul(newIndex, numOfElement)];
                        for (var j = 0; j < numOfElement; j = (j + 1) | 0) {
                            arg.Element.insertBefore(arg.Element.children[firstOldElementIndex], nodeToInsert);
                            if (oldIndex > newIndex) {
                                firstOldElementIndex = (firstOldElementIndex + 1) | 0;
                            }
                        }
                        break;
                    case Core.MVVM.ObservableAction.Render: 
                        this.ClearContextContent();
                        var length = arg.ListData.Count;
                        var i = -1;
                        while (((i = (i + 1) | 0)) < length) {
                            Core.MVVM.Html.Context = arg.Element;
                            arg.Renderer.call(arg.Element, arg.ListData.getItem(i), Bridge.box(i, System.Int32));
                        }
                        break;
                }
            },
            AppendChildList: function (parent, tmpNode, index) {
                index = Bridge.Int.mul(index, tmpNode.children.length);
                var previousNode = parent.children[index];
                while (tmpNode.children.length > 0) {
                    parent.insertBefore(tmpNode.children[0], previousNode);
                }
            },
            RemoveChildList: function (parent, index, numOfElement) {
                var startIndex = Bridge.Int.mul(index, numOfElement);
                for (var i = 0; i < numOfElement && parent.children.length > 0; i = (i + 1) | 0) {
                    parent.removeChild(parent.children[startIndex]);
                }
            },
            Dropdown$1: function (T, list, selectedItem, displayField, valueField) {
                if (displayField === void 0) { displayField = null; }
                if (valueField === void 0) { valueField = null; }
                if (!Bridge.referenceEquals(Core.MVVM.Html.Context.nodeName.toLowerCase(), "select")) {
                    this.Select.Render();
                }
                var select = Bridge.as(Core.MVVM.Html.Context, HTMLSelectElement);
                list.ForEach(Bridge.fn.bind(this, function (model) {
                    var $t, $t1;
                    var text = displayField == null ? Bridge.toString(model) : ($t = model[displayField]) != null ? Bridge.toString($t) : null;
                    var value = valueField == null ? Bridge.toString(model) : ($t1 = model[valueField]) != null ? Bridge.toString($t1) : null;
                    this.Option.Text(text).Value(value).End.Render();
                }));
                select.selectedIndex = this.GetSelectedIndex(T, list, selectedItem, valueField);
                return this;
            },
            Dropdown: function (T, list, selectedItem, displayField, valueField) {
                var $t;
                if (!Bridge.referenceEquals(Core.MVVM.Html.Context.nodeName.toLowerCase(), "select")) {
                    this.Select.Render();
                }
                var select = Bridge.as(Core.MVVM.Html.Context, HTMLSelectElement);
                this.ForEach(T, list, Bridge.fn.bind(this, function (model, index) {
                    var $t, $t1;
                    var text = ($t = model[displayField]) != null ? Bridge.toString($t) : null;
                    var value = ($t1 = model[valueField]) != null ? Bridge.toString($t1) : null;
                    this.Option.Text(text).Value(value).End.Render();
                }));
                select.selectedIndex = this.GetSelectedIndex(T, ($t = T, System.Linq.Enumerable.from(list.Data, $t).toList($t)), selectedItem.Data, valueField);
                list.ListChanged = Bridge.fn.combine(list.ListChanged, Bridge.fn.bind(this, function (realList) {
                    var $t1;
                    select.selectedIndex = this.GetSelectedIndex(T, ($t1 = T, System.Linq.Enumerable.from(realList.ListData, $t1).toList($t1)), selectedItem.Data, valueField);
                }));
                this.Event("change", function () {
                    var selectedObj = list.Data.getItem(select.selectedIndex);
                    selectedItem.Data = selectedObj;
                });
                selectedItem.addChanged(Bridge.fn.bind(this, function (val) {
                    var $t1;
                    select.selectedIndex = this.GetSelectedIndex(T, ($t1 = T, System.Linq.Enumerable.from(list.Data, $t1).toList($t1)), val.NewData, valueField);
                }));

                return this;
            },
            GetSelectedIndex: function (T, list, item, valueField) {
                if (item == null) {
                    return -1;
                }

                var arr = list.ToArray();
                var index = System.Array.indexOfT(arr, item);
                if (!Bridge.referenceEquals(valueField, "")) {
                    var selectedItem = System.Array.find(T, arr, function (x) {
                            return Bridge.referenceEquals(x[valueField], item[valueField]);
                        });
                    index = System.Array.indexOfT(arr, selectedItem);
                }
                return index;
            },
            Visibility$1: function (visible) {
                var ele = Core.MVVM.Html.Context;
                ele.style.visibility = visible ? "" : System.Enum.toString(System.String, "hidden");
                return this;
            },
            Visibility: function (visible) {
                var ele = Core.MVVM.Html.Context;
                ele.style.visibility = visible.Data ? "" : System.Enum.toString(System.String, "hidden");
                visible.addChanged(function (arg) {
                    ele.style.visibility = arg.NewData ? "" : System.Enum.toString(System.String, "hidden");
                });
                return this;
            },
            Display$1: function (shouldShow) {
                var ele = Core.MVVM.Html.Context;
                ele.style.display = shouldShow ? "" : System.Enum.toString(System.String, "none");
                return this;
            },
            Display: function (shouldShow) {
                var ele = Core.MVVM.Html.Context;
                ele.style.display = shouldShow.Data ? "" : System.Enum.toString(System.String, "none");
                shouldShow.addChanged(function (arg) {
                    ele.style.display = arg.NewData ? "" : System.Enum.toString(System.String, "none");
                });
                return this;
            }
        }
    });

    Bridge.define("$AnonymousType$1", $asm, {
        $kind: "anonymous",
        ctors: {
            ctor: function (key, value) {
                this.Key = key;
                this.Value = value;
            }
        },
        methods: {
            equals: function (o) {
                if (!Bridge.is(o, $asm.$AnonymousType$1)) {
                    return false;
                }
                return Bridge.equals(this.Key, o.Key) && Bridge.equals(this.Value, o.Value);
            },
            getHashCode: function () {
                var h = Bridge.addHash([7550196186, this.Key, this.Value]);
                return h;
            },
            toJSON: function () {
                return {
                    Key : this.Key,
                    Value : this.Value
                };
            }
        },
        statics : {
            methods: {
                $metadata : function () { return {"m":[{"a":2,"n":"Key","t":16,"rt":System.String,"g":{"a":2,"n":"get_Key","t":8,"rt":System.String,"fg":"Key"},"fn":"Key"},{"a":2,"n":"Value","t":16,"rt":System.String,"g":{"a":2,"n":"get_Value","t":8,"rt":System.String,"fg":"Value"},"fn":"Value"}]}; }
            }
        }
    });

    Bridge.define("Core.MVVM.Observable$1", function (T) { return {
        fields: {
            Getter: null,
            Setter: null,
            _data: Bridge.getDefaultValue(T)
        },
        events: {
            Changed: null
        },
        props: {
            Data: {
                get: function () {
                    return !Bridge.staticEquals(this.Getter, null) ? this.Getter() : this._data;
                },
                set: function (value) {
                    var $t;
                    if (Bridge.equals(this._data, value)) {
                        return;
                    }

                    var oldValue = this._data;
                    this._data = value;
                    !Bridge.staticEquals(this.Changed, null) ? this.Changed(($t = new (Core.MVVM.ObservableArgs$1(T))(), $t.NewData = this._data, $t.OldData = oldValue, $t)) : null;
                    if (!Bridge.staticEquals(this.Setter, null)) {
                        this.Setter(this._data);
                    }
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                this._data = Bridge.getDefaultValue(T);
            },
            $ctor1: function (data) {
                this.$initialize();
                this._data = data;
            }
        }
    }; });

    Bridge.define("Core.MVVM.ObservableAction", {
        $kind: "enum",
        statics: {
            fields: {
                Render: 0,
                Add: 1,
                AddRange: 2,
                Update: 3,
                Remove: 4,
                Move: 5
            }
        }
    });

    Bridge.define("Core.MVVM.ObservableArgs", {
        props: {
            EvType: "abort",
            NewData: null,
            OldData: null,
            NewMatch: null,
            OldMatch: null,
            NewEntity: null,
            OldEntity: null,
            FieldName: null
        }
    });

    Bridge.define("Core.MVVM.ObservableArgs$1", function (T) { return {
        props: {
            NewData: Bridge.getDefaultValue(T),
            OldData: Bridge.getDefaultValue(T)
        }
    }; });

    Bridge.define("Core.MVVM.ObservableList$1", function (T) { return {
        fields: {
            /**
             * Use this to get and set List object without notifying change
             *
             * @instance
             * @public
             * @memberof Core.MVVM.ObservableList$1
             * @type System.Collections.Generic.List$1
             */
            _data: null,
            ListChanged: null
        },
        props: {
            /**
             * Use this to set List object and notify change
             *
             * @instance
             * @public
             * @memberof Core.MVVM.ObservableList$1
             * @function Data
             * @type System.Collections.Generic.List$1
             */
            Data: {
                get: function () {
                    return this._data;
                },
                set: function (value) {
                    var $t;
                    this._data = value;
                    !Bridge.staticEquals(this.ListChanged, null) ? this.ListChanged(($t = new (Core.MVVM.ObservableListArgs$1(T))(), $t.ListData = this._data, $t.Action = Core.MVVM.ObservableAction.Render, $t)) : null;
                }
            }
        },
        ctors: {
            /**
             * Init Observable list instance <br />
             Note that the data can be ICollection, don't use incompatible methods
             *
             * @instance
             * @public
             * @this Core.MVVM.ObservableList$1
             * @memberof Core.MVVM.ObservableList$1
             * @return  {void}
             */
            ctor: function () {
                this.$initialize();
                this._data = new (System.Collections.Generic.List$1(T)).ctor();
            },
            $ctor1: function (data) {
                this.$initialize();
                this._data = data;
            }
        },
        methods: {
            NotifyArrayChanged: function (arg) {
                !Bridge.staticEquals(this.ListChanged, null) ? this.ListChanged(arg) : null;
            },
            Add: function (item, index) {
                var $t, $t1;
                if (index === void 0) { index = null; }
                !Bridge.staticEquals(this.ListChanged, null) ? this.ListChanged(($t = new (Core.MVVM.ObservableListArgs$1(T))(), $t.ListData = this._data, $t.Item = item, $t.Index = ($t1 = index, $t1 != null ? $t1 : this._data.Count), $t.Action = Core.MVVM.ObservableAction.Add, $t)) : null;
            },
            Remove: function (item) {
                var $t;
                !Bridge.staticEquals(this.ListChanged, null) ? this.ListChanged(($t = new (Core.MVVM.ObservableListArgs$1(T))(), $t.ListData = this.Data, $t.Item = item, $t.Action = Core.MVVM.ObservableAction.Remove, $t)) : null;
            },
            RemoveAt: function (index) {
                var $t;
                if (index < 0) {
                    return;
                }

                var item = System.Linq.Enumerable.from(this._data, T).elementAt(index);
                !Bridge.staticEquals(this.ListChanged, null) ? this.ListChanged(($t = new (Core.MVVM.ObservableListArgs$1(T))(), $t.ListData = this._data, $t.Item = item, $t.Index = index, $t.Action = Core.MVVM.ObservableAction.Remove, $t)) : null;
            },
            Update: function (item, index) {
                var $t;
                !Bridge.staticEquals(this.ListChanged, null) ? this.ListChanged(($t = new (Core.MVVM.ObservableListArgs$1(T))(), $t.ListData = this._data, $t.Item = item, $t.Index = index, $t.Action = Core.MVVM.ObservableAction.Update, $t)) : null;
            }
        }
    }; });

    Bridge.define("Core.MVVM.ObservableListArgs$1", function (T) { return {
        props: {
            ListData: null,
            Item: Bridge.getDefaultValue(T),
            Index: 0,
            Action: null,
            Element: null,
            Renderer: null
        }
    }; });

    Bridge.define("Core.MVVM.SelectListItem", {
        props: {
            Value: null,
            Display: null
        }
    });

    Bridge.define("Core.ViewModels.ConfigEmailVM", {
        props: {
            Server: null,
            FromAddress: null,
            Password: null
        }
    });

    Bridge.define("Core.ViewModels.EmailVM", {
        props: {
            ToAddresses: null,
            CC: null,
            BCC: null,
            Subject: null,
            Body: null
        }
    });

    Bridge.define("Core.ViewModels.GPS", {
        props: {
            latitude: 0,
            longitude: 0
        }
    });

    Bridge.define("Core.ViewModels.LoginVM", {
        props: {
            CompanyName: null,
            UserName: null,
            Password: null,
            ClientId: null,
            AutoSignIn: false,
            RecoveryToken: null
        }
    });

    Bridge.define("Core.ViewModels.OwnershipRequest", {
        props: {
            EntityType: 0,
            RecordIds: null
        }
    });

    Bridge.define("Core.ViewModels.PatchUpdate", {
        props: {
            Changes: null
        }
    });

    Bridge.define("Core.ViewModels.PatchUpdateDetail", {
        props: {
            Field: null,
            OldVal: null,
            Value: null
        }
    });

    Bridge.define("Core.ViewModels.RefreshVM", {
        props: {
            AccessToken: null,
            RefreshToken: null
        }
    });

    Bridge.define("Core.ViewModels.RegistrationVM", {
        props: {
            Email: null,
            Password: null,
            ConfirmPassword: null,
            FullName: null,
            Address: null,
            IsVendor: false,
            TaxCode: null,
            LocalShortName: null,
            LocalFullName: null,
            InterShortName: null,
            InterFullName: null
        }
    });

    Bridge.define("Core.ViewModels.SyncConfigVM", {
        props: {
            Component: null,
            ComponentGroup: null,
            Feature: null,
            GridPolicy: null,
            SyncChildren: false,
            VendorId: null
        }
    });

    Bridge.define("Core.ViewModels.Token", {
        props: {
            UserId: 0,
            CostCenterId: null,
            UserName: null,
            Email: null,
            FirstName: null,
            LastName: null,
            FullName: null,
            Address: null,
            Avatar: null,
            AccessToken: null,
            RefreshToken: null,
            AccessTokenExp: null,
            RefreshTokenExp: null,
            HashPassword: null,
            Recovery: null,
            SysName: null,
            TenantCode: null,
            Vendor: null,
            RoleIds: null,
            RoleNames: null,
            AllRoleIds: null,
            CenterIds: null,
            Ssn: null,
            PhoneNumber: null,
            TeamId: null,
            PartnerId: null,
            RegionId: null,
            Additional: null
        },
        ctors: {
            init: function () {
                this.AccessTokenExp = System.DateTime.getDefaultValue();
                this.RefreshTokenExp = System.DateTime.getDefaultValue();
                this.SysName = "TMS";
            }
        }
    });

    Bridge.define("Core.ViewModels.VendorConnStrVM", {
        props: {
            Name: null,
            ConStr: null
        }
    });

    Bridge.define("System.ComponentModel.DescriptionAttribute", {
        inherits: [System.Attribute],
        props: {
            Description: null
        },
        ctors: {
            ctor: function (description) {
                this.$initialize();
                System.Attribute.ctor.call(this);
                this.Description = description;
            }
        }
    });

    Bridge.define("System.IO.Path", {
        statics: {
            fields: {
                ImgExt: null
            },
            ctors: {
                init: function () {
                    this.ImgExt = System.Array.init(["tif", "pjp", "xbm", "jxl", "svgz", "jpeg", "ico", "tiff", "gif", "svg", "jfif", "webp", "png", "bmp", "pjpeg", "avif", "jpg"], System.String);
                }
            },
            methods: {
                IsImage: function (path) {
                    var isImage = System.Array.contains(System.IO.Path.ImgExt, Core.Extensions.StringExt.SubStrIndex(System.IO.Path.GetExtension(path), 1), System.String);
                    return isImage;
                },
                CombineHostAndPath: function (host, path) {
                    var containHost = System.IO.Path.ContainHost(path);
                    return containHost ? path : System.IO.Path.Combine([host, path]);
                },
                ContainHost: function (path) {
                    return System.String.contains(path,"http://") || System.String.contains(path,"https://");
                },
                /**
                 * Get file's extension including "."
                 *
                 * @static
                 * @public
                 * @this System.IO.Path
                 * @memberof System.IO.Path
                 * @param   {string}    path
                 * @return  {string}
                 */
                GetExtension: function (path) {
                    if (System.String.isNullOrEmpty(path)) {
                        return "";
                    }
                    return path.substr(path.lastIndexOf("."));
                },
                GetFileName: function (path) {
                    if (System.String.isNullOrEmpty(path)) {
                        return "";
                    }
                    var lastSlash = path.lastIndexOf("/");
                    return lastSlash >= 0 ? path.substr(((lastSlash + 1) | 0)) : path;
                },
                GetFileNameWithoutExtension: function (path) {
                    if (System.String.isNullOrEmpty(path)) {
                        return "";
                    }
                    var lastSlashIndex = path.lastIndexOf("/");
                    if (lastSlashIndex < 0) {
                        lastSlashIndex = 0;
                    }
                    var lastDotIndex = path.lastIndexOf(".");
                    return path.substr(((lastSlashIndex + 1) | 0), ((((lastDotIndex - 1) | 0) - (lastSlashIndex >= 0 ? lastSlashIndex : 0)) | 0));
                },
                Combine: function (path) {
                    if (path === void 0) { path = []; }
                    if (path == null || path.length === 0) {
                        return "";
                    }
                    var nonEmptyPath = System.Linq.Enumerable.from(path, System.String).where(function (x) {
                            return !System.String.isNullOrEmpty(x);
                        }).select(function (x) {
                        var heading = x.charCodeAt(0) === 47 ? 1 : 0;
                        var traling = x.charCodeAt(((x.length - 1) | 0)) === 47 ? ((x.length - 1) | 0) : x.length;
                        return x.substr(heading, ((traling - heading) | 0));
                    }).ToArray(System.String);
                    return (nonEmptyPath).join("/");
                }
            }
        }
    });

    Bridge.define("Core.Components.EditableComponent", {
        inherits: [Core.Components.BaseComponent],
        statics: {
            fields: {
                RequiredRule: null
            },
            ctors: {
                init: function () {
                    var $t;
                    this.RequiredRule = ($t = new Core.Extensions.ValidationRule(), $t.Rule = Core.Extensions.ValidationRule.Required, $t.Message = "{0} kh\u00f4ng \u0111\u01b0\u1ee3c \u0111\u1ec3 tr\u1ed1ng!", $t);
                }
            }
        },
        fields: {
            _dirty: false,
            _disabled: false,
            _setDirty: false
        },
        props: {
            ClassName: {
                get: function () {
                    return this.Element.className;
                },
                set: function (value) {
                    this.Element.className = value;
                }
            },
            ValidationResult: null,
            ValidationRules: null,
            StopChildrenHistory: false,
            Updating: {
                get: function () {
                    return this.Entity != null && Bridge.unbox(this.Entity[Core.Components.BaseComponent.IdField]) > 0;
                }
            },
            BasicUpdateText: {
                get: function () {
                    return this.Updating ? "C\u1eadp nh\u1eadt" : "Th\u00eam m\u1edbi";
                }
            },
            Disabled: {
                get: function () {
                    return this._disabled;
                },
                set: function (value) {
                    var $t;
                    this._disabled = value;
                    this.SetDisableUI(value);
                    ($t = this.Children) != null ? $t.ForEach(function (x) {
                            var editable;
                            if (((editable = Bridge.as(x, Core.Components.EditableComponent))) != null) {
                                editable.Disabled = value;
                            }
                        }) : null;
                }
            },
            IsValid: {
                get: function () {
                    return this.ValidationResult.Count === 0;
                }
            },
            /**
             * This flag is populated to all parent if it is dirty
             *
             * @instance
             * @public
             * @memberof Core.Components.EditableComponent
             * @function Dirty
             * @type boolean
             */
            Dirty: {
                get: function () {
                    return this._dirty && !this.AlwaysValid || System.Linq.Enumerable.from(this.FilterChildren(Core.Components.EditableComponent, function (x) {
                            return x._dirty;
                        }, function (x) {
                            return !x.PopulateDirty || x.AlwaysValid;
                        }), Core.Components.EditableComponent).any();
                },
                set: function (value) {
                    this.UpdateDirty$1(value);
                }
            },
            OriginalText: null,
            AlwaysValid: false,
            PopulateDirty: false
        },
        ctors: {
            init: function () {
                this._setDirty = true;
                this.PopulateDirty = true;
            },
            ctor: function (guiInfo) {
                var $t;
                this.$initialize();
                Core.Components.BaseComponent.ctor.call(this);
                this.GuiInfo = guiInfo;
                if (this.GuiInfo != null && !Core.Extensions.StringExt.IsNullOrWhiteSpace(this.GuiInfo.Validation)) {
                    var rules = Newtonsoft.Json.JsonConvert.DeserializeObject(this.GuiInfo.Validation, System.Collections.Generic.List$1(Core.Extensions.ValidationRule));
                    if (Core.Extensions.IEnumerableExtensions.HasElement(Core.Extensions.ValidationRule, rules)) {
                        this.ValidationRules = ($t = Core.Extensions.ValidationRule, System.Linq.Enumerable.from(rules, $t).toDictionary(function (x) {
                                return x.Rule;
                            }, null, System.String, $t));
                    }
                } else {
                    this.ValidationRules = new (System.Collections.Generic.Dictionary$2(System.String,Core.Extensions.ValidationRule)).ctor();
                }

                this.ValidationResult = new (System.Collections.Generic.Dictionary$2(System.String,System.String)).ctor();
                this.Children = new (System.Collections.Generic.List$1(Core.Components.BaseComponent)).ctor();
                this.DOMContentLoaded = Bridge.fn.combine(this.DOMContentLoaded, Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3], $step);
                                switch ($step) {
                                    case 0: {
                                        this.SetRequired();
                                        if (this.GuiInfo != null && Core.Extensions.StringExt.HasAnyChar(this.GuiInfo.Events)) {
                                            $step = 1;
                                            continue;
                                        } 
                                        $step = 3;
                                        continue;
                                    }
                                    case 1: {
                                        $task1 = Core.Components.Extensions.ComponentExt.DispatchEventToHandlerAsync(this, this.GuiInfo.Events, "DOMContentLoaded", [this.Entity]);
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $task1.getAwaitedResult();
                                        $step = 3;
                                        continue;
                                    }
                                    case 3: {
                                        this.SetOldTextAndVal();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }));
            }
        },
        methods: {
            SetDisableUI: function (disabled) {
                if (this.Element == null) {
                    return;
                }

                if (disabled) {
                    this.Element.setAttribute("disabled", "disabled");
                } else {
                    this.Element.removeAttribute("disabled");
                    this.Element.setAttribute("enable", "true");
                }
            },
            UpdateView: function (force, dirty, componentNames) {
                var $t, $t1;
                if (force === void 0) { force = false; }
                if (dirty === void 0) { dirty = null; }
                if (componentNames === void 0) { componentNames = []; }
                this.PrepareForceAndDirty(force, dirty);
                if (Core.Extensions.IEnumerableExtensions.Nothing(Core.Components.BaseComponent, this.Children)) {
                    return;
                }

                if (Core.Extensions.IEnumerableExtensions.HasElement(System.String, componentNames)) {
                    var coms = System.Linq.Enumerable.from(this.FilterChildren(Core.Components.Section, function (x) {
                            return System.Array.contains(componentNames, x.Name, System.String) && Bridge.hasValue(x);
                        }), Core.Components.Section).selectMany(function (x) {
                            return System.Linq.Enumerable.from(x.FilterChildren(Core.Components.BaseComponent), Core.Components.BaseComponent).where(function (com) {
                                    return !(Bridge.is(com, Core.Components.Section));
                                });
                        });
                    var coms2 = System.Linq.Enumerable.from(this.FilterChildren(Core.Components.BaseComponent, function (x) {
                            return System.Array.contains(componentNames, x.Name, System.String);
                        }), Core.Components.BaseComponent).where(function (x) {
                            return !(Bridge.is(x, Core.Components.Section));
                        });
                    var shouldUpdate = coms.union(coms2).ToArray(Core.Components.BaseComponent);
                    $t = Bridge.getEnumerator(shouldUpdate);
                    try {
                        while ($t.moveNext()) {
                            var child = $t.Current;
                            child.PrepareForceAndDirty(force, dirty);
                            child.UpdateView(force, dirty, componentNames);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                } else {
                    var shouldUpdate1 = System.Linq.Enumerable.from(this.FilterChildren(Core.Components.BaseComponent), Core.Components.BaseComponent).where(function (x) {
                            return !(Bridge.is(x, Core.Components.Section));
                        }).ToArray(Core.Components.BaseComponent);
                    $t1 = Bridge.getEnumerator(shouldUpdate1);
                    try {
                        while ($t1.moveNext()) {
                            var child1 = $t1.Current;
                            child1.PrepareForceAndDirty(force, dirty);
                            child1.UpdateView(force, dirty, componentNames);
                        }
                    } finally {
                        if (Bridge.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$Dispose();
                        }
                    }
                }
            },
            PrepareForceAndDirty: function (force, dirty) {
                Core.Components.BaseComponent.prototype.PrepareForceAndDirty.call(this, force, dirty);
                if (System.Nullable.hasValue(dirty)) {
                    this._setDirty = System.Nullable.getValue(dirty);
                }
            },
            UpdateViewInternal: function (force, dirty) {
                Core.Components.BaseComponent.prototype.UpdateViewInternal.call(this, force, dirty);
                if (System.Nullable.hasValue(dirty)) {
                    this._setDirty = System.Nullable.getValue(dirty);
                }
            },
            UpdateDirty$1: function (dirty) {
                if (dirty) {
                    this.SetDirtyInternal();
                } else {
                    this.ClearDirtyInternal();
                    Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, this.FilterChildren(Core.Components.EditableComponent, function (x) {
                        return x._dirty;
                    }), function (x) {
                        x.ClearDirtyInternal();
                    });
                }
            },
            UpdateDirty: function (dirty, componentNames) {
                if (componentNames === void 0) { componentNames = []; }
                if (Core.Extensions.IEnumerableExtensions.Nothing(System.String, componentNames)) {
                    return;
                }
                Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, this.FilterChildren(Core.Components.EditableComponent, function (child) {
                    return child.GuiInfo != null && System.Array.contains(componentNames, child.Name, System.String);
                }), function (x) {
                    if (dirty) {
                        x.SetDirtyInternal();
                    } else {
                        x.ClearDirtyInternal();
                    }
                });
            },
            SetDirtyInternal: function () {
                this._dirty = this._setDirty;
                if (!this._setDirty) {
                    this._setDirty = true;
                }
                if (!this.Updating) {
                    this.SetOldTextAndVal();
                }
            },
            ClearDirtyInternal: function () {
                this._dirty = false;
                this.SetOldTextAndVal();
            },
            SetOldTextAndVal: function () {
                var $t, $t1;
                this.OriginalText = this.GetValueText();
                this.OldValue = ($t = Core.Extensions.Utils.GetComplexPropValue(this.Entity, ($t1 = this.GuiInfo) != null ? $t1.FieldName : null)) != null ? Bridge.toString($t) : null;
            },
            GetValueText: function () {
                if (this.Element == null) {
                    return "";
                }
                var input;
                if (((input = Bridge.as(this.Element, HTMLInputElement))) != null) {
                    return input.value;
                }
                var text;
                if (((text = Bridge.as(this.Element, HTMLTextAreaElement))) != null) {
                    return text.value;
                }
                return "";
            },
            ValidateAsync: function () {
                var $step = 0,
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0], $step);
                                switch ($step) {
                                    case 0: {
                                        this.ValidationResult.clear();
                                        $tcs.setResult(true);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            SetRequired: function () {
                var $t, $t1;
                if (Core.Extensions.IEnumerableExtensions.HasElement(System.Collections.Generic.KeyValuePair$2(System.String,Core.Extensions.ValidationRule), this.ValidationRules) && this.ValidationRules.containsKey(Core.Extensions.ValidationRule.Required)) {
                    ($t = this.Element) != null ? $t.setAttribute(Core.Extensions.ValidationRule.Required, System.Boolean.toString((true))) : null;
                } else {
                    ($t1 = this.Element) != null ? $t1.removeAttribute(Core.Extensions.ValidationRule.Required) : null;
                }
            },
            Validate: function (T, K, ruleType, value, validPredicate) {
                var $t, $t1;
                if (!this.ValidationRules.containsKey(ruleType)) {
                    return true;
                }

                var rule = this.ValidationRules.getItem(ruleType);
                if (rule == null || rule.Value1 == null) {
                    return true;
                }

                var field = Bridge.toString(rule.Value1);
                if (Core.Extensions.StringExt.IsNullOrWhiteSpace(field)) {
                    return true;
                }

                var ruleValue = Bridge.unbox(rule.Value1);
                var label = ruleValue;
                var hasField = { };
                var fieldVal = { };
                Bridge.Deconstruct(Core.Extensions.BridgeExt.GetComplexProp(this.Entity, field).$clone(), hasField, fieldVal);
                if (hasField.v) {
                    label = ($t = Core.Components.Extensions.ComponentExt.FirstOrDefault(this.Parent, function (x) {
                            return Bridge.referenceEquals(x.Name, field);
                        })) != null && ($t1 = $t.GuiInfo) != null ? $t1.Label : null;
                    ruleValue = Bridge.unbox(fieldVal.v);
                }
                if (!validPredicate(value, ruleValue)) {
                    System.Collections.Generic.CollectionExtensions.TryAdd(System.String, System.String, this.ValidationResult, ruleType, System.String.format(rule.Message, Core.Components.LangSelect.Get(this.GuiInfo.Label), label));
                    return true;
                } else {
                    this.ValidationResult.remove(ruleType);
                }

                return false;
            },
            ValidateRequired: function (T, Value) {
                if (this.Element == null || Core.Extensions.IEnumerableExtensions.Nothing(System.Collections.Generic.KeyValuePair$2(System.String,Core.Extensions.ValidationRule), this.ValidationRules)) {
                    return true;
                }

                if (!this.ValidationRules.containsKey(Core.Extensions.ValidationRule.Required)) {
                    this.Element.removeAttribute(Core.Extensions.ValidationRule.Required);
                    return true;
                }
                var requiredRule = this.ValidationRules.getItem(Core.Extensions.ValidationRule.Required);
                this.Element.setAttribute(Core.Extensions.ValidationRule.Required, System.Boolean.toString((true)));
                if (System.Collections.Generic.EqualityComparer$1(T).def.equals2(Value, Bridge.getDefaultValue(T)) || Core.Extensions.StringExt.IsNullOrWhiteSpace(Bridge.toString(Value))) {
                    System.Collections.Generic.CollectionExtensions.TryAdd(System.String, System.String, this.ValidationResult, Core.Extensions.ValidationRule.Required, System.String.format(requiredRule.Message, Core.Components.LangSelect.Get(this.GuiInfo.Label), this.Entity));
                    return true;
                } else {
                    this.ValidationResult.remove(Core.Extensions.ValidationRule.Required);
                    return false;
                }
            },
            AddRule: function (rule) {
                System.Collections.Generic.CollectionExtensions.TryAdd(System.String, Core.Extensions.ValidationRule, this.ValidationRules, rule.Rule, rule);
                if (Bridge.referenceEquals(rule.Rule, Core.Extensions.ValidationRule.Required)) {
                    this.Element.setAttribute(Core.Extensions.ValidationRule.Required, System.Boolean.toString((true)));
                }
            },
            RemoveRule: function (ruleName) {
                this.ValidationRules.remove(ruleName);
                if (!this.ValidationRules.containsKey(Core.Extensions.ValidationRule.Required)) {
                    this.Element.removeAttribute(Core.Extensions.ValidationRule.Required);
                }
            },
            CascadeField: function () {
                if (Core.Extensions.StringExt.IsNullOrEmpty(this.GuiInfo.CascadeField)) {
                    return;
                }

                var gridRow = Bridge.as(Core.Components.Extensions.ComponentExt.FindClosest(Core.Components.ListViewItem, this), Core.Components.EditableComponent);
                var root = gridRow || Core.Components.Extensions.ComponentExt.FindClosest(Core.Components.Forms.EditForm, this);
                var cascadeFields = System.Linq.Enumerable.from(this.GuiInfo.CascadeField.split(","), System.String).where(function (x) {
                        return Core.Extensions.StringExt.HasAnyChar(x);
                    }).select(function (x) {
                    return x.trim();
                });
                if (Core.Extensions.IEnumerableExtensions.Nothing(System.String, cascadeFields)) {
                    return;
                }

                cascadeFields.forEach(function (field) {
                    Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.BaseComponent, root.FilterChildren$1(function (x) {
                        return Bridge.referenceEquals(x.Name, field);
                    }), function (x) {
                        var com;
                        if (((com = Bridge.as(x, Core.Components.SearchEntry))) != null && com != null) {
                            com.Value = null;
                            if ((com != null ? com.RowData : null) != null) {
                                com.RowData.Data.clear();
                            }
                        } else {
                            x.UpdateView();
                        }
                    });
                });
            },
            BuildTextHistory: function (builder, visited) {
                if (builder === void 0) { builder = null; }
                if (visited === void 0) { visited = null; }
                if (builder == null) {
                    builder = new System.Text.StringBuilder();
                }
                if (visited == null) {
                    visited = new (System.Collections.Generic.HashSet$1(System.Object)).ctor();
                }
                if (visited.contains(this)) {
                    return builder;
                }
                visited.add(this);
                this.BuildInternal(builder, visited);
                return builder;
            },
            BuildInternal: function (builder, visited) {
                var $t;
                this.BuildHistoryInternal(builder);
                if (Core.Extensions.IEnumerableExtensions.HasElement(Core.Components.BaseComponent, this.Children) && !this.StopChildrenHistory) {
                    $t = Bridge.getEnumerator(System.Linq.Enumerable.from(this.Children, Core.Components.BaseComponent).where(function (x) {
                            return Bridge.is(x, Core.Components.EditableComponent);
                        }).select(function (x) {{ return Bridge.cast(x, Core.Components.EditableComponent); }}));
                    try {
                        while ($t.moveNext()) {
                            var child = $t.Current;
                            child.BuildTextHistory(builder, visited);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                }
                return;
            },
            BuildHistoryInternal: function (builder) {
                if (this.GuiInfo == null) {
                    return;
                }

                var updatedText = this.GetValueText();
                if (Core.Extensions.StringExt.IsNullOrWhiteSpace(updatedText)) {
                    updatedText = "N/A";
                }
                if (this._dirty && this.Updating) {
                    var originText = Core.Extensions.StringExt.IsNullOrWhiteSpace(this.OriginalText) ? "N/A" : this.OriginalText;
                    builder.append(Core.Components.LangSelect.Get(this.GuiInfo.Label)).append(": ").append(originText).append(" -> ").append(updatedText).append(Core.Extensions.Utils.NewLine);
                } else if (this._dirty || !this.Updating && this.AlwaysLogHistory) {
                    builder.append(Core.Components.LangSelect.Get(this.GuiInfo.Label)).append(": ").append(updatedText).append(Core.Extensions.Utils.NewLine);
                }
            },
            GetInvalid: function () {
                return new (Bridge.GeneratorEnumerable$1(Core.Components.EditableComponent))(Bridge.fn.bind(this, function ()  {
                    var $step = 0,
                        $jumpFromFinally,
                        $returnValue,
                        $t,
                        child,
                        $t1,
                        invalid,
                        $async_e;

                    var $enumerator = new (Bridge.GeneratorEnumerator$1(Core.Components.EditableComponent))(Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                switch ($step) {
                                    case 0: {
                                        if (this.AlwaysValid) {
                                                $step = 1;
                                                continue;
                                            } 
                                            $step = 2;
                                            continue;
                                    }
                                    case 1: {
                                        return false;
                                    }
                                    case 2: {
                                        if (!this.IsValid) {
                                                $step = 3;
                                                continue;
                                            } 
                                            $step = 5;
                                            continue;
                                    }
                                    case 3: {
                                        $enumerator.current = this;
                                            $step = 4;
                                            return true;
                                    }
                                    case 4: {
                                        $step = 5;
                                        continue;
                                    }
                                    case 5: {
                                        if (Core.Extensions.IEnumerableExtensions.HasElement(Core.Components.BaseComponent, this.Children)) {
                                                $step = 6;
                                                continue;
                                            } 
                                            $step = 14;
                                            continue;
                                    }
                                    case 6: {
                                        $t = Bridge.getEnumerator(System.Linq.Enumerable.from(this.Children, Core.Components.BaseComponent).where(function (x) {
                                                    var editable;
                                                    return ((editable = Bridge.as(x, Core.Components.EditableComponent))) != null;
                                                }).select(function (x) {{ return Bridge.cast(x, Core.Components.EditableComponent); }}));
                                            $step = 7;
                                            continue;
                                    }
                                    case 7: {
                                        if ($t.moveNext()) {
                                                child = $t.Current;
                                                $step = 8;
                                                continue;
                                            }
                                        $step = 13;
                                        continue;
                                    }
                                    case 8: {
                                        $t1 = Bridge.getEnumerator(child.GetInvalid(), Core.Components.EditableComponent);
                                            $step = 9;
                                            continue;
                                    }
                                    case 9: {
                                        if ($t1.moveNext()) {
                                                invalid = $t1.Current;
                                                $step = 10;
                                                continue;
                                            }
                                        $step = 12;
                                        continue;
                                    }
                                    case 10: {
                                        $enumerator.current = invalid;
                                            $step = 11;
                                            return true;
                                    }
                                    case 11: {
                                        $step = 9;
                                        continue;
                                    }
                                    case 12: {
                                        $step = 7;
                                        continue;
                                    }
                                    case 13: {
                                        $step = 14;
                                        continue;
                                    }
                                    case 14: {

                                    }
                                    default: {
                                        return false;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            throw $async_e;
                        }
                    }));
                    return $enumerator;
                }));
            },
            PopulateFields: function (entity) {
                if (entity === void 0) { entity = null; }
                if (this.Entity == null || Core.Extensions.StringExt.IsNullOrEmpty(this.GuiInfo.PopulateField)) {
                    return;
                }

                var gridRow = Bridge.as(Core.Components.Extensions.ComponentExt.FindClosest(Core.Components.ListViewItem, this), Core.Components.EditableComponent);
                var root = gridRow || this.EditForm;
                var func = { };
                var isFunc = Core.Extensions.Utils.IsFunction(this.GuiInfo.PopulateField, func);
                if (isFunc) {
                    func.v.call(null, this, Bridge.unbox(entity));
                    root.UpdateView$1(false);
                    return;
                }

                var populatedFields = System.Linq.Enumerable.from(this.GuiInfo.PopulateField.split(","), System.String).where(function (x) {
                        return Core.Extensions.StringExt.HasAnyChar(x);
                    }).select(function (x) {
                    return x.trim();
                });
                if (entity == null || Core.Extensions.IEnumerableExtensions.Nothing(System.String, populatedFields)) {
                    return;
                }

                populatedFields.forEach(Bridge.fn.bind(this, function (field) {
                    var isEditing = Bridge.unbox(this.Entity[Core.Components.BaseComponent.IdField]) <= 0;
                    Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, root.FilterChildren(Core.Components.EditableComponent, function (x) {
                        return Bridge.referenceEquals(x.Name, field);
                    }), Bridge.fn.bind(this, function (target) {
                        var value = Core.Extensions.Utils.GetComplexPropValue(entity, field);
                        var oldVal = Core.Extensions.Utils.GetComplexPropValue(this.Entity, field);
                        var targetType = Core.Extensions.BridgeExt.GetComplexPropType(Bridge.getType(this.Entity), field);
                        if (Bridge.referenceEquals(value, oldVal) || targetType == null || !Bridge.referenceEquals(Bridge.createInstance(targetType), oldVal)) {
                            return;
                        }
                        Core.Extensions.BridgeExt.SetComplexPropValue(this.Entity, field, value);
                        target.UpdateView(true, false);
                    }));
                }));
            }
        }
    });

    Bridge.define("Core.Components.PdfReport", {
        inherits: [Core.Components.BaseComponent],
        statics: {
            methods: {
                CloneRowTemplate: function (tbody, arr) {
                    if (arr == null || tbody == null) {
                        return;
                    }
                    for (var i = 0; i < arr.length; i = (i + 1) | 0) {
                        if (tbody.rows.length < ((i + 1) | 0)) {
                            var row = tbody.rows[((i - 1) | 0)].cloneNode(true);
                            tbody.appendChild(row);
                        }
                    }
                },
                RemoveRowButFirstTemplate: function (tbody) {
                    while (tbody.rows.length > 1) {
                        tbody.lastElementChild.remove();
                    }
                }
            }
        },
        fields: {
            _updateViewAwaiter$1: 0
        },
        props: {
            Data: null
        },
        ctors: {
            ctor: function (ui, ele) {
                if (ele === void 0) { ele = null; }

                this.$initialize();
                Core.Components.BaseComponent.ctor.call(this);
                this.GuiInfo = ui || (function () {
                    throw new System.ArgumentNullException.$ctor1("ui");
                })();
                this.Element = ele;
            }
        },
        methods: {
            Render: function () {
                if (this.Element == null) {
                    this.Element = Core.MVVM.Html.Take(this.ParentElement).Div.GetContext();
                }
                this.Element.innerHTML = null;
                System.Threading.Tasks.Task.run(Bridge.fn.cacheBind(this, this.RenderAsync));
            },
            RenderAsync: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    feaure, 
                    dataSet, 
                    formatted, 
                    dsCount, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2], $step);
                                switch ($step) {
                                    case 0: {
                                        this.DisposeChildren();
                                        $task1 = new Core.Clients.Client.$ctor1("Feature").FirstOrDefaultAsync(Core.Models.Feature, this.GuiInfo.DataSourceFilter);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        feaure = $taskResult1;
                                        if (feaure == null) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        $task2 = this.LoadData();
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        dataSet = $taskResult2;
                                        formatted = Core.Extensions.Utils.FormatEntity(feaure.Template, null, dataSet, function (x) {
                                            return "";
                                        }, void 0);
                                        this.Element.innerHTML = formatted;
                                        dsCount = 0;
                                        Core.Extensions.IEnumerableExtensions.ForEach(HTMLElement, this.Element.children, Bridge.fn.bind(this, function (child) {
                                            this.EditForm.BindingTemplate(child, this, false, dataSet, Bridge.fn.bind(this, function (ele, component, parent, isLayout, entity) {
                                                var table;
                                                if (((table = Bridge.as(ele, HTMLTableElement))) != null && Bridge.referenceEquals(table.dataset.grid, "true")) {
                                                    dsCount = (dsCount + 1) | 0;
                                                    var ds = dataSet["ds" + dsCount];
                                                    var com = new Core.Components.Section.$ctor1(Core.MVVM.ElementType.table);
                                                    com.Element = ele;
                                                    var tbody = table.tBodies[0];
                                                    var arr = Bridge.as(ds, System.Array.type(System.Object));
                                                    Core.Components.PdfReport.RemoveRowButFirstTemplate(tbody);
                                                    Core.Components.PdfReport.CloneRowTemplate(tbody, arr);
                                                    this.BindingRowData(tbody, arr);
                                                    this.EditForm.BindingTemplate(table.tFoot, com, isLayout, entity);
                                                    return com;
                                                }
                                                return this.EditForm.BindingData(ele, component, parent, isLayout, entity);
                                            }), void 0);
                                        }));
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            BindingRowData: function (tbody, arr) {
                if (arr == null || tbody == null) {
                    return;
                }
                for (var i = 0; i < arr.length; i = (i + 1) | 0) {
                    var html = Core.Extensions.Utils.FormatEntity(tbody.rows[i].innerHTML, null, arr[System.Array.index(i, arr)], function (x) {
                        return "";
                    });
                    tbody.rows[i].innerHTML = html;
                }
            },
            LoadData: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    dataSet, 
                    fn, 
                    isFn, 
                    datasource, 
                    $t, 
                    res, 
                    formatter, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3], $step);
                                switch ($step) {
                                    case 0: {
                                        dataSet = null;
                                        fn = { };
                                        isFn = Core.Extensions.Utils.IsFunction(this.GuiInfo.Query, fn);
                                        datasource = isFn ? Bridge.toString(fn.v.call(this, Bridge.unbox(this.Entity), this)) : Core.Extensions.Utils.FormatEntity$1(this.GuiInfo.Query, this.Entity);
                                        if (this.Data == null) {
                                            $step = 1;
                                            continue;
                                        } 
                                        $step = 3;
                                        continue;
                                    }
                                    case 1: {
                                        $task1 = new Core.Clients.Client.$ctor1("User").PostAsync(System.Array.type(System.Array.type(System.Object)), datasource, System.String.format("ReportDataSet?sys={0}", [this.GuiInfo.IdField]));
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        dataSet = ($t = $taskResult1, this.Data = $t, $t);
                                        $step = 3;
                                        continue;
                                    }
                                    case 3: {
                                        res = { };
                                        formatter = { };
                                        for (var i = 0; i < dataSet.length; i++) {
                                            if (i == 0) {
                                                for (var field in dataSet[0][0]) {
                                                    res[field] = dataSet[0][0][field];
                                                }
                                            }
                                            else {
                                                res['ds' + i] = dataSet[i];
                                            }
                                        }
                                        if (Core.Extensions.Utils.IsFunction(this.GuiInfo.FormatEntity, formatter)) {
                                            $tcs.setResult(formatter.v.call(null, Bridge.unbox(res), this));
                                            return;
                                        }
                                        $tcs.setResult(res);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            UpdateView: function (force, dirty, componentNames) {
                if (force === void 0) { force = false; }
                if (dirty === void 0) { dirty = null; }
                if (componentNames === void 0) { componentNames = []; }
                this.Data = null;
                window.clearTimeout(this._updateViewAwaiter$1);
                this._updateViewAwaiter$1 = window.setTimeout(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.RenderAsync();
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }), 100);
            }
        }
    });

    Bridge.define("Core.Fw.Menu", {
        inherits: [Core.Components.BaseComponent],
        statics: {
            fields: {
                ActiveClass: null,
                ASIDE_WIDTH: null,
                _timeperiodToExit: 0,
                TranslateY50: null,
                _main: null,
                _instance: null,
                _lastTimeBackPress: null
            },
            props: {
                Instance: {
                    get: function () {
                        if (Core.Fw.Menu._instance == null) {
                            Core.Fw.Menu._instance = new Core.Fw.Menu();
                        }

                        return Core.Fw.Menu._instance;
                    }
                }
            },
            ctors: {
                init: function () {
                    this._lastTimeBackPress = System.DateTime.getDefaultValue();
                    this.ActiveClass = "active";
                    this.ASIDE_WIDTH = "44px";
                    this._timeperiodToExit = 2000;
                    this.TranslateY50 = "translateY(-50%)";
                }
            },
            methods: {
                PressToExit: function () {
                    if (typeof(navigator.app) === 'undefined') return;
                    var time = System.DateTime.subdd(System.DateTime.getNow(), Core.Fw.Menu._lastTimeBackPress);
                    if (time.getTotalMilliseconds() < 2000) {
                        navigator.app.exitApp();
                        return;
                    }
                    Core.Fw.Menu._lastTimeBackPress = System.DateTime.getNow();
                    Core.Extensions.Toast.Small("B\u1ea5m quay l\u1ea1i 2 l\u1ea7n \u0111\u1ec3 tho\u00e1t", 1000);
                },
                AlterPositionSubMenu: function (top, li) {
                    if (li == null) {
                        return;
                    }
                    var ul = Bridge.as(li.querySelector(System.Enum.toString(Core.MVVM.ElementType, Core.MVVM.ElementType.ul)), HTMLElement);
                    if (ul == null) {
                        return;
                    }
                    ul.style.top = System.Single.format((top - 20)) + (Core.Extensions.Utils.Pixel || "");
                    ul.style.bottom = null;
                    ul.style.transform = null;
                    var outOfVp = Core.Extensions.HtmlElementExtension.OutOfViewport(ul);
                    if (outOfVp.Bottom) {
                        ul.style.top = null;
                        ul.style.bottom = System.Single.format((document.body.clientHeight - top)) + (Core.Extensions.Utils.Pixel || "");
                        outOfVp = Core.Extensions.HtmlElementExtension.OutOfViewport(ul);
                        if (outOfVp.Top) {
                            ul.style.top = "50%";
                            ul.style.bottom = null;
                            ul.style.transform = Core.Fw.Menu.TranslateY50;
                        }
                    }
                },
                OpenFeature: function (feature) {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        type, 
                        id, 
                        exists, 
                        instance, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            if (feature == null || feature.ViewClass == null && feature.Entity == null) {
                                                $tcs.setResult(null);
                                                return;
                                            }

                                            $task1 = Core.Components.Extensions.ComponentExt.LoadFeatureByName(feature.Name);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            feature = $taskResult1;
                                            if (feature.ViewClass != null) {
                                                type = Bridge.Reflection.getType(feature.ViewClass);
                                            } else {
                                                type = Core.Components.Forms.TabEditor;
                                            }
                                            id = (feature.Name || "") + feature.Id;
                                            exists = System.Linq.Enumerable.from(Core.Components.Forms.TabEditor.Tabs, Core.Components.Forms.TabEditor).firstOrDefault(function (x) {
                                                return Bridge.referenceEquals(x.Id, id);
                                            }, null);
                                            if (exists != null) {
                                                exists.Focus();
                                            } else {
                                                instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.EditForm);
                                                instance.Name = feature.Name;
                                                instance.Id = id;
                                                instance.Icon = feature.Icon;
                                                instance.Feature = feature;
                                                instance.Render();
                                            }
                                            if (!Core.Components.BaseComponent.IsSmallUp) {
                                                Core.Fw.Menu.Instance.Show = false;
                                            }
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }
            }
        },
        fields: {
            _feature: null,
            _hasRender: false,
            _btnBack: null,
            _btnToggle: null
        },
        props: {
            Show: {
                get: function () {
                    return Bridge.ensureBaseProperty(this, "Show").$Core$Components$BaseComponent$Show;
                },
                set: function (value) {
                    Bridge.ensureBaseProperty(this, "Show").$Core$Components$BaseComponent$Show = value;
                    if (value) {
                        this.ShowAside();
                    } else {
                        this.HideAside();
                    }
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.BaseComponent.ctor.call(this);

            }
        },
        methods: {
            BuildFeatureTree: function () {
                var $t;
                var dic = System.Linq.Enumerable.from(this._feature, Core.Models.Feature).where(function (f) {
                        return f.IsMenu;
                    }).toDictionary(function (f) {
                        return f.Id;
                    }, null, System.Int32, Core.Models.Feature);
                $t = Bridge.getEnumerator(dic.Values);
                try {
                    while ($t.moveNext()) {
                        var menu = $t.Current;
                        if (menu.ParentId != null && dic.containsKey(System.Nullable.getValue(menu.ParentId))) {
                            var parent = dic.getItem(System.Nullable.getValue(menu.ParentId));
                            if (parent.InverseParent == null) {
                                parent.InverseParent = new (System.Collections.Generic.List$1(Core.Models.Feature)).ctor();
                            } else {
                                System.Array.add(parent.InverseParent, menu, Core.Models.Feature);
                            }
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                this._feature = System.Linq.Enumerable.from(this._feature, Core.Models.Feature).where(function (f) {
                        return f.ParentId == null && f.IsMenu;
                    }).toList(Core.Models.Feature);
            },
            ReloadMenu: function (focusedParentFeatureId) {
                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        featureTask, 
                        feature, 
                        $t, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            featureTask = new Core.Clients.Client.$ctor1("Feature", Bridge.Reflection.getTypeNamespace(Core.Models.Feature)).GetRawList(Core.Models.Feature, "?$expand=Entity($select=Name)&$filter=Active eq true and IsMenu eq true&$orderby=Order");
                                            $task1 = featureTask;
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            feature = $taskResult1;
                                            this._feature = feature;
                                            this.BuildFeatureTree();
                                            Core.MVVM.Html.Take$1(".sidebar-items").Clear();
                                            this.RenderMenuItems(this._feature);
                                            !Bridge.staticEquals(($t = this.DOMContentLoaded), null) ? $t() : null;
                                            if (focusedParentFeatureId != null) {
                                                this.FocusFeature(System.Nullable.getValue(focusedParentFeatureId));
                                            }
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            Render: function () {
                var $t;
                if (this._hasRender) {
                    return;
                }

                this._hasRender = true;
                this.RenderLayout();
                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $task2, 
                        $taskResult2, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        featureTask, 
                        roles, 
                        startAppTask, 
                        feature, 
                        startApps, 
                        $t, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1,2], $step);
                                    switch ($step) {
                                        case 0: {
                                            featureTask = new Core.Clients.Client.$ctor1("Feature").GetRawList(Core.Models.Feature, "?$expand=Entity($select=Name)&$filter=Active eq true and IsMenu eq true&$orderby=Order");
                                            roles = Bridge.toArray(Core.Clients.Client.Token.RoleIds).join("\\");
                                            startAppTask = new Core.Clients.Client.$ctor1("UserSetting").GetRawList(Core.Models.UserSetting, "?$filter=Name eq 'StartApp'");
                                            $task1 = System.Threading.Tasks.Task.whenAll(featureTask, startAppTask);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            feature = featureTask.getResult();
                                            startApps = System.Linq.Enumerable.from(Core.Extensions.IEnumerableExtensions.Combine$1(Core.Models.UserSetting, System.String, startAppTask.getResult(), function (x) {
                                                return x.Value;
                                            }).split(","), System.String).select(function (x) {
                                                var $t;
                                                return ($t = Core.Extensions.Utils.TryParseInt(x), $t != null ? $t : 0);
                                            }).distinct();
                                            this._feature = feature;
                                            this.BuildFeatureTree();
                                            Core.MVVM.Html.Take$1(".sidebar-items");
                                            this.RenderMenuItems(this._feature);
                                            $task2 = Core.Extensions.IEnumerableExtensions.ForEachAsync(Core.Models.Feature, System.Linq.Enumerable.from(feature, Core.Models.Feature).where(function (x) {
                                                return startApps.contains(x.Id) || x.StartUp;
                                            }), Core.Fw.Menu.OpenFeature);
                                            $step = 2;
                                            if ($task2.isCompleted()) {
                                                continue;
                                            }
                                            $task2.continue($asyncBody);
                                            return;
                                        }
                                        case 2: {
                                            $taskResult2 = $task2.getAwaitedResult();
                                            !Bridge.staticEquals(($t = this.DOMContentLoaded), null) ? $t() : null;
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
                this._btnBack = document.getElementById("btnBack");
                this._btnToggle = ($t = HTMLElement, System.Linq.Enumerable.from(document.getElementsByClassName("sidebar-toggle"), $t).ToArray($t));
                if (this._btnBack == null) {
                    return;
                }

                this._btnBack.addEventListener("click", Bridge.fn.cacheBind(this, this.RoutingHandler));
                this._btnToggle.forEach(Bridge.fn.bind(this, function (btn) {
                        btn.addEventListener("click", Bridge.fn.bind(this, function () {
                            this.Show = !this.Show;
                        }));
                    }));
            },
            RoutingHandler: function () {
                Core.Fw.Menu.PressToExit();
                var currentTab;
                if (((currentTab = Core.Components.Forms.TabEditor.ActiveTab)) != null) {
                    currentTab.DirtyCheckAndCancel();
                }
            },
            RenderLayout: function () {
                Core.Components.Renderer.TabIndex(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.MVVM.Html.Take(document.body).Aside, "sidebar").Div, "sidebar-header").End.Div, "sidebar-items"), -1).Event("focusout", Bridge.fn.bind(this, function () {
                    this.HideAll(this.Element);
                })).End.Render();
                this.Element = Core.MVVM.Html.Context;
                this.AlterMainSectionWidth();
                document.body.insertBefore(this.Element, document.body.firstChild);
            },
            HideAll: function (current) {
                if (current === void 0) { current = null; }
                if (current == null) {
                    current = document.body;
                }
                var activeLi = current.querySelectorAll("li.active");
                Core.Extensions.IEnumerableExtensions.ForEach(Node, activeLi, function (x) {
                    Core.Extensions.HtmlElementExtension.RemoveClass(x, Core.Fw.Menu.ActiveClass);
                });
            },
            AlterMainSectionWidth: function () {
                Core.Fw.Menu._main = document.querySelector("#main");
                this.Element.tabIndex = -1;
                this.Element.focus();
                this.Element.addEventListener("focusout", Bridge.fn.bind(this, function () {
                    this.Show = Core.Components.BaseComponent.IsSmallUp;
                }));
                this.Show = Core.Components.BaseComponent.IsSmallUp;
            },
            ShowAside: function () {
                this.Element.style.left = "0";
                Core.Fw.Menu._main.style.left = Core.Fw.Menu.ASIDE_WIDTH;
                if (Core.Components.BaseComponent.IsSmallUp) {
                    Core.Fw.Menu._main.style.width = System.String.format("calc(100% - {0})", [Core.Fw.Menu.ASIDE_WIDTH]);
                } else {
                    Core.Fw.Menu._main.style.width = "100%";
                    Core.Fw.Menu._main.style.left = "0";
                }
            },
            HideAside: function () {
                this.Element.style.left = System.String.format("-{0}", [Core.Fw.Menu.ASIDE_WIDTH]);
                Core.Fw.Menu._main.style.width = "100%";
                Core.Fw.Menu._main.style.left = "0";
            },
            RenderMenuItems: function (menuItems, nested) {
                if (nested === void 0) { nested = false; }
                Core.MVVM.Html.Instance.Ul.ForEach$2(Core.Models.Feature, menuItems, Bridge.fn.bind(this, function (item, index) {
                    var $t;
                    if (item.IsGroup) {
                        Core.Components.Renderer.Title(Core.Components.Renderer.ClassName(Core.MVVM.Html.Instance.Li, "group-title"), item.Label).End.Render();
                    } else if (item.IsDevider) {
                        Core.Components.Renderer.ClassName(Core.MVVM.Html.Instance.Li, "divider").End.Render();
                    } else {
                        Core.Components.Renderer.IText(Core.Components.Renderer.Title(Core.Components.Renderer.Icon(Core.MVVM.Html.Instance.Li.DataAttr$1("feature", Bridge.toString(item.Id)).A.Attr$1("data-role", "ripple").AsyncEvent$3(Core.Models.Feature, "click", Bridge.fn.cacheBind(this, this.MenuItemClick), item).Event$4(Core.Models.Feature, "contextmenu", Bridge.fn.cacheBind(this, this.FeatureContextMenu), item), item.Icon).End, item.Label), nested ? item.Label : null).EndOf(Core.MVVM.ElementType.a).Render();
                        if (item.InverseParent != null && System.Array.getCount(item.InverseParent, Core.Models.Feature) > 0) {
                            this.RenderMenuItems(($t = Core.Models.Feature, System.Linq.Enumerable.from(item.InverseParent, $t).toList($t)), true);
                        }
                    }
                }));
            },
            FindMenuItemByID: function (id) {
                var $t;
                var activeLi = document.querySelectorAll(".sidebar-items li");
                $t = Bridge.getEnumerator(activeLi, "getEnumerator");
                try {
                    while ($t.moveNext()) {
                        var active = Bridge.cast($t.Current, HTMLElement);
                        if (System.String.equals(active.getAttribute("data-feature"), Bridge.toString(id))) {
                            return active;
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                return null;
            },
            FeatureContextMenu: function (e, feature) {
                if (!Core.Clients.Client.SystemRole) {
                    return;
                }

                e.preventDefault();
                var ctxMenu = Core.Components.Forms.ContextMenu.Instance;
                {
                    ctxMenu.Top = Core.Extensions.EventExt.Top(e);
                    ctxMenu.Left = Core.Extensions.EventExt.Left(e);
                    ctxMenu.MenuItems = Bridge.fn.bind(this, function (_o1) {
                            var $t;
                            _o1.add(($t = new Core.Components.Forms.ContextMenuItem(), $t.Icon = "fa fa-plus", $t.Text = "New feature", $t.Click = Bridge.fn.cacheBind(this, this.EditFeature), $t.Parameter = new Core.Models.Feature(), $t));
                            _o1.add(($t = new Core.Components.Forms.ContextMenuItem(), $t.Icon = "mif-unlink", $t.Text = "Deactivate this feature", $t.Click = Bridge.fn.cacheBind(this, this.Deactivate), $t.Parameter = feature, $t));
                            _o1.add(($t = new Core.Components.Forms.ContextMenuItem(), $t.Icon = "fa fa-clone", $t.Text = "Clone this feature", $t.Click = Bridge.fn.cacheBind(this, this.CloneFeature), $t.Parameter = feature, $t));
                            _o1.add(($t = new Core.Components.Forms.ContextMenuItem(), $t.Icon = "fa fa-list", $t.Text = "Manage features", $t.Click = Bridge.fn.cacheBind(this, this.FeatureManagement), $t));
                            _o1.add(($t = new Core.Components.Forms.ContextMenuItem(), $t.Icon = "fa fa-wrench", $t.Text = "Properties", $t.Click = Bridge.fn.cacheBind(this, this.EditFeature), $t.Parameter = feature, $t));
                            return _o1;
                        })(new (System.Collections.Generic.List$1(Core.Components.Forms.ContextMenuItem)).ctor());
                }
                ;
                ctxMenu.Render();
            },
            EditFeature: function (ev) {
                var feature = Bridge.as(ev, Core.Models.Feature);
                var id = (feature.Name || "") + "Prop" + feature.Id;
                Core.Components.Extensions.ComponentExt.OpenTab(this, id, function () {
                    var $t, $t1, $t2;
                    return ($t = new Core.Components.Framework.FeatureDetailBL(), $t.Id = id, $t.Entity = feature, $t.Title = System.String.format("Feature {0}", [($t1 = feature.Name, $t1 != null ? $t1 : ($t2 = feature.Label, $t2 != null ? $t2 : feature.Description))]), $t);
                });
            },
            CloneFeature: function (ev) {
                var $t;
                var feature = Bridge.as(ev, Core.Models.Feature);
                var confirmDialog = ($t = new Core.Components.Forms.ConfirmDialog(), $t.Content = "B\u1ea1n c\u00f3 mu\u1ed1n clone feature n\u00e0y?", $t);
                confirmDialog.YesConfirmed = Bridge.fn.combine(confirmDialog.YesConfirmed, Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        client, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        client = new Core.Clients.Client.$ctor1("Feature", Bridge.Reflection.getTypeNamespace(Core.Models.Feature));
                                        $task1 = client.CloneFeatureAsync(feature.Id);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        this.ReloadMenu(feature.ParentId);
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }));
                this.AddChild(confirmDialog);
            },
            FeatureManagement: function (ev) {
                var id = Bridge.toString(Bridge.getHashCode(this));
                Core.Components.Extensions.ComponentExt.OpenTab(this, id, Bridge.fn.bind(this, function () {
                    var $t;
                    return ($t = new Core.Components.Framework.FeatureBL(), $t.Id = Bridge.toString(Bridge.getHashCode(this)), $t);
                }));
            },
            Deactivate: function (ev) {
                var feature = Bridge.as(ev, Core.Models.Feature);
                var confirmDialog = new Core.Components.Forms.ConfirmDialog();
                confirmDialog.Content = "B\u1ea1n c\u00f3 mu\u1ed1n deactivate feature n\u00e0y?";
                confirmDialog.YesConfirmed = Bridge.fn.combine(confirmDialog.YesConfirmed, Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        client, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        client = new Core.Clients.Client.$ctor1("Feature");
                                        $task1 = client.DeactivateAsync(function (_o1) {
                                            _o1.add(feature.Id);
                                            return _o1;
                                        }(new (System.Collections.Generic.List$1(System.Int32)).ctor()));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }));
                this.AddChild(confirmDialog);
            },
            MenuItemClick: function (feature, e) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    li, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        li = Bridge.as(e.target, HTMLElement);
                                        if (!(Bridge.is(li, HTMLLIElement))) {
                                            li = Bridge.as(Core.Extensions.HtmlElementExtension.Closest(li, "li"), HTMLLIElement);
                                        }
                                        this.HideAll(li.parentElement.parentElement);
                                        li.focus();
                                        Core.Extensions.HtmlElementExtension.AddClass(li, Core.Fw.Menu.ActiveClass);
                                        ($t = Core.Extensions.HtmlElementExtension.Closest(li, System.Enum.toString(Core.MVVM.ElementType, Core.MVVM.ElementType.li))) != null ? Core.Extensions.HtmlElementExtension.AddClass($t, Core.Fw.Menu.ActiveClass) : null;
                                        Core.Fw.Menu.AlterPositionSubMenu(Core.Extensions.EventExt.Top(e), li);
                                        $task1 = Core.Fw.Menu.OpenFeature(feature);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            FocusFeature: function (parentFeatureID) {
                var $t;
                var li = this.FindMenuItemByID(parentFeatureID);
                if (li != null) {
                    var activeLi = document.querySelectorAll(".sidebar-items li.active");
                    $t = Bridge.getEnumerator(activeLi, "getEnumerator");
                    try {
                        while ($t.moveNext()) {
                            var active = Bridge.cast($t.Current, HTMLElement);
                            if (active.contains(li)) {
                                continue;
                            }
                            Core.Extensions.HtmlElementExtension.RemoveClass(active, "active");
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    Core.Extensions.HtmlElementExtension.AddClass(li, Core.Fw.Menu.ActiveClass);
                    Core.Extensions.HtmlElementExtension.AddClass(li.parentElement, Core.Fw.Menu.ActiveClass);
                }
            },
            RemoveDOM: function () {
                Core.MVVM.Html.Take$1(".sidebar-wrapper").Clear();
            },
            UpdateView: function (force, dirty, componentNames) {
                if (force === void 0) { force = false; }
                if (dirty === void 0) { dirty = null; }
                if (componentNames === void 0) { componentNames = []; }
                // Not to do anything here
            }
        }
    });

    Bridge.define("Core.ViewModels.SecurityVM", {
        inherits: [Core.Models.FeaturePolicy],
        props: {
            AllPermission: false,
            RecordIds: null,
            StrRecordIds: {
                get: function () {
                    return Bridge.toArray(this.RecordIds).join(",");
                }
            },
            FeaturePolicy: null
        }
    });

    Bridge.define("Core.ViewModels.UserProfileVM", {
        inherits: [Core.Models.User],
        props: {
            OldPassword: null,
            NewPassword: null,
            ConfirmedPassword: null
        }
    });

    Bridge.define("Core.Components.Forms.EditForm", {
        inherits: [Core.Components.EditableComponent],
        statics: {
            fields: {
                NotDirtyMessage: null,
                ExpiredDate: null,
                BtnExpired: null,
                BtnSave: null,
                BtnSend: null,
                BtnApprove: null,
                BtnReject: null,
                StatusIdField: null,
                BtnCancel: null,
                BtnPrint: null,
                BtnPreview: null,
                SpecialEntryPoint: null,
                LastForm: null,
                NotificationClient: null
            },
            props: {
                LayoutForm: null,
                Portal: false
            },
            ctors: {
                init: function () {
                    this.NotDirtyMessage = "D\u1eef li\u1ec7u ch\u01b0a thay \u0111\u1ed5i";
                    this.ExpiredDate = "ExpiredDate";
                    this.BtnExpired = "btnExpired";
                    this.BtnSave = "btnSave";
                    this.BtnSend = "btnSend";
                    this.BtnApprove = "btnApprove";
                    this.BtnReject = "btnReject";
                    this.StatusIdField = "StatusId";
                    this.BtnCancel = "btnCancel";
                    this.BtnPrint = "btnPrint";
                    this.BtnPreview = "btnPreview";
                    this.SpecialEntryPoint = "entry";
                }
            },
            methods: {
                RenderCellText: function (ele, entity, isLayout) {
                    var $t, $t1;
                    var text = ele.textContent != null ? ele.textContent.trim() : null;
                    if (Core.Extensions.StringExt.HasAnyChar(text) && System.String.startsWith(text, "{") && System.String.endsWith(text, "}")) {
                        var cellText = ($t = new Core.Components.CellText(($t1 = new Core.Models.Component(), $t1.FieldName = Core.Extensions.StringExt.SubStrIndex$1(text, 1, ((text.length - 1) | 0)), $t1), ele), $t.Entity = entity, $t);
                        if (isLayout && Core.Components.Forms.EditForm.LayoutForm != null) {
                            Core.Components.Forms.EditForm.LayoutForm.AddChild(cellText);
                        } else {
                            cellText.Render();
                        }
                        return cellText;
                    }
                    return null;
                },
                PrintSection: function (section) {
                    if (section == null) {
                        return;
                    }

                    var printWindow = window.open("", "_blank");
                    var shtml = "<html><link rel='stylesheet' type='text/css' href='./css/styleprint.css' /><link href='./css/font-awesome.css' rel='stylesheet' /><link href='./css/metro-all.css' rel='stylesheet' /><link href='./css/main.css' rel='stylesheet' /><link href='./css/LineIcons.css' rel='stylesheet' /><body onload=\"window.print();\"><div style='padding:7pt'>";
                    shtml = (shtml || "") + (section.Element.innerHTML || "");
                    shtml = (shtml || "") + "</div></body></html>";
                    printWindow.document.write(shtml);
                    printWindow.document.close();
                    printWindow.addEventListener(System.Enum.toString(System.String, "afterprint"), function (e) {
                        printWindow.close();
                    });
                }
            }
        },
        fields: {
            _entity: null,
            UrlSearch: null,
            _entityEnum: null,
            TabGroup: null,
            _confirm: null,
            _title: null,
            _icon: null,
            TitleElement: null,
            IconElement: null,
            AfterSaved: null,
            BeforeSaved: null,
            awaiter: 0,
            _currentListView: null
        },
        props: {
            CurrentUserId: 0,
            RegionId: null,
            AllRoleIds: null,
            CenterIds: null,
            RoleIds: null,
            CostCenterId: null,
            RoleNames: null,
            ShouldUpdateParentForm: false,
            Now: {
                get: function () {
                    return System.DateTime.getNow();
                }
            },
            Client: null,
            IsEditMode: {
                get: function () {
                    return this.Entity != null && Bridge.unbox(this.Entity[Core.Components.BaseComponent.IdField]) > 0;
                }
            },
            _innerEntry: {
                get: function () {
                    return document.getElementById("entry");
                }
            },
            IsLock: false,
            ListViews: null,
            UserVendor: {
                get: function () {
                    var $t;
                    return ($t = Core.Clients.Client.Token) != null ? $t.Vendor : null;
                }
            },
            ShouldLoadEntity: false,
            Feature: null,
            Icon: {
                get: function () {
                    return this._icon;
                },
                set: function (value) {
                    this._icon = value;
                    if (this.IconElement != null) {
                        Core.Components.Renderer.IconForSpan(Core.MVVM.Html.Take(this.IconElement), value);
                    }
                }
            },
            Title: {
                get: function () {
                    return this._title;
                },
                set: function (value) {
                    this._title = value;
                    if (this.TitleElement != null) {
                        this.TitleElement.innerHTML = null;
                        Core.Components.Renderer.IText(Core.MVVM.Html.Take(this.TitleElement), value);
                    }
                }
            },
            Public: false,
            OpenFrom: null,
            ParentForm: null,
            ReasonOfChange: null
        },
        ctors: {
            ctor: function (entity) {
                this.$initialize();
                Core.Components.EditableComponent.ctor.call(this, null);
                this.UrlSearch = new URLSearchParams(window.location.search);
                if (entity == null) {
                    return;
                }
                this.ListViews = new (System.Collections.Generic.HashSet$1(Core.Components.ListView)).ctor();
                this._entity = entity;
                this.Client = new Core.Clients.Client.$ctor1(entity);
                var entityType = Bridge.Reflection.getType((Core.Clients.Client.ModelNamespace || "") + (entity || ""));
                if (entityType != null) {
                    this.Entity = Bridge.createInstance(entityType);
                }
                var entityEnum = { v : new Core.Enums.EntityEnum() };

                var hasEntity = System.Enum.tryParse(Core.Enums.EntityEnum, this._entity, entityEnum);
                if (hasEntity) {
                    this._entityEnum = entityEnum.v;
                    Core.Components.Forms.EditForm.NotificationClient != null ? Core.Components.Forms.EditForm.NotificationClient.AddListener(entityEnum.v, Bridge.fn.cacheBind(this, this.RealtimeUpdate)) : null;
                }

                window.addEventListener("resize", Bridge.fn.cacheBind(this, this.ResizeHandler));
                Core.Components.Forms.EditForm.LayoutForm = Core.Components.Forms.EditForm.LayoutForm || new Core.Components.Forms.EditForm(null);
            }
        },
        methods: {
            RealtimeUpdate: function (updatedData) {
                if (updatedData == null) {
                    return;
                }

                var id = Bridge.unbox(updatedData[Core.Components.BaseComponent.IdField]);
                if (id == null) {
                    return;
                }

                if (this.Entity != null && System.Nullable.eq(Bridge.unbox(this.Entity[Core.Components.BaseComponent.IdField]), System.Nullable.getValue(id))) {
                    Core.Extensions.ReflectionExt.CopyPropFrom$1(this.Entity, updatedData);
                    this.UpdateViewAwait$1();
                    return;
                }
                var listViewItem = Core.Components.Extensions.ComponentExt.FirstOrDefault(this, function (x) {
                    var item;
                    if (((item = Bridge.as(x, Core.Components.GroupViewItem))) != null) {
                        return false;
                    }

                    return Bridge.referenceEquals(x.Entity[Core.Components.BaseComponent.IdField], updatedData[Core.Components.BaseComponent.IdField]);
                });
                if (listViewItem == null) {
                    return;
                }

                Core.Extensions.ReflectionExt.CopyPropFrom$1(listViewItem.Entity, updatedData);
                listViewItem.UpdateView();
            },
            UpdateViewAwait$1: function (millisecond) {
                if (millisecond === void 0) { millisecond = 100; }
                window.clearTimeout(this.awaiter);
                this.awaiter = window.setTimeout(Bridge.fn.bind(this, function () {
                    this.UpdateView();
                }), millisecond);
                this.Dirty = false;
            },
            BulkUpdate: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    grid, 
                    tasks, 
                    rs, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        grid = Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.ListView, this);
                                        if (!this.Dirty) {
                                            Core.Extensions.Toast.Warning(Core.Components.Forms.EditForm.NotDirtyMessage);
                                            $tcs.setResult(false);
                                            return;
                                        }
                                        if (Core.Extensions.IEnumerableExtensions.Nothing(Core.Components.ListView, grid)) {
                                            $tcs.setResult(false);
                                            return;
                                        }
                                        tasks = System.Linq.Enumerable.from(grid, Core.Components.ListView).select(function (x) {
                                            return x.Dirty ? x.BulkUpdate() : null;
                                        }).where(function (x) {
                                            return x != null;
                                        });
                                        $task1 = System.Threading.Tasks.Task.whenAll(tasks);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        rs = $taskResult1;
                                        if (rs != null && System.Linq.Enumerable.from(rs, System.Collections.Generic.List$1(System.Object)).any(function (x) {
                                            return Core.Extensions.IEnumerableExtensions.HasElement(System.Object, x);
                                        })) {
                                            Core.Extensions.Toast.Success("C\u1eadp nh\u1eadt th\u00e0nh c\u00f4ng");
                                        } else {
                                            Core.Extensions.Toast.Warning(Core.Clients.Client.ErrorMessage);
                                        }
                                        this.Dirty = false;
                                        $tcs.setResult(true);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            SaveWithouUpdateView: function (entity) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    res, 
                    isValid, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2], $step);
                                switch ($step) {
                                    case 0: {
                                        if (this.Entity == null) {
                                            throw new System.InvalidOperationException.$ctor1("Entity is null");
                                        }

                                        $task1 = this.IsFormValid();
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        isValid = $taskResult1;
                                        if (!isValid) {
                                            $tcs.setResult(false);
                                            return;
                                        }

                                        !Bridge.staticEquals(this.BeforeSaved, null) ? this.BeforeSaved() : null;
                                        Core.Extensions.ReflectionExt.ClearReferences(this.Entity);
                                        $task2 = this.AddOrUpdate(entity);
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        this.Dirty = false;
                                        res = true;
                                        !Bridge.staticEquals(this.AfterSaved, null) ? this.AfterSaved(res) : null;
                                        $tcs.setResult(res);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            Save: function (entity) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    res, 
                    isValid, 
                    data, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2], $step);
                                switch ($step) {
                                    case 0: {
                                        if (entity === void 0) { entity = null; }
                                        if (this.Entity == null) {
                                            throw new System.InvalidOperationException.$ctor1("Entity is null");
                                        }

                                        if (!this.Dirty) {
                                            Core.Extensions.Toast.Warning(Core.Components.Forms.EditForm.NotDirtyMessage);
                                            $tcs.setResult(false);
                                            return;
                                        }
                                        $task1 = this.IsFormValid(entity != null, void 0, void 0);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        isValid = $taskResult1;
                                        if (!isValid) {
                                            $tcs.setResult(false);
                                            return;
                                        }
                                        !Bridge.staticEquals(this.BeforeSaved, null) ? this.BeforeSaved() : null;
                                        Core.Extensions.ReflectionExt.ClearReferences(this.Entity);
                                        $task2 = this.AddOrUpdate(entity);
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        data = $taskResult2;
                                        res = data != null;
                                        !Bridge.staticEquals(this.AfterSaved, null) ? this.AfterSaved(res) : null;
                                        this.UpdateViewForm();
                                        if (this.ShouldUpdateParentForm) {
                                            ($t = this.ParentForm) != null ? $t.UpdateView() : null;
                                        }
                                        $tcs.setResult(res);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            UpdateViewForm: function () {
                var tab;
                var parentForm = this.ParentForm || (((tab = Bridge.as(this, Core.Components.Forms.TabEditor))) != null && tab.Popup ? tab.Parent : null);
                if (parentForm != null) {
                    var openFrom = System.Linq.Enumerable.from(parentForm.FilterChildren$1(Bridge.fn.bind(this, function (x) {
                            return x.Entity != null && Bridge.referenceEquals(x.Entity, this.Entity);
                        })), Core.Components.BaseComponent).firstOrDefault(null, null);
                    openFrom != null ? openFrom.UpdateView() : null;
                }
            },
            GetDirtyGrid: function () {
                return System.Linq.Enumerable.from(this.ListViews, Core.Components.ListView).where(function (x) {
                        return Core.Extensions.StringExt.HasAnyChar(x.GuiInfo.IdField) && x.GuiInfo.CanAdd;
                    }).where(function (x) {
                    return System.Linq.Enumerable.from(x.FilterChildren(Core.Components.EditableComponent, function (com) {
                            return com._dirty;
                        }, function (com) {
                            return !com.PopulateDirty;
                        }), Core.Components.EditableComponent).any();
                }).ToArray(Core.Components.ListView);
            },
            AddOrUpdate: function (entity) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    showMessage, 
                    hasHistory, 
                    changedLog, 
                    updating, 
                    updated, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2], $step);
                                switch ($step) {
                                    case 0: {
                                        showMessage = entity != null;
                                        hasHistory = System.Linq.Enumerable.from(this.ListViews, Core.Components.ListView).any(function (x) {
                                            var $t;
                                            return System.Nullable.eq((($t = x.GuiInfo) != null ? $t.ReferenceId : null), Core.Enums.EntityEnum.History);
                                        });
                                        changedLog = hasHistory ? this.BuildTextHistory().toString() : "";
                                        updating = Bridge.unbox(this.Entity[Core.Components.BaseComponent.IdField]) > 0;
                                        $task1 = this.AddOrUpdateEntity(entity, updating);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        updated = $taskResult1;
                                        if (updated == null) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        $task2 = this.UpdateHistory(changedLog);
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $task2.getAwaitedResult();
                                        this.ReloadAndShowMessage(showMessage, updating);
                                        this.Dirty = false;
                                        $tcs.setResult(updated);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            UpdateIndependantGridView: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    dirtyGrid, 
                    id, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        dirtyGrid = this.GetDirtyGrid();
                                        if (Core.Extensions.IEnumerableExtensions.Nothing(Core.Components.ListView, dirtyGrid)) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        id = Bridge.unbox(this.Entity[Core.Components.BaseComponent.IdField]);
                                        dirtyGrid.forEach(function (x) {
                                            x.UpdatedRows.ForEach(function (row) {
                                                Core.Extensions.BridgeExt.SetPropValue(row, x.GuiInfo.IdField, Bridge.box(id, System.Int32));
                                            });
                                        });
                                        $task1 = System.Threading.Tasks.Task.whenAll(System.Linq.Enumerable.from(dirtyGrid, Core.Components.ListView).select(function (x) {
                                            return x.BulkUpdate(false);
                                        }));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            UpdateHistory: function (changedLog) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    history, 
                    $t, 
                    $t1, 
                    $async_e, 
                    $async_e1, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4], $step);
                                switch ($step) {
                                    case 0: {
                                        if (Core.Extensions.StringExt.IsNullOrWhiteSpace(changedLog)) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        history = ($t = new Core.Models.History(), $t.EntityId = System.Nullable.getValue(this._entityEnum), $t.RecordId = Bridge.unbox(this.Entity[Core.Components.BaseComponent.IdField]), $t.ReasonOfChange = ($t1 = this.ReasonOfChange, $t1 != null ? $t1 : "C\u1eadp nh\u1eadt th\u00f4ng tin"), $t.TextHistory = changedLog, $t);
                                        $step = 1;
                                        continue;
                                    }
                                    case 1: {
                                        $task1 = new Core.Clients.Client.$ctor1("History", Bridge.Reflection.getTypeNamespace(Core.Models.User)).CreateAsync(Core.Models.History, history);
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        this.ReasonOfChange = null;
                                        $step = 4;
                                        continue;
                                    }
                                    case 3: {
                                        $async_e = null;
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            if ( $step >= 1 && $step <= 2 ) {
                                $step = 3;
                                $asyncBody();
                                return;
                            }
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            AddOrUpdateEntity: function (entity, updating) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $task3, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    data, 
                    showMessage, 
                    $async_e, 
                    $async_e1, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([1,2,3,4,5,6,7,8,9], $step);
                                switch ($step) {

                                    case 1: {
                                        if (updating) {
                                            $step = 2;
                                            continue;
                                        } else  {
                                            $step = 4;
                                            continue;
                                        }
                                    }
                                    case 2: {
                                        $task1 = this.Client.UpdateAsync$1(this.Entity);
                                        $step = 3;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        data = $taskResult1;
                                        $step = 6;
                                        continue;
                                    }
                                    case 4: {
                                        this.Entity[Core.Components.BaseComponent.IdField] = Bridge.box(0, System.Int32);
                                        $task2 = this.Client.CreateAsync$1(this.Entity);
                                        $step = 5;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 5: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        data = $taskResult2;
                                        $step = 6;
                                        continue;
                                    }
                                    case 6: {
                                        $step = 8;
                                        continue;
                                    }
                                    case 7: {
                                        if (((showMessage = Bridge.is(entity, System.Boolean) ? System.Nullable.getValue(Bridge.cast(Bridge.unbox(entity, System.Boolean), System.Boolean)) : null)) != null && showMessage) {
                                            Core.Extensions.Toast.Warning(Core.Clients.Client.ErrorMessage);
                                        }
                                        data = null;
                                        $async_e = null;
                                        $step = 8;
                                        continue;
                                    }
                                    case 8: {
                                        Core.Extensions.ReflectionExt.CopyPropFrom$1(this.Entity, data);
                                        $task3 = this.UpdateIndependantGridView();
                                        $step = 9;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 9: {
                                        $task3.getAwaitedResult();
                                        $tcs.setResult(data);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            if ( $step >= 1 && $step <= 6 ) {
                                $step = 7;
                                $asyncBody();
                                return;
                            }
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            IsFormValid: function (showMessage, predicate, ignorePredicate) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    allValid, 
                    invalidFields, 
                    $t, 
                    message, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (showMessage === void 0) { showMessage = true; }
                                        if (predicate === void 0) { predicate = null; }
                                        if (ignorePredicate === void 0) { ignorePredicate = null; }
                                        if (Bridge.staticEquals(predicate, null)) {
                                            predicate = function (x) {
                                                return true;
                                            };
                                        }
                                        if (Bridge.staticEquals(ignorePredicate, null)) {
                                            ignorePredicate = function (x) {
                                                return x.AlwaysValid;
                                            };
                                        }
                                        $task1 = Core.Extensions.IEnumerableExtensions.ForEachAsync(Core.Components.EditableComponent, this.FilterChildren(Core.Components.EditableComponent, predicate, ignorePredicate, void 0), function (x) {
                                            return x.ValidateAsync();
                                        });
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        allValid = $taskResult1;
                                        invalidFields = System.Linq.Enumerable.from(($t = Core.Components.EditableComponent, System.Linq.Enumerable.from(allValid, $t).toList($t)), Core.Components.EditableComponent).where(function (x) {
                                            return !x.IsValid;
                                        });
                                        if (Core.Extensions.IEnumerableExtensions.Nothing(Core.Components.EditableComponent, invalidFields)) {
                                            $tcs.setResult(true);
                                            return;
                                        }

                                        if (showMessage) {
                                            invalidFields.forEach(function (x) {
                                                x.Disabled = false;
                                            });
                                            invalidFields.firstOrDefault(null, null).Focus();
                                            message = Bridge.toArray(invalidFields.selectMany(function (x) {
                                                return x.ValidationResult.Values;
                                            })).join("<br />");
                                            Core.Extensions.Toast.Warning(message);
                                        }
                                        $tcs.setResult(false);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ReloadAndShowMessage: function (showMessage, updating) {
                var prefix = updating ? "C\u1eadp nh\u1eadt" : "T\u1ea1o m\u1edbi";
                if (showMessage) {
                    Core.Extensions.Toast.Success(System.String.format("{0} th\u00e0nh c\u00f4ng", [prefix]));
                }

                this.UpdateView();
            },
            BuildTree: function (componentGroup) {
                var $t, $t1, $t2, $t3;
                var componentGroupMap = ($t = Core.Models.ComponentGroup, System.Linq.Enumerable.from(componentGroup, $t).toDictionary(function (x) {
                        return x.Id;
                    }, null, System.Int32, $t));
                var parent;
                $t1 = Bridge.getEnumerator(componentGroup);
                try {
                    while ($t1.moveNext()) {
                        var item = $t1.Current;
                        if (item.IsVertialTab && this.Element.clientWidth < Core.Components.BaseComponent.SmallScreen) {
                            item.IsVertialTab = false;
                        }

                        if (item.ParentId == null) {
                            continue;
                        }

                        if (!componentGroupMap.containsKey(System.Nullable.getValue(item.ParentId))) {
                            System.Console.WriteLine(System.String.format("The parent key {0} of {1} doesn't exist", Bridge.box(item.ParentId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), item.Name));
                            continue;
                        }
                        parent = componentGroupMap.getItem(System.Nullable.getValue(item.ParentId));
                        if (parent.InverseParent == null) {
                            parent.InverseParent = new (System.Collections.Generic.List$1(Core.Models.ComponentGroup)).ctor();
                        }

                        if (!System.Array.contains(parent.InverseParent, item, Core.Models.ComponentGroup)) {
                            System.Array.add(parent.InverseParent, item, Core.Models.ComponentGroup);
                        }

                        item.Parent = parent;
                    }
                } finally {
                    if (Bridge.is($t1, System.IDisposable)) {
                        $t1.System$IDisposable$Dispose();
                    }
                }
                $t2 = Bridge.getEnumerator(componentGroup);
                try {
                    while ($t2.moveNext()) {
                        var item1 = $t2.Current;
                        if (item1.Component == null || !System.Linq.Enumerable.from(item1.Component, Core.Models.Component).any()) {
                            continue;
                        }

                        $t3 = Bridge.getEnumerator(item1.Component, Core.Models.Component);
                        try {
                            while ($t3.moveNext()) {
                                var ui = $t3.Current;
                                ui.ComponentGroup = item1;
                            }
                        } finally {
                            if (Bridge.is($t3, System.IDisposable)) {
                                $t3.System$IDisposable$Dispose();
                            }
                        }
                        if (item1.InverseParent != null) {
                            item1.InverseParent = System.Linq.Enumerable.from(item1.InverseParent, Core.Models.ComponentGroup).orderBy(function (x) {
                                    return x.Order;
                                }).toList(Core.Models.ComponentGroup);
                        }
                    }
                } finally {
                    if (Bridge.is($t2, System.IDisposable)) {
                        $t2.System$IDisposable$Dispose();
                    }
                }
                componentGroup.ForEach(Bridge.fn.bind(this, function (x) {
                    var $t4;
                    this.CalcItemInRow(($t4 = Core.Models.ComponentGroup, System.Linq.Enumerable.from(x.InverseParent, $t4).toList($t4)));
                }));
                var res = System.Linq.Enumerable.from(componentGroup, Core.Models.ComponentGroup).where(function (x) {
                        return x.ParentId == null;
                    });
                if (Core.Extensions.IEnumerableExtensions.Nothing(Core.Models.ComponentGroup, res)) {
                    System.Console.WriteLine("No component group is root component. Wrong feature name or the configuration is wrong");
                }
                return res.toList(Core.Models.ComponentGroup);
            },
            CalcItemInRow: function (componentGroup) {
                var cumulativeColumn = 0;
                var itemInRow = 0;
                var startRowIndex = 0;
                for (var i = 0; i < componentGroup.Count; i = (i + 1) | 0) {
                    var group = componentGroup.getItem(i);
                    var parentInnerCol = this.GetInnerColumn(group.Parent);
                    var outerCol = this.GetOuterColumn(group);
                    if (parentInnerCol <= 0) {
                        continue;
                    }

                    itemInRow = (itemInRow + 1) | 0;
                    cumulativeColumn = (cumulativeColumn + outerCol) | 0;
                    if (cumulativeColumn % parentInnerCol === 0) {
                        var sameRow = i;
                        while (sameRow >= startRowIndex) {
                            componentGroup.getItem(sameRow).ItemInRow = itemInRow;
                            sameRow = (sameRow - 1) | 0;
                        }
                        itemInRow = 0;
                        startRowIndex = i;
                    }
                }
            },
            Render: function () {
                if (Core.Components.Forms.EditForm.Portal) {
                    this.ParentForm = this.ParentForm || Core.Components.Forms.EditForm.LastForm;
                }
                System.Threading.Tasks.Task.run(Bridge.fn.cacheBind(this, this.RenderAsync));
                Core.Components.Forms.EditForm.LastForm = this;
            },
            RenderAsync: function () {
                var $step = 0,
                    $task1, 
                    $task2, 
                    $task3, 
                    $taskResult3, 
                    $task4, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    token, 
                    featureTask, 
                    entityTask, 
                    feature, 
                    layout, 
                    $taskResult1, 
                    $t, 
                    $t1, 
                    groupTree, 
                    $t2, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6], $step);
                                switch ($step) {
                                    case 0: {
                                        token = Core.Clients.Client.Token;
                                        featureTask = this.Feature != null ? System.Threading.Tasks.Task.fromResult(this.Feature, Core.Models.Feature) : Core.Components.Extensions.ComponentExt.LoadFeatureByName(this.Name, this.Public);
                                        entityTask = this.LoadEntity();
                                        $task2 = System.Threading.Tasks.Task.whenAll(featureTask, entityTask);
                                        $step = 1;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task2.getAwaitedResult();
                                        feature = featureTask.getResult();
                                        if (feature.LayoutId == null || this._innerEntry != null) {
                                            $step = 2;
                                            continue;
                                        }  else {
                                            $step = 3;
                                            continue;
                                        }
                                    }
                                    case 2: {
                                        $taskResult1 = null;
                                        $step = 5;
                                        continue;
                                    }
                                    case 3: {
                                        $task3 = new Core.Clients.Client.$ctor1("Feature", Bridge.Reflection.getTypeNamespace(Core.Models.User)).FirstOrDefaultAsync(Core.Models.Feature, System.String.format("/Public/?$filter=Active eq true and Id eq {0} and {1} ne null", Bridge.box(feature.LayoutId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), "Template"));
                                        $step = 4;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        $taskResult1 = $taskResult3;
                                        $step = 5;
                                        continue;
                                    }
                                    case 5: {
                                        layout = $taskResult1;
                                        Core.Extensions.ReflectionExt.CopyPropFrom$1(this.Entity, entityTask.getResult());
                                        this.SetFeatureProperties(feature);
                                        this.CurrentUserId = ($t = (token != null ? token.UserId : null), $t != null ? $t : 0);
                                        this.RegionId = ($t1 = (token != null ? token.RegionId : null), $t1 != null ? $t1 : 0);
                                        this.AllRoleIds = (token != null ? token.AllRoleIds : null) != null ? Bridge.toArray(token.AllRoleIds).join(",") : "";
                                        this.CenterIds = (token != null ? token.CenterIds : null) != null ? Bridge.toArray(token.CenterIds).join(",") : "";
                                        this.RoleIds = (token != null ? token.RoleIds : null) != null ? Bridge.toArray(token.RoleIds).join(",") : "";
                                        this.CostCenterId = token != null ? token.CostCenterId : null;
                                        this.RoleNames = (token != null ? token.RoleNames : null) != null ? Bridge.toArray(token.RoleNames).join(",") : "";
                                        groupTree = this.BuildTree(System.Linq.Enumerable.from(this.Feature.ComponentGroup, Core.Models.ComponentGroup).orderBy(function (x) {
                                            return x.Order;
                                        }).toList(Core.Models.ComponentGroup));
                                        this.Element = this.RenderTemplate(layout, feature);
                                        this.SetFeatureStyleSheet(feature.StyleSheet);
                                        this.RenderTabOrSection(this, groupTree);
                                        this.ResizeHandler();
                                        this.LockUpdate();
                                        this.ToggleApprovalBtn();
                                        Core.Components.Renderer.TabIndex(Core.MVVM.Html.Take(this.Element), -1).Trigger("focus").Event("focusin", Bridge.fn.bind(this, function () {
                                            var $step = 0,
                                                $task1, 
                                                $jumpFromFinally, 
                                                $asyncBody = Bridge.fn.bind(this, function () {
                                                    for (;;) {
                                                        $step = System.Array.min([0,1], $step);
                                                        switch ($step) {
                                                            case 0: {
                                                                $task1 = Core.Components.Extensions.ComponentExt.DispatchEventToHandlerAsync(this, this.Feature.Events, "focusin", [this.Entity]);
                                                                $step = 1;
                                                                if ($task1.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task1.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 1: {
                                                                $task1.getAwaitedResult();
                                                                return;
                                                            }
                                                            default: {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }, arguments);

                                            $asyncBody();
                                        })).Event("focusout", Bridge.fn.bind(this, function () {
                                            var $step = 0,
                                                $task1, 
                                                $jumpFromFinally, 
                                                $asyncBody = Bridge.fn.bind(this, function () {
                                                    for (;;) {
                                                        $step = System.Array.min([0,1], $step);
                                                        switch ($step) {
                                                            case 0: {
                                                                $task1 = Core.Components.Extensions.ComponentExt.DispatchEventToHandlerAsync(this, this.Feature.Events, "focusout", [this.Entity]);
                                                                $step = 1;
                                                                if ($task1.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task1.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 1: {
                                                                $task1.getAwaitedResult();
                                                                return;
                                                            }
                                                            default: {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }, arguments);

                                            $asyncBody();
                                        }));
                                        !Bridge.staticEquals(($t2 = this.DOMContentLoaded), null) ? $t2() : null;
                                        $task4 = Core.Components.Extensions.ComponentExt.DispatchEventToHandlerAsync(this, this.Feature.Events, "DOMContentLoaded", [this.Entity]);
                                        $step = 6;
                                        if ($task4.isCompleted()) {
                                            continue;
                                        }
                                        $task4.continue($asyncBody);
                                        return;
                                    }
                                    case 6: {
                                        $task4.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            RenderTemplate: function (layout, feature) {
                var entryPoint = document.getElementById(Core.Components.Forms.EditForm.SpecialEntryPoint) || document.getElementById("template") || this.Element;
                if (this.ParentForm != null && Core.Components.Forms.EditForm.Portal) {
                    this.ParentForm.Element = null;
                    this.ParentForm.Dispose();
                    this.ParentForm = null;
                }
                if (layout != null) {
                    var root = document.getElementById("template");
                    Core.MVVM.Html.Take(root).InnerHTML(layout.Template);
                    var style = document.createElement(System.Enum.toString(Core.MVVM.ElementType, Core.MVVM.ElementType.style));
                    style.appendChild(document.createTextNode(layout.StyleSheet));
                    root.appendChild(style);
                    this.BindingTemplate(root, this, true, void 0, void 0, void 0);
                    entryPoint = System.Linq.Enumerable.from(Core.Extensions.HtmlElementExtension.FilterElement(root, function (x) {
                            return Bridge.referenceEquals(x.id, Core.Components.Forms.EditForm.SpecialEntryPoint);
                        }), HTMLElement).firstOrDefault(null, null);
                    this.ResetEntryPoint(entryPoint);
                } else {
                    entryPoint.innerHTML = null;
                }
                if (!Core.Extensions.StringExt.HasAnyChar(feature.Template)) {
                    return entryPoint;
                }
                Core.MVVM.Html.Take(entryPoint).InnerHTML(feature.Template);
                this.BindingTemplate(entryPoint, this);
                var innerEntry = System.Linq.Enumerable.from(Core.Extensions.HtmlElementExtension.FilterElement(entryPoint, function (x) {
                        return Bridge.referenceEquals(x.id, "inner-entry");
                    }), HTMLElement).firstOrDefault(null, null);
                this.ResetEntryPoint(innerEntry);
                var res = innerEntry || entryPoint;
                if (Bridge.referenceEquals(Bridge.toString(res.style.display), System.Enum.toString(System.String, "none"))) {
                    res.style.display = "";
                }
                return res;
            },
            ResetEntryPoint: function (entryPoint) {
                if (entryPoint != null) {
                    entryPoint.innerHTML = "";
                }
            },
            BindingTemplate: function (ele, parent, isLayout, entity, factory, visited) {
                var $t;
                if (isLayout === void 0) { isLayout = false; }
                if (entity === void 0) { entity = null; }
                if (factory === void 0) { factory = null; }
                if (visited === void 0) { visited = null; }
                if (visited == null) {
                    visited = new (System.Collections.Generic.HashSet$1(HTMLElement)).ctor();
                }
                if (ele == null || visited.contains(ele)) {
                    return;
                }
                visited.add(ele);
                if (ele.children.length === 0 && Core.Components.Forms.EditForm.RenderCellText(ele, entity, isLayout) != null) {
                    return;
                }
                var component = null;
                $t = Bridge.getEnumerator(System.Linq.Enumerable.from(Bridge.Reflection.getMembers(Core.Models.Component, 16, 28), System.Reflection.PropertyInfo).where(function (x) {
                        return (!!x.g) && (!!x.s);
                    }));
                try {
                    while ($t.moveNext()) {
                        var prop = $t.Current;
                        var value = ele.dataset[prop.n.toLowerCase()];
                        if (value == null) {
                            continue;
                        }
                        var propVal = null;
                        try {
                            propVal = Bridge.referenceEquals(prop.rt, System.String) ? value : Core.Extensions.Utils.ChangeType(value, prop.rt);
                            component = component || new Core.Models.Component();
                            Core.Extensions.BridgeExt.SetPropValue(component, prop.n, propVal);
                        } catch ($e1) {
                            $e1 = System.Exception.create($e1);
                            continue;
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                var newCom = (!Bridge.staticEquals(factory, null) ? factory(ele, component, parent, isLayout, entity) : null) || this.BindingData(ele, component, parent, isLayout, entity);
                parent = Bridge.is(newCom, Core.Components.Section) ? newCom : parent;
                Core.Extensions.IEnumerableExtensions.ForEach(HTMLElement, ele.children, Bridge.fn.bind(this, function (child) {
                    this.BindingTemplate(child, parent, isLayout, entity, factory, visited);
                }));
            },
            BindingData: function (ele, com, parent, isLayout, entity) {
                var $t, $t1, $t2;
                var child = null;
                if (ele == null) {
                    return null;
                }
                if (com == null || Core.Extensions.StringExt.IsNullOrEmpty(com.ComponentType)) {
                    return null;
                }
                if (Bridge.referenceEquals(com.ComponentType, "Section")) {
                    child = ($t = new Core.Components.Section.ctor(ele), $t.GuiInfo = com, $t);
                } else if (child == null) {
                    var comType = System.String.indexOf(com.ComponentType, ".") >= 0 ? com.ComponentType : (Bridge.Reflection.getTypeNamespace(Core.Components.BaseComponent) || "") + "." + (com.ComponentType || "");
                    var typeConstuctor = eval(comType);
                    if (typeConstuctor == null) return null;
                    child = new typeConstuctor(com, ele);
                }
                child.ParentElement = child.ParentElement || ele.parentElement;
                child.Entity = ($t = entity, $t != null ? $t : ($t1 = (($t2 = child.EditForm) != null ? $t2.Entity : null), $t1 != null ? $t1 : Core.Components.Forms.EditForm.LayoutForm.Entity));
                if (isLayout) {
                    child.EditForm = Bridge.as(parent, Core.Components.Forms.EditForm);
                    child.Render();
                    Core.Components.Forms.EditForm.LayoutForm.Children.add(child);
                    child.ToggleShow(com.ShowExp);
                } else {
                    parent.AddChild(child);
                }
                return child;
            },
            LoadEntity: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    id, 
                    entity, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (!this.ShouldLoadEntity || this.Entity == null) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        id = Bridge.unbox(this.Entity[Core.Components.BaseComponent.IdField]);
                                        if (id == null || System.Nullable.lte(id, 0)) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        $task1 = this.Client.GetAsync$2(System.Nullable.getValue(id));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        entity = ($t = $taskResult1, $t != null ? $t : this.Entity);
                                        $tcs.setResult(entity);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            LockUpdate: function () {
                if (System.Linq.Enumerable.from(this.Feature.FeaturePolicy, Core.Models.FeaturePolicy).all(function (x) {
                        return !x.CanWrite;
                    }) && !this.Feature.IsPublic) {
                    this.LockUpdateButCancel();
                    return;
                }
                if (this.Entity == null) {
                    return;
                }

                var insertedDate = Bridge.unbox(this.Entity.InsertedDate);
                var hardLock = Bridge.unbox(this.Entity.Lock);
                if (Bridge.equals(insertedDate, null) || Bridge.equals(insertedDate, System.DateTime.getMinValue())) {
                    return;
                }

                var lockUpdatePolicy = System.Linq.Enumerable.from(this.Feature.FeaturePolicy, Core.Models.FeaturePolicy).where(function (x) {
                        return x.EntityId == null && System.Nullable.hasValue(x.RoleId) && System.Nullable.hasValue(x.LockUpdateAfterCreated);
                    }).where(function (x) {
                    return Core.Clients.Client.Token.RoleIds.contains(System.Nullable.getValue(x.RoleId));
                });
                var lockUpdate = 0;
                if (Core.Extensions.IEnumerableExtensions.HasElement(Core.Models.FeaturePolicy, lockUpdatePolicy)) {
                    lockUpdate = lockUpdatePolicy.max(function (x) {
                        return System.Nullable.getValue(x.LockUpdateAfterCreated);
                    });
                }
                if (lockUpdate > 0 && Core.Extensions.DateTimeExt.GetBusinessDays(System.Nullable.getValue(insertedDate)) > lockUpdate || System.Nullable.hasValue(hardLock) && System.Nullable.getValue(hardLock)) {
                    this.IsLock = true;
                    this.LockUpdateButCancel();
                }
            },
            LockUpdateButCancel: function () {
                this.Disabled = true;
                Core.Components.Extensions.ComponentExt.SetDisabled$1(this, false, [Core.Components.Forms.EditForm.BtnCancel, Core.Components.Forms.EditForm.BtnPrint]);
            },
            SetFeatureProperties: function (feature) {
                if (feature == null) {
                    return;
                }

                this.Feature = feature;
                Core.Extensions.HtmlElementExtension.AddClass(this.Element, feature.ClassName);
                Core.MVVM.Html.Take(this.Element).Style$1(feature.Style);
                if (Core.Extensions.StringExt.IsNullOrEmpty(this.Icon)) {
                    this.Icon = feature.Icon;
                }
                if (Core.Extensions.StringExt.IsNullOrEmpty(this.Title)) {
                    this.Title = feature.Label;
                }
            },
            SetFeatureStyleSheet: function (styleSheet) {
                if (Core.Extensions.StringExt.IsNullOrWhiteSpace(styleSheet)) {
                    return;
                }
                var style = Bridge.as(document.createElement(System.Enum.toString(Core.MVVM.ElementType, Core.MVVM.ElementType.style)), HTMLStyleElement);
                style.appendChild(document.createTextNode(styleSheet));
                style.setAttribute("source", "feature");
                this.Element.appendChild(style);
            },
            RenderTabOrSection: function (parent, componentGroup) {
                var $t;
                $t = Bridge.getEnumerator(System.Linq.Enumerable.from(componentGroup, Core.Models.ComponentGroup).orderBy(function (x) {
                        return x.Order;
                    }));
                try {
                    while ($t.moveNext()) {
                        var group = $t.Current;
                        group.Disabled = parent.Disabled;
                        if (group.IsTab) {
                            this.RenderTabGroup(parent, group);
                        } else {
                            this.RenderSection(parent, group);
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            },
            RenderSection: function (parent, groupInfo) {
                var $t, $t1;
                var uiPolicy = this.GetElementPolicies$1(System.Array.init([groupInfo.Id], System.Int32), Core.Enums.EntityEnum.ComponentGroup);
                var readPermission = !groupInfo.IsPrivate || Core.Extensions.IEnumerableExtensions.HasElementAndAll(Core.Models.FeaturePolicy, uiPolicy, function (x) {
                    return x.CanRead;
                });
                var writePermission = !groupInfo.IsPrivate || Core.Extensions.IEnumerableExtensions.HasElementAndAll(Core.Models.FeaturePolicy, uiPolicy, function (x) {
                    return x.CanWrite;
                });
                if (!readPermission) {
                    return null;
                }

                var width = groupInfo.Width;
                var outerColumn = this.GetOuterColumn(groupInfo);
                var parentColumn = this.GetInnerColumn(groupInfo.Parent);
                var hasOuterColumn = outerColumn > 0 && parentColumn > 0;
                if (hasOuterColumn) {
                    var per = System.Decimal(outerColumn).div(System.Decimal(parentColumn)).mul(System.Decimal(100));
                    per = System.Decimal.toDecimalPlaces(per, 2, 4);
                    var padding = System.Decimal.toDecimalPlaces((System.Decimal(groupInfo.ItemInRow).sub(System.Decimal(1.0))).div(System.Decimal(groupInfo.ItemInRow)), 2, 4);
                    width = outerColumn === parentColumn ? "100%" : System.String.format("calc({0}% - {1}rem)", per, padding);
                }

                Core.Components.Renderer.ClassName(Core.Components.Renderer.Panel(Core.MVVM.Html.Take(parent.Element), groupInfo.Label), groupInfo.ClassName).Event$1("contextmenu", Bridge.fn.bind(this, function (e) {
                    this.SysConfigMenu(e, null, groupInfo);
                }));
                if (!System.String.contains(groupInfo.ClassName,"ribbon")) {
                    Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.MVVM.Html.Instance, "panel"), "group");
                }

                Core.Components.Renderer.Width(Core.MVVM.Html.Instance.Display$1(!groupInfo.Hidden).Style$1(($t = groupInfo.Style, $t != null ? $t : "")), width);
                var section = ($t1 = new Core.Components.Section.ctor(Core.MVVM.Html.Context), $t1.Id = (groupInfo.Name || "") + (Bridge.toString(groupInfo.Id) || ""), $t1.Name = groupInfo.Name, $t1.ComponentGroup = groupInfo, $t1);
                section.Disabled = parent.Disabled || groupInfo.Disabled || !writePermission || this.IsLock;
                parent.AddChild(section, null, groupInfo.ShowExp);
                this.RenderChildrenSection(groupInfo, section);
                if (section.ComponentGroup.Responsive && !section.ComponentGroup.IsTab) {
                    this.RenderComponentResponsive(section, groupInfo);
                } else {
                    this.RenderComponent(section, groupInfo);
                }

                Core.MVVM.Html.Take(parent.Element);
                !Bridge.staticEquals(($t1 = section.DOMContentLoaded), null) ? $t1() : null;
                return section;
            },
            RenderChildrenSection: function (group, section) {
                var $t;
                if (Core.Extensions.IEnumerableExtensions.Nothing(Core.Models.ComponentGroup, group.InverseParent)) {
                    return;
                }
                $t = Bridge.getEnumerator(System.Linq.Enumerable.from(group.InverseParent, Core.Models.ComponentGroup).orderBy(function (x) {
                        return x.Order;
                    }));
                try {
                    while ($t.moveNext()) {
                        var child = $t.Current;
                        child.Disabled = group.Disabled;
                        if (child.IsTab) {
                            this.RenderTabGroup(section, child);
                        } else {
                            this.RenderSection(section, child);
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            },
            GetInnerColumn: function (group) {
                var $t, $t1;
                if (group == null) {
                    return 0;
                }

                var screenWidth = this.Element.clientWidth;
                var res;
                if (screenWidth < Core.Components.BaseComponent.ExSmallScreen && System.Nullable.gt(group.XsCol, 0)) {
                    res = group.XsCol;
                } else if (screenWidth < Core.Components.BaseComponent.SmallScreen && System.Nullable.gt(group.SmCol, 0)) {
                    res = group.SmCol;
                } else if (screenWidth < Core.Components.BaseComponent.MediumScreen && group.Column > 0) {
                    res = group.Column;
                } else if (screenWidth < Core.Components.BaseComponent.LargeScreen && System.Nullable.gt(group.LgCol, 0)) {
                    res = group.LgCol;
                } else if (screenWidth < Core.Components.BaseComponent.ExLargeScreen && System.Nullable.gt(group.XlCol, 0)) {
                    res = group.XlCol;
                } else {
                    res = ($t = group.XxlCol, $t != null ? $t : group.Column);
                }

                return ($t1 = res, $t1 != null ? $t1 : 0);
            },
            GetOuterColumn: function (group) {
                var $t, $t1;
                var screenWidth = this.Element.clientWidth;
                var res;
                if (screenWidth < Core.Components.BaseComponent.ExSmallScreen && System.Nullable.gt(group.XsOuterColumn, 0)) {
                    res = group.XsOuterColumn;
                } else if (screenWidth < Core.Components.BaseComponent.SmallScreen && System.Nullable.gt(group.SmOuterColumn, 0)) {
                    res = group.SmOuterColumn;
                } else if (screenWidth < Core.Components.BaseComponent.MediumScreen && System.Nullable.gt(group.OuterColumn, 0)) {
                    res = group.OuterColumn;
                } else if (screenWidth < Core.Components.BaseComponent.LargeScreen && System.Nullable.gt(group.LgOuterColumn, 0)) {
                    res = group.LgOuterColumn;
                } else if (screenWidth < Core.Components.BaseComponent.ExLargeScreen && System.Nullable.gt(group.XlOuterColumn, 0)) {
                    res = group.XlOuterColumn;
                } else {
                    res = ($t = group.XxlOuterColumn, $t != null ? $t : group.OuterColumn);
                }

                return ($t1 = res, $t1 != null ? $t1 : 0);
            },
            SysConfigMenu: function (e, component, group) {
                if (!Core.Clients.Client.SystemRole) {
                    return;
                }

                e.preventDefault();
                e.stopPropagation();
                var ctxMenu = Core.Components.Forms.ContextMenu.Instance;
                ctxMenu.Top = Core.Extensions.EventExt.Top(e);
                ctxMenu.Left = Core.Extensions.EventExt.Left(e);
                ctxMenu.MenuItems = Bridge.fn.bind(this, function (_o1) {
                        var $t;
                        _o1.add(component == null ? null : ($t = new Core.Components.Forms.ContextMenuItem(), $t.Icon = "mif-cog", $t.Text = "T\u00f9y ch\u1ecdn d\u1eef li\u1ec7u", $t.Click = Bridge.fn.cacheBind(this, this.ComponentProperties), $t.Parameter = component, $t));
                        _o1.add(($t = new Core.Components.Forms.ContextMenuItem(), $t.Icon = "mif-cogs", $t.Text = "T\u00f9y ch\u1ecdn v\u00f9ng d\u1eef li\u1ec7u", $t.Click = Bridge.fn.cacheBind(this, this.SectionProperties), $t.Parameter = group, $t));
                        _o1.add(($t = new Core.Components.Forms.ContextMenuItem(), $t.Icon = "mif-folder-open", $t.Text = "Thi\u1ebft l\u1eadp chung", $t.Click = Bridge.fn.cacheBind(this, this.FeatureProperties), $t));
                        return _o1;
                    })(new (System.Collections.Generic.List$1(Core.Components.Forms.ContextMenuItem)).ctor());
                ctxMenu.Render();
            },
            CloneFeature: function (ev) {
                var $t;
                var feature = Bridge.as(ev, Core.Models.Feature);
                var confirmDialog = ($t = new Core.Components.Forms.ConfirmDialog(), $t.Content = "B\u1ea1n c\u00f3 mu\u1ed1n clone feature n\u00e0y?", $t.Title = "X\u00e1c nh\u1eadn", $t);
                confirmDialog.YesConfirmed = Bridge.fn.combine(confirmDialog.YesConfirmed, Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        client, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        client = new Core.Clients.Client.$ctor1("Feature");
                                        $task1 = client.CloneFeatureAsync(feature.Id);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }));
                this.AddChild(confirmDialog);
            },
            RenderTabGroup: function (parent, group) {
                var $t;
                var disabled = parent.Disabled || group.Disabled;
                if (this.TabGroup == null) {
                    this.TabGroup = new (System.Collections.Generic.List$1(Core.Components.Forms.TabGroup)).ctor();
                }

                var tabG = System.Linq.Enumerable.from(this.TabGroup, Core.Components.Forms.TabGroup).firstOrDefault(function (x) {
                        return Bridge.referenceEquals(x.Name, group.TabGroup);
                    }, null);
                if (tabG == null) {
                    tabG = ($t = new Core.Components.Forms.TabGroup(), $t.Name = group.TabGroup, $t.Parent = parent, $t.ParentElement = parent.Element, $t.Entity = this.Entity, $t.ComponentGroup = group, $t.EditForm = this, $t);
                    tabG.Disabled = disabled;
                    var subTab = ($t = new Core.Components.Forms.TabComponent(group), $t.Parent = tabG, $t.Entity = this.Entity, $t.ComponentGroup = group, $t.Name = group.Name, $t.EditForm = this, $t);
                    subTab.Disabled = disabled;
                    tabG.Children.add(subTab);
                    this.TabGroup.add(tabG);
                    parent.Children.add(tabG);
                    tabG.Render();
                    subTab.Render();
                    subTab.RenderTabContent();
                    subTab.Focus();
                    subTab.ToggleShow(group.ShowExp);
                } else {
                    var subTab1 = ($t = new Core.Components.Forms.TabComponent(group), $t.Parent = tabG, $t.ParentElement = tabG.Element, $t.Entity = this.Entity, $t.ComponentGroup = group, $t.Name = group.Name, $t);
                    subTab1.Disabled = disabled;
                    tabG.Children.add(subTab1);
                    subTab1.ToggleShow(group.ShowExp);
                    subTab1.Render();
                }
            },
            RenderComponent: function (parent, group) {
                var $t, $t1, $t2, $t3;
                if (Core.Extensions.IEnumerableExtensions.Nothing(Core.Models.Component, group.Component)) {
                    return;
                }
                var html = Core.MVVM.Html.Instance;
                Core.Components.Renderer.ClassName(html.Table, "ui-layout").TBody.TRow.Render();
                var column = 0;
                var allComPolicies = this.GetElementPolicies$1(System.Linq.Enumerable.from(group.Component, Core.Models.Component).select(function (x) {
                        return x.Id;
                    }).ToArray(System.Int32));
                $t = Bridge.getEnumerator(System.Linq.Enumerable.from(group.Component, Core.Models.Component).orderBy(function (x) {
                        return x.Order;
                    }));
                try {
                    while ($t.moveNext()) {
                        var ui = { v : $t.Current };
                        if (ui.v.Hidden) {
                            continue;
                        }

                        var comPolicies = System.Linq.Enumerable.from(allComPolicies, Core.Models.FeaturePolicy).where((function ($me, ui) {
                                return function (x) {
                                    return x.RecordId === ui.v.Id;
                                };
                            })(this, ui)).ToArray(Core.Models.FeaturePolicy);
                        var readPermission = !ui.v.IsPrivate || Core.Extensions.IEnumerableExtensions.HasElementAndAll(Core.Models.FeaturePolicy, comPolicies, function (x) {
                            return x.CanRead;
                        });
                        var writePermission = !ui.v.IsPrivate || Core.Extensions.IEnumerableExtensions.HasElementAndAll(Core.Models.FeaturePolicy, comPolicies, function (x) {
                            return x.CanWrite;
                        });
                        if (!readPermission) {
                            continue;
                        }

                        var colSpan = ($t1 = ui.v.Column, $t1 != null ? $t1 : 2);
                        ui.v.Label = ($t2 = ui.v.Label, $t2 != null ? $t2 : "");
                        if (ui.v.ShowLabel) {
                            Core.Components.Renderer.TextAlign(Core.Components.Renderer.IText(html.TData.Visibility$1(ui.v.Visibility).Label, ui.v.Label), column === 0 ? Core.Enums.TextAlign.left : Core.Enums.TextAlign.right);
                            Core.Components.Renderer.ColSpan(html.EndOf(Core.MVVM.ElementType.td).TData.Visibility$1(ui.v.Visibility), ((colSpan - 1) | 0)).Render();
                        } else {
                            Core.Components.Renderer.ClassName(Core.Components.Renderer.ColSpan(html.TData.Visibility$1(ui.v.Visibility), colSpan), "text-left").Style$1("padding-left: 0;").Render();
                        }

                        if (Core.Extensions.StringExt.HasAnyChar(ui.v.Style)) {
                            html.Style$1(ui.v.Style);
                        }

                        if (Core.Extensions.StringExt.HasAnyChar(ui.v.Width)) {
                            Core.Components.Renderer.Width(html, ui.v.Width);
                        }

                        var childComponent = Core.Components.Extensions.ComponentFactory.GetComponent(ui.v, this);
                        if (Bridge.Reflection.isAssignableFrom(Core.Components.ListView, Bridge.getType(childComponent))) {
                            this.ListViews.add(Bridge.as(childComponent, Core.Components.ListView));
                        }
                        parent.AddChild(childComponent);
                        var editable;
                        if (((editable = Bridge.as(childComponent, Core.Components.EditableComponent))) != null) {
                            editable.Disabled = ui.v.Disabled || parent.Disabled || !writePermission;
                        }
                        if (childComponent.Element != null) {
                            if (Core.Extensions.StringExt.HasAnyChar(ui.v.ChildStyle)) {
                                var current = Core.MVVM.Html.Context;
                                Core.MVVM.Html.Take(childComponent.Element).Style$1(ui.v.ChildStyle);
                                Core.MVVM.Html.Take(current);
                            }
                            if (Core.Extensions.StringExt.HasAnyChar(ui.v.ClassName)) {
                                ($t3 = childComponent.Element) != null ? Core.Extensions.HtmlElementExtension.AddClass($t3, ui.v.ClassName) : null;
                            }

                            if (System.Nullable.eq(ui.v.Row, 1)) {
                                Core.Extensions.HtmlElementExtension.AddClass(childComponent.ParentElement.parentElement, "inline-label");
                            }

                            if (Core.Clients.Client.SystemRole) {
                                childComponent.Element.addEventListener(System.Enum.toString(System.String, "contextmenu"), (function ($me, ui) {
                                    return Bridge.fn.bind($me, function (e) {
                                        this.SysConfigMenu(e, ui.v, group);
                                    });
                                })(this, ui));
                            }
                        }
                        if (ui.v.Focus) {
                            childComponent.Focus();
                        }

                        html.EndOf(Core.MVVM.ElementType.td);
                        if (System.Nullable.hasValue(ui.v.Offset) && System.Nullable.gt(ui.v.Offset, 0)) {
                            Core.Components.Renderer.ColSpan(html.TData, System.Nullable.getValue(ui.v.Offset)).End.Render();
                            column = (column + System.Nullable.getValue(ui.v.Offset)) | 0;
                        }
                        column = (column + colSpan) | 0;
                        if (column === this.GetInnerColumn(group)) {
                            column = 0;
                            html.EndOf(Core.MVVM.ElementType.tr).TRow.Render();
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            },
            GetElementPolicies$1: function (recordIds, entityId) {
                if (entityId === void 0) { entityId = 20; }
                var hasHidden = System.Linq.Enumerable.from(this.Feature.FeaturePolicy, Core.Models.FeaturePolicy).where(function (x) {
                        return System.Nullable.hasValue(x.RoleId) && Core.Clients.Client.Token.AllRoleIds.contains(System.Nullable.getValue(x.RoleId));
                    }).where(function (x) {
                    return System.Nullable.eq(x.EntityId, entityId) && System.Array.contains(recordIds, x.RecordId, System.Int32);
                }).ToArray(Core.Models.FeaturePolicy);
                return hasHidden;
            },
            GetElementPolicies: function (recordId, entityId) {
                if (entityId === void 0) { entityId = 20; }
                var hasHidden = System.Linq.Enumerable.from(this.Feature.FeaturePolicy, Core.Models.FeaturePolicy).where(function (x) {
                        return System.Nullable.hasValue(x.RoleId) && Core.Clients.Client.Token.AllRoleIds.contains(System.Nullable.getValue(x.RoleId));
                    }).where(function (x) {
                    return System.Nullable.eq(x.EntityId, entityId) && recordId === x.RecordId;
                }).ToArray(Core.Models.FeaturePolicy);
                return hasHidden;
            },
            RenderComponentResponsive: function (parent, group) {
                var $t, $t1, $t2, $t3;
                if (Core.Extensions.IEnumerableExtensions.Nothing(Core.Models.Component, group.Component)) {
                    return;
                }
                var html = Core.MVVM.Html.Instance;
                var allComPolicies = this.GetElementPolicies$1(System.Linq.Enumerable.from(group.Component, Core.Models.Component).select(function (x) {
                        return x.Id;
                    }).ToArray(System.Int32));
                var innerCol = this.GetInnerColumn(group);
                if (innerCol > 0) {
                    Core.Components.Renderer.ClassName(Core.MVVM.Html.Take(parent.Element), "grid").Style$1(System.String.format("grid-template-columns: repeat({0}, 1fr)", [Bridge.box(innerCol, System.Int32)]));
                }
                var column = 0;
                $t = Bridge.getEnumerator(System.Linq.Enumerable.from(group.Component, Core.Models.Component).orderBy(function (x) {
                        return x.Order;
                    }));
                try {
                    while ($t.moveNext()) {
                        var ui = { v : $t.Current };
                        if (ui.v.Hidden) {
                            continue;
                        }

                        var comPolicies = System.Linq.Enumerable.from(allComPolicies, Core.Models.FeaturePolicy).where((function ($me, ui) {
                                return function (x) {
                                    return x.RecordId === ui.v.Id;
                                };
                            })(this, ui)).ToArray(Core.Models.FeaturePolicy);
                        var readPermission = !ui.v.IsPrivate || Core.Extensions.IEnumerableExtensions.HasElementAndAll(Core.Models.FeaturePolicy, comPolicies, function (x) {
                            return x.CanRead;
                        });
                        var writePermission = !ui.v.IsPrivate || Core.Extensions.IEnumerableExtensions.HasElementAndAll(Core.Models.FeaturePolicy, comPolicies, function (x) {
                            return x.CanWrite;
                        });
                        if (!readPermission) {
                            continue;
                        }

                        Core.MVVM.Html.Take(parent.Element);
                        var colSpan = ($t1 = ui.v.Column, $t1 != null ? $t1 : 2);
                        ui.v.Label = ($t2 = ui.v.Label, $t2 != null ? $t2 : "");
                        var label = null;
                        if (ui.v.ShowLabel) {
                            Core.Components.Renderer.TextAlign(Core.Components.Renderer.IText(html.Label, ui.v.Label), column === 0 ? Core.Enums.TextAlign.left : Core.Enums.TextAlign.right).Render();
                            label = Core.MVVM.Html.Context;
                            html.End.Render();
                        }

                        var childComponent = Core.Components.Extensions.ComponentFactory.GetComponent(ui.v, this);
                        if (Bridge.Reflection.isAssignableFrom(Core.Components.ListView, Bridge.getType(childComponent))) {
                            this.ListViews.add(Bridge.as(childComponent, Core.Components.ListView));
                        }
                        parent.AddChild(childComponent);
                        var editable;
                        if (((editable = Bridge.as(childComponent, Core.Components.EditableComponent))) != null) {
                            editable.Disabled = ui.v.Disabled || parent.Disabled || !writePermission || this.IsLock;
                        }

                        if (childComponent.Element != null) {
                            if (Core.Extensions.StringExt.HasAnyChar(ui.v.ChildStyle)) {
                                var current = Core.MVVM.Html.Context;
                                Core.MVVM.Html.Take(childComponent.Element).Style$1(ui.v.ChildStyle);
                                Core.MVVM.Html.Take(current);
                            }
                            if (Core.Extensions.StringExt.HasAnyChar(ui.v.ClassName)) {
                                ($t3 = childComponent.Element) != null ? Core.Extensions.HtmlElementExtension.AddClass($t3, ui.v.ClassName) : null;
                            }

                            if (System.Nullable.eq(ui.v.Row, 1)) {
                                Core.Extensions.HtmlElementExtension.AddClass(childComponent.ParentElement.parentElement, "inline-label");
                            }

                            if (Core.Clients.Client.SystemRole) {
                                childComponent.Element.addEventListener(System.Enum.toString(System.String, "contextmenu"), (function ($me, ui) {
                                    return Bridge.fn.bind($me, function (e) {
                                        this.SysConfigMenu(e, ui.v, group);
                                    });
                                })(this, ui));
                            }
                        }
                        if (ui.v.Focus) {
                            childComponent.Focus();
                        }

                        if (colSpan <= innerCol) {
                            if (label != null && label.nextElementSibling != null && colSpan !== 2) {
                                label.nextElementSibling.style.gridColumn = System.String.format("{0}/{1}", Bridge.box(((column + 2) | 0), System.Int32), Bridge.box(((((column + colSpan) | 0) + 1) | 0), System.Int32));
                            } else if (childComponent.Element != null) {
                                childComponent.Element.style.gridColumn = System.String.format("{0}/{1}", Bridge.box(((column + 2) | 0), System.Int32), Bridge.box(((((column + colSpan) | 0) + 1) | 0), System.Int32));
                            }
                            column = (column + colSpan) | 0;
                        } else {
                            column = 0;
                        }
                        if (column === innerCol) {
                            column = 0;
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            },
            HeaderProperties: function (arg) {
                var $t;
                var editor = ($t = new Core.Components.HeaderEditor(), $t.Entity = arg, $t.ParentElement = this.TabEditor.Element, $t);
                this.AddChild(editor);
            },
            ComponentProperties: function (arg) {
                var $t;
                var component = Core.Extensions.BridgeExt.CastProp(Core.Models.Component, arg);
                component.ComponentGroup = null;
                var editor = ($t = new Core.Components.Framework.ComponentBL(), $t.Entity = component, $t.ParentElement = this.TabEditor.Element, $t);
                ($t = this.TabEditor) != null ? $t.AddChild(editor) : null;
            },
            SectionProperties: function (arg) {
                var $t;
                var group = Core.Extensions.BridgeExt.CastProp(Core.Models.ComponentGroup, arg);
                group.InverseParent = null;
                var editor = ($t = new Core.Components.Framework.ComponentGroupBL(), $t.Entity = group, $t.ParentElement = this.TabEditor.Element, $t);
                ($t = this.TabEditor) != null ? $t.AddChild(editor) : null;
            },
            FeatureProperties: function (arg) {
                var id = (this.Feature.Name || "") + "Prop" + this.Feature.Id;
                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "FeatureEditor", Bridge.fn.bind(this, function () {
                                                var type = Bridge.Reflection.getType("Core.Components.Framework.FeatureDetailBL");
                                                var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                                instance.Title = "Ch\u1ec9nh s\u1eeda m\u00e0ng h\u00ecnh";
                                                instance.Entity = this.Feature;
                                                return instance;
                                            }), false);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            SecurityRecord: function (arg) {
                var $t;
                var security = ($t = new Core.Components.SecurityBL(), $t.Entity = arg, $t.ParentElement = this.TabEditor.Element, $t);
                this.TabEditor.AddChild(security);
            },
            Cancel: function () {
                this.DirtyCheckAndCancel();
            },
            CancelWithoutAsk: function () {
                this.Dispose();
            },
            Dispose: function () {
                this.Client = null;
                Core.Components.Forms.EditForm.NotificationClient != null ? Core.Components.Forms.EditForm.NotificationClient.RemoveListener(Bridge.fn.cacheBind(this, this.RealtimeUpdate)) : null;
                window.removeEventListener("resize", Bridge.fn.cacheBind(this, this.ResizeHandler));
                Core.Components.EditableComponent.prototype.Dispose.call(this);
            },
            DirtyCheckAndCancel: function () {
                this.DirtyCheckAndCancel$1(null);
            },
            DirtyCheckAndCancel$1: function (closeCallback) {
                var $t;
                if (!this.Dirty) {
                    this.Dispose();
                    return;
                }
                this._confirm = ($t = new Core.Components.Forms.ConfirmDialog(), $t.Content = "B\u1ea1n c\u00f3 mu\u1ed1n l\u01b0u d\u1eef li\u1ec7u tr\u01b0\u1edbc khi \u0111\u00f3ng?", $t);
                this._confirm.YesConfirmed = Bridge.fn.combine(this._confirm.YesConfirmed, Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.SaveAndLeaveAsync();
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        !Bridge.staticEquals(closeCallback, null) ? closeCallback() : null;
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }));
                this._confirm.NoConfirmed = Bridge.fn.combine(this._confirm.NoConfirmed, Bridge.fn.bind(this, function () {
                    this.Dispose();
                    !Bridge.staticEquals(closeCallback, null) ? closeCallback() : null;
                }));
                this._confirm.IgnoreCancelButton = true;
                this._confirm.Render();
            },
            SaveAndLeaveAsync: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    success, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.Save();
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        success = $taskResult1;
                                        if (!success) {
                                            $tcs.setResult(null);
                                            return;
                                        }

                                        this.Dispose();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            Print: function () {
                var printable = Bridge.as(Core.Components.Extensions.ComponentExt.FirstOrDefault(this, function (x) {
                    var section;
                    return ((section = Bridge.as(x, Core.Components.Section))) != null && System.String.contains(section.ClassName,"printable");
                }), Core.Components.Section);
                Core.Components.Extensions.ComponentExt.SetDisabled$1(this, false, [Core.Components.Forms.EditForm.BtnPrint]);
                Core.Components.Forms.EditForm.PrintSection(printable);
            },
            Focus: function () {
                var ele = Core.Components.Extensions.ComponentExt.FirstOrDefault(this, function (x) {
                    return x.GuiInfo != null && x.GuiInfo.Focus;
                });
                if (ele == null) {
                    this.Element.focus();
                } else {
                    ele.Focus();
                }
                this.ResizeHandler();
            },
            UpdateViewByName: function (fieldNames) {
                if (fieldNames === void 0) { fieldNames = []; }
                if (Core.Extensions.IEnumerableExtensions.Nothing(System.String, fieldNames)) {
                    return;
                }

                this.FilterChildren$1(function (x) {
                    if (System.Array.contains(fieldNames, x.Name, System.String)) {
                        x.UpdateView();
                    }

                    return false;
                });
            },
            ResizeHandler: function () {
                this.ResizeTabGroup();
                this.ResizeListView();
            },
            ResizeListView: function () {
                var visibleListView = System.Linq.Enumerable.from(this.ListViews, Core.Components.ListView).firstOrDefault(function (x) {
                        return !Core.Extensions.HtmlElementExtension.Hidden(x.Element);
                    }, null);
                if (visibleListView == null) {
                    return;
                }

                var allListView = System.Linq.Enumerable.from(visibleListView.Parent.Children, Core.Components.BaseComponent).where(function (x) {
                        return Bridge.Reflection.isAssignableFrom(Core.Components.ListView, Bridge.getType(x));
                    });
                var responsive = allListView.any(function (x) {
                    return System.String.contains(x.Name,"Mobile");
                });
                allListView.forEach(Bridge.fn.bind(this, function (x) {
                    if (responsive) {
                        x.Show = Core.Components.BaseComponent.IsSmallUp ? !System.String.contains(x.Name,"Mobile") : System.String.contains(x.Name,"Mobile");
                        if (x.Show) {
                            this._currentListView = Bridge.as(x, Core.Components.ListView);
                        }
                    } else {
                        this._currentListView = Bridge.as(x, Core.Components.ListView);
                    }
                }));
            },
            ResizeTabGroup: function () {
                if (this.Element != null && Core.Extensions.HtmlElementExtension.HasClass(this.Element, "mobile") || Core.Extensions.IEnumerableExtensions.Nothing(Core.Components.Forms.TabGroup, this.TabGroup)) {
                    return;
                }

                this.TabGroup.ForEach(function (tg) {
                    if (tg == null || tg.Element == null) {
                        return;
                    }

                    if (Core.Components.BaseComponent.IsLargeUp && tg.ComponentGroup.Responsive && Core.Extensions.HtmlElementExtension.HasClass(tg.Element.parentElement, "tab-horizontal")) {
                        Core.Extensions.HtmlElementExtension.ReplaceClass(tg.Element.parentElement, "tab-horizontal", "tab-vertical");
                    } else if (!Core.Components.BaseComponent.IsLargeUp && tg.ComponentGroup.Responsive && Core.Extensions.HtmlElementExtension.HasClass(tg.Element.parentElement, "tab-vertical")) {
                        Core.Extensions.HtmlElementExtension.ReplaceClass(tg.Element.parentElement, "tab-vertical", "tab-horizontal");
                    }
                });
            },
            SetExpired: function () {
                var $t;
                var confirm = ($t = new Core.Components.Forms.ConfirmDialog(), $t.Content = "B\u1ea1n c\u00f3 ch\u1eafc ch\u1eafn mu\u1ed1n c\u00e0i \u0111\u1eb7t h\u1ebft h\u1ea1n?", $t);
                confirm.Render();
                confirm.YesConfirmed = Bridge.fn.combine(confirm.YesConfirmed, Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        Core.Extensions.ReflectionExt.ClearReferences(this.Entity);
                                        Core.Extensions.BridgeExt.SetPropValue(this.Entity, Core.Components.Forms.EditForm.ExpiredDate, Bridge.box(System.DateTime.getNow(), System.DateTime, System.DateTime.format));
                                        this.UpdateView(false, void 0, [Core.Components.Forms.EditForm.ExpiredDate]);
                                        $task1 = this.AddOrUpdate(Bridge.box(true, System.Boolean, System.Boolean.toString));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }));
            },
            RequestApprove: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    isValid, 
                    confirm, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.IsFormValid();
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        isValid = $taskResult1;
                                        if (!isValid) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        confirm = ($t = new Core.Components.Forms.ConfirmDialog(), $t.Content = "B\u1ea1n c\u00f3 ch\u1eafc ch\u1eafn g\u1eedi y\u00eau c\u1ea7u ph\u00ea duy\u1ec7t?", $t);
                                        confirm.Render();
                                        confirm.YesConfirmed = Bridge.fn.combine(confirm.YesConfirmed, Bridge.fn.bind(this, function () {
                                            var $step = 0,
                                                $task1, 
                                                $taskResult1, 
                                                $task2, 
                                                $taskResult2, 
                                                $jumpFromFinally, 
                                                res, 
                                                $asyncBody = Bridge.fn.bind(this, function () {
                                                    for (;;) {
                                                        $step = System.Array.min([0,1,2,3,4], $step);
                                                        switch ($step) {
                                                            case 0: {
                                                                Core.Extensions.ReflectionExt.ClearReferences(this.Entity);
                                                                if (Bridge.unbox(this.Entity[Core.Components.BaseComponent.IdField]) <= 0) {
                                                                    $step = 1;
                                                                    continue;
                                                                } 
                                                                $step = 3;
                                                                continue;
                                                            }
                                                            case 1: {
                                                                $task1 = this.Save();
                                                                $step = 2;
                                                                if ($task1.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task1.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 2: {
                                                                $taskResult1 = $task1.getAwaitedResult();
                                                                $step = 3;
                                                                continue;
                                                            }
                                                            case 3: {
                                                                $task2 = this.RequestApprove$1(this.Entity);
                                                                $step = 4;
                                                                if ($task2.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task2.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 4: {
                                                                $taskResult2 = $task2.getAwaitedResult();
                                                                res = $taskResult2;
                                                                this.ProcessEnumMessage(Bridge.box(res, System.Boolean, System.Boolean.toString));
                                                                return;
                                                            }
                                                            default: {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }, arguments);

                                            $asyncBody();
                                        }));
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            RequestApprove$1: function (entity) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    res, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        Core.Extensions.BridgeExt.SetPropValue(entity, Core.Components.Forms.EditForm.StatusIdField, Bridge.box(Core.Enums.ApprovalStatusEnum.Approving, System.Int32));
                                        $task1 = this.Client.PostAsync(System.Boolean, entity, "RequestApprove");
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        res = $taskResult1;
                                        $tcs.setResult(res);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ProcessEnumMessage: function (res, showMessage) {
                var $t;
                if (showMessage === void 0) { showMessage = true; }
                if (res == null) {
                    return;
                }
                if (showMessage) {
                    Core.Extensions.Toast.Success(Core.Extensions.ReflectionExt.GetEnumDescription(Bridge.box(Core.Enums.ResponseApproveEnum.Success, Core.Enums.ResponseApproveEnum, System.Enum.toStringFn(Core.Enums.ResponseApproveEnum))));
                }
                if (!(Bridge.is(res, System.Boolean))) {
                    Core.Extensions.ReflectionExt.CopyPropFrom$1(this.Entity, res);
                }
                ($t = this.ParentForm) != null ? $t.UpdateView$1(true) : null;
                this.Dispose();
            },
            Approve: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    isValid, 
                    confirm, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.IsFormValid();
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        isValid = $taskResult1;
                                        if (!isValid) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        confirm = ($t = new Core.Components.Forms.ConfirmDialog(), $t.Content = "B\u1ea1n c\u00f3 ch\u1eafc ch\u1eafn mu\u1ed1n duy\u1ec7t?", $t);
                                        confirm.Render();
                                        confirm.YesConfirmed = Bridge.fn.combine(confirm.YesConfirmed, Bridge.fn.bind(this, function () {
                                            var $step = 0,
                                                $task1, 
                                                $jumpFromFinally, 
                                                $asyncBody = Bridge.fn.bind(this, function () {
                                                    for (;;) {
                                                        $step = System.Array.min([0,1], $step);
                                                        switch ($step) {
                                                            case 0: {
                                                                $task1 = this.ApproveConfirmed();
                                                                $step = 1;
                                                                if ($task1.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task1.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 1: {
                                                                $task1.getAwaitedResult();
                                                                return;
                                                            }
                                                            default: {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }, arguments);

                                            $asyncBody();
                                        }));
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ApproveConfirmed: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    res, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        Core.Extensions.ReflectionExt.ClearReferences(this.Entity);
                                        $task1 = this.Client.CreateAsync(System.Boolean, this.Entity, "Approve");
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        res = $taskResult1;
                                        this.ProcessEnumMessage(Bridge.box(res, System.Boolean, System.Boolean.toString));
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            Reject: function () {
                var $t;
                var confirm = ($t = new Core.Components.Forms.ConfirmDialog(), $t.NeedAnswer = true, $t.Content = (System.String.format("B\u1ea1n c\u00f3 ch\u1eafc ch\u1eafn mu\u1ed1n tr\u1ea3 v\u1ec1?<br />", null) || "") + "H\u00e3y nh\u1eadp l\u00fd do tr\u1ea3 v\u1ec1", $t);
                confirm.Render();
                confirm.YesConfirmed = Bridge.fn.combine(confirm.YesConfirmed, Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        res, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        Core.Extensions.ReflectionExt.ClearReferences(this.Entity);
                                        $task1 = this.Client.CreateAsync(System.Object, this.Entity, "Reject?reasonOfChange=" + (confirm.Textbox.Text || ""));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        res = $taskResult1;
                                        this.ProcessEnumMessage(res);
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }));
            },
            ToggleApprovalBtn: function () {
                if (this.Entity == null) {
                    return;
                }
                var statusId = Bridge.unbox(this.Entity[Core.Components.Forms.EditForm.StatusIdField]);
                Core.Components.Extensions.ComponentExt.SetShow(this, false, [Core.Components.Forms.EditForm.BtnSend, Core.Components.Forms.EditForm.BtnApprove, Core.Components.Forms.EditForm.BtnReject, Core.Components.Forms.EditForm.BtnExpired]);
                if (statusId === Core.Enums.ApprovalStatusEnum.Approved) {
                    this.LockUpdateButCancel();
                    Core.Components.Extensions.ComponentExt.SetShow(this, false, [Core.Components.Forms.EditForm.BtnSave, Core.Components.Forms.EditForm.BtnSend, Core.Components.Forms.EditForm.BtnApprove, Core.Components.Forms.EditForm.BtnReject]);
                    var expiredDate = Bridge.unbox(this.Entity[Core.Components.Forms.EditForm.ExpiredDate]);
                    if (Bridge.equals(expiredDate, null)) {
                        Core.Components.Extensions.ComponentExt.SetShow(this, true, [Core.Components.Forms.EditForm.BtnExpired]);
                        Core.Components.Extensions.ComponentExt.SetDisabled$1(this, false, [Core.Components.Forms.EditForm.BtnExpired]);
                    }
                } else if (statusId === Core.Enums.ApprovalStatusEnum.Approving) {
                    Core.Components.Extensions.ComponentExt.SetShow(this, true, [Core.Components.Forms.EditForm.BtnApprove, Core.Components.Forms.EditForm.BtnReject]);
                    Core.Components.Extensions.ComponentExt.SetShow(this, false, [Core.Components.Forms.EditForm.BtnSend]);
                } else {
                    Core.Components.Extensions.ComponentExt.SetShow(this, true, [Core.Components.Forms.EditForm.BtnSend]);
                }
            },
            CreateFeaturePolicyHeader: function (arg) {
                this.CreateFeaturePolicy(arg, arg.FeatureId);
            },
            CreateFeaturePolicySection: function (arg) {
                this.CreateFeaturePolicy(arg, arg.FeatureId);
            },
            CreateFeaturePolicyComponent: function (arg) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    section, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = new Core.Clients.Client.$ctor1("ComponentGroup", Bridge.Reflection.getTypeNamespace(Core.Models.User)).GetAsync(Core.Models.ComponentGroup, arg.ComponentGroupId);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        section = $taskResult1;
                                        this.CreateFeaturePolicy(arg, section.FeatureId);
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CreateFeaturePolicy: function (arg, featureId) {
                var $t, $t1, $t2;
                if (featureId === void 0) { featureId = null; }
                var isSecurityVM = Bridge.is(arg, Core.ViewModels.SecurityVM);
                var security;
                var originalModel = ((security = Bridge.as(arg, Core.ViewModels.SecurityVM))) != null ? security : null;
                var entityId = Bridge.is(arg, Core.Models.Component) ? Core.Enums.EntityEnum.Component : Bridge.is(arg, Core.Models.ComponentGroup) ? Core.Enums.EntityEnum.ComponentGroup : Core.Enums.EntityEnum.GridPolicy;
                var detail = ($t = new Core.Components.SecurityEditorBL(), $t.Entity = originalModel || ($t1 = new Core.ViewModels.SecurityVM(), $t1.FeatureId = featureId, $t1.EntityId = entityId, $t1.RecordIds = System.Array.init([($t2 = Bridge.unbox(arg[Core.Components.BaseComponent.IdField]), $t2 != null ? $t2 : 0)], System.Int32), $t1), $t);
                detail.DOMContentLoaded = Bridge.fn.combine(detail.DOMContentLoaded, Bridge.fn.bind(this, function () {
                    Core.Components.Extensions.ComponentExt.SetShow(this, false, ["RecordId"]);
                }));
                detail.AfterSaved = Bridge.fn.combine(detail.AfterSaved, Bridge.fn.bind(this, function (success) {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (isSecurityVM) {
                                            return;
                                        }
                                        Core.Extensions.BridgeExt.SetPropValue(arg, "IsPrivate", Bridge.box(true, System.Boolean, System.Boolean.toString));
                                        this.UpdateView(false, void 0, ["IsPrivate"]);
                                        $task1 = this.Save(Bridge.box(false, System.Boolean, System.Boolean.toString));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }));
                Core.Components.Forms.TabEditor.ActiveTab.AddChild(detail);
            },
            SignIn: function () {
                !Bridge.staticEquals(Core.Clients.Client.UnAuthorizedEventHandler, null) ? Core.Clients.Client.UnAuthorizedEventHandler(null) : null;
            },
            SignOut: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    e, 
                    client, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2], $step);
                                switch ($step) {
                                    case 0: {
                                        e = Bridge.as(window.event, Event);
                                        e.preventDefault();
                                        client = new Core.Clients.Client.$ctor1("User");
                                        $task1 = client.CreateAsync(System.Boolean, Core.Clients.Client.Token, "SignOut");
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        Core.Extensions.Toast.Success("B\u1ea1n \u0111\u00e3 \u0111\u0103ng xu\u1ea5t!", 3000);
                                        !Bridge.staticEquals(Core.Clients.Client.SignOutEventHandler, null) ? Core.Clients.Client.SignOutEventHandler() : null;
                                        Core.Clients.Client.Token = null;
                                        Core.Components.Forms.EditForm.NotificationClient != null ? Core.Components.Forms.EditForm.NotificationClient.Close() : null;
                                        $task2 = System.Threading.Tasks.Task.delay(1000);
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $task2.getAwaitedResult();
                                        ($t = Core.Components.Forms.EditForm.LayoutForm) != null ? $t.UpdateView() : null;
                                        window.location.reload();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("Core.Components.BarCode", {
        inherits: [Core.Components.EditableComponent],
        props: {
            Value: null
        },
        ctors: {
            ctor: function (ui, ele) {
                this.$initialize();
                Core.Components.EditableComponent.ctor.call(this, ui);
                this.ParentElement = ele;
                this.GuiInfo = ui || (function () {
                    throw new System.ArgumentNullException.$ctor1("ui");
                })();
            }
        },
        methods: {
            Render: function () {
                var $t;
                Core.MVVM.Html.Take(this.ParentElement).Clear().Div.Style$1(System.String.format("width:{0}px;margin:auto", [this.GuiInfo.Width])).Id("barcode" + this.GuiInfo.Id);
                this.Element = Core.MVVM.Html.Context;
                this.Value = ($t = Core.Extensions.Utils.GetComplexPropValue(this.Entity, this.GuiInfo.FieldName)) != null ? Bridge.toString($t) : null;
                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = Core.Clients.Client.LoadScript("/js/qrcode.min.js");
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            new QRCode("barcode"+this.GuiInfo.Id, {
                                                text: value,
                                                width: this.GuiInfo.Width,
                                                height: this.GuiInfo.Width,
                                                colorDark : "#000000",
                                                colorLight : "#ffffff",
                                            });
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            UpdateView: function (force, dirty, componentNames) {
                var $t;
                if (force === void 0) { force = false; }
                if (dirty === void 0) { dirty = null; }
                if (componentNames === void 0) { componentNames = []; }
                var value = ($t = Core.Extensions.Utils.GetComplexPropValue(this.Entity, this.GuiInfo.FieldName)) != null ? Bridge.toString($t) : null;
                if (Bridge.referenceEquals(value, this.Value)) {
                    return;
                }
                this.Render();
            }
        }
    });

    Bridge.define("Core.Components.Button", {
        inherits: [Core.Components.EditableComponent],
        fields: {
            _textEle: null
        },
        props: {
            ButtonEle: null,
            Label: {
                get: function () {
                    return this._textEle != null ? this._textEle.textContent : null;
                },
                set: function (value) {
                    if (this.Element == null) {
                        throw new System.InvalidOperationException.$ctor1("Element is null");
                    }

                    this._textEle.textContent = value;
                }
            }
        },
        ctors: {
            ctor: function (ui, ele) {
                if (ele === void 0) { ele = null; }

                this.$initialize();
                Core.Components.EditableComponent.ctor.call(this, ui);
                this.GuiInfo = ui || (function () {
                    throw new System.ArgumentNullException.$ctor1("ui");
                })();
                this.ButtonEle = ele;
            }
        },
        methods: {
            Render: function () {
                var $t, $t1, $t2;
                var html = Core.MVVM.Html.Instance;
                if (this.ButtonEle == null) {
                    Core.MVVM.Html.Take(this.ParentElement).Button.Render();
                    this.Element = ($t = Core.MVVM.Html.Context, this.ButtonEle = $t, $t);
                } else {
                    this.Element = this.ButtonEle;
                }
                Core.Components.Renderer.ClassName(Core.MVVM.Html.Take(this.Element), this.GuiInfo.ClassName).AsyncEvent("click", Bridge.fn.cacheBind(this, this.DispatchClickAsync)).Style$1(this.GuiInfo.Style);
                if (!System.String.isNullOrEmpty(this.GuiInfo.Icon)) {
                    Core.Components.Renderer.Icon(html, this.GuiInfo.Icon).End.Text(" ").Render();
                }
                Core.Components.Renderer.IText(Core.Components.Renderer.ClassName(html.Span, "caption"), ($t1 = this.GuiInfo.Label, $t1 != null ? $t1 : ""));
                this._textEle = Bridge.as(Core.MVVM.Html.Context, HTMLSpanElement);
                !Bridge.staticEquals(($t2 = this.DOMContentLoaded), null) ? $t2() : null;
            },
            DispatchClickAsync: function () {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $async_e1, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4], $step);
                                switch ($step) {
                                    case 0: {
                                        if (this.Disabled || Core.Extensions.HtmlElementExtension.Hidden(this.Element)) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        this.Disabled = true;
                                        $step = 1;
                                        continue;
                                    }
                                    case 1: {
                                        Core.Components.Spinner.AppendTo(this.Element);
                                        $task1 = Core.Components.Extensions.ComponentExt.DispatchEventToHandlerAsync(this, this.GuiInfo.Events, "click", [this.Entity, this]);
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $task1.getAwaitedResult();
                                        $step = 3;
                                        continue;
                                    }
                                    case 3: {
                                        Core.Components.Spinner.Hide();
                                        this.Disabled = false;

                                        if ($jumpFromFinally > -1) {
                                            $step = $jumpFromFinally;
                                            $jumpFromFinally = null;
                                        } else if ($async_e) {
                                            $tcs.setException($async_e);
                                            return;
                                        } else if (Bridge.isDefined($returnValue)) {
                                            $tcs.setResult($returnValue);
                                            return;
                                        }
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            if ($step >= 1 && $step <= 2) {
                                $step = 3;
                                $asyncBody();
                                return;
                            }
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            GetValueText: function () {
                var $t;
                if (this.Entity == null || this.GuiInfo == null) {
                    return this._textEle.textContent;
                }
                return ($t = this.Entity[this.GuiInfo.FieldName]) != null ? Bridge.toString($t) : null;
            },
            BuildTextHistory: function (builder, visited) {
                if (builder === void 0) { builder = null; }
                if (visited === void 0) { visited = null; }
                return builder;
            }
        }
    });

    Bridge.define("Core.Components.CellText", {
        inherits: [Core.Components.EditableComponent],
        statics: {
            methods: {
                CalcTextAlign: function (header, cellData) {
                    var textAlign = header.TextAlignEnum;
                    if (textAlign != null) {
                        return System.Nullable.getValue(textAlign);
                    }

                    if (header.ReferenceId != null || cellData == null || Bridge.is(cellData, System.String)) {
                        return Core.Enums.TextAlign.left;
                    }

                    if (Core.Extensions.ReflectionExt.IsNumber(Bridge.getType(cellData))) {
                        return Core.Enums.TextAlign.right;
                    }

                    if (Bridge.is(cellData, System.Boolean) || Bridge.is(cellData, System.Boolean)) {
                        return Core.Enums.TextAlign.center;
                    }

                    return Core.Enums.TextAlign.center;
                }
            }
        },
        props: {
            RefData: null
        },
        ctors: {
            ctor: function (ui, ele) {
                if (ele === void 0) { ele = null; }

                this.$initialize();
                Core.Components.EditableComponent.ctor.call(this, ui);
                this.GuiInfo = ui;
                this.Element = ele;
            }
        },
        methods: {
            Render: function () {
                this.SetDefaultVal();
                var cellData = Core.Extensions.Utils.GetComplexPropValue(this.Entity, this.GuiInfo.FieldName);
                var isBool = cellData != null && Core.Extensions.ReflectionExt.IsBool(Bridge.getType(cellData));
                var cellText = "";
                if (this.Element == null) {
                    this.RenderNewEle(cellText, cellData, isBool);
                }
                if (Core.Extensions.StringExt.HasAnyChar(this.GuiInfo.Query)) {
                    System.Threading.Tasks.Task.run(Bridge.fn.cacheBind(this, this.RenderCellTextAsync));
                    return;
                } else {
                    cellText = this.CalcCellText(cellData);
                    this.UpdateEle(cellText, cellData, isBool);
                }

            },
            UpdateEle: function (cellText, cellData, isBool) {
                if (isBool) {
                    if (this.GuiInfo.SimpleText) {
                        this.Element.innerHTML = System.Nullable.eq(Bridge.cast(Bridge.unbox(cellData, System.Boolean), System.Boolean, true), true) ? "\u2611" : "\u2610";
                    } else {
                        this.Element.previousElementSibling.checked = System.Nullable.getValue(Bridge.cast(Bridge.unbox(cellData, System.Boolean), System.Boolean));
                    }
                    return;
                }
                this.Element.innerHTML = cellText;
            },
            RenderNewEle: function (cellText, cellData, isBool) {
                Core.Components.Renderer.TextAlign(Core.MVVM.Html.Take(this.ParentElement), Core.Components.CellText.CalcTextAlign(this.GuiInfo, cellData));
                if (isBool) {
                    if (this.GuiInfo.SimpleText) {
                        Core.MVVM.Html.Instance.Text(System.Nullable.eq(Bridge.cast(Bridge.unbox(cellData, System.Boolean), System.Boolean, true), true) ? "\u2611" : "\u2610");
                        Core.MVVM.Html.Context.style.fontSize = "1.2rem";
                    } else {
                        Core.Components.Renderer.SmallCheckbox(Core.Components.Renderer.Padding(Core.MVVM.Html.Instance, Core.Components.Direction.bottom, 0), System.Nullable.getValue(Bridge.cast(Bridge.unbox(Core.Extensions.Utils.GetComplexPropValue(this.Entity, this.GuiInfo.FieldName), System.Boolean), System.Boolean)));
                        Core.MVVM.Html.Context.previousElementSibling.disabled = true;
                    }

                } else {
                    var containDiv = Bridge.referenceEquals(cellText.substr(0, 4), "<div>");
                    if (containDiv) {
                        Core.MVVM.Html.Instance.Div.Render();
                    } else {
                        Core.MVVM.Html.Instance.Span.Render();
                    }

                    Core.Components.Renderer.ClassName(Core.MVVM.Html.Instance.AsyncEvent$1("click", Bridge.fn.cacheBind(this, this.LabelClickHandler)), "cell-text").InnerHTML(cellText);
                }
                this.Element = Core.MVVM.Html.Context;
                if (!Core.Extensions.StringExt.IsNullOrWhiteSpace(this.GuiInfo.MaxWidth)) {
                    this.Element.setAttribute("title", cellText);
                }

                Core.MVVM.Html.Instance.End.Render();
            },
            CalcCellText: function (cellData) {
                var cellText = null;
                if (this.GuiInfo.IsPivot) {
                    var fields = this.GuiInfo.FieldName.split(".");
                    if (fields.length < 3) {
                        return cellText;
                    }
                    var listData;
                    if (!(((listData = Bridge.as(Core.Extensions.Utils.GetComplexPropValue(this.Entity, fields[System.Array.index(0, fields)]), System.Collections.Generic.IEnumerable$1(System.Object)))) != null)) {
                        return cellText;
                    }

                    var restPivotField = Bridge.toArray(System.Linq.Enumerable.from(fields, System.String).skip(1).take(((fields.length - 2) | 0))).join(".");
                    var row = System.Linq.Enumerable.from(listData, System.Object).firstOrDefault(function (x) {
                            var $t;
                            return Bridge.referenceEquals((($t = Core.Extensions.Utils.GetComplexPropValue(x, restPivotField)) != null ? Bridge.toString($t) : null), Bridge.toString(System.Linq.Enumerable.from(fields, System.String).last()));
                        }, null);
                    cellText = row == null ? "" : Core.Extensions.Utils.FormatEntity$1(this.GuiInfo.FormatEntity, row);
                } else {
                    cellText = Core.Extensions.Utils.GetCellText(this.GuiInfo, cellData, this.Entity, this.RefData, false, this.EmptyRow);
                }
                if (cellText == null || Bridge.referenceEquals(cellText, "null")) {
                    cellText = "N/A";
                }
                return cellText;
            },
            RenderCellTextAsync: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    fn, 
                    isFn, 
                    datasource, 
                    data, 
                    formatter, 
                    isFormatFn, 
                    text, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (Core.Extensions.StringExt.IsNullOrEmpty(this.GuiInfo.Query)) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        fn = { };
                                        isFn = Core.Extensions.Utils.IsFunction(this.GuiInfo.Query, fn);
                                        datasource = isFn ? Bridge.toString(fn.v.call(this, Bridge.unbox(this.Entity), this)) : Core.Extensions.Utils.FormatEntity$1(this.GuiInfo.Query, this.Entity);
                                        $task1 = new Core.Clients.Client.$ctor1("User", Bridge.Reflection.getTypeNamespace(Core.Models.User)).PostAsync(System.Array.type(System.Object), datasource, "ReportQuery");
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        data = $taskResult1;
                                        if (Core.Extensions.IEnumerableExtensions.Nothing(System.Object, data)) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        formatter = { };
                                        isFormatFn = Core.Extensions.Utils.IsFunction(this.GuiInfo.FormatEntity, formatter);
                                        text = isFormatFn ? Bridge.toString(formatter.v.apply.apply(formatter.v, [this].concat([Bridge.unbox(System.Array.init([data], System.Object))]))) : Core.Extensions.Utils.FormatEntity$1(this.GuiInfo.FormatEntity, data[System.Array.index(0, data)]);

                                        this.UpdateEle(text, null, false);
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            LabelClickHandler: function (e) {
                return Core.Components.Extensions.ComponentExt.DispatchEventToHandlerAsync(this, this.GuiInfo.Events, "click", [this.Entity]);
            },
            UpdateView: function (force, dirty, componentNames) {
                if (force === void 0) { force = false; }
                if (dirty === void 0) { dirty = null; }
                if (componentNames === void 0) { componentNames = []; }
                this.UpdateViewInternal(force, dirty);
                this.Render();
            }
        }
    });

    Bridge.define("Core.Components.Chart", {
        inherits: [Core.Components.EditableComponent],
        props: {
            Data: null
        },
        ctors: {
            ctor: function (ui, ele) {
                if (ele === void 0) { ele = null; }

                this.$initialize();
                Core.Components.EditableComponent.ctor.call(this, ui);
                this.GuiInfo = ui || (function () {
                    throw new System.ArgumentNullException.$ctor1("ui");
                })();
                this.ParentElement = ele;
            }
        },
        methods: {
            Render: function () {
                Core.Components.Renderer.ClassName(Core.MVVM.Html.Take(this.ParentElement).Div, "chart-wrapper");
                this.Element = Core.MVVM.Html.Context;
                System.Threading.Tasks.Task.run(Bridge.fn.cacheBind(this, this.RenderAsync));
            },
            RenderAsync: function () {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.RenderChart();
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        !Bridge.staticEquals(($t = this.DOMContentLoaded), null) ? $t() : null;
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            RenderChart: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    fn, 
                    isFn, 
                    datasource, 
                    type, 
                    $t, 
                    text, 
                    options, 
                    $function, 
                    isFotmatDataFn, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3], $step);
                                switch ($step) {
                                    case 0: {
                                        fn = { };
                                        isFn = Core.Extensions.Utils.IsFunction(this.GuiInfo.Query, fn);
                                        datasource = isFn ? Bridge.toString(fn.v.call(this, Bridge.unbox(this.Entity), this)) : Core.Extensions.Utils.FormatEntity$1(this.GuiInfo.Query, this.Entity);
                                        if (this.Data == null) {
                                            $step = 1;
                                            continue;
                                        } 
                                        $step = 3;
                                        continue;
                                    }
                                    case 1: {
                                        $task1 = new Core.Clients.Client.$ctor1("User").PostAsync(System.Array.type(System.Object), datasource, "ReportQuery");
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        this.Data = $taskResult1;
                                        $step = 3;
                                        continue;
                                    }
                                    case 3: {
                                        type = ($t = this.GuiInfo.ClassName, $t != null ? $t : "pie");
                                        text = Core.Components.LangSelect.Get(this.GuiInfo.PlainText);
                                        options = null;
                                        if (Core.Extensions.StringExt.IsNullOrEmpty(this.GuiInfo.FormatData)) {
                                            options = {
                                                theme: "light2",
                                                animationEnabled: true,
                                                showInLegend: "true",
                                            		            legendText: "{name}",
                                                title: {
                                                    text: text,
                                                    fontFamily: "roboto",
                                                    fontSize: 15
                                                },
                                                data: [{
                                                    type: type,
                                                    toolTipContent: "{label} {y}",
                                                    dataPoints: this.Data
                                                }],
                                                legend: {
                                                    cursor:"pointer",
                                                    fontSize: 9,
                                                    fontFamily: "roboto",
                                                }
                                            };
                                        } else {
                                            options = Newtonsoft.Json.JsonConvert.DeserializeObject(this.GuiInfo.FormatData, System.Object);
                                        }
                                        $function = { };
                                        isFotmatDataFn = Core.Extensions.Utils.IsFunction(this.GuiInfo.FormatEntity, $function);
                                        if (!isFotmatDataFn && !Core.Extensions.StringExt.IsNullOrEmpty(this.GuiInfo.GroupBy)) {
                                            options.data = System.Linq.Enumerable.from(this.Data, System.Object).select(function (data) {
                                                var $t1;
                                                data.type = ($t1 = data.type, $t1 != null ? $t1 : type);
                                                return data;
                                            }).groupBy(function (x) {
                                                var $t1, $t2;
                                                return new $asm.$AnonymousType$2(Bridge.toString(x.type), ($t1 = x.name) != null ? Bridge.toString($t1) : null, ($t2 = x.axisYType) != null ? Bridge.toString($t2) : null);
                                            }).select(function (x) {
                                                return new $asm.$AnonymousType$3(x.key().type, x.firstOrDefault(null, null).toolTipContent, x.key().axisYType, x.ToArray(System.Object));
                                            }).ToArray(System.Object);
                                        } else if (isFotmatDataFn) {
                                            options.data = $function.v.call.apply($function.v, [this].concat(Bridge.unbox(this.Data)));
                                        } else {
                                            options.data = System.Array.init([new $asm.$AnonymousType$4(type, "{label} {y}", this.Data)], System.Object);
                                        }
                                        var chart = new CanvasJS.Chart(this.Element, options);
                                        chart.render();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            UpdateView: function (force, dirty, componentNames) {
                if (force === void 0) { force = false; }
                if (dirty === void 0) { dirty = null; }
                if (componentNames === void 0) { componentNames = []; }
                if (force) {
                    this.Data = null;
                }
                this.Element.innerHTML = null;
                System.Threading.Tasks.Task.run(Bridge.fn.cacheBind(this, this.RenderChart));
            }
        }
    });

    Bridge.define("$AnonymousType$2", $asm, {
    $kind: "anonymous",
    ctors: {
        ctor: function (type, name, axisYType) {
            this.type = type;
            this.name = name;
            this.axisYType = axisYType;
        }
    },
    methods: {
        equals: function (o) {
            if (!Bridge.is(o, $asm.$AnonymousType$2)) {
                return false;
            }
            return Bridge.equals(this.type, o.type) && Bridge.equals(this.name, o.name) && Bridge.equals(this.axisYType, o.axisYType);
        },
        getHashCode: function () {
            var h = Bridge.addHash([7550196187, this.type, this.name, this.axisYType]);
            return h;
        },
        toJSON: function () {
            return {
                type : this.type,
                name : this.name,
                axisYType : this.axisYType
            };
        }
    },
    statics : {
        methods: {
            $metadata : function () { return {"m":[{"a":2,"n":"axisYType","t":16,"rt":System.String,"g":{"a":2,"n":"get_axisYType","t":8,"rt":System.String,"fg":"axisYType"},"fn":"axisYType"},{"a":2,"n":"name","t":16,"rt":System.String,"g":{"a":2,"n":"get_name","t":8,"rt":System.String,"fg":"name"},"fn":"name"},{"a":2,"n":"type","t":16,"rt":System.String,"g":{"a":2,"n":"get_type","t":8,"rt":System.String,"fg":"type"},"fn":"type"}]}; }
        }
    }
});

    Bridge.define("$AnonymousType$3", $asm, {
    $kind: "anonymous",
    ctors: {
        ctor: function (type, toolTipContent, axisYType, dataPoints) {
            this.type = type;
            this.toolTipContent = toolTipContent;
            this.axisYType = axisYType;
            this.dataPoints = dataPoints;
        }
    },
    methods: {
        equals: function (o) {
            if (!Bridge.is(o, $asm.$AnonymousType$3)) {
                return false;
            }
            return Bridge.equals(this.type, o.type) && Bridge.equals(this.toolTipContent, o.toolTipContent) && Bridge.equals(this.axisYType, o.axisYType) && Bridge.equals(this.dataPoints, o.dataPoints);
        },
        getHashCode: function () {
            var h = Bridge.addHash([7550196188, this.type, this.toolTipContent, this.axisYType, this.dataPoints]);
            return h;
        },
        toJSON: function () {
            return {
                type : this.type,
                toolTipContent : this.toolTipContent,
                axisYType : this.axisYType,
                dataPoints : this.dataPoints
            };
        }
    },
    statics : {
        methods: {
            $metadata : function () { return {"m":[{"a":2,"n":"axisYType","t":16,"rt":System.String,"g":{"a":2,"n":"get_axisYType","t":8,"rt":System.String,"fg":"axisYType"},"fn":"axisYType"},{"a":2,"n":"dataPoints","t":16,"rt":System.Array.type(System.Object),"g":{"a":2,"n":"get_dataPoints","t":8,"rt":System.Array.type(System.Object),"fg":"dataPoints"},"fn":"dataPoints"},{"a":2,"n":"toolTipContent","t":16,"rt":System.Object,"g":{"a":2,"n":"get_toolTipContent","t":8,"rt":System.Object,"fg":"toolTipContent"},"fn":"toolTipContent"},{"a":2,"n":"type","t":16,"rt":System.String,"g":{"a":2,"n":"get_type","t":8,"rt":System.String,"fg":"type"},"fn":"type"}]}; }
        }
    }
});

    Bridge.define("$AnonymousType$4", $asm, {
    $kind: "anonymous",
    ctors: {
        ctor: function (type, toolTipContent, dataPoints) {
            this.type = type;
            this.toolTipContent = toolTipContent;
            this.dataPoints = dataPoints;
        }
    },
    methods: {
        equals: function (o) {
            if (!Bridge.is(o, $asm.$AnonymousType$4)) {
                return false;
            }
            return Bridge.equals(this.type, o.type) && Bridge.equals(this.toolTipContent, o.toolTipContent) && Bridge.equals(this.dataPoints, o.dataPoints);
        },
        getHashCode: function () {
            var h = Bridge.addHash([7550196189, this.type, this.toolTipContent, this.dataPoints]);
            return h;
        },
        toJSON: function () {
            return {
                type : this.type,
                toolTipContent : this.toolTipContent,
                dataPoints : this.dataPoints
            };
        }
    },
    statics : {
        methods: {
            $metadata : function () { return {"m":[{"a":2,"n":"dataPoints","t":16,"rt":System.Array.type(System.Object),"g":{"a":2,"n":"get_dataPoints","t":8,"rt":System.Array.type(System.Object),"fg":"dataPoints"},"fn":"dataPoints"},{"a":2,"n":"toolTipContent","t":16,"rt":System.String,"g":{"a":2,"n":"get_toolTipContent","t":8,"rt":System.String,"fg":"toolTipContent"},"fn":"toolTipContent"},{"a":2,"n":"type","t":16,"rt":System.String,"g":{"a":2,"n":"get_type","t":8,"rt":System.String,"fg":"type"},"fn":"type"}]}; }
        }
    }
});

    Bridge.define("Core.Components.Checkbox", {
        inherits: [Core.Components.EditableComponent],
        fields: {
            _value: null,
            _input: null
        },
        props: {
            Value: {
                get: function () {
                    return this._value;
                },
                set: function (value) {
                    var $t;
                    this._value = value;
                    this._input.checked = ($t = value, $t != null ? $t : false);
                }
            }
        },
        ctors: {
            ctor: function (ui, ele) {
                if (ele === void 0) { ele = null; }

                this.$initialize();
                Core.Components.EditableComponent.ctor.call(this, ui);
                this.GuiInfo = ui || (function () {
                    throw new System.ArgumentNullException.$ctor1("ui");
                })();
                this.ParentElement = ele;
            }
        },
        methods: {
            Render: function () {
                var $t, $t1;
                Core.Components.Renderer.SmallCheckbox(Core.MVVM.Html.Take(this.ParentElement), ($t = this._value, $t != null ? $t : false));
                this._input = Bridge.as(Core.MVVM.Html.Context.previousElementSibling, HTMLInputElement);
                this.Element = this._input.parentElement;
                Core.MVVM.Html.Take(this._input).AsyncEvent$1("input", Bridge.fn.cacheBind(this, this.UserChange));
                this.SetDefaultVal();
                this.Value = Bridge.cast(Bridge.unbox(Core.Extensions.Utils.GetComplexPropValue(this.Entity, this.GuiInfo.FieldName), System.Boolean), System.Boolean, true);
                Core.Extensions.BridgeExt.SetComplexPropValue(this.Entity, this.GuiInfo.FieldName, Bridge.box(this._value, System.Boolean, System.Nullable.toStringFn(System.Boolean.toString), System.Nullable.getHashCode));
                !Bridge.staticEquals(($t1 = this.DOMContentLoaded), null) ? $t1() : null;
            },
            GetValueText: function () {
                return this._value == null ? "N/A" : (System.Nullable.eq(this._value, true) ? "Check" : "Kh\u00f4ng check");
            },
            UserChange: function (e) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    check, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (this.Disabled) {
                                            e.preventDefault();
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        check = this._input.checked;
                                        $task1 = this.DataChanged(check);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            DataChanged: function (check) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    oldVal, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        oldVal = this._value;
                                        this._value = check;
                                        if (this.Entity != null) {
                                            Core.Extensions.BridgeExt.SetComplexPropValue(this.Entity, this.GuiInfo.FieldName, Bridge.box(check, System.Boolean, System.Boolean.toString));
                                        }
                                        this.Dirty = true;
                                        if (!Bridge.staticEquals(this.UserInput, null)) {
                                            this.UserInput(($t = new Core.MVVM.ObservableArgs(), $t.NewData = Bridge.box(this._value, System.Boolean, System.Nullable.toStringFn(System.Boolean.toString), System.Nullable.getHashCode), $t.OldData = Bridge.box(oldVal, System.Boolean, System.Nullable.toStringFn(System.Boolean.toString), System.Nullable.getHashCode), $t));
                                        }
                                        this.PopulateFields();
                                        this.CascadeField();
                                        $task1 = Core.Components.Extensions.ComponentExt.DispatchEventToHandlerAsync(this, this.GuiInfo.Events, "change", [this.Entity]);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            UpdateView: function (force, dirty, componentNames) {
                var $t;
                if (force === void 0) { force = false; }
                if (dirty === void 0) { dirty = null; }
                if (componentNames === void 0) { componentNames = []; }
                var val = Bridge.cast(Bridge.unbox((($t = this.Entity) != null ? Core.Extensions.Utils.GetComplexPropValue($t, this.GuiInfo.FieldName) : null), System.Boolean), System.Boolean, true);
                this.Value = val;
            },
            SetDisableUI: function (value) {
                if (value) {
                    this.Element.setAttribute("disabled", "disabled");
                } else {
                    this.Element.removeAttribute("disabled");
                }
                this._input.disabled = value;
            }
        }
    });

    Bridge.define("Core.Components.ListView", {
        inherits: [Core.Components.EditableComponent],
        statics: {
            fields: {
                PermissionLoaded: null,
                InsertedBy: null,
                IsOwner: null,
                OwnerId: null,
                _copiedRows: null,
                _originRows: null,
                NotCellText: null
            },
            ctors: {
                init: function () {
                    this.PermissionLoaded = "PermissionLoaded";
                    this.InsertedBy = "InsertedBy";
                    this.IsOwner = "IsOwner";
                    this.OwnerId = "OwnerId";
                    this.NotCellText = function (_o1) {
                            _o1.add("Button");
                            _o1.add("Image");
                            _o1.add("Checkbox");
                            return _o1;
                        }(new (System.Collections.Generic.List$1(System.String)).ctor());
                }
            },
            methods: {
                GetFormattedDataSource: function (com, dataSourceFilter) {
                    var fn = { };
                    if (Core.Extensions.Utils.IsFunction(dataSourceFilter, fn)) {
                        return Bridge.toString(fn.v.call(com, com));
                    }
                    var editForm = Core.Components.Extensions.ComponentExt.FindClosest(Core.Components.Forms.EditForm, com);
                    if (editForm == null) {
                        return Core.Extensions.Utils.FormatEntity$1(dataSourceFilter, com.Entity);
                    }

                    var pre = Core.Extensions.Utils.FormatEntity$1(dataSourceFilter, editForm.Entity);
                    var checkContain = System.String.contains(pre,"EditForm.") || System.String.contains(pre,"TabEditor.") || System.String.contains(pre,"Entity.");
                    return Core.Extensions.Utils.FormatEntity(pre, null, checkContain ? com : com.Entity, void 0, function (x) {
                        return "null";
                    });
                },
                GetPathEntity: function (x) {
                    var $t, $t1;
                    var details = System.Linq.Enumerable.from(x.Children, Core.Components.BaseComponent).where(function (child) {
                            var editable;
                            return ((editable = Bridge.as(child, Core.Components.EditableComponent))) != null && editable.Dirty;
                        }).select(function (child) {
                        var $t, $t1;
                        var value = Core.Extensions.Utils.GetComplexPropValue(child.Entity, child.GuiInfo.FieldName);
                        System.Console.WriteLine(System.Boolean.toString(Core.Extensions.ReflectionExt.IsDate(Bridge.getType(value))));
                        return ($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = child.GuiInfo.FieldName, $t.OldVal = (child.OldValue != null && Core.Extensions.ReflectionExt.IsDate(Bridge.getType(value))) ? Core.Extensions.DateTimeExt.DateConverter(Bridge.toString(child.OldValue)) : ($t1 = child.OldValue) != null ? Bridge.toString($t1) : null, $t.Value = (value != null && Core.Extensions.ReflectionExt.IsDate(Bridge.getType(value))) ? Core.Extensions.DateTimeExt.DateConverter(Bridge.toString(value)) : value != null ? Bridge.toString(value) : null, $t);
                    }).toList(Core.ViewModels.PatchUpdateDetail);
                    details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = Core.Extensions.Utils.IdField, $t.Value = ($t1 = x.Entity[Core.Extensions.Utils.IdField]) != null ? Bridge.toString($t1) : null, $t));
                    return ($t = new Core.ViewModels.PatchUpdate(), $t.Changes = details, $t);
                },
                OrderHeaderGroup: function (headers) {
                    var tmp;
                    for (var i = 0; i < ((headers.Count - 1) | 0); i = (i + 1) | 0) {
                        for (var j = (i + 2) | 0; j < headers.Count; j = (j + 1) | 0) {
                            if (Core.Extensions.StringExt.HasAnyChar(headers.getItem(i).GroupName) && Bridge.referenceEquals(headers.getItem(i).GroupName, headers.getItem(j).GroupName) && !Bridge.referenceEquals(headers.getItem(((i + 1) | 0)).GroupName, headers.getItem(j).GroupName)) {
                                tmp = headers.getItem(((i + 1) | 0));
                                headers.setItem(((i + 1) | 0), headers.getItem(j));
                                headers.setItem(j, tmp);
                            }
                        }
                    }
                }
            }
        },
        fields: {
            RowClick: null,
            _isFocusCell: false,
            _noRecord: null,
            BodyContextMenuShow: null,
            _rowDataChangeAwaiter: 0,
            RecordPolicy: null
        },
        events: {
            HeaderLoaded: null
        },
        props: {
            AdvSearchVM: null,
            Editable: false,
            ListViewSearch: null,
            Paginator: null,
            Header: null,
            HeaderComponentMap: null,
            RowData: null,
            FormattedRowData: null,
            FormattedDataSource: {
                get: function () {
                    var $t;
                    return Core.Components.ListView.GetFormattedDataSource(this, ($t = this.DataSourceFilter, $t != null ? $t : this.GuiInfo.DataSourceFilter));
                }
            },
            SelectedIndex: 0,
            HeaderSection: null,
            MainSection: null,
            RefData: null,
            DataSourceFilter: null,
            OnDeleteConfirmed: null,
            AllListViewItem: {
                get: function () {
                    return System.Linq.Enumerable.from(this.MainSection.Children).select(function (x) { return Bridge.cast(x, Core.Components.ListViewItem); });
                }
            },
            UpdatedRows: {
                get: function () {
                    return System.Linq.Enumerable.from(this.AllListViewItem, Core.Components.ListViewItem).where(function (x) {
                            return x.Dirty;
                        }).select(function (x) {
                        return x.Entity;
                    }).distinct().toList(System.Object);
                }
            },
            PatchModel: {
                get: function () {
                    return System.Linq.Enumerable.from(this.AllListViewItem, Core.Components.ListViewItem).where(function (x) {
                            return x.Dirty;
                        }).select(function (x) {
                        return Core.Components.ListView.GetPathEntity(x);
                    }).toList(Core.ViewModels.PatchUpdate);
                }
            },
            IgnoreConfirmHardDelete: false
        },
        ctors: {
            init: function () {
                this.RecordPolicy = new (System.Collections.Generic.List$1(Core.Models.FeaturePolicy)).ctor();
                this.SelectedIndex = -1;
            },
            ctor: function (ui, ele) {
                if (ele === void 0) { ele = null; }
                var $t;

                this.$initialize();
                Core.Components.EditableComponent.ctor.call(this, ui);
                this.GuiInfo = ui || (function () {
                    throw new System.ArgumentNullException.$ctor1("ui");
                })();
                this.Id = Bridge.toString(ui.Id);
                this.Name = ui.FieldName;
                this.Header = new (System.Collections.Generic.List$1(Core.Models.GridPolicy)).ctor();
                this.RowData = new (Core.MVVM.ObservableList$1(System.Object)).ctor();
                this.RefData = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Object))).ctor();
                this.AdvSearchVM = ($t = new Core.Models.AdvSearchVM(), $t.ActiveState = Core.Enums.ActiveStateEnum.Yes, $t);
                this.DataSourceFilter = ui.DataSourceFilter;
                this.StopChildrenHistory = true;
                if (ele != null) {
                    this.Resolve(ui, ele);
                }
            }
        },
        methods: {
            Resolve: function (com, ele) {
                if (ele === void 0) { ele = null; }
                var txtArea = Bridge.as(document.createElement(System.Enum.toString(Core.MVVM.ElementType, Core.MVVM.ElementType.textarea)), HTMLTextAreaElement);
                txtArea.innerHTML = ele.innerHTML;
                com.FormatEntity = txtArea.value;
                ele.innerHTML = null;
            },
            ReloadData: function (dataSource, ignoreRender, cache) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $task3, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $t, 
                    pageSize, 
                    $t1, 
                    $t2, 
                    $t3, 
                    $t4, 
                    skip, 
                    $t5, 
                    $t6, 
                    $t7, 
                    pagingQuery, 
                    hasCacheLoaded, 
                    result, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5], $step);
                                switch ($step) {
                                    case 0: {
                                        if (dataSource === void 0) { dataSource = null; }
                                        if (ignoreRender === void 0) { ignoreRender = false; }
                                        if (cache === void 0) { cache = false; }
                                        if (Core.Extensions.IEnumerableExtensions.HasElement(System.Object, this.GuiInfo.LocalData) && this.GuiInfo.LocalRender) {
                                            this.SetRowData(this.GuiInfo.LocalData, ignoreRender);
                                            $tcs.setResult(null);
                                            return;
                                        }

                                        dataSource = Core.Extensions.StringExt.IsNullOrEmpty(dataSource) ? this.FormattedDataSource : dataSource;
                                        if (Core.Extensions.StringExt.IsNullOrWhiteSpace(dataSource)) {
                                            dataSource = "?$filter=true";
                                        }

                                        if (this.Paginator != null) {
                                            this.Paginator.Options.PageSize = this.Paginator.Options.PageSize === 0 ? (($t = this.GuiInfo.Row, $t != null ? $t : 12)) : this.Paginator.Options.PageSize;
                                        }
                                        pageSize = ($t1 = (($t2 = this.Paginator) != null && ($t3 = $t2.Options) != null ? $t3.PageSize : null), $t1 != null ? $t1 : ($t4 = this.GuiInfo.Row, $t4 != null ? $t4 : 12));
                                        skip = ($t5 = Bridge.Int.mul((($t6 = this.Paginator) != null && ($t7 = $t6.Options) != null ? $t7.PageIndex : null), pageSize), $t5 != null ? $t5 : 0);
                                        if (!System.String.contains(dataSource,"?")) {
                                            dataSource = (dataSource || "") + "?";
                                        }

                                        pagingQuery = (dataSource || "") + (System.String.format("&$skip={0}&$top={1}&$count=true", Bridge.box(skip, System.Int32), Bridge.box(pageSize, System.Int32)) || "");
                                        $task1 = this.LoadCache(dataSource, cache, ignoreRender, pageSize);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        hasCacheLoaded = $taskResult1;
                                        if (hasCacheLoaded) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        $task2 = new Core.Clients.Client.$ctor1(this.GuiInfo.RefName).GetList(System.Object, pageSize > 0 ? pagingQuery : dataSource, true);
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        result = $taskResult2;
                                        this.UpdatePagination(result, result.Value.Count);
                                        this.SetRowData(result.Value, ignoreRender);
                                        if (System.Nullable.gt(result.Odata.Count, 0) && Core.Extensions.IEnumerableExtensions.Nothing(System.Object, result.Value)) {
                                            $step = 3;
                                            continue;
                                        } 
                                        $step = 5;
                                        continue;
                                    }
                                    case 3: {
                                        if (this.Paginator != null) {
                                            this.Paginator.Options.PageIndex = 0;
                                        }
                                        $task3 = this.ReloadData(dataSource);
                                        $step = 4;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $task3.getAwaitedResult();
                                        $step = 5;
                                        continue;
                                    }
                                    case 5: {
                                        Core.Components.Spinner.Hide();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            LoadCache: function (dataSource, cache, ignoreRender, pageSize) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    rows, 
                    $t, 
                    enumerator, 
                    addNew, 
                    $t1, 
                    countQuery, 
                    countResult, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3], $step);
                                switch ($step) {
                                    case 0: {
                                        if (this.Entity == null) {
                                            $tcs.setResult(false);
                                            return;
                                        }

                                        rows = Bridge.as((($t = this.Entity) != null ? Core.Extensions.Utils.GetComplexPropValue($t, this.GuiInfo.FieldName) : null), System.Collections.IEnumerable);
                                        if (rows == null) {
                                            $tcs.setResult(false);
                                            return;
                                        }

                                        enumerator = Bridge.getEnumerator(rows);
                                        if (!enumerator.System$Collections$IEnumerator$moveNext()) {
                                            $tcs.setResult(false);
                                            return;
                                        }

                                        addNew = Bridge.unbox(enumerator.System$Collections$IEnumerator$Current[Core.Components.BaseComponent.IdField]) === 0;
                                        if (cache || addNew) {
                                            $step = 1;
                                            continue;
                                        } 
                                        $step = 3;
                                        continue;
                                    }
                                    case 1: {
                                        this.RowData._data = rows;
                                        if (!ignoreRender) {
                                            this.RowData.NotifyArrayChanged(($t1 = new (Core.MVVM.ObservableListArgs$1(System.Object))(), $t1.Action = Core.MVVM.ObservableAction.Render, $t1.ListData = this.RowData._data, $t1));
                                        }

                                        countQuery = (dataSource || "") + (System.String.format("&$skip={0}&$top={1}&$count=true", Bridge.box(0, System.Int32), Bridge.box(0, System.Int32)) || "");
                                        Core.Components.Spinner.AppendTo(this.Element);
                                        $task1 = new Core.Clients.Client.$ctor1(this.GuiInfo.RefName).GetList(System.Object, pageSize > 0 ? countQuery : dataSource, true);
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        countResult = $taskResult1;
                                        this.UpdatePagination(countResult, this.RowData.Data.Count);
                                        Core.Components.Spinner.Hide();
                                        $tcs.setResult(true);
                                        return;
                                    }
                                    case 3: {
                                        $tcs.setResult(false);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            Render: function () {
                Core.MVVM.Html.Take(this.ParentElement).DataAttr$1("name", this.GuiInfo.FieldName);
                this.AddSections();
                this.SetRowDataIfExists();
                this.RowData.ListChanged = Bridge.fn.combine(this.RowData.ListChanged, Bridge.fn.cacheBind(this, this.RowDataChanged));
                this.EditForm.ResizeListView();
                if (Core.Extensions.IEnumerableExtensions.HasElement(System.Object, this.GuiInfo.LocalData) && Core.Extensions.IEnumerableExtensions.HasElement(Core.Models.GridPolicy, this.GuiInfo.LocalHeader)) {
                    this.Header = this.GuiInfo.LocalHeader;
                    this.HeaderComponentMap = System.Linq.Enumerable.from(this.Header, Core.Models.GridPolicy).toDictionary(function (x) {
                            return Bridge.getHashCode(x);
                        }, function (x) {
                            return Core.Extensions.Utils.MapToComponent(x);
                        }, System.Int32, Core.Models.Component);
                    if (this.GuiInfo.LocalRender) {
                        this.Rerender();
                    } else {
                        this.RowData.Data = this.GuiInfo.LocalData;
                    }
                    return;
                }
                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = this.LoadAllData();
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            this.RowData.Data = this.RowData.Data;
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            AddSections: function () {
                Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.MVVM.Html.Take(this.ParentElement).Div, "grid-wrapper"), this.Editable ? "editable" : "");
                this.Element = Core.MVVM.Html.Context;
                if (this.GuiInfo.CanSearch) {
                    Core.Components.Renderer.ClassName(Core.MVVM.Html.Instance.Div, "grid-toolbar search").End.Render();
                }
                this.ListViewSearch = new Core.Components.ListViewSearch(this.GuiInfo);
                this.AddChild(this.ListViewSearch);
                Core.Components.Renderer.ClassName(Core.MVVM.Html.Take(this.Element).Div, "list-content");
                this.MainSection = new Core.Components.ListViewSection.ctor(Core.MVVM.Html.Context);
                this.AddChild(this.MainSection);
                Core.MVVM.Html.Instance.EndOf$1(".list-content");
                this.RenderPaginator();
            },
            ApplyFilter: function (searching) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    calcFilter, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (searching === void 0) { searching = true; }
                                        calcFilter = this.CalcFilterQuery(searching);
                                        this.ClearRowData();
                                        $task1 = this.ReloadData(calcFilter, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CalcFilterQuery: function (searching) {
                var $t;
                var advFilter = this.FormattedDataSource;
                if (Core.Extensions.IEnumerableExtensions.HasElement(Core.Models.GridPolicy, this.ListViewSearch.BasicSearch)) {
                    var advSearch = ($t = new Core.Components.AdvancedSearch(this), $t.Parent = this, $t.Entity = this.AdvSearchVM, $t);
                    advFilter = advSearch.CalcAdvSearchQuery();
                }
                return this.ListViewSearch.CalcFilterQuery(advFilter);
            },
            LoadAllData: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    columns, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.LoadGridPolicy();
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        columns = $taskResult1;
                                        columns = this.FilterColumns(columns);
                                        if (!Bridge.staticEquals(this.HeaderLoaded, null)) {
                                            this.HeaderLoaded(columns);
                                        }
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            FilterColumns: function (gridPolicy) {
                var specificComponent = System.Linq.Enumerable.from(gridPolicy, Core.Models.GridPolicy).any(Bridge.fn.bind(this, function (x) {
                        return System.Nullable.eq(x.ComponentId, this.GuiInfo.Id);
                    }));
                if (specificComponent) {
                    gridPolicy = System.Linq.Enumerable.from(gridPolicy, Core.Models.GridPolicy).where(Bridge.fn.bind(this, function (x) {
                            return System.Nullable.eq(x.ComponentId, this.GuiInfo.Id);
                        })).toList(Core.Models.GridPolicy);
                } else {
                    gridPolicy = System.Linq.Enumerable.from(gridPolicy, Core.Models.GridPolicy).where(function (x) {
                            return x.ComponentId == null;
                        }).toList(Core.Models.GridPolicy);
                }

                var permission = this.EditForm.GetElementPolicies$1(System.Linq.Enumerable.from(gridPolicy, Core.Models.GridPolicy).select(function (x) {
                        return x.Id;
                    }).ToArray(System.Int32), Core.Enums.EntityEnum.GridPolicy);
                var headers = System.Linq.Enumerable.from(gridPolicy, Core.Models.GridPolicy).where(function (header) {
                        return !header.IsPrivate || Core.Extensions.IEnumerableExtensions.HasElementAndAll(Core.Models.FeaturePolicy, System.Linq.Enumerable.from(permission, Core.Models.FeaturePolicy).where(function (x) {
                                return x.RecordId === header.Id;
                            }), function (policy) {
                            return policy.CanRead;
                        });
                    }).select(Bridge.fn.cacheBind(this, this.CalcTextAlign)).orderByDescending(function (x) {
                    return x.Frozen;
                }).thenBy(function (x) {
                    return x.Order;
                }).toList(Core.Models.GridPolicy);
                Core.Components.ListView.OrderHeaderGroup(headers);
                this.Header.clear();
                this.Header.AddRange(headers);
                this.HeaderComponentMap = System.Linq.Enumerable.from(this.Header, Core.Models.GridPolicy).toDictionary(function (x) {
                        return Bridge.getHashCode(x);
                    }, function (x) {
                        return Core.Extensions.Utils.MapToComponent(x);
                    }, System.Int32, Core.Models.Component);
                return headers;
            },
            CalcTextAlign: function (header) {
                if (Core.Extensions.StringExt.HasAnyChar(header.TextAlign)) {
                    var textAlign = { v : new Core.Enums.TextAlign() };
                    var parsed = System.Enum.tryParse(Core.Enums.TextAlign, header.TextAlign, textAlign);
                    if (parsed) {
                        header.TextAlignEnum = textAlign.v;
                    }
                }
                return header;
            },
            RenderPaginator: function () {
                var $t, $t1;
                if (this.GuiInfo.LocalRender) {
                    if (this.Paginator != null) {
                        this.Paginator.Show = false;
                    }
                    return;
                }
                if (this.GuiInfo.Row == null || System.Nullable.eq(this.GuiInfo.Row, 0)) {
                    this.GuiInfo.Row = 12;
                }

                if (this.Paginator == null) {
                    this.Paginator = new Core.Components.Paginator(($t = new Core.Components.PaginationOptions(), $t.Total = 0, $t.PageSize = ($t1 = this.GuiInfo.Row, $t1 != null ? $t1 : 12), $t.CurrentPageCount = System.Linq.Enumerable.from(this.RowData.Data, System.Object).count(), $t));
                    this.AddChild(this.Paginator);
                }
            },
            RenderRowData: function (headers, row, section, index, emptyRow) {
                var $t, $t1;
                if (index === void 0) { index = null; }
                if (emptyRow === void 0) { emptyRow = false; }
                var rowSection = ($t = new Core.Components.ListViewItem(Core.MVVM.ElementType.div), $t.EmptyRow = emptyRow, $t.Entity = row, $t.ParentElement = section.Element, $t);
                var parent;
                if (((parent = Bridge.as(section, Core.Components.ListViewSection))) != null) {
                    rowSection.ListViewSection = parent;
                } else {
                    var group;
                    if (((group = Bridge.as(section, Core.Components.GroupViewItem))) != null) {
                        rowSection.ListViewSection = group.ListViewSection;
                    }
                }
                section.AddChild(rowSection, index);
                var div = Bridge.as(Core.MVVM.Html.Context, HTMLDivElement);
                if (System.Nullable.hasValue(index)) {
                    if (System.Nullable.gte(index, System.Linq.Enumerable.from(div.parentElement.children, HTMLElement).count()) || System.Nullable.lt(index, 0)) {
                        index = 0;
                    }

                    div.parentElement.insertBefore(div, div.parentElement.children[System.Nullable.getValue(index)]);
                }
                var func = { };
                if (Core.Extensions.Utils.IsFunction(this.GuiInfo.FormatEntity, func)) {
                    var formatted = ($t = func.v.call(rowSection, rowSection)) != null ? Bridge.toString($t) : null;
                    rowSection.Element.innerHTML = formatted;
                    this.EditForm.BindingTemplate(rowSection.Element, rowSection);
                } else {
                    Core.MVVM.Html.Instance.ForEach$2(Core.Models.GridPolicy, System.Linq.Enumerable.from(headers, Core.Models.GridPolicy).where(function (x) {
                            return !x.Hidden;
                        }), Bridge.fn.bind(this, function (header, headerIndex) {
                        this.RenderTableCell(row, this.HeaderComponentMap.getItem(Bridge.getHashCode(header)), rowSection, headerIndex);
                    }));
                }
                section.AddChild(rowSection, index);
                var id = Bridge.unbox(row[Core.Components.BaseComponent.IdField]);
                rowSection.Dirty = (!System.Nullable.hasValue(id) || System.Nullable.lte(id, 0)) && !emptyRow;
                !Bridge.staticEquals(($t1 = rowSection.DOMContentLoaded), null) ? $t1() : null;
                return rowSection;
            },
            RenderContent: function () {
                this.FormattedRowData = Core.Extensions.IEnumerableExtensions.Nothing(System.Object, this.FormattedRowData) ? this.RowData.Data : this.FormattedRowData;
                if (Core.Extensions.IEnumerableExtensions.Nothing(System.Object, this.FormattedRowData)) {
                    return;
                }
                Core.Extensions.IEnumerableExtensions.ForEach$1(System.Object, this.FormattedRowData, Bridge.fn.bind(this, function (rowData, index) {
                    var rowSection = this.RenderRowData(this.Header, rowData, this.MainSection);
                }));
            },
            Rerender: function () {
                this.DisposeNoRecord();
                this.Editable = this.GuiInfo.CanAdd && System.Linq.Enumerable.from(this.Header, Core.Models.GridPolicy).any(function (x) {
                        return x.Active && !x.Hidden && x.Editable;
                    });
                this.MainSection.DisposeChildren();
                Core.MVVM.Html.Take(this.MainSection.Element).Clear();
                this.RenderContent();

                if (this.Editable) {
                    this.AddNewEmptyRow();
                } else if (Core.Extensions.IEnumerableExtensions.Nothing(System.Object, this.RowData.Data)) {
                    this.NoRecordFound();
                    this.DomLoaded();
                    return;
                }
                this.MainSection.Element.addEventListener("contextmenu", Bridge.fn.cacheBind(this, this.BodyContextMenuHandler));
                this.DomLoaded();
                Core.Components.Spinner.Hide();
            },
            DomLoaded: function () {
                var $t;
                if (!this.GuiInfo.LocalRender) {
                    this.Header.ForEach(function (x) {
                        x.LocalData = null;
                    });
                }
                !Bridge.staticEquals(($t = this.DOMContentLoaded), null) ? $t() : null;
                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = Core.Components.Extensions.ComponentExt.DispatchEventToHandlerAsync(this, this.GuiInfo.Events, "DOMContentLoaded", [this.Entity]);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            RowDataChanged: function (args) {
                if (System.Nullable.eq(args.Action, Core.MVVM.ObservableAction.Remove)) {
                    this.RemoveRowById(Bridge.unbox(args.Item[Core.Components.BaseComponent.IdField]));
                    return;
                }
                window.clearTimeout(this._rowDataChangeAwaiter);
                this._rowDataChangeAwaiter = window.setTimeout(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $task2, 
                        $task3, 
                        $task4, 
                        $jumpFromFinally, 
                        $t, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7,8,9], $step);
                                switch ($step) {
                                    case 0: {
                                        if (Core.Extensions.IEnumerableExtensions.Nothing(System.Object, this.RowData.Data) && System.Nullable.eq(args.Action, Core.MVVM.ObservableAction.Render)) {
                                            this.Rerender();
                                            return;
                                        }
                                        $t = args.Action;
                                        if ($t === Core.MVVM.ObservableAction.Add) {
                                            $step = 1;
                                            continue;
                                        }
                                        else if ($t === Core.MVVM.ObservableAction.AddRange) {
                                            $step = 3;
                                            continue;
                                        }
                                        else if ($t === Core.MVVM.ObservableAction.Update) {
                                            $step = 5;
                                            continue;
                                        }
                                        else if ($t === Core.MVVM.ObservableAction.Render) {
                                            $step = 7;
                                            continue;
                                        }
                                        $step = 9;
                                        continue;
                                    }
                                    case 1: {
                                        $task1 = this.AddRow(args.Item, args.Index);
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $step = 9;
                                        continue;
                                    }
                                    case 3: {
                                        $task2 = this.AddRows(args.ListData, args.Index);
                                        $step = 4;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $task2.getAwaitedResult();
                                        $step = 9;
                                        continue;
                                    }
                                    case 5: {
                                        $task3 = this.AddOrUpdateRow(args.Item);
                                        $step = 6;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 6: {
                                        $task3.getAwaitedResult();
                                        $step = 9;
                                        continue;
                                    }
                                    case 7: {
                                        $task4 = this.LoadMasterData();
                                        $step = 8;
                                        if ($task4.isCompleted()) {
                                            continue;
                                        }
                                        $task4.continue($asyncBody);
                                        return;
                                    }
                                    case 8: {
                                        $task4.getAwaitedResult();
                                        this.Rerender();
                                        $step = 9;
                                        continue;
                                    }
                                    case 9: {
                                        Core.Components.Spinner.Hide();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }));
            },
            SetRowData: function (listData, ignoreRender) {
                var $t;
                this.RowData._data.clear();
                var hasElement = Core.Extensions.IEnumerableExtensions.HasElement(System.Object, listData);
                if (hasElement) {
                    listData.ForEach(Bridge.fn.cacheBind(this.RowData._data, this.RowData._data.add)); // Not to use AddRange because the _data is not always List
                }
                if (!ignoreRender) {
                    this.RowDataChanged(($t = new (Core.MVVM.ObservableListArgs$1(System.Object))(), $t.Action = Core.MVVM.ObservableAction.Render, $t.ListData = this.RowData._data, $t));
                }

                if (this.Entity != null) {
                    Core.Extensions.BridgeExt.SetComplexPropValue(this.Entity, this.GuiInfo.FieldName, this.RowData.Data);
                }
            },
            SetRowDataIfExists: function () {
                var value;
                if (this.Entity != null && ((value = Bridge.as(Core.Extensions.Utils.GetComplexPropValue(this.Entity, this.GuiInfo.FieldName), System.Collections.IEnumerable))) != null && Bridge.getEnumerator(value).System$Collections$IEnumerator$moveNext()) {
                    this.RowData._data = value;
                }
            },
            LoadGridPolicy: function () {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    sysSetting, 
                    featureId, 
                    $t, 
                    dataTask, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        sysSetting = null;
                                        if (Core.Extensions.IEnumerableExtensions.Nothing(Core.Models.GridPolicy, this.GuiInfo.LocalHeader)) {
                                            featureId = "";
                                            if (Bridge.is(this, Core.Components.FloatingGridView)) {
                                                featureId = "null";
                                            } else {
                                                featureId = (($t = this.EditForm) != null ? $t.Feature : null) != null ? Bridge.toString(this.EditForm.Feature.Id) : Bridge.toString(this.GuiInfo.ComponentGroup.FeatureId);
                                            }
                                            sysSetting = new Core.Clients.Client.$ctor1("GridPolicy", Bridge.Reflection.getTypeNamespace(Core.Models.User)).GetRawList(Core.Models.GridPolicy, System.String.format("?$filter=Active eq true and Entity/Name eq '{0}' and FeatureId eq {1}", this.GuiInfo.RefName, featureId));
                                        } else {
                                            sysSetting = System.Threading.Tasks.Task.fromResult(new (System.Collections.Generic.List$1(Core.Models.GridPolicy)).$ctor1(this.GuiInfo.LocalHeader), System.Collections.Generic.List$1(Core.Models.GridPolicy));
                                        }
                                        dataTask = this.ReloadData(null, true, this.GuiInfo.CanCache);
                                        $task1 = System.Threading.Tasks.Task.whenAll(sysSetting, dataTask);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(sysSetting.getResult());
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            UpdatePagination: function (result, currentPageCount) {
                if (this.Paginator == null) {
                    return;
                }
                var options = this.Paginator.Options;
                options.Total = System.Nullable.getValue((System.Nullable.eq(result.Odata.Count, 0) ? System.Linq.Enumerable.from(result.Value, System.Object).count() : result.Odata.Count));
                options.CurrentPageCount = currentPageCount;
                options.PageNumber = (options.PageIndex + 1) | 0;
                options.StartIndex = Bridge.Int.mul(options.PageIndex, options.PageSize);
                options.EndIndex = (options.StartIndex + options.CurrentPageCount) | 0;
                this.Paginator.UpdateView();
            },
            RenderTableCell: function (rowData, header, rowSection, index) {
                this.RenderCellComponent(rowData, header, rowSection);
            },
            RenderCellComponent: function (rowData, header, rowSection) {
                var $t;
                if (System.String.isNullOrEmpty(header.FieldName)) {
                    return;
                }
                header.SimpleText = Bridge.referenceEquals(Bridge.toString(this.Element.style.display), System.Enum.toString(System.String, "none"));
                var component = header.Editable || Core.Components.ListView.NotCellText.contains(header.ComponentType) ? Core.Components.Extensions.ComponentFactory.GetComponent(header, this.EditForm) : new Core.Components.CellText(header);
                var cellText;
                if (((cellText = Bridge.as(component, Core.Components.CellText))) != null) {
                    cellText.RefData = this.RefData;
                }
                if (System.Nullable.hasValue(header.ReferenceId)) {
                    var source = header.LocalData || (Core.Extensions.IEnumerableExtensions.Nothing(System.Collections.Generic.KeyValuePair$2(System.String,System.Collections.Generic.List$1(System.Object)), this.RefData) ? null : System.Collections.Generic.CollectionExtensions.GetValueOrDefault(System.String, System.Collections.Generic.List$1(System.Object), this.RefData, header.RefName));
                    header.LocalData = source;
                }
                var searchEntry;
                if (((searchEntry = Bridge.as(component, Core.Components.SearchEntry))) != null) {
                    var matched = ($t = header.LocalData) != null ? System.Linq.Enumerable.from($t, System.Object).firstOrDefault(function (x) {
                            return System.Nullable.eq(System.Nullable.getValue(Bridge.cast(Bridge.unbox(x[Core.Components.BaseComponent.IdField], System.Int32), System.Int32)), Bridge.cast(Bridge.unbox((rowData != null ? Core.Extensions.Utils.GetComplexPropValue(rowData, header.FieldName) : null), System.Int32), System.Int32, true));
                        }, null) : null;
                    searchEntry.Matched = matched;
                }
                component.Id = Bridge.toString(header.Id);
                component.Name = header.FieldName;
                component.Entity = rowData;
                rowSection.AddChild(component);
                if (this.Disabled || header.Disabled) {
                    Core.Components.Extensions.ComponentExt.SetDisabled(component, true);
                }

                if (component.Element != null && !Core.Extensions.StringExt.IsNullOrWhiteSpace(header.ChildStyle)) {
                    component.Element.style.cssText = header.ChildStyle;
                }
                component.UserInput = Bridge.fn.combine(component.UserInput, Bridge.fn.bind(this, function (arg) {
                    var $step = 0,
                        $task1, 
                        $task2, 
                        $taskResult2, 
                        $jumpFromFinally, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.RowChangeHandler(rowData, rowSection);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        if (this.GuiInfo.IsRealtime && arg != null && arg.EvType !== "abort" && arg.EvType !== "input") {
                                            $step = 2;
                                            continue;
                                        } 
                                        $step = 4;
                                        continue;
                                    }
                                    case 2: {
                                        $task2 = this.BulkUpdate();
                                        $step = 3;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }));
            },
            RowChangeHandler: function (rowData, rowSection) {
                var $step = 0,
                    $task1, 
                    $task2, 
                    $task3, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5], $step);
                                switch ($step) {
                                    case 0: {
                                        if (rowSection.EmptyRow && this.Editable) {
                                            $step = 1;
                                            continue;
                                        } 
                                        $step = 4;
                                        continue;
                                    }
                                    case 1: {
                                        $task1 = Core.Components.Extensions.ComponentExt.DispatchCustomEventAsync(this, this.GuiInfo.Events, Core.Enums.CustomEventType.BeforeCreated, [rowData]);
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $task1.getAwaitedResult();
                                        this.RowData.Data.add(rowData);
                                        $task2 = Core.Components.Extensions.ComponentExt.DispatchCustomEventAsync(this, this.GuiInfo.Events, Core.Enums.CustomEventType.AfterCreated, [rowData]);
                                        $step = 3;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $task2.getAwaitedResult();
                                        Core.Extensions.BridgeExt.SetComplexPropValue(this.Entity, this.GuiInfo.FieldName, this.RowData.Data);
                                        this.RowAction$1(function (x) {
                                            return Bridge.referenceEquals(x.Entity, rowSection.Entity);
                                        }, function (x) {
                                            x.EmptyRow = false;
                                            Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.BaseComponent, x.FilterChildren$1(function (child) {
                                                return true;
                                            }), function (child) {
                                                child.EmptyRow = false;
                                                child.UpdateView$1(true);
                                            });
                                        });
                                        this.AddNewEmptyRow();
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        $task3 = Core.Components.Extensions.ComponentExt.DispatchEventToHandlerAsync(this, this.GuiInfo.Events, "change", [rowData]);
                                        $step = 5;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 5: {
                                        $task3.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            AddNewEmptyRow: function () {
                var $t;
                if (!this.Editable) {
                    return;
                }

                var lastRow = System.Linq.Enumerable.from(this.MainSection.Children, Core.Components.BaseComponent).lastOrDefault(null, null);
                if (lastRow != null && lastRow.EmptyRow) {
                    return;
                }

                var emptyRowData = Bridge.createInstance(Bridge.Reflection.getType(((($t = this.GuiInfo.Reference.Namespace, $t != null ? $t : Core.Clients.Client.ModelNamespace)) || "") + (this.GuiInfo.RefName || "")));
                emptyRowData[Core.Components.BaseComponent.IdField] = Bridge.box((-Math.abs(Bridge.getHashCode(emptyRowData))) | 0, System.Int32); // Not to add this row into the submitted list
                var rowSection = this.RenderRowData(this.Header, emptyRowData, this.MainSection);
                rowSection.EmptyRow = true;
                Core.MVVM.Html.Take(this.MainSection.Element);
            },
            NoRecordFound: function () {
                var $t;
                if (Core.Extensions.IEnumerableExtensions.HasElement(Core.Components.BaseComponent, this.Children)) {
                    System.Linq.Enumerable.from(this.Children, Core.Components.BaseComponent).where(function (x) {
                            return Bridge.is(x, Core.Components.ListViewSection);
                        }).forEach(function (x) {
                        x.DisposeChildren();
                    });
                }
                this.DisposeNoRecord();
                this._noRecord = ($t = new Core.Components.Section.$ctor1(Core.MVVM.ElementType.div), $t.ParentElement = this.Element, $t);
                this.AddChild(this._noRecord);
                Core.Extensions.HtmlElementExtension.AddClass(this._noRecord.Element, "no-records");
                this._noRecord.Element.innerHTML = "Kh\u00f4ng t\u00ecm th\u1ea5y d\u1eef li\u1ec7u";
            },
            BodyContextMenuHandler: function (e) {
                e.preventDefault();
                e.stopPropagation();
                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = this.TbodyContextMenu(e);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            LoadMasterData: function (rows, spinner) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    refHeaders, 
                    dataSource, 
                    dataTask, 
                    $t, 
                    remoteSource, 
                    typeName, 
                    remoteData, 
                    localSource, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (rows === void 0) { rows = null; }
                                        if (spinner === void 0) { spinner = true; }
                                        if (Core.Extensions.IEnumerableExtensions.Nothing(Core.Models.GridPolicy, this.Header)) {
                                            $tcs.setResult(null);
                                            return;
                                        }

                                        rows = rows || this.RowData.Data;
                                        refHeaders = System.Linq.Enumerable.from(this.Header, Core.Models.GridPolicy).where(function (x) {
                                            return Core.Extensions.StringExt.HasAnyChar(x.RefName);
                                        }).toList(Core.Models.GridPolicy);
                                        this.SyncMasterData(rows);
                                        dataSource = System.Linq.Enumerable.from(Core.Extensions.BridgeExt.DistinctBy(Core.Models.GridPolicy, System.Nullable$1(System.Int32), refHeaders, function (x) {
                                            return x.ReferenceId;
                                        }), Core.Models.GridPolicy).select(Bridge.fn.bind(this, function (x) {
                                            return this.FormatDataSourceByEntity(x, rows);
                                        })).where(function (x) {
                                            return x != null;
                                        }).toList(Core.Models.GridPolicy);
                                        if (Core.Extensions.IEnumerableExtensions.Nothing(Core.Models.GridPolicy, dataSource)) {
                                            $tcs.setResult(null);
                                            return;
                                        }

                                        dataTask = System.Linq.Enumerable.from(Core.Extensions.BridgeExt.DistinctBy(Core.Models.GridPolicy, System.String, System.Linq.Enumerable.from(dataSource, Core.Models.GridPolicy).where(function (x) {
                                            return !Core.Extensions.StringExt.IsNullOrWhiteSpace(x.DataSourceOptimized);
                                        }), function (x) {
                                            return System.Nullable.toString(x.ReferenceId, null) + "/" + (x.DataSourceOptimized || "");
                                        }), Core.Models.GridPolicy).select(function (x) {
                                            return new $asm.$AnonymousType$5(x, new Core.Clients.Client.$ctor1(x.RefName).LoadById(x.DataSourceOptimized));
                                        }).ToArray(System.Object);
                                        if (spinner) {
                                            Core.Components.Spinner.AppendTo(this.Element);
                                        }
                                        $task1 = System.Threading.Tasks.Task.whenAll.apply(System.Threading.Tasks.Task, System.Linq.Enumerable.from(dataTask, System.Object).select(function (x) {
                                            return x.Data;
                                        }).ToArray(System.Threading.Tasks.Task$1(Core.Models.OdataResult$1(System.Object))));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $t = Bridge.getEnumerator(dataTask);
                                        try {
                                            while ($t.moveNext()) {
                                                remoteSource = $t.Current;
                                                typeName = remoteSource.Header.RefName;
                                                remoteData = remoteSource.Data.getResult().Value;
                                                localSource = System.Collections.Generic.CollectionExtensions.GetValueOrDefault(System.String, System.Collections.Generic.List$1(System.Object), this.RefData, typeName);
                                                if (localSource == null) {
                                                    this.RefData.add(typeName, remoteSource.Data.getResult().Value);
                                                } else {
                                                    remoteData.AddRange(localSource);
                                                    localSource.clear();
                                                    localSource.AddRange(Core.Extensions.BridgeExt.DistinctBy(System.Object, System.Int32, remoteData, function (x) {
                                                        return Bridge.unbox(x[Core.Components.BaseComponent.IdField]);
                                                    }));
                                                }
                                            }
                                        } finally {
                                            if (Bridge.is($t, System.IDisposable)) {
                                                $t.System$IDisposable$Dispose();
                                            }
                                        }
                                        this.SyncMasterData(rows);
                                        Core.Components.Spinner.Hide();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            SyncMasterData: function (rows) {
                var $t, $t1, $t2;
                if (rows === void 0) { rows = null; }
                rows = rows || this.RowData.Data;
                $t = Bridge.getEnumerator(System.Linq.Enumerable.from(this.Header, Core.Models.GridPolicy).where(function (x) {
                        return System.Nullable.hasValue(x.ReferenceId);
                    }));
                try {
                    while ($t.moveNext()) {
                        var header = { v : $t.Current };
                        if (Core.Extensions.StringExt.IsNullOrWhiteSpace(header.v.FieldName) || header.v.FieldName.length <= 2) {
                            continue;
                        }

                        var containId = Bridge.referenceEquals(header.v.FieldName.substr(((header.v.FieldName.length - 2) | 0)), Core.Components.BaseComponent.IdField);
                        if (!containId) {
                            continue;
                        }

                        $t1 = Bridge.getEnumerator(rows, System.Object);
                        try {
                            while ($t1.moveNext()) {
                                var row = { v : $t1.Current };
                                var objField = header.v.FieldName.substr(0, ((header.v.FieldName.length - 2) | 0));
                                var propType = System.Enum.toString(Core.Enums.EntityEnum, System.Nullable.getValue(header.v.ReferenceId));
                                if (propType == null) {
                                    continue;
                                }

                                var propVal = { v : Core.Extensions.Utils.GetComplexPropValue(row.v, objField) };
                                var found = ($t2 = System.Collections.Generic.CollectionExtensions.GetValueOrDefault(System.String, System.Collections.Generic.List$1(System.Object), this.RefData, propType)) != null ? System.Linq.Enumerable.from($t2, System.Object).firstOrDefault((function ($me, row, header) {
                                        return function (source) {
                                            return System.Nullable.eq(Bridge.unbox(source[Core.Components.BaseComponent.IdField]), Bridge.unbox(Core.Extensions.Utils.GetComplexPropValue(row.v, header.v.FieldName)));



                                        };
                                    })(this, row, header), null) : null;
                                if (found != null) {
                                    Core.Extensions.BridgeExt.SetComplexPropValue(row.v, objField, found);
                                } else if (propVal.v != null && found == null) {
                                    var source = { v : System.Collections.Generic.CollectionExtensions.GetValueOrDefault(System.String, System.Collections.Generic.List$1(System.Object), this.RefData, propType) };
                                    source.v != null ? source.v.add(propVal.v) : null;
                                }
                            }
                        } finally {
                            if (Bridge.is($t1, System.IDisposable)) {
                                $t1.System$IDisposable$Dispose();
                            }
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            },
            FormatDataSourceByEntity: function (header, entities) {
                var entityIds = System.Linq.Enumerable.from(this.Header, Core.Models.GridPolicy).where(function (x) {
                        return Bridge.referenceEquals(x.RefName, header.RefName);
                    }).selectMany(Bridge.fn.bind(this, function (x) {
                    return this.GetEntityIds(x, entities);
                })).distinct();
                if (Core.Extensions.IEnumerableExtensions.Nothing(System.Nullable$1(System.Int32), entityIds)) {
                    return null;
                }

                header.DataSourceOptimized = Core.Extensions.IEnumerableExtensions.Combine(System.Int32, entityIds.where(function (x) {
                    return System.Nullable.hasValue(x);
                }).select(function (x) {
                    return System.Nullable.getValue(x);
                }).orderBy(function (x) {
                    return x;
                }));
                return header;
            },
            GetEntityIds: function (header, entities) {
                if (Core.Extensions.IEnumerableExtensions.Nothing(System.Object, entities)) {
                    return System.Linq.Enumerable.empty();
                }

                return System.Linq.Enumerable.from(entities, System.Object).select(function (x) {
                        var $t;
                        var id = ($t = Core.Extensions.Utils.GetComplexPropValue(x, header.FieldName)) != null ? Bridge.toString($t) : null;
                        if (Core.Extensions.StringExt.IsNullOrEmpty(id)) {
                            return null;
                        }

                        return Core.Extensions.Utils.TryParseInt(id);
                    }).where(function (id) {
                    return id != null && System.Nullable.getValue(id) > 0;
                });
            },
            DeactivateSelected: function (ev) {
                var $t;
                if (ev === void 0) { ev = null; }
                var confirm = ($t = new Core.Components.Forms.ConfirmDialog(), $t.Content = "Are you sure to deactivate?", $t);
                confirm.Render();
                confirm.YesConfirmed = Bridge.fn.combine(confirm.YesConfirmed, Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $task2, 
                        $jumpFromFinally, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1,2], $step);
                                switch ($step) {
                                    case 0: {
                                        confirm.Dispose();
                                        $task1 = this.Deactivate();
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $task2 = Core.Components.Extensions.ComponentExt.DispatchCustomEventAsync(this, this.GuiInfo.Events, Core.Enums.CustomEventType.Deactivated, [this.Entity]);
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $task2.getAwaitedResult();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }));
            },
            SetSelect: function (row, selected) {
                this.RowAction$1(function (x) {
                    return Bridge.referenceEquals(x.Entity, row);
                }, function (x) {
                    x.Selected = selected;
                });
            },
            SetSelectAll: function (selected) {
                this.RowAction(function (x) {
                    x.Selected = selected;
                });
            },
            HardDeleteSelected: function (ev) {
                if (ev === void 0) { ev = null; }
                if (this.GuiInfo.IgnoreConfirmHardDelete && !Bridge.staticEquals(this.OnDeleteConfirmed, null)) {
                    this.OnDeleteConfirmed();
                    return;
                }
                var confirm = new Core.Components.Forms.ConfirmDialog();
                confirm.Render();
                confirm.YesConfirmed = Bridge.fn.combine(confirm.YesConfirmed, Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $task2, 
                        $taskResult2, 
                        $task3, 
                        $jumpFromFinally, 
                        $t, 
                        deletedItems, 
                        $t1, 
                        $t2, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3], $step);
                                switch ($step) {
                                    case 0: {
                                        if (!Bridge.staticEquals(this.OnDeleteConfirmed, null)) {
                                            this.OnDeleteConfirmed();
                                            !Bridge.staticEquals(($t = this.DOMContentLoaded), null) ? $t() : null;
                                            return;
                                        }
                                        confirm.Dispose();
                                        deletedItems = ($t1 = System.Object, System.Linq.Enumerable.from(this.GetSelectedRows(), $t1).toList($t1));
                                        $task1 = Core.Components.Extensions.ComponentExt.DispatchCustomEventAsync(this, this.GuiInfo.Events, Core.Enums.CustomEventType.BeforeDeleted, [deletedItems]);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $task2 = this.HardDeleteConfirmed();
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        !Bridge.staticEquals(($t2 = this.DOMContentLoaded), null) ? $t2() : null;
                                        $task3 = Core.Components.Extensions.ComponentExt.DispatchCustomEventAsync(this, this.GuiInfo.Events, Core.Enums.CustomEventType.AfterDeleted, [deletedItems]);
                                        $step = 3;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $task3.getAwaitedResult();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }));
            },
            Deactivate: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    entity, 
                    selected, 
                    ids, 
                    client, 
                    success, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        entity = this.GuiInfo.RefName;
                                        selected = this.GetSelectedRows();
                                        ids = System.Linq.Enumerable.from(selected, System.Object).select(function (x) {
                                            return System.Nullable.getValue(Bridge.cast(Bridge.unbox(x[Core.Components.BaseComponent.IdField], System.Int32), System.Int32));
                                        }).toList(System.Int32);
                                        client = new Core.Clients.Client.$ctor1(entity);
                                        $task1 = client.DeactivateAsync(ids);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        success = $taskResult1;
                                        if (success) {
                                            Core.Extensions.Toast.Success("H\u1ee7y d\u1eef li\u1ec7u th\u00e0nh c\u00f4ng");
                                            if (this.AdvSearchVM.ActiveState === Core.Enums.ActiveStateEnum.Yes) {
                                                this.RemoveRange(selected);
                                            }
                                        } else {
                                            Core.Extensions.Toast.Warning("\u0110\u00e3 c\u00f3 l\u1ed7i x\u1ea3y ra khi h\u1ee7y d\u1eef li\u1ec7u, vui l\u00f2ng th\u1eed l\u1ea1i ho\u1eb7c li\u00ean h\u1ec7 h\u1ed7 tr\u1ee3!");
                                        }
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            HardDeleteConfirmed: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    entity, 
                    deleted, 
                    $t, 
                    ids, 
                    client, 
                    success, 
                    deletedHistory, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        entity = this.GuiInfo.RefName;
                                        deleted = ($t = System.Object, System.Linq.Enumerable.from(this.GetSelectedRows(), $t).toList($t));
                                        ids = System.Linq.Enumerable.from(deleted, System.Object).select(function (x) {
                                            return System.Nullable.getValue(Bridge.cast(Bridge.unbox(x[Core.Components.BaseComponent.IdField], System.Int32), System.Int32));
                                        }).toList(System.Int32);
                                        client = new Core.Clients.Client.$ctor1(entity);
                                        $task1 = client.HardDeleteAsync(ids);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        success = $taskResult1;
                                        if (success) {
                                            deletedHistory = Core.Extensions.IEnumerableExtensions.Combine(System.String, System.Linq.Enumerable.from(this.AllListViewItem, Core.Components.ListViewItem).where(function (x) {
                                                return x.Selected;
                                            }).select(function (x) {
                                                return x.OriginalText;
                                            }), Core.Extensions.Utils.NewLine);
                                            this.RemoveRange(deleted);
                                            Core.Extensions.Toast.Success("X\u00f3a d\u1eef li\u1ec7u th\u00e0nh c\u00f4ng");
                                            $tcs.setResult(deleted);
                                            return;
                                        } else {
                                            Core.Extensions.Toast.Warning("X\u00f3a kh\u00f4ng th\u00e0nh c\u00f4ng");
                                        }
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            RemoveRange: function (deleted) {
                Core.Extensions.IEnumerableExtensions.ForEach(System.Object, deleted, Bridge.fn.bind(this, function (x) {
                    this.RemoveRowById(Bridge.unbox(x[Core.Components.BaseComponent.IdField]));
                }));
            },
            GetSelectedRows: function () {
                return System.Linq.Enumerable.from(this.MainSection.Children, Core.Components.BaseComponent).where(function (x) {
                        var item;
                        return ((item = Bridge.as(x, Core.Components.ListViewItem))) != null && item.Selected;
                    }).select(function (x) {
                    return x.Entity;
                }).toList(System.Object);
            },
            PasteSelected: function (ev) {
                if (Core.Extensions.IEnumerableExtensions.Nothing(System.Object, Core.Components.ListView._copiedRows)) {
                    return;
                }

                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $task2, 
                        $task3, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        index, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1,2,3], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = Core.Components.Extensions.ComponentExt.DispatchCustomEventAsync(this, this.GuiInfo.Events, Core.Enums.CustomEventType.BeforePasted, [Core.Components.ListView._originRows, Core.Components.ListView._copiedRows]);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            index = Core.Extensions.IEnumerableExtensions.IndexOf(Core.Components.ListViewItem, this.AllListViewItem, function (x) {
                                                return x.Selected;
                                            });
                                            $task2 = this.AddRows(Core.Components.ListView._copiedRows, index);
                                            $step = 2;
                                            if ($task2.isCompleted()) {
                                                continue;
                                            }
                                            $task2.continue($asyncBody);
                                            return;
                                        }
                                        case 2: {
                                            $task2.getAwaitedResult();
                                            Bridge.ensureBaseProperty(this, "Dirty").$Core$Components$EditableComponent$Dirty = true;
                                            Core.Components.EditableComponent.prototype.Focus.call(this);
                                            $task3 = Core.Components.Extensions.ComponentExt.DispatchCustomEventAsync(this, this.GuiInfo.Events, Core.Enums.CustomEventType.AfterPasted, [Core.Components.ListView._originRows, Core.Components.ListView._copiedRows]);
                                            $step = 3;
                                            if ($task3.isCompleted()) {
                                                continue;
                                            }
                                            $task3.continue($asyncBody);
                                            return;
                                        }
                                        case 3: {
                                            $task3.getAwaitedResult();
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            DuplicateSelected: function (ev) {
                var $t;
                var originalRows = this.GetSelectedRows();
                var copiedRows = ($t = System.Object, System.Linq.Enumerable.from(Core.Extensions.ReflectionExt.CopyRowWithoutId(System.Object, originalRows), $t).toList($t));
                if (Core.Extensions.IEnumerableExtensions.Nothing(System.Object, copiedRows)) {
                    return;
                }
                Bridge._ = System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $task2, 
                        $task3, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        index, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1,2,3], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = Core.Components.Extensions.ComponentExt.DispatchCustomEventAsync(this, this.GuiInfo.Events, Core.Enums.CustomEventType.BeforePasted, [originalRows, copiedRows]);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            index = Core.Extensions.IEnumerableExtensions.IndexOf(Core.Components.ListViewItem, this.AllListViewItem, function (x) {
                                                return x.Selected;
                                            });
                                            $task2 = this.AddRows(copiedRows, index);
                                            $step = 2;
                                            if ($task2.isCompleted()) {
                                                continue;
                                            }
                                            $task2.continue($asyncBody);
                                            return;
                                        }
                                        case 2: {
                                            $task2.getAwaitedResult();
                                            Bridge.ensureBaseProperty(this, "Dirty").$Core$Components$EditableComponent$Dirty = true;
                                            Core.Components.EditableComponent.prototype.Focus.call(this);
                                            $task3 = Core.Components.Extensions.ComponentExt.DispatchCustomEventAsync(this, this.GuiInfo.Events, Core.Enums.CustomEventType.AfterPasted, [originalRows, copiedRows]);
                                            $step = 3;
                                            if ($task3.isCompleted()) {
                                                continue;
                                            }
                                            $task3.continue($asyncBody);
                                            return;
                                        }
                                        case 3: {
                                            $task3.getAwaitedResult();
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            AddOrUpdateRow: function (rowData, singleAdd, force, fields) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    existRowData, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6], $step);
                                switch ($step) {
                                    case 0: {
                                        if (singleAdd === void 0) { singleAdd = true; }
                                        if (force === void 0) { force = true; }
                                        if (fields === void 0) { fields = []; }
                                        existRowData = System.Linq.Enumerable.from(this.MainSection.FilterChildren$1(function (x) {
                                            return Bridge.is(x, Core.Components.ListViewItem) && Bridge.referenceEquals(x.Entity, rowData);
                                        })).select(function (x) { return Bridge.cast(x, Core.Components.ListViewItem); }).firstOrDefault(null, null);
                                        if (existRowData == null) {
                                            $step = 1;
                                            continue;
                                        } 
                                        $step = 3;
                                        continue;
                                    }
                                    case 1: {
                                        if (!singleAdd) {
                                            this.RowData.Data.add(rowData);
                                        }
                                        $task1 = this.AddRow(rowData, ((this.RowData.Data.Count - 1) | 0), singleAdd);
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    case 3: {
                                        if (singleAdd) {
                                            $step = 4;
                                            continue;
                                        } 
                                        $step = 6;
                                        continue;
                                    }
                                    case 4: {
                                        $task2 = this.LoadMasterData(function (_o1) {
                                            _o1.add(rowData);
                                            return _o1;
                                        }(new (System.Collections.Generic.List$1(System.Object)).ctor()), false);
                                        $step = 5;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 5: {
                                        $task2.getAwaitedResult();
                                        $step = 6;
                                        continue;
                                    }
                                    case 6: {
                                        if (existRowData.EmptyRow) {
                                            this.RowData.Data.add(rowData);
                                        }
                                        this.RowAction$1(function (x) {
                                            return Bridge.referenceEquals(x.Entity, rowData);
                                        }, function (x) {
                                            Core.Extensions.ReflectionExt.CopyPropFrom$1(existRowData.Entity, rowData);
                                            x.EmptyRow = false;
                                            x.UpdateView$1(force, fields);
                                            x.Dirty = true;
                                        });
                                        if (singleAdd) {
                                            this.FinalAddOrUpdate();
                                        }
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            FinalAddOrUpdate: function () {
                this.AddNewEmptyRow();
            },
            AddOrUpdateRows: function (rows) {
                var $step = 0,
                    $task1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2], $step);
                                switch ($step) {
                                    case 0: {
                                        this.RowData.Data.AddRange(rows);
                                        $task1 = this.LoadMasterData(rows);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $task2 = Core.Extensions.IEnumerableExtensions.ForEachAsync(System.Object, rows, Bridge.fn.bind(this, function (row) {
                                            var $step = 0,
                                                $task1, 
                                                $jumpFromFinally, 
                                                $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                                                $returnValue, 
                                                $async_e, 
                                                $asyncBody = Bridge.fn.bind(this, function () {
                                                    try {
                                                        for (;;) {
                                                            $step = System.Array.min([0,1], $step);
                                                            switch ($step) {
                                                                case 0: {
                                                                    $task1 = this.AddOrUpdateRow(row, false);
                                                                    $step = 1;
                                                                    if ($task1.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task1.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 1: {
                                                                    $task1.getAwaitedResult();
                                                                    $tcs.setResult(null);
                                                                    return;
                                                                }
                                                                default: {
                                                                    $tcs.setResult(null);
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    } catch($async_e1) {
                                                        $async_e = System.Exception.create($async_e1);
                                                        $tcs.setException($async_e);
                                                    }
                                                }, arguments);

                                            $asyncBody();
                                            return $tcs.task;
                                        }));
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        this.FinalAddOrUpdate();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            AddRow: function (rowData, index, singleAdd) {
                var $step = 0,
                    $task1, 
                    $task2, 
                    $task3, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    exists, 
                    row, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5], $step);
                                switch ($step) {
                                    case 0: {
                                        if (index === void 0) { index = 0; }
                                        if (singleAdd === void 0) { singleAdd = true; }
                                        this.DisposeNoRecord();
                                        exists = Bridge.as(Core.Components.Extensions.ComponentExt.FirstOrDefault(this.MainSection, function (x) {
                                            return Bridge.referenceEquals(x.Entity, rowData);
                                        }), Core.Components.ListViewItem);
                                        if (exists != null) {
                                            $tcs.setResult(exists);
                                            return;
                                        }

                                        if (singleAdd) {
                                            $step = 1;
                                            continue;
                                        } 
                                        $step = 3;
                                        continue;
                                    }
                                    case 1: {
                                        this.RowData.Data.add(rowData);
                                        $task1 = this.LoadMasterData(function (_o1) {
                                            _o1.add(rowData);
                                            return _o1;
                                        }(new (System.Collections.Generic.List$1(System.Object)).ctor()), false);
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $task1.getAwaitedResult();
                                        $step = 3;
                                        continue;
                                    }
                                    case 3: {
                                        $task2 = Core.Components.Extensions.ComponentExt.DispatchCustomEventAsync(this, this.GuiInfo.Events, Core.Enums.CustomEventType.BeforeCreated, [rowData]);
                                        $step = 4;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $task2.getAwaitedResult();
                                        row = this.RenderRowData(this.Header, rowData, this.MainSection, index);
                                        $task3 = Core.Components.Extensions.ComponentExt.DispatchCustomEventAsync(this, this.GuiInfo.Events, Core.Enums.CustomEventType.AfterCreated, [rowData]);
                                        $step = 5;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 5: {
                                        $task3.getAwaitedResult();
                                        $tcs.setResult(row);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            DisposeNoRecord: function () {
                this._noRecord != null ? this._noRecord.Dispose() : null;
                this._noRecord = null;
            },
            AddRows: function (rows, index) {
                var $step = 0,
                    $task1, 
                    $task2, 
                    $task3, 
                    $taskResult3, 
                    $task4, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4], $step);
                                switch ($step) {
                                    case 0: {
                                        if (index === void 0) { index = 0; }
                                        if (index < 0) {
                                            index = 0;
                                        }
                                        Core.Extensions.IEnumerableExtensions.ForEach(System.Object, rows, Bridge.fn.bind(this, function (row) {
                                            if (Bridge.is(this.RowData.Data, System.Collections.IList)) {
                                                this.RowData.Data.insert(index, row);
                                            } else {
                                                this.RowData.Data.add(row);
                                            }
                                        }));
                                        $task1 = this.LoadMasterData(rows);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $task2 = Core.Components.Extensions.ComponentExt.DispatchCustomEventAsync(this, this.GuiInfo.Events, Core.Enums.CustomEventType.BeforeCreatedList, [rows]);
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $task2.getAwaitedResult();
                                        $task3 = Core.Extensions.IEnumerableExtensions.ForEachAsync(System.Object, System.Linq.Enumerable.from(rows, System.Object).reverse(), Bridge.fn.bind(this, function (data) {
                                            var $step = 0,
                                                $task1, 
                                                $taskResult1, 
                                                $jumpFromFinally, 
                                                $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                                                $returnValue, 
                                                $async_e, 
                                                $asyncBody = Bridge.fn.bind(this, function () {
                                                    try {
                                                        for (;;) {
                                                            $step = System.Array.min([0,1], $step);
                                                            switch ($step) {
                                                                case 0: {
                                                                    $task1 = this.AddRow(data, index, false);
                                                                    $step = 1;
                                                                    if ($task1.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task1.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 1: {
                                                                    $taskResult1 = $task1.getAwaitedResult();
                                                                    $tcs.setResult(null);
                                                                    return;
                                                                }
                                                                default: {
                                                                    $tcs.setResult(null);
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    } catch($async_e1) {
                                                        $async_e = System.Exception.create($async_e1);
                                                        $tcs.setException($async_e);
                                                    }
                                                }, arguments);

                                            $asyncBody();
                                            return $tcs.task;
                                        }));
                                        $step = 3;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        $task4 = Core.Components.Extensions.ComponentExt.DispatchCustomEventAsync(this, this.GuiInfo.Events, Core.Enums.CustomEventType.AfterCreatedList, [rows]);
                                        $step = 4;
                                        if ($task4.isCompleted()) {
                                            continue;
                                        }
                                        $task4.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $task4.getAwaitedResult();
                                        this.AddNewEmptyRow();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            RemoveRowById: function (id) {
                var $t;
                var row = System.Linq.Enumerable.from(this.RowData.Data, System.Object).firstOrDefault(function (x) {
                        return Bridge.unbox(x[Core.Components.BaseComponent.IdField]) === id;
                    }, null);
                if (row == null) {
                    return;
                }

                this.RowData.Data.remove(row);
                ($t = Core.Components.Extensions.ComponentExt.FirstOrDefault(this.MainSection, function (x) {
                        return Bridge.unbox(x.Entity[Core.Components.BaseComponent.IdField]) === id;
                    })) != null ? $t.Dispose() : null;
            },
            RemoveRow: function (row) {
                var $t;
                if (row == null) {
                    return;
                }

                this.RowData.Data.remove(row);
                ($t = Core.Components.Extensions.ComponentExt.FirstOrDefault(this.MainSection, function (x) {
                        return Bridge.referenceEquals(x.Entity, row);
                    })) != null ? $t.Dispose() : null;
            },
            /**
             * Updating row data
             *
             * @instance
             * @public
             * @this Core.Components.ListView
             * @memberof Core.Components.ListView
             * @param   {System.Object}     rowData      The row object to update
             * @param   {Array.<string>}    fieldName    Left this default to update all cells
             * @return  {void}
             */
            UpdateRow: function (rowData, fieldName) {
                if (fieldName === void 0) { fieldName = []; }
                this.RowAction$1(function (row) {
                    return Bridge.referenceEquals(row.Entity, rowData);
                }, function (row) {
                    System.Linq.Enumerable.from(row.Children, Core.Components.BaseComponent).where(function (x) {
                            return Core.Extensions.IEnumerableExtensions.Nothing(System.String, fieldName) || System.Array.contains(fieldName, x.GuiInfo.FieldName, System.String);
                        }).forEach(function (x) {
                        x.UpdateView();
                    });
                });
            },
            ClearRowData: function () {
                var $t;
                this.RowData.Data.clear();
                this.RowAction$1(function (x) {
                    return !x.EmptyRow;
                }, function (x) {
                    x.Dispose();
                });
                this.MainSection.Element.innerHTML = null;
                if (this.Entity == null || Bridge.is(this.Parent, Core.Components.SearchEntry)) {
                    return;
                }

                ($t = this.Entity) != null ? Core.Extensions.BridgeExt.SetComplexPropValue($t, this.GuiInfo.FieldName, this.RowData.Data) : null;
            },
            UpdateView: function (force, dirty, componentNames) {
                if (force === void 0) { force = false; }
                if (dirty === void 0) { dirty = null; }
                if (componentNames === void 0) { componentNames = []; }
                if (!this.Editable) {
                    if (force) {
                        System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                            var $step = 0,
                                $task1, 
                                $jumpFromFinally, 
                                $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                                $returnValue, 
                                $async_e, 
                                $asyncBody = Bridge.fn.bind(this, function () {
                                    try {
                                        for (;;) {
                                            $step = System.Array.min([0,1], $step);
                                            switch ($step) {
                                                case 0: {
                                                    $task1 = this.ListViewSearch.RefershListView();
                                                    $step = 1;
                                                    if ($task1.isCompleted()) {
                                                        continue;
                                                    }
                                                    $task1.continue($asyncBody);
                                                    return;
                                                }
                                                case 1: {
                                                    $task1.getAwaitedResult();
                                                    $tcs.setResult(null);
                                                    return;
                                                }
                                                default: {
                                                    $tcs.setResult(null);
                                                    return;
                                                }
                                            }
                                        }
                                    } catch($async_e1) {
                                        $async_e = System.Exception.create($async_e1);
                                        $tcs.setException($async_e);
                                    }
                                }, arguments);

                            $asyncBody();
                            return $tcs.task;
                        }));
                    }
                } else {
                    this.RowAction$1(function (row) {
                        return !row.EmptyRow;
                    }, function (row) {
                        row.UpdateView(force, dirty, componentNames);
                    });
                }
            },
            ValidateAsync: function () {
                var $step = 0,
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0], $step);
                                switch ($step) {
                                    case 0: {
                                        this.ValidationResult.clear();
                                        $tcs.setResult(this.ValidateRequired$1());
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ValidateRequired$1: function () {
                if (this.Element == null || Core.Extensions.IEnumerableExtensions.Nothing(System.Collections.Generic.KeyValuePair$2(System.String,Core.Extensions.ValidationRule), this.ValidationRules)) {
                    return true;
                }

                if (!this.ValidationRules.containsKey(Core.Extensions.ValidationRule.Required)) {
                    this.Element.removeAttribute(Core.Extensions.ValidationRule.Required);
                    return true;
                }
                var requiredRule = this.ValidationRules.getItem(Core.Extensions.ValidationRule.Required);
                this.Element.setAttribute(Core.Extensions.ValidationRule.Required, System.Boolean.toString((true)));
                if (Core.Extensions.IEnumerableExtensions.HasElement(System.Object, this.RowData.Data)) {
                    this.ValidationResult.remove(Core.Extensions.ValidationRule.Required);
                    return true;
                } else {
                    System.Collections.Generic.CollectionExtensions.TryAdd(System.String, System.String, this.ValidationResult, Core.Extensions.ValidationRule.Required, System.String.format(requiredRule.Message, Core.Components.LangSelect.Get(this.GuiInfo.Label), this.Entity));
                    return false;
                }
            },
            CopySelected: function (ev) {
                Core.Components.ListView._originRows = this.GetSelectedRows();
                Core.Components.ListView._copiedRows = Core.Extensions.ReflectionExt.CopyRowWithoutId(System.Object, Core.Components.ListView._originRows);
                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = Core.Components.Extensions.ComponentExt.DispatchCustomEventAsync(this, this.GuiInfo.Events, Core.Enums.CustomEventType.AfterCopied, [Core.Components.ListView._originRows, Core.Components.ListView._copiedRows]);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            SecurityRows: function (arg) {
                var $t, $t1, $t2;
                var selectedRowIds = System.Linq.Enumerable.from(this.GetSelectedRows(), System.Object).where(function (x) {
                        return System.Nullable.eq(Bridge.unbox(x[Core.Components.ListView.IsOwner]), true);
                    }).select(function (x) {
                    return System.Nullable.getValue(Bridge.cast(Bridge.unbox(x[Core.Components.BaseComponent.IdField], System.Int32), System.Int32));
                }).ToArray(System.Int32);
                var security = ($t = new Core.Components.SecurityBL(), $t.Entity = ($t1 = new Core.ViewModels.SecurityVM(), $t1.RecordIds = selectedRowIds, $t1.EntityId = ($t2 = this.GuiInfo.ReferenceId, $t2 != null ? $t2 : 0), $t1), $t.ParentElement = this.TabEditor.Element, $t);
                this.TabEditor.AddChild(security);
            },
            CanDo: function (gridPolicies, permissionPredicate) {
                var featurePolicy = System.Linq.Enumerable.from(this.EditForm.Feature.FeaturePolicy, Core.Models.FeaturePolicy).where(function (x) {
                        return x.EntityId == null;
                    }).any(permissionPredicate);
                if (!featurePolicy) {
                    return false;
                }
                var gridPolicy = System.Linq.Enumerable.from(gridPolicies, Core.Models.FeaturePolicy).any();
                if (!gridPolicy) {
                    return true;
                }
                return System.Linq.Enumerable.from(gridPolicies, Core.Models.FeaturePolicy).any(permissionPredicate);
            },
            TbodyContextMenu: function (e) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    selectedRows, 
                    ctxMenu, 
                    feature, 
                    gridPolicies, 
                    canWrite, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        Core.Components.Forms.ContextMenu.Instance.MenuItems.clear();
                                        !Bridge.staticEquals(this.BodyContextMenuShow, null) ? this.BodyContextMenuShow() : null;
                                        if (this.Disabled) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        this.SetSelected(e);
                                        selectedRows = this.GetSelectedRows();
                                        if (Core.Extensions.IEnumerableExtensions.Nothing(System.Object, selectedRows)) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        ctxMenu = Core.Components.Forms.ContextMenu.Instance;
                                        feature = this.EditForm.Feature;
                                        gridPolicies = this.EditForm.GetElementPolicies(this.GuiInfo.Id, Core.Enums.EntityEnum.Component);
                                        canWrite = this.GuiInfo.CanAdd && this.CanDo(gridPolicies, function (x) {
                                            return x.CanWrite;
                                        });
                                        this.RenderCopyPasteMenu(canWrite);
                                        this.RenderEditMenu(selectedRows, gridPolicies, canWrite);
                                        $task1 = this.RenderShareMenu(selectedRows, gridPolicies);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        ctxMenu.Top = Core.Extensions.EventExt.Top(e);
                                        ctxMenu.Left = Core.Extensions.EventExt.Left(e);
                                        ctxMenu.Render();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            SetSelected: function (e) {
                var target = Bridge.as(e.target, HTMLElement);
                var rawRow = Core.Extensions.HtmlElementExtension.Closest(target, System.Enum.toString(Core.MVVM.ElementType, Core.MVVM.ElementType.tr));
                var currentRow = Bridge.as(Core.Components.Extensions.ComponentExt.FirstOrDefault(this, function (x) {
                    return Bridge.referenceEquals(x.Element, rawRow);
                }), Core.Components.ListViewItem);
                if (!currentRow.Selected && !(Bridge.is(currentRow, Core.Components.GroupViewItem))) {
                    this.ClearSelected();
                    currentRow.Selected = true;
                    this.SelectedIndex = currentRow.ListViewSection.Children.indexOf(currentRow);
                }
            },
            RenderCopyPasteMenu: function (canWrite) {
                var $t;
                Core.Components.Forms.ContextMenu.Instance.MenuItems.add(($t = new Core.Components.Forms.ContextMenuItem(), $t.Icon = "fa fa-copy", $t.Text = "Copy", $t.Click = Bridge.fn.cacheBind(this, this.CopySelected), $t));
                if (canWrite && Core.Extensions.IEnumerableExtensions.HasElement(System.Object, Core.Components.ListView._copiedRows)) {
                    Core.Components.Forms.ContextMenu.Instance.MenuItems.add(($t = new Core.Components.Forms.ContextMenuItem(), $t.Icon = "fa fa-paste", $t.Text = "Paste", $t.Click = Bridge.fn.cacheBind(this, this.PasteSelected), $t));
                }
            },
            RenderEditMenu: function (selectedRows, gridPolicies, canWrite) {
                var $t;
                var lockDeleteDate = System.Linq.Enumerable.from(gridPolicies, Core.Models.FeaturePolicy).any() ? System.Linq.Enumerable.from(gridPolicies, Core.Models.FeaturePolicy).nullableMax(function (x) {
                        return x.LockDeleteAfterCreated;
                    }) : System.Linq.Enumerable.from(this.EditForm.Feature.FeaturePolicy, Core.Models.FeaturePolicy).any() ? System.Linq.Enumerable.from(this.EditForm.Feature.FeaturePolicy, Core.Models.FeaturePolicy).nullableMax(function (x) {
                        return x.LockDeleteAfterCreated;
                    }) : 0;
                var shouldLockDelete = System.Nullable.gt(lockDeleteDate, 0) && System.Linq.Enumerable.from(selectedRows, System.Object).any(function (x) {
                        return System.Nullable.gt(Core.Extensions.DateTimeExt.GetBusinessDays(Bridge.unbox(x.InsertedDate)), lockDeleteDate);
                    });
                if (canWrite) {
                    Core.Components.Forms.ContextMenu.Instance.MenuItems.add(($t = new Core.Components.Forms.ContextMenuItem(), $t.Icon = "fa fa-clone", $t.Text = "Copy & D\u00e1n", $t.Click = Bridge.fn.cacheBind(this, this.DuplicateSelected), $t));
                }
                var canDeactivate = this.CanDo(gridPolicies, function (x) {
                    return x.CanDeactivate;
                });
                if (canDeactivate) {
                    Core.Components.Forms.ContextMenu.Instance.MenuItems.add(($t = new Core.Components.Forms.ContextMenuItem(), $t.Icon = "mif-unlink", $t.Text = "H\u1ee7y (kh\u00f4ng x\u00f3a)", $t.Click = Bridge.fn.cacheBind(this, this.DeactivateSelected), $t));
                }
                var canDelete = this.CanDo(gridPolicies, function (x) {
                    return x.CanDelete;
                });
                if (canDelete && !shouldLockDelete) {
                    Core.Components.Forms.ContextMenu.Instance.MenuItems.add(($t = new Core.Components.Forms.ContextMenuItem(), $t.Icon = "fa fa-trash", $t.Text = "X\u00f3a d\u1eef li\u1ec7u", $t.Click = Bridge.fn.cacheBind(this, this.HardDeleteSelected), $t));
                }
            },
            RenderShareMenu: function (selectedRows, gridPolicies) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    noPolicyRows, 
                    noPolicyRowIds, 
                    rowPolicy, 
                    ownedRecords, 
                    canShare, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        noPolicyRows = System.Linq.Enumerable.from(selectedRows, System.Object).where(Bridge.fn.bind(this, function (x) {
                                            var hasPolicy = System.Linq.Enumerable.from(this.RecordPolicy, Core.Models.FeaturePolicy).any(Bridge.fn.bind(this, function (f) {
                                                return System.Nullable.eq(f.EntityId, this.GuiInfo.ReferenceId) && f.RecordId === Bridge.unbox(x[Core.Components.BaseComponent.IdField]);
                                            }));
                                            var loaded = Bridge.unbox(x[Core.Components.ListView.PermissionLoaded]);
                                            return !(hasPolicy || System.Nullable.eq(loaded, true));
                                        }));
                                        noPolicyRowIds = noPolicyRows.select(function (x) {
                                            return Bridge.unbox(x[Core.Components.BaseComponent.IdField]);
                                        }).ToArray(System.Int32);
                                        $task1 = Core.Components.Extensions.ComponentExt.LoadRecordPolicy(noPolicyRowIds, System.Nullable.getValue(this.GuiInfo.ReferenceId));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        rowPolicy = $taskResult1;
                                        rowPolicy.ForEach(Bridge.fn.cacheBind(this.RecordPolicy, this.RecordPolicy.add));
                                        noPolicyRows.forEach(function (x) {
                                            x[Core.Components.ListView.PermissionLoaded] = Bridge.box(true, System.Boolean, System.Boolean.toString);
                                        });
                                        ownedRecords = System.Linq.Enumerable.from(selectedRows, System.Object).where(function (x) {
                                            var ownerId = Bridge.unbox(x[Core.Components.ListView.OwnerId]);
                                            var createdId = Bridge.unbox(x[Core.Components.ListView.InsertedBy]);
                                            var isOwner = Core.Clients.Client.SystemRole || ownerId == null && System.Nullable.eq(createdId, Core.Clients.Client.Token.UserId) || System.Nullable.eq(ownerId, Core.Clients.Client.Token.UserId);
                                            x[Core.Components.ListView.IsOwner] = Bridge.box(isOwner || System.Linq.Enumerable.from(rowPolicy, Core.Models.FeaturePolicy).any(function (policy) {
                                                return policy.CanShare && Bridge.unbox(x[Core.Components.BaseComponent.IdField]) === policy.RecordId;
                                            }), System.Boolean, System.Boolean.toString);
                                            return isOwner;
                                        }).select(function (x) {
                                            return Bridge.unbox(x[Core.Components.BaseComponent.IdField]);
                                        }).toList(System.Int32);
                                        canShare = this.CanDo(gridPolicies, function (x) {
                                            return x.CanShare;
                                        }) && System.Linq.Enumerable.from(ownedRecords, System.Int32).any();
                                        if (!canShare) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        Core.Components.Forms.ContextMenu.Instance.MenuItems.add(($t = new Core.Components.Forms.ContextMenuItem(), $t.Icon = "mif-security", $t.Text = "B\u1ea3o m\u1eadt & Ph\u00e2n quy\u1ec1n", $t.Click = Bridge.fn.cacheBind(this, this.SecurityRows), $t));
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            MoveDown: function () {
                this.ClearSelected();
                if (this.SelectedIndex >= ((this.RowData.Data.Count - 1) | 0)) {
                    this.SelectedIndex = 0;
                } else if (this.SelectedIndex < ((this.RowData.Data.Count - 1) | 0)) {
                    this.SelectedIndex = (this.SelectedIndex + 1) | 0;
                }
                this.RowAction$2(this.SelectedIndex, function (x) {
                    x.Selected = true;
                });
            },
            ClearSelected: function () {
                this.RowAction(function (x) {
                    x.Selected = false;
                });
            },
            RowAction$2: function (index, action) {
                if (index < 0 || Bridge.staticEquals(action, null) || index >= System.Linq.Enumerable.from(this.AllListViewItem, Core.Components.ListViewItem).count()) {
                    return;
                }

                var row = System.Linq.Enumerable.from(this.AllListViewItem, Core.Components.ListViewItem).elementAt(index);
                action(row);
            },
            RowAction: function (action) {
                var $t;
                ($t = Core.Components.ListViewItem, System.Linq.Enumerable.from(this.AllListViewItem, $t).toList($t)).ForEach(action);
            },
            RowAction$1: function (predicate, action) {
                System.Linq.Enumerable.from(this.AllListViewItem, Core.Components.ListViewItem).where(function (x) {
                        return Bridge.staticEquals(predicate, null) || predicate(x);
                    }).toList(Core.Components.ListViewItem).ForEach(function (x) {
                    action(x);
                });
            },
            MoveUp: function () {
                this.ClearSelected();
                if (this.SelectedIndex <= 0) {
                    this.SelectedIndex = (this.RowData.Data.Count - 1) | 0;
                } else if (this.SelectedIndex > 0) {
                    this.SelectedIndex = (this.SelectedIndex - 1) | 0;
                }
                this.RowAction$2(this.SelectedIndex, function (x) {
                    x.Selected = true;
                });
            },
            IsRowDirty: function (row) {
                return System.Linq.Enumerable.from(this.GetListViewItems(row), Core.Components.ListViewItem).any(function (x) {
                        return x.Dirty;
                    });
            },
            GetListViewItems: function (row) {
                return System.Linq.Enumerable.from(this.AllListViewItem, Core.Components.ListViewItem).where(function (x) {
                        return Bridge.referenceEquals(x.Entity, row);
                    });
            },
            BulkUpdate: function (updateView) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    updatedRows, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2], $step);
                                switch ($step) {
                                    case 0: {
                                        if (updateView === void 0) { updateView = true; }
                                        if (!this.Dirty) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        $task1 = new Core.Clients.Client.$ctor1(this.GuiInfo.RefName).PatchAsync$1(System.Object, this.PatchModel);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        updatedRows = $taskResult1;
                                        Core.Extensions.ReflectionExt.CopyPropFrom$1(this.UpdatedRows, updatedRows);
                                        this.UpdatedRows.ForEach(function (x) {
                                            Core.Extensions.BridgeExt.SetComplexPropValue(x, "InsertedDate", Bridge.box(System.Convert.toDateTime(Core.Extensions.Utils.GetComplexPropValue(x, "InsertedDate")), System.DateTime, System.DateTime.format));
                                        });
                                        $task2 = this.LoadMasterData(updatedRows);
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $task2.getAwaitedResult();
                                        if (updateView) {
                                            this.UpdateView();
                                        }
                                        this.Dirty = false;
                                        $tcs.setResult(updatedRows);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            BuildTextHistory: function (builder, visited) {
                var $t, $t1;
                if (visited === void 0) { visited = null; }
                if (builder == null) {
                    builder = new System.Text.StringBuilder();
                }
                if (visited == null) {
                    visited = new (System.Collections.Generic.HashSet$1(System.Object)).ctor();
                }
                if (visited.contains(this)) {
                    return builder;
                }
                if (!this.Editable) {
                    return builder;
                }
                visited.add(this);
                var dirty = ($t = Core.Components.ListViewItem, System.Linq.Enumerable.from(Core.Extensions.BridgeExt.DistinctBy(Core.Components.ListViewItem, System.Object, System.Linq.Enumerable.from(this.AllListViewItem, Core.Components.ListViewItem).where(function (x) {
                            return x.Dirty;
                        }), function (x) {
                        return x.Entity;
                    }), $t).ToArray($t));
                if (Core.Extensions.IEnumerableExtensions.HasElement(Core.Components.ListViewItem, dirty)) {
                    var label = this.GuiInfo.Label;
                    if (Core.Extensions.StringExt.IsNullOrWhiteSpace(this.GuiInfo.Label)) {
                        var section = Core.Components.Extensions.ComponentExt.FindClosest$1(Core.Components.Section, this, function (x) {
                            var $t1;
                            return (($t1 = x.ComponentGroup) != null ? $t1.Label : null) != null;
                        });
                        label = section != null && ($t1 = section.ComponentGroup) != null ? $t1.Label : null;
                    }
                    builder.append(System.String.format("{0}:{1}", Core.Components.LangSelect.Get(label), Core.Extensions.Utils.NewLine));
                    dirty.forEach(function (x) {
                            x.BuildTextHistory(builder);
                        });
                }
                return builder;
            }
        }
    });

    Bridge.define("$AnonymousType$5", $asm, {
    $kind: "anonymous",
    ctors: {
        ctor: function (header, data) {
            this.Header = header;
            this.Data = data;
        }
    },
    methods: {
        equals: function (o) {
            if (!Bridge.is(o, $asm.$AnonymousType$5)) {
                return false;
            }
            return Bridge.equals(this.Header, o.Header) && Bridge.equals(this.Data, o.Data);
        },
        getHashCode: function () {
            var h = Bridge.addHash([7550196190, this.Header, this.Data]);
            return h;
        },
        toJSON: function () {
            return {
                Header : this.Header,
                Data : this.Data
            };
        }
    },
    statics : {
        methods: {
            $metadata : function () { return {"m":[{"a":2,"n":"Data","t":16,"rt":System.Threading.Tasks.Task$1(Core.Models.OdataResult$1(System.Object)),"g":{"a":2,"n":"get_Data","t":8,"rt":System.Threading.Tasks.Task$1(Core.Models.OdataResult$1(System.Object)),"fg":"Data"},"fn":"Data"},{"a":2,"n":"Header","t":16,"rt":Core.Models.GridPolicy,"g":{"a":2,"n":"get_Header","t":8,"rt":Core.Models.GridPolicy,"fg":"Header"},"fn":"Header"}]}; }
        }
    }
});

    Bridge.define("Core.Components.Datepicker", {
        inherits: [Core.Components.EditableComponent],
        statics: {
            fields: {
                HHmmFormat: null,
                formats: null
            },
            ctors: {
                init: function () {
                    this.HHmmFormat = "00";
                    this.formats = System.Array.init([
                        "dd/MM/yyyy - HH:mm", 
                        "dd/MM/yyyy - HH:m", 
                        "dd/MM/yyyy - h:mm", 
                        "dd/MM/yyyy - HH:", 
                        "dd/MM/yyyy - h:", 
                        "dd/MM/yyyy - h:m", 
                        "dd/MM/yyyy - HH", 
                        "dd/MM/yyyy - h", 
                        "dd/MM/yyyy"
                    ], System.String);
                }
            },
            methods: {
                TryParseDateTime: function (value) {
                    var dateTime = { v : System.DateTime.getNow() };
                    var parsed = false;
                    var format = null;
                    for (var i = System.Int64(0); i.lt(System.Int64(Core.Components.Datepicker.formats.length)); i = i.inc()) {
                        parsed = System.DateTime.tryParseExact(value, Core.Components.Datepicker.formats[System.Array.index(System.Int64.toNumber(i), Core.Components.Datepicker.formats)], System.Globalization.CultureInfo.invariantCulture, dateTime);
                        if (parsed) {
                            format = Core.Components.Datepicker.formats[System.Array.index(System.Int64.toNumber(i), Core.Components.Datepicker.formats)];
                            break;
                        }
                    }

                    return new (System.ValueTuple$3(System.Boolean,System.DateTime,System.String)).$ctor1(parsed, dateTime.v, format);
                }
            }
        },
        fields: {
            _value: null,
            _nullable: false,
            InitFormat: null,
            _currentFormat: null,
            _calendar: null,
            _waiter: 0,
            show: false,
            _someday: null,
            _hour: null,
            _minute: null,
            _renderAwaiter: 0
        },
        props: {
            Input: null,
            Value: {
                get: function () {
                    return this._value;
                },
                set: function (value) {
                    if (Bridge.equals(this._value, value)) {
                        return;
                    }

                    this._value = value;
                    if (System.Nullable.hasValue(this._value)) {
                        var selectionEnd = this.Input.selectionEnd;
                        this.Input.value = !Bridge.equals(this._value, System.DateTime.getMinValue()) ? System.DateTime.format(System.Nullable.getValue(this._value), this._currentFormat) : "";
                        this.Input.selectionStart = selectionEnd;
                        this.Input.selectionEnd = selectionEnd;
                    } else if (!this._nullable) {
                        this._value = System.DateTime.getNow();
                        this.Input.value = System.DateTime.format(System.Nullable.getValue(this._value), this._currentFormat);
                    } else {
                        this.Input.value = null;
                    }

                    Core.Extensions.BridgeExt.SetComplexPropValue(this.Entity, this.GuiInfo.FieldName, Bridge.box(this._value, System.DateTime, System.Nullable.toStringFn(System.DateTime.format), System.Nullable.getHashCode));
                    this.Dirty = true;
                }
            }
        },
        ctors: {
            init: function () {
                this._someday = System.DateTime.getDefaultValue();
                this.InitFormat = "";
            },
            ctor: function (ui, ele) {
                if (ele === void 0) { ele = null; }

                this.$initialize();
                Core.Components.EditableComponent.ctor.call(this, ui);
                this.GuiInfo = ui || (function () {
                    throw new System.ArgumentNullException.$ctor1("ui");
                })();
                this.InitFormat = System.Nullable.eq(this.GuiInfo.Precision, 7) ? "dd/MM/yyyy - HH:mm" : "dd/MM/yyyy";
                this._currentFormat = this.InitFormat;
                if (ele != null) {
                    var input;
                    if (!(((input = Bridge.as(ele.firstElementChild, HTMLInputElement))) != null)) {
                        input = Bridge.as(Core.MVVM.Html.Take(ele).Input.GetContext(), HTMLInputElement);
                    }
                    this.Input = input;
                }
            }
        },
        methods: {
            Render: function () {
                var $t, $t1, $t2, $t3;
                this.SetDefaultVal();
                var fieldValue = Core.Extensions.Utils.GetComplexPropValue(this.Entity, this.GuiInfo.FieldName);
                Core.Extensions.BridgeExt.SetComplexPropValue(this.Entity, this.GuiInfo.FieldName, Bridge.box(this._value, System.DateTime, System.Nullable.toStringFn(System.DateTime.format), System.Nullable.getHashCode));
                var parsedVal = { v : System.DateTime.getMinValue() };
                var strVal;
                var parsed = ((strVal = Bridge.as(fieldValue, System.String))) != null && Core.Extensions.StringExt.HasAnyChar(strVal) && System.DateTime.tryParse(strVal, null, parsedVal);
                this._value = parsed ? parsedVal.v : Bridge.unbox(fieldValue);
                this._nullable = this.IsNullable(System.DateTimeOffset) || this.IsNullable(System.DateTime);
                Core.Extensions.BridgeExt.SetComplexPropValue(this.Entity, this.GuiInfo.FieldName, Bridge.box(this._value, System.DateTime, System.Nullable.toStringFn(System.DateTime.format), System.Nullable.getHashCode));
                var str = System.Nullable.hasValue(this._value) && !Bridge.equals(this._value, System.DateTime.getMinValue()) ? System.DateTime.format(System.Nullable.getValue(this._value), this.InitFormat) : "";
                this.OriginalText = str;
                this.OldValue = !Bridge.equals(this._value, System.DateTime.getMinValue()) ? !Bridge.equals(this._value, null) ? Core.Extensions.DateTimeExt.DateConverter(System.DateTime.format(System.Nullable.getValue(this._value))) : null : "";
                Core.MVVM.Html.Take(this.ParentElement);
                if (this.Input == null) {
                    Core.Components.Renderer.TabIndex(Core.Components.Renderer.ClassName(Core.MVVM.Html.Instance.Div, "datetime-picker"), -1).Input.Render();
                    this.Element = ($t = Bridge.as(Core.MVVM.Html.Context, HTMLInputElement), this.Input = $t, $t);
                } else {
                    Core.MVVM.Html.Take(this.Input);
                    this.Element = this.Input;
                }
                Core.Components.Renderer.PlaceHolder(Core.MVVM.Html.Instance.Value(str).Event("focus", Bridge.fn.bind(this, function () {
                    this.RenderCalendar();
                })).Event("change", Bridge.fn.bind(this, function () {
                    this.ParseDate();
                })), ($t1 = this.GuiInfo.PlainText, $t1 != null ? $t1 : ($t2 = this.GuiInfo.Label, $t2 != null ? $t2 : "")));
                this.Input.autocomplete = "off";
                this.Input.name = this.GuiInfo.FieldName;
                Core.Components.Renderer.ClassName(Core.Components.Renderer.TabIndex(Core.Components.Renderer.ClassName(Core.MVVM.Html.Instance.End.Div, "btn-group").Button, -1).Span, "icon mif-calendar").Event("click", Bridge.fn.bind(this, function () {
                    if (this.Input.disabled) {
                        return;
                    }

                    if (this.show) {
                        this.CloseCalendar();
                    } else {
                        this.RenderCalendar();
                    }
                }));
                !Bridge.staticEquals(($t3 = this.DOMContentLoaded), null) ? $t3() : null;
            },
            IsNullable: function (T) {
                return Core.Extensions.Utils.IsNullable(System.DateTime, Bridge.getType(this.Entity), this.GuiInfo.FieldName, this.Entity);
            },
            ParseDate: function () {
                var parsed = { };
                var datetime = { };
                var format = { };
                Bridge.Deconstruct(Core.Components.Datepicker.TryParseDateTime(this.Input.value).$clone(), parsed, datetime, format);
                if (!parsed.v) {
                    this.Input.value = "";
                    return;
                } else {
                    this.Value = datetime.v;
                }
            },
            CloseCalendar: function () {
                this._waiter = window.setTimeout(Bridge.fn.bind(this, function () {
                    this.show = false;
                    if (this._calendar != null) {
                        this._calendar.style.display = "none";
                    }
                    this.Input.value = !Bridge.equals(this._value, null) ? System.DateTime.format(System.Nullable.getValue(this._value), this.InitFormat) : null;
                    this._hour = null;
                    this._minute = null;
                }), 250);
            },
            RenderCalendar: function (someday) {
                if (someday === void 0) { someday = null; }
                window.clearTimeout(this._renderAwaiter);
                this._renderAwaiter = window.setTimeout(Bridge.fn.bind(this, function () {
                    this.RenderCalendarTask(someday);
                }), 100);
            },
            RenderCalendarTask: function (someday) {
                var $t, $t1, $t2;
                if (someday === void 0) { someday = null; }
                if (this.Disabled) {
                    return;
                }

                var _someday = ($t = someday, $t != null ? $t : ($t1 = this._value, $t1 != null ? $t1 : System.DateTime.getNow()));
                if (Bridge.equals(this._value, null)) {
                    _someday = System.DateTime.addHours(System.DateTime.getDate(_someday), 12);
                }

                this.show = true;
                window.clearTimeout(this._waiter);
                if (this._calendar != null) {
                    this._calendar.innerHTML = null;
                    this._calendar.style.display = "";
                } else {
                    Core.Components.Renderer.TabIndex(Core.Components.Renderer.ClassName(Core.MVVM.Html.Take(this.Element.parentElement).Div, "calendar compact open open-up"), -1).Trigger("focus");
                    this._calendar = Core.MVVM.Html.Context;
                    this.Element.parentElement.addEventListener("focusout", Bridge.fn.cacheBind(this, this.CloseCalendar));
                }
                Core.Components.Renderer.ClassName(Core.Components.Renderer.IText(Core.Components.Renderer.ClassName(Core.Components.Renderer.IText(Core.Components.Renderer.ClassName(Core.Components.Renderer.IText(Core.Components.Renderer.ClassName(Core.Components.Renderer.IText(Core.Components.Renderer.ClassName(Core.Components.Renderer.IText(Core.Components.Renderer.ClassName(Core.Components.Renderer.IText(Core.Components.Renderer.ClassName(Core.Components.Renderer.IText(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.MVVM.Html.Take(this._calendar).Div, "calendar-header").Div, "header-year").Text(Bridge.toString(System.DateTime.getYear(_someday))).End.Div, "header-day").Text(System.String.format("{0}, {1:00} {2:00}", Bridge.box(System.DateTime.getDayOfWeek(_someday), System.DayOfWeek, System.Enum.toStringFn(System.DayOfWeek)), Bridge.box(System.DateTime.getMonth(_someday), System.Int32), Bridge.box(System.DateTime.getDay(_someday), System.Int32))).End.End.Div, "calendar-content").Div, "calendar-toolbar").Span, "prev-month").Event("click", Bridge.fn.bind(this, function () {
                    _someday = System.DateTime.addMonths(_someday, -1);
                    this.RenderCalendar(_someday);
                })).Span, "default-icon-chevron-left").End.End.Span, "curr-month").Text(System.String.format("{0:00}", [Bridge.box(System.DateTime.getMonth(_someday), System.Int32)])).End.Span, "next-month").Event("click", Bridge.fn.bind(this, function () {
                    _someday = System.DateTime.addMonths(_someday, 1);
                    this.RenderCalendar(_someday);
                })).Span, "default-icon-chevron-right").End.End.Span, "prev-year").Event("click", Bridge.fn.bind(this, function () {
                    _someday = System.DateTime.addYears(_someday, -1);
                    this.RenderCalendar(_someday);
                })).Span, "default-icon-chevron-left").End.End.Span, "curr-year").Text(Bridge.toString(System.DateTime.getYear(_someday))).End.Span, "next-year").Event("click", Bridge.fn.bind(this, function () {
                    _someday = System.DateTime.addYears(_someday, 1);
                    this.RenderCalendar(_someday);
                })).Span, "default-icon-chevron-right").End.End.End.Div, "week-days").Span, "day"), "Su").End.Span, "day"), "Mo").End.Span, "day"), "Tu").End.Span, "day"), "We").End.Span, "day"), "Th").End.Span, "day"), "Fr").End.Span, "day"), "Sa").End.End.Div, "days");

                var now = System.DateTime.getNow();
                var firstDayOfMonth = System.DateTime.create(System.DateTime.getYear(_someday), System.DateTime.getMonth(_someday), 1);
                var lastDayOfMonth = System.DateTime.addDays(System.DateTime.addMonths(firstDayOfMonth, 1), -1);
                var firstOutsideDayOfMonth = System.DateTime.addDays(firstDayOfMonth, ((-System.DateTime.getDayOfWeek(firstDayOfMonth)) | 0));
                var lastOutsideDayOfMonth = System.DateTime.addDays(lastDayOfMonth, ((6 - System.DateTime.getDayOfWeek(lastDayOfMonth)) | 0));
                if (((Bridge.Int.div((System.DateTime.subdd(lastOutsideDayOfMonth, firstOutsideDayOfMonth)).getDays(), 7)) | 0) < 5) {
                    lastOutsideDayOfMonth = System.DateTime.addDays(lastOutsideDayOfMonth, 7);
                }
                var runner = firstOutsideDayOfMonth;
                while (System.DateTime.lte(runner, lastOutsideDayOfMonth)) {
                    $t2 = Bridge.getEnumerator(System.Enum.getValues(System.DayOfWeek));
                    try {
                        while ($t2.moveNext()) {
                            var day = $t2.Current;
                            if (System.DateTime.getDayOfWeek(runner) === System.DayOfWeek.Sunday) {
                                Core.Components.Renderer.ClassName(Core.MVVM.Html.Instance.Div, "days-row");
                            }
                            Core.Components.Renderer.ClassName(Core.MVVM.Html.Instance.Div, "day").Text(Bridge.toString(System.DateTime.getDay(runner))).Event$2(System.DateTime, "click", Bridge.fn.cacheBind(this, this.SetSelectedDay), runner);
                            if (System.DateTime.getDay(runner) === System.DateTime.getDay(now) && System.DateTime.getMonth(runner) === System.DateTime.getMonth(now) && System.DateTime.getYear(now) === System.DateTime.getYear(_someday)) {
                                Core.Components.Renderer.ClassName(Core.MVVM.Html.Instance, "showed today");
                            }

                            if (System.Nullable.hasValue(this._value) && System.DateTime.getDay(runner) === System.DateTime.getDay(System.Nullable.getValue(this._value)) && System.DateTime.getMonth(runner) === System.DateTime.getMonth(System.Nullable.getValue(this._value)) && System.DateTime.getYear(runner) === System.DateTime.getYear(System.Nullable.getValue(this._value))) {
                                Core.Components.Renderer.ClassName(Core.MVVM.Html.Instance, "selected");
                            }

                            if (System.DateTime.lt(runner, firstDayOfMonth) || System.DateTime.gt(runner, lastDayOfMonth)) {
                                Core.Components.Renderer.ClassName(Core.MVVM.Html.Instance, "outside");
                            }

                            Core.MVVM.Html.Instance.End.Render();
                            if (System.DateTime.getDayOfWeek(runner) === System.DayOfWeek.Saturday) {
                                Core.MVVM.Html.Instance.End.Render();
                            }
                            runner = System.DateTime.addDays(runner, 1);
                        }
                    } finally {
                        if (Bridge.is($t2, System.IDisposable)) {
                            $t2.System$IDisposable$Dispose();
                        }
                    }
                }
                if (System.Nullable.eq(this.GuiInfo.Precision, 7)) {
                    Core.Components.Renderer.Icon(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.MVVM.Html.Instance.EndOf$1(".calendar-content").Div, "time-picker").Div, "hour"), "fa fa-chevron-up").Event("click", Bridge.fn.bind(this, function () {
                        this.IncreaseTime(System.Int64(1));
                    })).End.Input.Value(System.Int32.format(System.DateTime.getHour(_someday), Core.Components.Datepicker.HHmmFormat)).Event("focus", Bridge.fn.bind(this, function () {
                        window.clearTimeout(this._waiter);
                    })).Event$1("input", Bridge.fn.cacheBind(this, this.ChangeHour)).Event$1("keydown", Bridge.fn.cacheBind(this, this.ChangeHourHotKey));
                    this._hour = Bridge.as(Core.MVVM.Html.Context, HTMLInputElement);
                    Core.MVVM.Html.Instance.End.Render();
                    Core.Components.Renderer.Icon(Core.Components.Renderer.ClassName(Core.Components.Renderer.Icon(Core.MVVM.Html.Instance, "fa fa-chevron-down").Event("mousedown", Bridge.fn.bind(this, function () {
                        this.IncreaseTime(System.Int64(-1));
                    })).EndOf$1(".hour").Div, "minute"), "fa fa-chevron-up").Event("click", Bridge.fn.bind(this, function () {
                        this.IncreaseTime(System.Int64(10), true);
                    })).End.Input.Value(System.Int32.format(System.DateTime.getMinute(_someday), Core.Components.Datepicker.HHmmFormat)).Event("focus", Bridge.fn.bind(this, function () {
                        window.clearTimeout(this._waiter);
                    })).Event$1("input", Bridge.fn.cacheBind(this, this.ChangeMinute)).Event$1("keydown", Bridge.fn.cacheBind(this, this.ChangeMinuteHotKey));
                    this._minute = Bridge.as(Core.MVVM.Html.Context, HTMLInputElement);
                    Core.Components.Renderer.Icon(Core.MVVM.Html.Instance.End, "fa fa-chevron-down").Event("mousedown", Bridge.fn.bind(this, function () {
                        this.IncreaseTime(System.Int64(-10), true);
                    })).EndOf$1(".minute");
                }
                Core.Components.Extensions.ComponentExt.AlterPosition(this._calendar, this.Element);
            },
            ChangeMinuteHotKey: function (e) {
                var keyCode = Core.Extensions.EventExt.KeyCode(e);
                if (keyCode === 38 || keyCode === 40) {
                    this.IncreaseTime(System.Int64(keyCode === 38 ? 1 : -1), true);
                }
            },
            ChangeHourHotKey: function (e) {
                var keyCode = Core.Extensions.EventExt.KeyCode(e);
                if (keyCode === 38 || keyCode === 40) {
                    this.IncreaseTime(System.Int64(keyCode === 38 ? 1 : -1));
                }
            },
            ChangeMinute: function (e) {
                if (Bridge.equals(this._value, null)) {
                    this._value = this._someday;
                }
                var newMinute = { };

                var parsed = System.Int64.tryParse(this._minute.value, newMinute);
                if (!parsed || newMinute.v.lt(System.Int64(0)) || newMinute.v.gt(System.Int64(59))) {
                    return;
                }

                this._someday = System.DateTime.addMinutes(System.DateTime.addMinutes(this._someday, ((-System.DateTime.getMinute(this._someday)) | 0)), System.Int64.toNumber(newMinute.v));
                this._value = this._someday;
                this.TriggerUserChange(System.Nullable.getValue(this._value));
            },
            ChangeHour: function (e) {
                var newHour = { };
                var parsed = System.Int64.tryParse(this._hour.value, newHour);
                if (!parsed || newHour.v.lt(System.Int64(0)) || newHour.v.gt(System.Int64(23))) {
                    return;
                }

                this._someday = System.DateTime.addHours(System.DateTime.addHours(this._someday, ((-System.DateTime.getHour(this._someday)) | 0)), System.Int64.toNumber(newHour.v));
                var innerTime = this._someday;
                this.TriggerUserChange(innerTime);
            },
            IncreaseTime: function (value, minute) {
                var $t;
                if (minute === void 0) { minute = false; }
                window.clearTimeout(this._waiter);
                var innerTime = ($t = this._value, $t != null ? $t : this._someday);
                if (!minute) {
                    innerTime = System.DateTime.addHours(innerTime, System.Int64.toNumber(value));
                    this._hour.value = System.Int32.format(System.DateTime.getHour(innerTime), Core.Components.Datepicker.HHmmFormat);
                } else {
                    innerTime = System.DateTime.addMinutes(innerTime, System.Int64.toNumber(value));
                    this._minute.value = System.Int32.format(System.DateTime.getMinute(innerTime), Core.Components.Datepicker.HHmmFormat);
                }
                this.TriggerUserChange(innerTime);
            },
            SetSelectedDay: function (selected) {
                if (!Bridge.equals(this._value, null)) {
                    selected = System.DateTime.addMinutes(System.DateTime.addHours(System.DateTime.getDate(selected), System.DateTime.getHour(System.Nullable.getValue(this._value))), System.DateTime.getMinute(System.Nullable.getValue(this._value)));
                } else {
                    selected = System.DateTime.addMinutes(System.DateTime.addHours(System.DateTime.getDate(selected), System.DateTime.getHour(this._someday)), System.DateTime.getMinute(this._someday));
                }
                this.TriggerUserChange(selected);
            },
            TriggerUserChange: function (selected) {
                var $t;
                var oldVal = this._value;
                this.Value = selected;
                if (!Bridge.staticEquals(this.UserInput, null)) {
                    this.UserInput(($t = new Core.MVVM.ObservableArgs(), $t.NewData = Bridge.box(this._value, System.DateTime, System.Nullable.toStringFn(System.DateTime.format), System.Nullable.getHashCode), $t.OldData = Bridge.box(oldVal, System.DateTime, System.Nullable.toStringFn(System.DateTime.format), System.Nullable.getHashCode), $t.EvType = "change", $t));
                }
                this.PopulateFields();
                this.CascadeField();
                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = Core.Components.Extensions.ComponentExt.DispatchEventToHandlerAsync(this, this.GuiInfo.Events, "change", [this.Entity]);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            UpdateView: function (force, setDirty, componentNames) {
                var $t, $t1;
                if (force === void 0) { force = false; }
                if (setDirty === void 0) { setDirty = null; }
                if (componentNames === void 0) { componentNames = []; }
                var value = ($t = this.Entity) != null ? Core.Extensions.Utils.GetComplexPropValue($t, this.GuiInfo.FieldName) : null;
                var strVal;
                if (((strVal = Bridge.as(value, System.String))) != null) {
                    var dateVal = { };
                    var parsed = System.DateTime.tryParse(strVal, null, dateVal);
                    if (parsed) {
                        this.Value = dateVal.v;
                    }
                } else {
                    this.Value = Bridge.cast(Bridge.unbox((($t1 = this.Entity) != null ? Core.Extensions.Utils.GetComplexPropValue($t1, this.GuiInfo.FieldName) : null), System.DateTime), System.DateTime, true);
                }
            },
            ValidateAsync: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (Core.Extensions.IEnumerableExtensions.Nothing(System.Collections.Generic.KeyValuePair$2(System.String,Core.Extensions.ValidationRule), this.ValidationRules)) {
                                            $tcs.setResult(true);
                                            return;
                                        }
                                        $task1 = Core.Components.EditableComponent.prototype.ValidateAsync.call(this);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        this.Validate(System.Nullable$1(System.DateTime), System.Nullable$1(System.DateTime), Core.Extensions.ValidationRule.GreaterThan, this._value, function (value, ruleValue) {
                                            return Bridge.equals(ruleValue, null) || !Bridge.equals(value, null) && System.DateTime.gt(value, ruleValue);
                                        });
                                        this.Validate(System.Nullable$1(System.DateTime), System.Nullable$1(System.DateTime), Core.Extensions.ValidationRule.LessThan, this._value, function (value, ruleValue) {
                                            return Bridge.equals(ruleValue, null) || !Bridge.equals(value, null) && System.DateTime.lt(value, ruleValue);
                                        });
                                        this.Validate(System.Nullable$1(System.DateTime), System.Nullable$1(System.DateTime), Core.Extensions.ValidationRule.GreaterThanOrEqual, this._value, function (value, ruleValue) {
                                            return Bridge.equals(ruleValue, null) || !Bridge.equals(value, null) && System.DateTime.gte(value, ruleValue);
                                        });
                                        this.Validate(System.Nullable$1(System.DateTime), System.Nullable$1(System.DateTime), Core.Extensions.ValidationRule.LessThanOrEqual, this._value, function (value, ruleValue) {
                                            return Bridge.equals(ruleValue, null) || !Bridge.equals(value, null) && System.DateTime.lte(value, ruleValue);
                                        });
                                        this.Validate(System.Nullable$1(System.DateTime), System.Nullable$1(System.DateTime), Core.Extensions.ValidationRule.Equal, this._value, function (value, ruleValue) {
                                            return Bridge.equals(value, ruleValue);
                                        });
                                        this.Validate(System.Nullable$1(System.DateTime), System.Nullable$1(System.DateTime), Core.Extensions.ValidationRule.NotEqual, this._value, function (value, ruleValue) {
                                            return !Bridge.equals(value, ruleValue);
                                        });
                                        $tcs.setResult(this.IsValid);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            RemoveDOM: function () {
                if (this.Element != null && this.Element.parentElement != null) {
                    this.Element.parentElement.remove();
                }
            },
            SetDisableUI: function (value) {
                this.Input.readOnly = value;
            }
        }
    });

    Bridge.define("Core.Components.Forms.ContextMenu", {
        inherits: [Core.Components.EditableComponent],
        statics: {
            fields: {
                _active: null,
                _root: null,
                _instance: null
            },
            props: {
                Instance: {
                    get: function () {
                        if (Core.Components.Forms.ContextMenu._instance == null) {
                            Core.Components.Forms.ContextMenu._instance = new Core.Components.Forms.ContextMenu();
                            Core.Components.Forms.ContextMenu._instance.MenuItems.clear();
                        }

                        return Core.Components.Forms.ContextMenu._instance;
                    }
                }
            },
            ctors: {
                init: function () {
                    this._active = "active";
                }
            }
        },
        fields: {
            _selectedItem: null,
            _selectedIndex: 0,
            MenuItems: null
        },
        props: {
            Top: 0,
            Left: 0,
            IsRoot: {
                get: function () {
                    return Bridge.referenceEquals((this._selectedItem != null ? this._selectedItem.parentElement : null), this.Element);
                }
            }
        },
        ctors: {
            init: function () {
                this._selectedIndex = -1;
                this.MenuItems = new (System.Collections.Generic.List$1(Core.Components.Forms.ContextMenuItem)).ctor();
            },
            ctor: function () {
                this.$initialize();
                Core.Components.EditableComponent.ctor.call(this, null);
                this.IsSingleton = true;
            }
        },
        methods: {
            Render: function () {
                if (Core.Components.Forms.ContextMenu._root == null) {
                    Core.Components.Renderer.ClassName(Core.MVVM.Html.Take(document.body).Ul, "context-menu").Event("focusout", Bridge.fn.cacheBind(this, this.Dispose)).Event$1("keydown", Bridge.fn.cacheBind(this, this.HotKeyHandler));
                    Core.Components.Forms.ContextMenu._root = Core.MVVM.Html.Context;
                }
                this.Element = Core.Components.Forms.ContextMenu._root;
                Core.Extensions.HtmlElementExtension.Show(this.Element);
                Core.Components.Renderer.Floating(Core.Components.Renderer.TabIndex(Core.MVVM.Html.Take(Core.Components.Forms.ContextMenu._root).Clear(), -1), this.Top, this.Left);
                this.Element.focus();
                this.ParentElement = this.Element.parentElement;
                this.RenderMenuItems(this.MenuItems);
                this.AlterPosition();
            },
            RenderMenuItems: function (items) {
                for (var i = 0; i < items.Count; i = (i + 1) | 0) {
                    var item = System.Linq.Enumerable.from(items, Core.Components.Forms.ContextMenuItem).elementAt(i);
                    if (item == null) {
                        continue;
                    }

                    Core.MVVM.Html.Instance.Li.Render();
                    if (item.Disabled) {
                        Core.Components.Renderer.Disabled(Core.MVVM.Html.Instance, true);
                    } else {
                        Core.MVVM.Html.Instance.Event$4(Core.Components.Forms.ContextMenuItem, "click", Bridge.fn.cacheBind(this, this.MenuItemClickHandler), item);
                    }

                    Core.Components.Renderer.IText(Core.Components.Renderer.Icon(Core.MVVM.Html.Instance, item.Icon).End.Span, item.Text).End.Render();
                    if (Core.Extensions.IEnumerableExtensions.HasElement(Core.Components.Forms.ContextMenuItem, item.MenuItems)) {
                        Core.MVVM.Html.Instance.Ul.Render();
                        this.RenderMenuItems(item.MenuItems);
                        Core.MVVM.Html.Instance.End.Render();
                    }
                    Core.MVVM.Html.Instance.End.Render();
                }
            },
            MenuItemClickHandler: function (e, item) {
                var $t;
                e.stopPropagation();
                if (Bridge.staticEquals(item.Click, null)) {
                    return;
                }

                item.Click(item.Parameter);
                ($t = this.Element) != null ? $t.dispatchEvent(new Event(System.Enum.toString(System.String, "focusout"))) : null;
            },
            HotKeyHandler: function (e) {
                if (this.Element == null || Core.Extensions.IEnumerableExtensions.Nothing(HTMLElement, this.Element.children)) {
                    return;
                }

                var children = (this._selectedItem != null && this._selectedItem.parentElement != null ? this._selectedItem.parentElement.children : null) || this.Element.children;
                var code = Core.Extensions.EventExt.KeyCode(e);
                switch (code) {
                    case 27: 
                        this.Dispose();
                        break;
                    case 37: 
                        if (this.IsRoot || this._selectedItem == null || this._selectedItem.parentElement == null) {
                            return;
                        }
                        Core.Extensions.IEnumerableExtensions.ForEach(HTMLElement, this._selectedItem.parentElement.children, function (x) {
                            Core.Extensions.HtmlElementExtension.RemoveClass(x, Core.Components.Forms.ContextMenu._active);
                        });
                        this._selectedItem = this._selectedItem.parentElement;
                        break;
                    case 38: 
                        Core.Extensions.IEnumerableExtensions.ForEach(HTMLElement, children, function (x) {
                            Core.Extensions.HtmlElementExtension.RemoveClass(x, Core.Components.Forms.ContextMenu._active);
                        });
                        this._selectedIndex = this._selectedIndex > 0 ? ((this._selectedIndex - 1) | 0) : ((children.length - 1) | 0);
                        this._selectedItem = System.Linq.Enumerable.from(children, HTMLElement).elementAt(this._selectedIndex);
                        Core.Extensions.HtmlElementExtension.AddClass(this._selectedItem, Core.Components.Forms.ContextMenu._active);
                        break;
                    case 39: 
                        var ul = this._selectedItem != null ? this._selectedItem.lastElementChild : null;
                        if (ul == null || Core.Extensions.IEnumerableExtensions.Nothing(HTMLElement, ul.children)) {
                            return;
                        }
                        Core.Extensions.IEnumerableExtensions.ForEach(HTMLElement, ul.children, function (x) {
                            Core.Extensions.HtmlElementExtension.RemoveClass(x, Core.Components.Forms.ContextMenu._active);
                        });
                        Core.Extensions.HtmlElementExtension.AddClass(ul.firstChild, Core.Components.Forms.ContextMenu._active);
                        this._selectedItem = ul.firstElementChild;
                        break;
                    case 40: 
                        Core.Extensions.IEnumerableExtensions.ForEach(HTMLElement, children, function (x) {
                            Core.Extensions.HtmlElementExtension.RemoveClass(x, Core.Components.Forms.ContextMenu._active);
                        });
                        this._selectedIndex = this._selectedIndex < ((children.length - 1) | 0) ? ((this._selectedIndex + 1) | 0) : 0;
                        this._selectedItem = System.Linq.Enumerable.from(children, HTMLElement).elementAt(this._selectedIndex);
                        Core.Extensions.HtmlElementExtension.AddClass(this._selectedItem, Core.Components.Forms.ContextMenu._active);
                        break;
                    case 13: 
                        this._selectedItem.click();
                        break;
                }
            },
            AlterPosition: function () {
                Core.Components.Renderer.Floating(Core.MVVM.Html.Take(this.Element), this.Top, this.Left);
                var clientRect = this.Element.getBoundingClientRect();
                var outOfViewPort = Core.Extensions.HtmlElementExtension.OutOfViewport(this.Element);
                if (outOfViewPort.Bottom) {
                    Core.Components.Renderer.Position(Core.MVVM.Html.Take(this.Element), Core.Components.Direction.top, this.Top - clientRect.height);
                }
                if (outOfViewPort.Right) {
                    Core.Components.Renderer.Position(Core.MVVM.Html.Take(this.Element), Core.Components.Direction.left, this.Left - clientRect.width);
                    Core.Components.Renderer.Position(Core.MVVM.Html.Take(this.Element), Core.Components.Direction.top, this.Top);
                }
                outOfViewPort = Core.Extensions.HtmlElementExtension.OutOfViewport(this.Element);
                if (outOfViewPort.Bottom) {
                    Core.Components.Renderer.Position(Core.MVVM.Html.Take(this.Element), Core.Components.Direction.top, this.Top - clientRect.height);
                    Core.Components.Renderer.Position(Core.MVVM.Html.Take(this.Element), Core.Components.Direction.top, this.Top - clientRect.height - this.Element.clientHeight);
                }
            },
            RemoveDOM: function () {
                Core.Extensions.HtmlElementExtension.Hide(Core.Components.Forms.ContextMenu._root);
            }
        }
    });

    Bridge.define("Core.Components.Forms.TabComponent", {
        inherits: [Core.Components.EditableComponent],
        statics: {
            methods: {
                CalcBadgeMonth: function (query, badgeMonth) {
                    if (badgeMonth == null) {
                        return query;
                    }
                    var startDate = System.DateTime.addMonths(System.DateTime.getNow(), ((-System.Nullable.getValue(badgeMonth)) | 0));
                    startDate = System.DateTime.addDays(startDate, ((-System.DateTime.getDay(startDate)) | 0));
                    var filterPart = (Core.Extensions.OdataExt.GetClausePart(query, Core.Extensions.OdataExt.FilterKeyword) || "") + (System.String.format(" and {0} ge cast({1},Edm.DateTimeOffset)", "InsertedDate", Core.Extensions.DateTimeExt.ToISOFormat(startDate)) || "");
                    return Core.Extensions.OdataExt.ApplyClause(query, filterPart, Core.Extensions.OdataExt.FilterKeyword);
                }
            }
        },
        fields: {
            _li: null,
            _badge: null,
            BadgeElement: null,
            _displayBadge: false
        },
        props: {
            HasRendered: false,
            ComponentGroup: null,
            NextTab: {
                get: function () {
                    var count = System.Linq.Enumerable.from(this.Parent.Children, Core.Components.BaseComponent).count();
                    var thisIndex = this.Parent.Children.indexOf(this);
                    if (thisIndex === count) {
                        return Bridge.cast(System.Linq.Enumerable.from(this.Parent.Children, Core.Components.BaseComponent).firstOrDefault(null, null), Core.Components.Forms.TabComponent);
                    } else {
                        return Bridge.cast(this.Parent.Children.getItem(((thisIndex + 1) | 0)), Core.Components.Forms.TabComponent);
                    }
                }
            },
            Badge: {
                get: function () {
                    return this._badge;
                },
                set: function (value) {
                    this._badge = value;
                    if (this.BadgeElement != null) {
                        this.BadgeElement.textContent = this._badge;
                    }
                }
            },
            DisplayBadge: {
                get: function () {
                    return this._displayBadge;
                },
                set: function (value) {
                    this._displayBadge = value;
                    if (value) {
                        Core.Extensions.HtmlElementExtension.Show(this.BadgeElement);
                    } else {
                        Core.Extensions.HtmlElementExtension.Hide(this.BadgeElement);
                    }
                }
            },
            Show: {
                get: function () {
                    return Bridge.ensureBaseProperty(this, "Show").$Core$Components$BaseComponent$Show;
                },
                set: function (value) {
                    if (this._li == null) {
                        return;
                    }

                    Bridge.ensureBaseProperty(this, "Show").$Core$Components$BaseComponent$Show = value;
                    if (value) {
                        Core.Extensions.HtmlElementExtension.AddClass(this._li, "active");
                        System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                            var $step = 0,
                                $task1, 
                                $jumpFromFinally, 
                                $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                                $returnValue, 
                                $async_e, 
                                $asyncBody = Bridge.fn.bind(this, function () {
                                    try {
                                        for (;;) {
                                            $step = System.Array.min([0,1], $step);
                                            switch ($step) {
                                                case 0: {
                                                    $task1 = Core.Components.Extensions.ComponentExt.DispatchEventToHandlerAsync(this, this.ComponentGroup.Events, "focusin", [this.Entity]);
                                                    $step = 1;
                                                    if ($task1.isCompleted()) {
                                                        continue;
                                                    }
                                                    $task1.continue($asyncBody);
                                                    return;
                                                }
                                                case 1: {
                                                    $task1.getAwaitedResult();
                                                    $tcs.setResult(null);
                                                    return;
                                                }
                                                default: {
                                                    $tcs.setResult(null);
                                                    return;
                                                }
                                            }
                                        }
                                    } catch($async_e1) {
                                        $async_e = System.Exception.create($async_e1);
                                        $tcs.setException($async_e);
                                    }
                                }, arguments);

                            $asyncBody();
                            return $tcs.task;
                        }));
                    } else {
                        Core.Extensions.HtmlElementExtension.RemoveClass(this._li, "active");
                        System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                            var $step = 0,
                                $task1, 
                                $jumpFromFinally, 
                                $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                                $returnValue, 
                                $async_e, 
                                $asyncBody = Bridge.fn.bind(this, function () {
                                    try {
                                        for (;;) {
                                            $step = System.Array.min([0,1], $step);
                                            switch ($step) {
                                                case 0: {
                                                    $task1 = Core.Components.Extensions.ComponentExt.DispatchEventToHandlerAsync(this, this.ComponentGroup.Events, "focusout", [this.Entity]);
                                                    $step = 1;
                                                    if ($task1.isCompleted()) {
                                                        continue;
                                                    }
                                                    $task1.continue($asyncBody);
                                                    return;
                                                }
                                                case 1: {
                                                    $task1.getAwaitedResult();
                                                    $tcs.setResult(null);
                                                    return;
                                                }
                                                default: {
                                                    $tcs.setResult(null);
                                                    return;
                                                }
                                            }
                                        }
                                    } catch($async_e1) {
                                        $async_e = System.Exception.create($async_e1);
                                        $tcs.setException($async_e);
                                    }
                                }, arguments);

                            $asyncBody();
                            return $tcs.task;
                        }));
                    }
                }
            },
            Disabled: {
                get: function () {
                    return Bridge.ensureBaseProperty(this, "Disabled").$Core$Components$EditableComponent$Disabled;
                },
                set: function (value) {
                    if (this._li == null) {
                        return;
                    }

                    if (value) {
                        this._li.setAttribute("disabled", "");
                    } else {
                        this._li.removeAttribute("disabled");
                    }
                }
            },
            Hidden: {
                get: function () {
                    return Bridge.ensureBaseProperty(this, "Disabled").$Core$Components$EditableComponent$Disabled;
                },
                set: function (value) {
                    this._li.hidden = value;
                    if (this.Show) {
                        this.Show = false;
                    } else {
                        return;
                    }

                    if (this.NextTab.HasRendered) {
                        this.NextTab.Focus();
                    } else {
                        this.NextTab.RenderTabContent();
                        this.NextTab.Focus();
                    }
                }
            }
        },
        ctors: {
            ctor: function (group) {
                this.$initialize();
                Core.Components.EditableComponent.ctor.call(this, null);
                this.ComponentGroup = group;
                this.Name = group.Name;
            }
        },
        methods: {
            Render: function () {
                var $t, $t1, $t2, $t3;
                var policies = this.EditForm.GetElementPolicies$1(System.Array.init([this.ComponentGroup.Id], System.Int32), Core.Enums.EntityEnum.ComponentGroup);
                var readPermission = !this.ComponentGroup.IsPrivate || Core.Extensions.IEnumerableExtensions.HasElementAndAll(Core.Models.FeaturePolicy, policies, function (x) {
                    return x.CanRead;
                });
                if (!readPermission) {
                    return;
                }

                Core.Components.Renderer.IText(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.MVVM.Html.Take(this.Parent.Ul).Li.Span, "nav-link-icon").InnerHTML(($t = this.ComponentGroup.Icon, $t != null ? $t : "")).End.Span, "headline"), ($t1 = this.ComponentGroup.Label, $t1 != null ? $t1 : this.ComponentGroup.Name)).End.Render();
                Core.Components.Renderer.ClassName(Core.MVVM.Html.Instance.Span, "count-badge");
                this.BadgeElement = Core.MVVM.Html.Context;
                if (this.DisplayBadge) {
                    Core.MVVM.Html.Instance.Text(($t2 = this.Badge, $t2 != null ? $t2 : ""));
                } else {
                    Core.Extensions.HtmlElementExtension.Hide(this.BadgeElement);
                }

                Core.Components.Renderer.IText(Core.Components.Renderer.ClassName(Core.MVVM.Html.Instance.End.Div, "desc"), ($t3 = this.ComponentGroup.Description, $t3 != null ? $t3 : "")).End.Render();
                this._li = Core.MVVM.Html.Context;
                Core.MVVM.Html.Instance.Event("click", Bridge.fn.bind(this, function () {
                    if (this.HasRendered) {
                        this.Focus();
                    } else {
                        this.Focus();
                        this.RenderTabContent();
                    }
                }));
                System.Threading.Tasks.Task.run(Bridge.fn.cacheBind(this, this.CountBage));
            },
            CountBage: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    parent, 
                    gridView, 
                    query, 
                    badgeMonth, 
                    finalCount, 
                    res, 
                    count, 
                    $async_e, 
                    $async_e1, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4], $step);
                                switch ($step) {
                                    case 0: {
                                        parent = Bridge.as(this.Parent, Core.Components.Forms.TabGroup);
                                        if (!parent.ShouldCountBage && this.ComponentGroup.BadgeMonth == null) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        gridView = System.Linq.Enumerable.from(this.ComponentGroup.Component, Core.Models.Component).firstOrDefault(null, null);
                                        if (gridView == null || Core.Extensions.StringExt.IsNullOrEmpty(gridView.DataSourceFilter)) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        $step = 1;
                                        continue;
                                    }
                                    case 1: {
                                        query = Core.Components.ListView.GetFormattedDataSource(this, gridView.DataSourceFilter);
                                        badgeMonth = this.ComponentGroup.BadgeMonth;
                                        if (System.Nullable.eq(badgeMonth, 0)) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        finalCount = (Core.Components.Forms.TabComponent.CalcBadgeMonth(query, badgeMonth) || "") + "&$count=true";
                                        $task1 = new Core.Clients.Client.$ctor1(gridView.RefName).GetAsync$1(Core.Models.OdataResult$1(System.Object), finalCount);
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        res = $taskResult1;
                                        if (res == null || res.Odata == null) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        this.DisplayBadge = true;
                                        count = res.Odata.Count;
                                        if (System.Nullable.lte(count, 1000)) {
                                            this.Badge = System.Nullable.toString(count, null);
                                        } else if (System.Nullable.lt(count, 1000000)) {
                                            this.Badge = System.Nullable.toString((Bridge.Int.clip32(Bridge.Int.div(count, 1000))), null) + "K";
                                        } else {
                                            this.Badge = System.Nullable.toString((Bridge.Int.clip32(Bridge.Int.div(count, 1000000))), null) + "M";
                                        }
                                        $step = 4;
                                        continue;
                                    }
                                    case 3: {
                                        $async_e = null;
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            if ( $step >= 1 && $step <= 2 ) {
                                $step = 3;
                                $asyncBody();
                                return;
                            }
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            RenderTabContent: function () {
                Core.Components.Renderer.ClassName(Core.MVVM.Html.Take(this.Parent.TabContent).Div, "tab-content");
                this.Element = Core.MVVM.Html.Context;
                var editForm = Core.Components.Extensions.ComponentExt.FindClosest(Core.Components.Forms.EditForm, this);
                editForm.RenderSection(this, this.ComponentGroup);
                this.HasRendered = true;
                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = Core.Components.Extensions.ComponentExt.DispatchEventToHandlerAsync(this, this.ComponentGroup.Events, "DOMContentLoaded", [this.Entity]);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            Focus: function () {
                System.Linq.Enumerable.from(this.Parent.Children).select(function (x) { return Bridge.cast(x, Core.Components.Forms.TabComponent); }).where(Bridge.fn.bind(this, function (x) {
                        return !Bridge.referenceEquals(x, this);
                    })).ToArray(Core.Components.Forms.TabComponent).forEach(function (x) {
                        x.Show = false;
                    });
                this.Show = true;
                this.EditForm.ResizeListView();
                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = Core.Components.Extensions.ComponentExt.DispatchEventToHandlerAsync(this, this.ComponentGroup.Events, "focusin", [this.Entity]);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            UpdateView: function (force, dirty, componentNames) {
                if (force === void 0) { force = false; }
                if (dirty === void 0) { dirty = null; }
                if (componentNames === void 0) { componentNames = []; }
                System.Threading.Tasks.Task.run(Bridge.fn.cacheBind(this, this.CountBage));
                Core.Components.EditableComponent.prototype.UpdateView.call(this, force, dirty, componentNames);
            }
        }
    });

    Bridge.define("Core.Components.Forms.TabGroup", {
        inherits: [Core.Components.EditableComponent],
        fields: {
            ListViewType: null
        },
        props: {
            ComponentGroup: null,
            Ul: null,
            TabContent: null,
            ShouldCountBage: false
        },
        ctors: {
            init: function () {
                this.ListViewType = function (_o1) {
                        _o1.add("ListView");
                        _o1.add("GroupListView");
                        _o1.add("GridView");
                        _o1.add("GroupGridView");
                        return _o1;
                    }(new (System.Collections.Generic.List$1(System.String)).ctor());
            },
            ctor: function () {
                this.$initialize();
                Core.Components.EditableComponent.ctor.call(this, null);
            }
        },
        methods: {
            Render: function () {
                Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.MVVM.Html.Take(this.ParentElement).Div, "tab-group"), this.ComponentGroup.IsVertialTab ? "tab-vertical" : "tab-horizontal").Div, "headers-wrapper").Ul, "tabs-header");
                this.Ul = Bridge.as(Core.MVVM.Html.Context, HTMLUListElement);
                this.Element = this.Ul.parentElement;
                Core.Components.Renderer.ClassName(Core.MVVM.Html.Instance.End.End.Div, "tabs-content");
                this.TabContent = Bridge.as(Core.MVVM.Html.Context, HTMLDivElement);
                this.ShouldCountBage = System.Linq.Enumerable.from(this.ComponentGroup.InverseParent, Core.Models.ComponentGroup).all(Bridge.fn.bind(this, function (x) {
                        return Core.Extensions.IEnumerableExtensions.HasElement(Core.Models.Component, x.Component) && this.ListViewType.contains(System.Linq.Enumerable.from(x.Component, Core.Models.Component).first().ComponentType);
                    }));
            }
        }
    });

    Bridge.define("Core.Components.Section", {
        inherits: [Core.Components.EditableComponent],
        fields: {
            elementType: null
        },
        props: {
            ComponentGroup: null
        },
        ctors: {
            $ctor1: function (elementType) {
                this.$initialize();
                Core.Components.EditableComponent.ctor.call(this, null);
                this.elementType = elementType;
            },
            ctor: function (interactiveEle) {
                this.$initialize();
                Core.Components.EditableComponent.ctor.call(this, null);
                this.Element = Bridge.as(interactiveEle, HTMLElement);
            }
        },
        methods: {
            Render: function () {
                if (this.elementType == null) {
                    var tag = this.Element.tagName.toLowerCase();
                    var type = { v : new Core.MVVM.ElementType() };
                    var parsed = System.Enum.tryParse(Core.MVVM.ElementType, tag, type);
                    if (parsed) {
                        this.elementType = type.v;
                    }
                } else {
                    Core.MVVM.Html.Take(this.ParentElement).Add(System.Nullable.getValue(this.elementType));
                    this.Element = Core.MVVM.Html.Context;
                }
                this.Element.id = this.Id;
            }
        }
    });

    Bridge.define("Core.Components.ImageUploader", {
        inherits: [Core.Components.EditableComponent],
        statics: {
            fields: {
                pathSeparator: null,
                PNGUrlPrefix: null,
                JpegUrlPrefix: null,
                GuidLength: 0,
                _preview: null,
                _webcam: null
            },
            props: {
                Camera: null
            },
            ctors: {
                init: function () {
                    this.pathSeparator = "    ";
                    this.PNGUrlPrefix = "data:image/png;base64,";
                    this.JpegUrlPrefix = "data:image/jpeg;base64,";
                    this.GuidLength = 36;
                }
            },
            methods: {
                RemoveGuid: function (path) {
                    var thumbText = path;
                    if (path.length > Core.Components.ImageUploader.GuidLength) {
                        var fileName = System.IO.Path.GetFileNameWithoutExtension(path);
                        thumbText = (Core.Extensions.StringExt.SubStrIndex$1(fileName, 0, ((fileName.length - Core.Components.ImageUploader.GuidLength) | 0)) || "") + (System.IO.Path.GetExtension(path) || "");
                    }

                    return thumbText;
                }
            }
        },
        fields: {
            _path: null,
            _input: null,
            _disabledDelete: false,
            _placeHolder: null
        },
        events: {
            FileUploaded: null
        },
        props: {
            Path: {
                get: function () {
                    return this._path;
                },
                set: function (value) {
                    var $t;
                    System.Linq.Enumerable.from(this.ParentElement.querySelectorAll(".thumb-wrapper")).select(function (x) { return Bridge.cast(x, HTMLElement); }).forEach(function (x) {
                        x.remove();
                    });
                    this.RenderPlaceHolder();
                    this._path = value;
                    if (this.Entity != null) {
                        Core.Extensions.BridgeExt.SetComplexPropValue(this.Entity, this.GuiInfo.FieldName, this._path);
                    }

                    if (Core.Extensions.StringExt.IsNullOrWhiteSpace(this._path)) {
                        return;
                    }

                    var updatedImages = ($t = System.String, System.Linq.Enumerable.from(this._path.split(Core.Components.ImageUploader.pathSeparator), $t).toList($t));
                    if (Core.Extensions.IEnumerableExtensions.Nothing(System.String, updatedImages)) {
                        return;
                    }

                    this._placeHolder != null ? this._placeHolder.remove() : null;
                    updatedImages.ForEach(Bridge.fn.bind(this, function (x) {
                        this.RenderFileThumb(x);
                    }));
                }
            },
            DataSourceFilter: null,
            Label: null,
            _imageSources: {
                get: function () {
                    return this._path != null ? this._path.split(Core.Components.ImageUploader.pathSeparator) : null;
                }
            },
            Disabled: {
                get: function () {
                    return Bridge.ensureBaseProperty(this, "Disabled").$Core$Components$EditableComponent$Disabled;
                },
                set: function (value) {
                    if (this._input != null) {
                        this._input.disabled = value;
                    }

                    Bridge.ensureBaseProperty(this, "Disabled").$Core$Components$EditableComponent$Disabled = value;
                    if (value) {
                        this.ParentElement.setAttribute("disabled", "");
                    } else {
                        this.ParentElement.removeAttribute("disabled");
                    }
                }
            }
        },
        ctors: {
            ctor: function (ui, ele) {
                if (ele === void 0) { ele = null; }
                var $t, $t1;

                this.$initialize();
                Core.Components.EditableComponent.ctor.call(this, ui);
                this.GuiInfo = ui;
                this.Label = ($t = this.GuiInfo.PlainText, $t != null ? $t : "image/invoice.svg");
                this.DataSourceFilter = ($t1 = this.GuiInfo.DataSourceFilter, $t1 != null ? $t1 : "image/*");
                this.ParentElement = ele;
            }
        },
        methods: {
            Render: function () {
                var $t, $t1, $t2, $t3;
                this._path = ($t = this.Entity) != null && ($t1 = Core.Extensions.Utils.GetComplexPropValue($t, this.GuiInfo.FieldName)) != null ? Bridge.toString($t1) : null;
                var paths = this._path != null ? ($t2 = System.String, System.Linq.Enumerable.from(this._path.split(Core.Components.ImageUploader.pathSeparator), $t2).toList($t2)) : null;
                this.RenderUploadForm();
                this.Path = this._path;
                !Bridge.staticEquals(($t3 = this.DOMContentLoaded), null) ? $t3() : null;
            },
            RenderFileThumb: function (path) {
                Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.MVVM.Html.Take(this.ParentElement).Div, "thumb-wrapper").Div, "overlay").Event$2(System.String, "click", Bridge.fn.cacheBind(this, this.Preview), path);
                if (!this._disabledDelete) {
                    Core.Components.Renderer.Icon(Core.MVVM.Html.Instance, "fa fa-times").Event$4(System.String, "click", Bridge.fn.cacheBind(this, this.RemoveFile), path).End.Render();
                }
                Core.MVVM.Html.Instance.End.Render();
                var isImage = System.IO.Path.IsImage(path);
                if (isImage) {
                    Core.Components.Renderer.ClassName(Core.MVVM.Html.Instance.Img, "thumb").Style$1(this.GuiInfo.ChildStyle).Src((Core.Clients.Client.Origin || "") + (path || "")).Render();
                } else {
                    var thumbText = Core.Components.ImageUploader.RemoveGuid(path);
                    Core.Components.Renderer.IText(Core.Components.Renderer.ClassName(Core.MVVM.Html.Instance.Span, "thumb"), thumbText).Style$1(this.GuiInfo.ChildStyle).Href((Core.Clients.Client.Origin || "") + (path || "")).Render();
                }
                return Core.MVVM.Html.Context.parentElement;
            },
            Download: function (path) {
                var $t;
                var a = ($t = document.createElement("a"), $t.href = path, $t.target = "_blank", $t);
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
            },
            SetCanDeleteImage: function (canDelete) {
                this._disabledDelete = !canDelete;
                if (canDelete) {
                    this.UpdateView();
                } else {
                    System.Linq.Enumerable.from(this.Element.querySelectorAll(".overlay .fa-times")).select(function (x) { return Bridge.cast(x, HTMLElement); }).forEach(function (x) {
                        x.remove();
                    });
                }
            },
            Preview: function (path) {
                if (Core.Extensions.StringExt.IsNullOrWhiteSpace(path)) {
                    return;
                }

                if (!System.IO.Path.IsImage(path)) {
                    this.Download(path);
                    return;
                }

                var img = null;
                var rotate = 0;
                Core.Components.Renderer.Escape(Core.Components.Renderer.ClassName(Core.MVVM.Html.Take(this.EditForm.Element).Div, "dark-overlay"), function (e) {
                    Core.Components.ImageUploader._preview.remove();
                }).Event$1("keydown", Bridge.fn.bind(this, function (e) {
                    var keyCode = Core.Extensions.EventExt.Key(e);
                    if (System.Nullable.neq(keyCode, Core.Enums.KeyCodeEnum.LeftArrow) && System.Nullable.neq(keyCode, Core.Enums.KeyCodeEnum.RightArrow)) {
                        return;
                    }

                    if (System.Nullable.eq(keyCode, Core.Enums.KeyCodeEnum.LeftArrow)) {
                        path = this.MoveLeft(path, img);
                    } else {
                        path = this.MoveRight(path, img);
                    }
                }));
                Core.Components.ImageUploader._preview = Core.MVVM.Html.Context;
                Core.MVVM.Html.Instance.Img.Src((Core.Clients.Client.Origin || "") + (path || ""));
                img = Bridge.as(Core.MVVM.Html.Context, HTMLImageElement);
                Core.Components.Renderer.Icon(Core.Components.Renderer.Icon(Core.Components.Renderer.Icon(Core.Components.Renderer.Title(Core.Components.Renderer.Icon(Core.Components.Renderer.Icon(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.MVVM.Html.Instance.End.Span, "close").Event("click", function () {
                    Core.Components.ImageUploader._preview.remove();
                }).End.Div, "toolbar"), "fa fa-undo ro-left").Event("click", function () {
                    rotate = (rotate - 90) | 0;
                    img.style.transform = System.String.format("rotate({0}deg)", [Bridge.box(rotate, System.Int32)]);
                }).End, "fa fa-cloud-download-alt"), "T\u1ea3i xu\u1ed1ng").Event("click", function () {
                    var link = Bridge.as(document.createElement("a"), HTMLAnchorElement);
                    link.href = img.src;
                    link.download = img.src.substr(img.src.lastIndexOf("/"));
                    document.body.appendChild(link);
                    link.click();
                    link.remove();
                }).End, "fa fa-redo ro-right").Event("click", function () {
                    rotate = (rotate + 90) | 0;
                    img.style.transform = System.String.format("rotate({0}deg)", [Bridge.box(rotate, System.Int32)]);
                }).End.End, "fa fa-chevron-left").Event("click", Bridge.fn.bind(this, function () {
                    path = this.MoveLeft(path, img);
                })).End, "fa fa-chevron-right").Event("click", Bridge.fn.bind(this, function () {
                    path = this.MoveRight(path, img);
                })).End.Render();
            },
            MoveAround: function (e, path) {
                var keyCode = Core.Extensions.EventExt.Key(e);
                if (System.Nullable.neq(keyCode, Core.Enums.KeyCodeEnum.LeftArrow) && System.Nullable.neq(keyCode, Core.Enums.KeyCodeEnum.RightArrow)) {
                    return;
                }
                var img;
                if (!(((img = Bridge.as(e.target.firstElementChild, HTMLImageElement))) != null)) {
                    return;
                }

                if (System.Nullable.eq(keyCode, Core.Enums.KeyCodeEnum.LeftArrow)) {
                    this.MoveLeft(path, img);
                } else {
                    this.MoveRight(path, img);
                }
            },
            MoveLeft: function (path, img) {
                var $t, $t1;
                var index = System.Array.indexOfT(this._imageSources, path);
                if (index === 0) {
                    index = (this._imageSources.length - 1) | 0;
                } else {
                    index = (index - 1) | 0;
                }

                img.src = (Core.Clients.Client.Origin || "") + (($t = this._imageSources)[System.Array.index(index, $t)] || "");
                return ($t1 = this._imageSources)[System.Array.index(index, $t1)];
            },
            MoveRight: function (path, img) {
                var $t, $t1;
                var index = System.Array.indexOfT(this._imageSources, path);
                if (index === 0) {
                    index = (this._imageSources.length - 1) | 0;
                } else {
                    index = (index - 1) | 0;
                }

                img.src = (Core.Clients.Client.Origin || "") + (($t = this._imageSources)[System.Array.index(index, $t)] || "");
                return ($t1 = this._imageSources)[System.Array.index(index, $t1)];
            },
            OpenFileDialog: function (e) {
                if (this.Disabled) {
                    return;
                }

                this.OpenNativeFileDialog(e);
                return;
                if (typeof(navigator.camera) === 'undefined')
                {
                    this._input.click();
                }
                else
                {
                    this.RenderImageSourceChooser();
                }
            },
            RenderUploadForm: function () {
                var $t;
                var isMultiple = System.Nullable.eq(this.GuiInfo.Precision, 0);
                Core.Components.Renderer.ClassName(Core.MVVM.Html.Take(this.ParentElement), "uploader").Input.Type$1("file").Attr$1("name", "files").Attr$1("accept", this.DataSourceFilter).AsyncEvent$1("change", Bridge.fn.cacheBind(this, this.UploadSelectedImages)).Render();
                this.Element = (this._input = Bridge.as(Core.MVVM.Html.Context, HTMLInputElement));
                if (isMultiple) {
                    Core.MVVM.Html.Instance.Attr$1("multiple", "multiple");
                }
                Core.Components.Renderer.IconForSpan(Core.MVVM.Html.Take(this.ParentElement).Span, ($t = this.GuiInfo.Icon, $t != null ? $t : "fa fa-images")).Event$1("click", Bridge.fn.cacheBind(this, this.OpenFileDialog)).End.Render();
            },
            RenderPlaceHolder: function () {
                var $t;
                if (Core.Extensions.StringExt.IsNullOrWhiteSpace(this._path)) {
                    this._placeHolder = this.RenderFileThumb(this.Label);
                    ($t = this._placeHolder.querySelector(".fa-times")) != null ? $t.remove() : null;
                }
            },
            RemoveFile: function (e, removedPath) {
                if (this.Disabled) {
                    return;
                }

                e.stopPropagation();
                if (Core.Extensions.StringExt.IsNullOrEmpty(removedPath)) {
                    return;
                }

                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $task2, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        removed, 
                        oldVal, 
                        newPath, 
                        $t, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1,2], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = new Core.Clients.Client.$ctor1("User").PostAsync(System.Boolean, removedPath, "RemoveFile");
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            removed = $taskResult1;
                                            oldVal = this._path;
                                            newPath = System.Linq.Enumerable.from(System.String.replaceAll(System.String.replaceAll(this._path, removedPath, ""), "        ", "").split(Core.Components.ImageUploader.pathSeparator), System.String).where(function (x) {
                                                return Core.Extensions.StringExt.HasAnyChar(x);
                                            }).distinct().toList(System.String);
                                            this.Path = Bridge.toArray(newPath).join(Core.Components.ImageUploader.pathSeparator);
                                            $task2 = Core.Components.Extensions.ComponentExt.DispatchEventToHandlerAsync(this, this.GuiInfo.Events, "change", [this.Entity]);
                                            $step = 2;
                                            if ($task2.isCompleted()) {
                                                continue;
                                            }
                                            $task2.continue($asyncBody);
                                            return;
                                        }
                                        case 2: {
                                            $task2.getAwaitedResult();
                                            if (!Bridge.staticEquals(this.UserInput, null)) {
                                                this.UserInput(($t = new Core.MVVM.ObservableArgs(), $t.NewData = this._path, $t.OldData = oldVal, $t.FieldName = this.GuiInfo.FieldName, $t));
                                            }
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            UploadSelectedImages: function (e) {
                var $step = 0,
                    $task1, 
                    $task2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    files, 
                    oldVal, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2], $step);
                                switch ($step) {
                                    case 0: {
                                        e.preventDefault();
                                        if (this.EditForm.IsLock) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        files = Bridge.as(e.target.files, FileList);
                                        if (Core.Extensions.IEnumerableExtensions.Nothing(File, files)) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        oldVal = this._path;
                                        $task1 = this.UploadAllFiles(files);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        this.Dirty = true;
                                        this._input.value = "";
                                        if (!Bridge.staticEquals(this.UserInput, null)) {
                                            this.UserInput(($t = new Core.MVVM.ObservableArgs(), $t.NewData = this._path, $t.OldData = oldVal, $t.FieldName = this.GuiInfo.FieldName, $t));
                                        }
                                        $task2 = Core.Components.Extensions.ComponentExt.DispatchEventToHandlerAsync(this, this.GuiInfo.Events, "change", [this.Entity]);
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $task2.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            UploadBase64Image: function (base64Image, fileName) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (System.String.contains(base64Image,Core.Components.ImageUploader.PNGUrlPrefix)) {
                                            base64Image = base64Image.substr(Core.Components.ImageUploader.PNGUrlPrefix.length);
                                        } else if (System.String.contains(base64Image,Core.Components.ImageUploader.JpegUrlPrefix)) {
                                            base64Image = base64Image.substr(Core.Components.ImageUploader.JpegUrlPrefix.length);
                                        }
                                        $task1 = new Core.Clients.Client.$ctor1("User").PostAsync(System.String, base64Image, System.String.format("Image?name={0}", [fileName]), false, true);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult($taskResult1);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            UpdateView: function (force, dirty, componentNames) {
                var $t;
                if (force === void 0) { force = false; }
                if (dirty === void 0) { dirty = null; }
                if (componentNames === void 0) { componentNames = []; }
                this.Path = ($t = Core.Extensions.Utils.GetComplexPropValue(this.Entity, this.GuiInfo.FieldName)) != null ? Bridge.toString($t) : null;
            },
            UploadFile: function (file) {
                var tcs = new System.Threading.Tasks.TaskCompletionSource();
                var reader = new FileReader();
                var isImage = Core.Extensions.IEnumerableExtensions.HasElement(System.String, file.type.match("image.*"));
                if (isImage) {
                    reader.onload = Bridge.fn.bind(this, function (e) {
                        var $step = 0,
                            $task1, 
                            $taskResult1, 
                            $jumpFromFinally, 
                            path, 
                            $asyncBody = Bridge.fn.bind(this, function () {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = this.ResizeAndUploadImage(Bridge.toString(e.target.result), file.name);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            path = $taskResult1;
                                            tcs.setResult(path);
                                            return;
                                        }
                                        default: {
                                            return;
                                        }
                                    }
                                }
                            }, arguments);

                        $asyncBody();
                    });
                    reader.readAsDataURL(file);
                } else {
                    System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                        var $step = 0,
                            $task1, 
                            $taskResult1, 
                            $jumpFromFinally, 
                            $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                            $returnValue, 
                            path, 
                            $async_e, 
                            $asyncBody = Bridge.fn.bind(this, function () {
                                try {
                                    for (;;) {
                                        $step = System.Array.min([0,1], $step);
                                        switch ($step) {
                                            case 0: {
                                                $task1 = new Core.Clients.Client.$ctor1("User").PostFilesAsync(System.String, file, "file");
                                                $step = 1;
                                                if ($task1.isCompleted()) {
                                                    continue;
                                                }
                                                $task1.continue($asyncBody);
                                                return;
                                            }
                                            case 1: {
                                                $taskResult1 = $task1.getAwaitedResult();
                                                path = $taskResult1;
                                                tcs.setResult(path);
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            default: {
                                                $tcs.setResult(null);
                                                return;
                                            }
                                        }
                                    }
                                } catch($async_e1) {
                                    $async_e = System.Exception.create($async_e1);
                                    $tcs.setException($async_e);
                                }
                            }, arguments);

                        $asyncBody();
                        return $tcs.task;
                    }));
                }
                return tcs.task;
            },
            ResizeAndUploadImage: function (src, fileName) {
                var tcs = new System.Threading.Tasks.TaskCompletionSource();
                var image = new Image();
                image.onload = Bridge.fn.combine(image.onload, Bridge.fn.bind(this, function (imageEvent) {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        canvas, 
                        max_size, 
                        width, 
                        height, 
                        ctx, 
                        dataUrl, 
                        path, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        canvas = document.createElement("canvas");
                                        max_size = 1024;
                                        width = image.width;
                                        height = image.height;
                                        if (width > height) {
                                            if (width > max_size) {
                                                height = Bridge.Int.clip32(height * (max_size / width));
                                                width = max_size;
                                            }
                                        } else {
                                            if (height > max_size) {
                                                width = Bridge.Int.clip32(width * (max_size / height));
                                                height = max_size;
                                            }
                                        }
                                        canvas.width = width;
                                        canvas.height = height;
                                        ctx = canvas.getContext("2d");
                                        ctx.drawImage(image, 0, 0, width, height);
                                        dataUrl = canvas.toDataURL();
                                        $task1 = this.UploadBase64Image(dataUrl, fileName);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        path = $taskResult1;
                                        tcs.setResult(path);
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }));
                image.src = src;
                return tcs.task;
            },
            UploadAllFiles: function (filesSelected) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    files, 
                    allPath, 
                    paths, 
                    oldVal, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        Core.Components.Spinner.AppendTo(this.EditForm.Element);
                                        files = System.Linq.Enumerable.from(filesSelected, File).select(Bridge.fn.cacheBind(this, this.UploadFile));
                                        $task1 = System.Threading.Tasks.Task.whenAll(files);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        allPath = $taskResult1;
                                        if (Core.Extensions.IEnumerableExtensions.Nothing(System.String, allPath)) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        if (System.Nullable.eq(this.GuiInfo.Precision, 0)) {
                                            paths = (this.Path || "") + (Core.Components.ImageUploader.pathSeparator || "") + ((allPath).join(Core.Components.ImageUploader.pathSeparator) || "");
                                            allPath = System.Linq.Enumerable.from(paths.trim().split(Core.Components.ImageUploader.pathSeparator), System.String).distinct().ToArray(System.String);
                                        }
                                        oldVal = this._path;
                                        this.Path = (allPath).join(Core.Components.ImageUploader.pathSeparator);
                                        Core.Components.Spinner.Hide();
                                        !Bridge.staticEquals(this.FileUploaded, null) ? this.FileUploaded() : null;
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            OpenNativeFileDialog: function (e) {
                e != null ? e.preventDefault() : null;
                this._input.click();
            },
            GetValueText: function () {
                if (Core.Extensions.IEnumerableExtensions.Nothing(System.String, this._imageSources)) {
                    return null;
                }
                return Core.Extensions.IEnumerableExtensions.Combine(System.String, System.Linq.Enumerable.from(this._imageSources, System.String).select(function (path) {
                        var label = Core.Components.ImageUploader.RemoveGuid(path);
                        return System.String.format("<a target=\"_blank\" href=\"{0}\">{1}</a>", path, label);
                    }), ",");
            }
        }
    });

    Bridge.define("Core.Components.LangSelect", {
        inherits: [Core.Components.EditableComponent],
        statics: {
            fields: {
                LangProp: null,
                LangKey: null,
                LangParam: null,
                LangCode: null,
                culture: null,
                _dictionaries: null
            },
            props: {
                Culture: {
                    get: function () {
                        var $t;
                        if (Core.Components.LangSelect.culture != null) {
                            return Core.Components.LangSelect.culture;
                        }
                        var res = ($t = window.localStorage.getItem("Culture")) != null ? Bridge.toString($t) : null;
                        if (res != null) {
                            Core.Components.LangSelect.culture = res;
                        }
                        return res;
                    },
                    set: function (value) {
                        if (Bridge.referenceEquals(Core.Components.LangSelect.culture, value)) {
                            return;
                        }
                        Core.Components.LangSelect.culture = value;
                        window.localStorage.setItem("Culture", value);
                    }
                }
            },
            ctors: {
                init: function () {
                    this.LangProp = "langprop";
                    this.LangKey = "langkey";
                    this.LangParam = "Para";
                    this.LangCode = "langcode";
                }
            },
            methods: {
                SetCultureAndTranslate: function (code) {
                    Core.Components.LangSelect.Culture = code;
                    System.Threading.Tasks.Task.run(Core.Components.LangSelect.Translate);
                },
                Get: function (key) {
                    if (Core.Extensions.StringExt.IsNullOrEmpty(key)) {
                        return "";
                    }
                    if (Core.Components.LangSelect.Culture == null) {
                        return key;
                    }
                    var dictionary = System.Collections.Generic.CollectionExtensions.GetValueOrDefault(System.String, System.Collections.Generic.Dictionary$2(System.String,System.String), Core.Components.LangSelect._dictionaries, Core.Components.LangSelect.Culture);
                    if (dictionary == null) {
                        dictionary = Newtonsoft.Json.JsonConvert.DeserializeObject(Bridge.as(window.localStorage.getItem("dic_" + (Core.Components.LangSelect.Culture || "")), System.String), System.Collections.Generic.Dictionary$2(System.String,System.String));
                        if (Core.Components.LangSelect._dictionaries.containsKey(Core.Components.LangSelect.Culture)) {
                            Core.Components.LangSelect._dictionaries.remove(Core.Components.LangSelect.Culture);
                        }
                        System.Collections.Generic.CollectionExtensions.TryAdd(System.String, System.Collections.Generic.Dictionary$2(System.String,System.String), Core.Components.LangSelect._dictionaries, Core.Components.LangSelect.Culture, dictionary);
                    }
                    return dictionary != null && dictionary.containsKey(key) ? dictionary.getItem(key) : key;
                },
                Translate: function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        dictionaryItems, 
                        map, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = new Core.Clients.Client.$ctor1("Dictionary").GetRawList(Core.Models.Dictionary, System.String.format("?$filter=LangCode eq '{0}'", [Core.Components.LangSelect.Culture]));
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            dictionaryItems = $taskResult1;
                                            map = System.Linq.Enumerable.from(dictionaryItems, Core.Models.Dictionary).toDictionary(function (x) {
                                                return x.Key;
                                            }, function (x) {
                                                return x.Value;
                                            }, System.String, System.String);
                                            if (Core.Components.LangSelect._dictionaries == null) {
                                                Core.Components.LangSelect._dictionaries = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor();
                                            }
                                            if (Core.Components.LangSelect._dictionaries.containsKey(Core.Components.LangSelect.Culture)) {
                                                Core.Components.LangSelect._dictionaries.remove(Core.Components.LangSelect.Culture);
                                                Core.Components.LangSelect._dictionaries.add(Core.Components.LangSelect.Culture, map);
                                            }
                                            window.localStorage.setItem("dic_" + (Core.Components.LangSelect.Culture || ""), Newtonsoft.Json.JsonConvert.SerializeObject(map));
                                            Core.Extensions.IEnumerableExtensions.ForEach(Node, Core.Components.LangSelect.Travel(document), function (x) {
                                                var $t;
                                                var props = ($t = x[Core.Components.LangSelect.LangProp]) != null ? Bridge.toString($t) : null;
                                                if (props == null) {
                                                    return;
                                                }
                                                props.split(",").forEach(function (propName) {
                                                    var $t1;
                                                    var template = ($t1 = x[(Core.Components.LangSelect.LangKey || "") + (propName || "")]) != null ? Bridge.toString($t1) : null;
                                                    var parameters = Bridge.as(x[(Core.Components.LangSelect.LangParam || "") + (propName || "")], System.Array.type(System.Object));

                                                    var translated = map.containsKey(template) ? map.getItem(template) : template;
                                                    translated = Core.Extensions.IEnumerableExtensions.HasElement(System.Object, parameters) ? System.String.format.apply(System.String, [translated].concat(parameters)) : translated;
                                                    var text;
                                                    if (((text = Bridge.as(x, Text))) != null && Bridge.referenceEquals(propName, "TextContent")) {
                                                        text.textContent = translated;
                                                        return;
                                                    }
                                                    var ele = Bridge.as(x, HTMLElement);
                                                    if (Bridge.referenceEquals(propName, "ClassName")) {
                                                        ele.className = System.String.replaceAll(ele.className, template, translated);
                                                    } else {
                                                        ele.setAttribute(propName, translated);
                                                    }
                                                });
                                            });
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                },
                Travel: function (node) {
                    return new (Bridge.GeneratorEnumerable$1(Node))(Bridge.fn.bind(this, function (node) {
                        var $step = 0,
                            $jumpFromFinally,
                            $returnValue,
                            $t,
                            element,
                            $t1,
                            inner,
                            $async_e;

                        var $enumerator = new (Bridge.GeneratorEnumerator$1(Node))(Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    switch ($step) {
                                        case 0: {
                                            $t = Bridge.getEnumerator(node.childNodes, "getEnumerator");
                                                $step = 1;
                                                continue;
                                        }
                                        case 1: {
                                            if ($t.moveNext()) {
                                                    element = $t.Current;
                                                    $step = 2;
                                                    continue;
                                                }
                                            $step = 8;
                                            continue;
                                        }
                                        case 2: {
                                            $enumerator.current = element;
                                                $step = 3;
                                                return true;
                                        }
                                        case 3: {
                                            $t1 = Bridge.getEnumerator(Core.Components.LangSelect.Travel(element), Node);
                                                $step = 4;
                                                continue;
                                        }
                                        case 4: {
                                            if ($t1.moveNext()) {
                                                    inner = $t1.Current;
                                                    $step = 5;
                                                    continue;
                                                }
                                            $step = 7;
                                            continue;
                                        }
                                        case 5: {
                                            $enumerator.current = inner;
                                                $step = 6;
                                                return true;
                                        }
                                        case 6: {
                                            $step = 4;
                                            continue;
                                        }
                                        case 7: {
                                            $step = 1;
                                            continue;
                                        }
                                        case 8: {

                                        }
                                        default: {
                                            return false;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                throw $async_e;
                            }
                        }));
                        return $enumerator;
                    }, arguments));
                }
            }
        },
        ctors: {
            ctor: function (com, ele) {
                this.$initialize();
                Core.Components.EditableComponent.ctor.call(this, com);
                this.ParentElement = ele;
                Core.Components.LangSelect._dictionaries = Core.Components.LangSelect._dictionaries || new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor();
            }
        },
        methods: {
            Render: function () {
                var fn = { };
                if (this.GuiInfo != null && !Core.Extensions.StringExt.IsNullOrEmpty(this.GuiInfo.FormatData) && Core.Extensions.Utils.IsFunction(this.GuiInfo.FormatData, fn)) {
                    Core.MVVM.Html.Take(this.ParentElement);
                    fn.v.call(null, this);
                    this.Element = this.ParentElement.firstElementChild;
                }
                if (this.Element == null) {
                    Core.Components.Renderer.ClassName(Core.MVVM.Html.Take(this.ParentElement).Ul, "lang-select").Li.DataAttr$1(Core.Components.LangSelect.LangCode, "vi").Attr$1("Active", System.Boolean.toString((true)).toLowerCase()).Img.Src("./icons/vn.png").EndOf(Core.MVVM.ElementType.li).Li.DataAttr$1(Core.Components.LangSelect.LangCode, "en").Img.Src("./icons/eg.png").EndOf(Core.MVVM.ElementType.li);
                    this.Element = Core.MVVM.Html.Context;
                }
                System.Linq.Enumerable.from(Core.Components.LangSelect.Travel(this.Element), Node).where(function (x) {
                        return Bridge.is(x, HTMLElement);
                    }).select(function (x) {{ return Bridge.cast(x, HTMLElement); }}).forEach(function (x) {
                    var code = x.dataset[Core.Components.LangSelect.LangCode];
                    if (Core.Extensions.StringExt.IsNullOrEmpty(code)) {
                        return;
                    }
                    x.addEventListener("click", function (e) {
                        if (Bridge.referenceEquals(x.getAttribute("Active"), System.Boolean.toString((true)).toLowerCase())) {
                            return;
                        }
                        x.setAttribute("Active", System.Boolean.toString((true)).toLowerCase());
                        Core.Components.LangSelect.SetCultureAndTranslate(code);
                    });
                    if (Core.Components.LangSelect.Culture == null && Bridge.referenceEquals(x.getAttribute("Active"), System.Boolean.toString((true)).toLowerCase())) {
                        Core.Components.LangSelect.SetCultureAndTranslate(code);
                    }
                });
                Core.MVVM.Html.Take(this.ParentElement);
            }
        }
    });

    Bridge.define("Core.Components.Link", {
        inherits: [Core.Components.EditableComponent],
        ctors: {
            ctor: function (ui, ele) {
                if (ele === void 0) { ele = null; }

                this.$initialize();
                Core.Components.EditableComponent.ctor.call(this, ui);
                this.GuiInfo = ui || (function () {
                    throw new System.ArgumentNullException.$ctor1("ui");
                })();
                this.Element = ele;
            }
        },
        methods: {
            Render: function () {
                var $t, $t1;
                if (this.Element == null) {
                    this.Element = Core.Components.Renderer.IText(Core.MVVM.Html.Take(this.ParentElement).A, ($t = this.GuiInfo.PlainText, $t != null ? $t : this.GuiInfo.Label)).GetContext();
                }
                this.Element.addEventListener("click", Bridge.fn.bind(this, function (e) {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.DispatchClick(e);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }));
                !Bridge.staticEquals(($t1 = this.DOMContentLoaded), null) ? $t1() : null;
            },
            UpdateView: function (force, dirty, componentNames) {
                if (force === void 0) { force = false; }
                if (dirty === void 0) { dirty = null; }
                if (componentNames === void 0) { componentNames = []; }
                // not to do anything here
            },
            DispatchClick: function (e) {
                var $step = 0,
                    $task1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    a, 
                    f, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4], $step);
                                switch ($step) {
                                    case 0: {
                                        e.preventDefault();
                                        if (Core.Extensions.StringExt.HasAnyChar(this.GuiInfo.Events) && System.String.contains(this.GuiInfo.Events.toLowerCase(),"click")) {
                                            $step = 1;
                                            continue;
                                        } 
                                        $step = 3;
                                        continue;
                                    }
                                    case 1: {
                                        $task1 = Core.Components.Extensions.ComponentExt.DispatchEventToHandlerAsync(this, this.GuiInfo.Events, "click", [this.Entity]);
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    case 3: {
                                        a = Bridge.as(this.Element, HTMLAnchorElement);
                                        f = Core.Extensions.Utils.GetUrlParam(Core.Extensions.Utils.FeatureField, a.href);
                                        Core.Components.Spinner.AppendTo(Bridge.as(document.querySelector("header"), HTMLElement) || document.body, true, true, 1000);
                                        $task2 = Core.Components.Extensions.ComponentExt.InitFeatureByName(($t = f, $t != null ? $t : "Home"));
                                        $step = 4;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        window.history.pushState(null, a.title, a.href);
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("Core.Components.ListViewSearch", {
        inherits: [Core.Components.EditableComponent],
        fields: {
            _uploader: null,
            BasicSearch: null,
            parentListView: null
        },
        props: {
            EntityVM: {
                get: function () {
                    return Bridge.as(this.Entity, Core.Components.ListViewSearchVM);
                }
            },
            DateTimeField: null,
            ParentListView: {
                get: function () {
                    if (this.parentListView != null) {
                        return this.parentListView;
                    }

                    return Bridge.as(this.Parent, Core.Components.ListView);
                },
                set: function (value) {
                    this.parentListView = value;
                }
            },
            Disabled: {
                get: function () {
                    return false;
                },
                set: function (value) {
                    this._disabled = false;
                }
            }
        },
        ctors: {
            ctor: function (ui) {
                var $t;
                this.$initialize();
                Core.Components.EditableComponent.ctor.call(this, ui);
                this.PopulateDirty = false;
                this.AlwaysValid = true;
                this.GuiInfo = ui || (function () {
                    throw new System.ArgumentNullException.$ctor1("ui");
                })();
                this.DateTimeField = ($t = ui.DateTimeField, $t != null ? $t : "InsertedDate");
                this.Entity = new Core.Components.ListViewSearchVM();
            }
        },
        methods: {
            ParentListView_HeaderLoaded: function (basicSearchHeader) {
                var $t;
                this.BasicSearch = System.Linq.Enumerable.from(basicSearchHeader, Core.Models.GridPolicy).where(function (x) {
                        return x.BasicSearch;
                    }).ToArray(Core.Models.GridPolicy);
                if (Core.Extensions.IEnumerableExtensions.Nothing(Core.Models.GridPolicy, this.BasicSearch)) {
                    return;
                }
                Core.MVVM.Html.Take(this.Element);
                var components = System.Linq.Enumerable.from(this.BasicSearch, Core.Models.GridPolicy).select(Bridge.fn.bind(this, function (header) {
                        var $t, $t1;
                        var com = Core.Extensions.Utils.MapToComponent(header);
                        var componentType = Core.Extensions.Utils.TryParse(Core.Enums.ComponentTypeTypeEnum, com.ComponentType);
                        com.ShowLabel = false;
                        com.Visibility = true;
                        com.Column = 1;
                        this.ParentListView.AdvSearchVM.Conditions.add(($t = new Core.Models.FieldCondition(), $t.FieldId = com.Id, $t.CompareOperatorId = System.Linq.Enumerable.from(Core.Components.AdvancedSearch.OperatorFactory(($t1 = componentType, $t1 != null ? $t1 : Core.Enums.ComponentTypeTypeEnum.Textbox)), Core.Models.Entity).firstOrDefault(null, null).Id, $t.LogicOperatorId = Core.Enums.LogicOperation.And, $t.Field = header, $t));
                        return com;
                    })).ToArray(Core.Models.Component);
                var section = ($t = new Core.Models.ComponentGroup(), $t.Component = components, $t.Responsive = true, $t.Column = components.length, $t.ClassName = "wrapper", $t);
                var _basicSearchGroup = this.EditForm.RenderSection(this, section);
                _basicSearchGroup.Children.ForEach(Bridge.fn.bind(this, function (child) {
                    child.UserInput = Bridge.fn.combine(child.UserInput, Bridge.fn.bind(this, function (changes) {
                        var $t1;
                        var condition = System.Linq.Enumerable.from(this.ParentListView.AdvSearchVM.Conditions, Core.Models.FieldCondition).firstOrDefault(function (x) {
                                return x.FieldId === child.GuiInfo.Id;
                            }, null);
                        condition.Value = ($t1 = Core.Components.Extensions.ComponentExt.GetValue(child, true)) != null ? Bridge.toString($t1) : null;
                    }));
                }));
                while (_basicSearchGroup.Element.children.length > 0) {
                    this.Element.insertBefore(_basicSearchGroup.Element.firstChild, this.Element.firstChild);
                }
            },
            Render: function () {
                var $t, $t1;
                this.ParentListView = Bridge.as(this.Parent, Core.Components.ListView);
                this.ParentListView.addHeaderLoaded(Bridge.fn.cacheBind(this, this.ParentListView_HeaderLoaded));
                if (!this.GuiInfo.CanSearch) {
                    return;
                }

                Core.Components.Renderer.TabIndex(Core.MVVM.Html.Take(this.Parent.Element.firstElementChild), -1).AsyncEvent$1("keypress", Bridge.fn.cacheBind(this, this.EnterSearch));
                this.Element = Core.MVVM.Html.Context;
                var txtSearch = ($t = new Core.Components.Textbox(($t1 = new Core.Models.Component(), $t1.FieldName = "SearchTerm", $t1.Visibility = true, $t1.Label = "T\u00ecm ki\u1ebfm", $t1.ShowLabel = false, $t1)), $t.ParentElement = this.Element, $t);
                txtSearch.UserInput = null;
                this.AddChild(txtSearch);
                var startDate = ($t = new Core.Components.Datepicker(($t1 = new Core.Models.Component(), $t1.FieldName = "StartDate", $t1.Visibility = true, $t1.Label = "T\u1eeb ng\u00e0y", $t1.ShowLabel = false, $t1)), $t.ParentElement = this.Element, $t);
                startDate.UserInput = null;
                this.AddChild(startDate);
                var endDate = ($t = new Core.Components.Datepicker(($t1 = new Core.Models.Component(), $t1.FieldName = "EndDate", $t1.Visibility = true, $t1.Label = "\u0110\u1ebfn ng\u00e0y", $t1.ShowLabel = false, $t1)), $t.ParentElement = this.Element, $t);
                endDate.UserInput = null;
                this.AddChild(endDate);
                Core.Components.Renderer.Title(Core.Components.Renderer.Button(Core.Components.Renderer.Icon(Core.Components.Renderer.Title(Core.Components.Renderer.Button(Core.Components.Renderer.Button(Core.Components.Renderer.ClassName(Core.MVVM.Html.Take(this.Element).Div, "searching-block"), "T\u00ecm ki\u1ebfm", "button secondary small btn-toolbar", "fa fa-search").Event("click", Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.ParentListView.ApplyFilter();
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                })).End, "", "button secondary small btn-toolbar right", "fa fa-cog"), "N\u00e2ng cao"), "fa fa-chevron-down").End.Event$1("click", Bridge.fn.cacheBind(this, this.AdvancedOptions)).End, "", "btnSearch button secondary small btn-toolbar right", "fa fa-undo"), "L\u00e0m m\u1edbi").Event("click", Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.RefershListView();
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                })).End.Render();
            },
            EnterSearch: function (e) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (Core.Extensions.EventExt.KeyCode(e) !== 13) {
                                            $tcs.setResult(null);
                                            return;
                                        }

                                        $task1 = this.ParentListView.ApplyFilter();
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            UploadCsv: function (e) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    files, 
                    fileName, 
                    uploadForm, 
                    formData, 
                    parentForm, 
                    response, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        files = Bridge.as(e.target.files, FileList);
                                        if (Core.Extensions.IEnumerableExtensions.Nothing(File, files)) {
                                            $tcs.setResult(null);
                                            return;
                                        }

                                        fileName = System.Linq.Enumerable.from(files, File).firstOrDefault(null, null).name;
                                        uploadForm = Bridge.as(this._uploader.parentElement, HTMLFormElement);
                                        formData = new FormData(uploadForm);
                                        parentForm = Core.Components.Extensions.ComponentExt.FindClosest(Core.Components.Forms.EditForm, this);
                                        $task1 = parentForm.Client.SubmitAsync(Blob, ($t = new Core.Clients.XHRWrapper(), $t.FormData = formData, $t.Url = "importCsv", $t.Method = Core.Enums.HttpMethod.POST, $t.ResponseMimeType = Core.Extensions.Utils.GetMimeType("csv"), $t));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        response = $taskResult1;
                                        Core.Components.Extensions.ComponentExt.DownloadFile(fileName, response);
                                        Core.Extensions.Toast.Success("Import excel th\u00e0nh c\u00f4ng");
                                        this._uploader.value = "";
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            AdvancedOptions: function (e) {
                var $t;
                var buttonRect = e.target.getBoundingClientRect();
                var ctxMenu = Core.Components.Forms.ContextMenu.Instance;
                ctxMenu.Top = buttonRect.bottom;
                ctxMenu.Left = buttonRect.left;
                ctxMenu.MenuItems = Bridge.fn.bind(this, function (_o1) {
                        var $t;
                        _o1.add(($t = new Core.Components.Forms.ContextMenuItem(), $t.Icon = "fa fa-search-plus", $t.Text = "N\u00e2ng cao", $t.Click = Bridge.fn.cacheBind(this, this.AdvancedSearch), $t));
                        _o1.add(($t = new Core.Components.Forms.ContextMenuItem(), $t.Icon = "fa fa-cloud-upload-alt", $t.Text = "Nh\u1eadp excel", $t.Click = Bridge.fn.cacheBind(this, this.OpenExcelFileDialog), $t));
                        _o1.add(($t = new Core.Components.Forms.ContextMenuItem(), $t.Icon = "fa fa-download", $t.Text = "Xu\u1ea5t hi\u1ec3n th\u1ecb", $t.Click = Bridge.fn.cacheBind(this, this.ExportDisplay), $t));
                        _o1.add(($t = new Core.Components.Forms.ContextMenuItem(), $t.Icon = "fa fa-download", $t.Text = "Xu\u1ea5t to\u00e0n b\u1ed9", $t.Click = Bridge.fn.cacheBind(this, this.ExportAllData), $t));
                        _o1.add(($t = new Core.Components.Forms.ContextMenuItem(), $t.Icon = "fa fa-sort-size-up-alt", $t.Text = "T\u00f9y ch\u1ecdn c\u1ed9t", $t.Click = Bridge.fn.cacheBind(this, this.CustomzieColumn), $t));
                        return _o1;
                    })(new (System.Collections.Generic.List$1(Core.Components.Forms.ContextMenuItem)).ctor());
                ctxMenu.Render();
                Core.MVVM.Html.Take(this.Element).Form.Attr$1("method", "POST").Attr$1("enctype", "multipart/form-data").Display$1(false).Input.Type$1("file").Id(System.String.format("id_{0}", [Bridge.box(Bridge.getHashCode(this), System.Int32)])).Attr$1("name", "files").Attr$1("accept", ".csv");
                this._uploader = Bridge.as(Core.MVVM.Html.Context, HTMLInputElement);
                this._uploader.addEventListener(System.Enum.toString(System.String, "change"), Bridge.fn.bind(this, function (ev) {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.UploadCsv(ev);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }));
                ($t = System.Linq.Enumerable.from(ctxMenu.Element.children, HTMLElement).firstOrDefault(null, null)) != null ? $t.appendChild(this._uploader.parentElement) : null;
            },
            AdvancedSearch: function (arg) {
                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this.TabEditor, "AdvancedSearch", Bridge.fn.bind(this, function () {
                                                var $t;
                                                var editor = ($t = new Core.Components.AdvancedSearch(this.ParentListView), $t.ParentListView = Bridge.as(this.Parent, Core.Components.ListView), $t.ParentElement = this.TabEditor.Element, $t);
                                                return editor;
                                            }));
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            CustomzieColumn: function (arg) {
                var $t;
                var editor = ($t = new Core.Components.GridEditor(), $t.ListView = Bridge.as(this.Parent, Core.Components.ListView), $t.ParentElement = this.TabEditor.Element, $t);
                this.TabEditor.AddChild(editor);
            },
            ExportAllData: function (arg) {
                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = this.ExportData(false);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            ExportDisplay: function (arg) {
                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = this.ExportData(true);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            ExportData: function (paging) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    url, 
                    options, 
                    localData, 
                    copyHeaders, 
                    copyGui, 
                    copyListView, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        url = this.ParentListView.CalcFilterQuery(false);
                                        options = this.ParentListView.Paginator.Options;
                                        if (paging) {
                                            url = (url || "") + ((System.String.format("&$skip={0}&$top={1}", Bridge.box(Bridge.Int.mul(options.PageIndex, options.PageSize), System.Int32), Bridge.box(options.PageSize, System.Int32))) || "");
                                        }
                                        Core.Components.Spinner.AppendTo(this.ParentElement, true, false, 7000);
                                        $task1 = new Core.Clients.Client.$ctor1(this.GuiInfo.Reference.Name).GetList(System.Object, url);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        localData = $taskResult1;
                                        copyHeaders = System.Linq.Enumerable.from(this.ParentListView.Header, Core.Models.GridPolicy).where(function (x) {
                                            return !x.StatusBar && !Bridge.referenceEquals(x.ComponentType, "Button");
                                        }).select(function (x) {
                                            var header = new Core.Models.GridPolicy();
                                            Core.Extensions.ReflectionExt.CopyPropFrom$1(header, x);
                                            header.Editable = false;
                                            header.ComponentType = "Label";
                                            if (Bridge.referenceEquals(header.ComponentType, "Checkbox")) {
                                                header.SimpleText = true;
                                            }
                                            return header;
                                        }).toList(Core.Models.GridPolicy);
                                        copyGui = new Core.Models.Component();
                                        Core.Extensions.ReflectionExt.CopyPropFrom$1(copyGui, this.ParentListView.GuiInfo);
                                        copyGui.CanSearch = false;
                                        copyGui.LocalData = localData.Value;
                                        copyGui.LocalHeader = copyHeaders;
                                        copyListView = ($t = new Core.Components.GridView(copyGui), $t.ParentElement = this.ParentListView.ParentElement, $t);
                                        this.ParentListView.Parent.AddChild(copyListView);
                                        copyListView.Element.style.display = "none";
                                        copyListView.DOMContentLoaded = Bridge.fn.combine(copyListView.DOMContentLoaded, Bridge.fn.bind(this, function () {
                                            var $t1;
                                            Core.Extensions.ExcelExt.ExportTableToExcel(null, ($t1 = this.GuiInfo.FieldName, $t1 != null ? $t1 : "Export"), Bridge.as(copyListView.Element.querySelector("table"), HTMLElement));
                                            copyListView.Dispose();
                                            Core.Components.Spinner.Hide();
                                        }));
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            OpenExcelFileDialog: function (arg) {
                this._uploader.click();
            },
            CalcFilterQuery: function (prefix) {
                var $t, $t1;
                var headers = this.ParentListView.Header;
                var searchTerm = ($t = (($t1 = this.EntityVM.SearchTerm) != null ? $t1.trim() : null), $t != null ? $t : "");
                var finalFilter = Core.Components.Extensions.ComponentExt.FilterById(searchTerm, headers);
                if (Core.Extensions.StringExt.IsNullOrEmpty(finalFilter)) {
                    var operators = System.Linq.Enumerable.from(headers, Core.Models.GridPolicy).select(function (x) {
                            return Core.Components.Extensions.ComponentExt.MapToFilterOperator(x, searchTerm);
                        }).where(function (x) {
                        return Core.Extensions.StringExt.HasAnyChar(x);
                    });
                    finalFilter = Bridge.toArray(operators).join(" or ");
                }
                if (!Bridge.equals(this.EntityVM.StartDate, null)) {
                    if (Core.Extensions.StringExt.HasAnyChar(finalFilter)) {
                        finalFilter = (finalFilter || "") + " and ";
                    }

                    this.EntityVM.StartDate = System.DateTime.getDate(System.Nullable.getValue(this.EntityVM.StartDate));
                    finalFilter = (finalFilter || "") + ((System.String.format("{0} ge cast({1},Edm.DateTimeOffset)", this.DateTimeField, Core.Extensions.DateTimeExt.ToISOFormat(System.DateTime.toUniversalTime(System.Nullable.getValue(this.EntityVM.StartDate))))) || "");
                }
                if (!Bridge.equals(this.EntityVM.EndDate, null)) {
                    if (Core.Extensions.StringExt.HasAnyChar(finalFilter)) {
                        finalFilter = (finalFilter || "") + " and ";
                    }

                    var endDate = System.DateTime.addDays(System.DateTime.getDate(System.Nullable.getValue(this.EntityVM.EndDate)), 1);
                    finalFilter = (finalFilter || "") + ((System.String.format("{0} lt cast({1},Edm.DateTimeOffset)", this.DateTimeField, Core.Extensions.DateTimeExt.ToISOFormat(System.DateTime.toUniversalTime(endDate)))) || "");
                }
                if (Core.Extensions.StringExt.IsNullOrWhiteSpace(finalFilter)) {
                    return prefix;
                }
                var filterPart = Core.Extensions.OdataExt.GetClausePart(prefix, Core.Extensions.OdataExt.FilterKeyword);
                finalFilter = Core.Extensions.OdataExt.AppendClause(prefix, Core.Extensions.StringExt.IsNullOrWhiteSpace(filterPart) ? finalFilter : System.String.format(" and ({0})", [finalFilter]));
                return finalFilter;
            },
            RefershListView: function () {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    listView, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        this.EntityVM.SearchTerm = "";
                                        this.EntityVM.StartDate = null;
                                        this.EntityVM.EndDate = null;
                                        this.UpdateView();
                                        if (!(((listView = Bridge.as(this.Parent, Core.Components.ListView))) != null)) {
                                            $tcs.setResult(null);
                                            return;
                                        }

                                        listView.ClearRowData();
                                        listView.DataSourceFilter = listView.GuiInfo.DataSourceFilter;
                                        $task1 = listView.ReloadData();
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("Core.Components.SearchEntry", {
        inherits: [Core.Components.EditableComponent],
        statics: {
            fields: {
                Table: null
            }
        },
        fields: {
            _value: null,
            _input: null,
            _clone: null,
            _waitForInput: 0,
            _contextMenu: false,
            RowData: null,
            _focusIn: false,
            _resetFocuAwaiter: 0,
            dataSourceFilter: null,
            _findMatchTextAwaiter: 0
        },
        props: {
            IdFieldName: null,
            Value: {
                get: function () {
                    return this._value;
                },
                set: function (value) {
                    var $t;
                    if (System.Nullable.neq(this._value, value)) {
                        this.Dirty = true;
                    }

                    this._value = value;
                    ($t = this.Entity) != null ? Core.Extensions.BridgeExt.SetComplexPropValue($t, this.GuiInfo.FieldName, Bridge.box(value, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)) : null;
                    System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                        var $step = 0,
                            $task1, 
                            $jumpFromFinally, 
                            $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                            $returnValue, 
                            $async_e, 
                            $asyncBody = Bridge.fn.bind(this, function () {
                                try {
                                    for (;;) {
                                        $step = System.Array.min([0,1], $step);
                                        switch ($step) {
                                            case 0: {
                                                this._value = value;
                                                $task1 = this.FindMatchTextAsync();
                                                $step = 1;
                                                if ($task1.isCompleted()) {
                                                    continue;
                                                }
                                                $task1.continue($asyncBody);
                                                return;
                                            }
                                            case 1: {
                                                $task1.getAwaitedResult();
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            default: {
                                                $tcs.setResult(null);
                                                return;
                                            }
                                        }
                                    }
                                } catch($async_e1) {
                                    $async_e = System.Exception.create($async_e1);
                                    $tcs.setException($async_e);
                                }
                            }, arguments);

                        $asyncBody();
                        return $tcs.task;
                    }));
                }
            },
            Text: {
                get: function () {
                    return this._input.value;
                },
                set: function (value) {
                    this._input.value = value;
                }
            },
            DataSourceFilter: {
                get: function () {
                    return this.dataSourceFilter;
                },
                set: function (value) {
                    this.dataSourceFilter = Core.Extensions.Utils.DecodeSpecialChar(value);
                }
            },
            Matched: null,
            FormattedDataSource: {
                get: function () {
                    var fn = { };
                    if (Core.Extensions.Utils.IsFunction(this.DataSourceFilter, fn)) {
                        return Bridge.toString(fn.v.call(this, this));
                    }
                    var dataSourceFilter = Core.Extensions.StringExt.HasAnyChar(this.DataSourceFilter) ? this.DataSourceFilter : "";
                    var checkContain = System.String.contains(dataSourceFilter,"EditForm.") || System.String.contains(dataSourceFilter,"TabEditor.") || System.String.contains(dataSourceFilter,"Entity.");
                    var dataSource = Core.Extensions.Utils.FormatEntity(dataSourceFilter, null, checkContain ? this : this.Entity, void 0, function (x) {
                        return "null";
                    });
                    return dataSource;
                }
            }
        },
        ctors: {
            ctor: function (ui, ele) {
                if (ele === void 0) { ele = null; }

                this.$initialize();
                Core.Components.EditableComponent.ctor.call(this, ui);
                this.DataSourceFilter = ui.DataSourceFilter;
                this.DeserializeLocalData(ui);
                this.GuiInfo.ComponentGroup = null;
                this.GuiInfo.Row = 12;
                this.RowData = new (Core.MVVM.ObservableList$1(System.Object)).ctor();
                Core.Components.SearchEntry.Table = Core.Components.FloatingGridView.Instance;
                this.Element = ele;
                this.IdFieldName = this.GuiInfo.FieldName;
            }
        },
        methods: {
            DeserializeLocalData: function (ui) {
                if (Core.Extensions.StringExt.IsNullOrEmpty(ui.Query)) {
                    return;
                }
                this.GuiInfo.LocalData = Newtonsoft.Json.JsonConvert.DeserializeObject(ui.Query, System.Collections.Generic.List$1(System.Object));
                this.GuiInfo.LocalRender = true;
            },
            Render: function () {
                this.SetDefaultVal();
                var entityVal = Core.Extensions.Utils.GetComplexPropValue(this.Entity, this.IdFieldName);
                var str_value;
                if (((str_value = Bridge.as(entityVal, System.String))) != null) {
                    this._value = Core.Extensions.Utils.TryParseInt(str_value);
                } else {
                    this._value = Bridge.as(entityVal, System.Int32, true);
                }
                this.RenderInputAndEvents();
                this.RenderIcons();
                this.FindMatchText();
            },
            RenderInputAndEvents: function () {
                if (this.Element == null) {
                    this.Element = (this._input = Bridge.as(Core.Components.Renderer.ClassName(Core.Components.Renderer.Position$1(Core.MVVM.Html.Take(this.ParentElement).Div, Core.Components.Position.relative), "search-entry").Input.GetContext(), HTMLInputElement));
                } else {
                    this._input = Bridge.as(this.Element, HTMLInputElement);
                }
                this._input.autocomplete = "off";
                Core.Components.Renderer.PlaceHolder(Core.MVVM.Html.Take(this._input), this.GuiInfo.PlainText).Attr$1("name", this.IdFieldName).Event("contextmenu", Bridge.fn.bind(this, function () {
                    this._contextMenu = true;
                })).Event("focus", Bridge.fn.cacheBind(this, this.FocusIn)).Event("blur", Bridge.fn.cacheBind(this, this.FocusOut));
                Core.MVVM.Html.Instance.Event("click", Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3], $step);
                                switch ($step) {
                                    case 0: {
                                        if (this.Disabled) {
                                            $step = 1;
                                            continue;
                                        } 
                                        $step = 3;
                                        continue;
                                    }
                                    case 1: {
                                        $task1 = this.OpenRefDetail();
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $task1.getAwaitedResult();
                                        $step = 3;
                                        continue;
                                    }
                                    case 3: {
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }));
                Core.MVVM.Html.Instance.Event$1("keydown", Bridge.fn.bind(this, function (e) {
                    var $t;
                    if (this.Disabled || e == null) {
                        return;
                    }

                    var code = Core.Extensions.EventExt.KeyCode(e);
                    if (code === Core.Enums.KeyCodeEnum.Escape && Core.Components.SearchEntry.Table != null && Core.Components.SearchEntry.Table.Show) {
                        e.stopPropagation();
                        Core.Components.SearchEntry.Table.Show = false;
                    }
                    if (code === Core.Enums.KeyCodeEnum.UpArrow) {
                        Core.Components.SearchEntry.Table != null ? Core.Components.SearchEntry.Table.MoveUp() : null;
                    }

                    if (code === Core.Enums.KeyCodeEnum.DownArrow) {
                        Core.Components.SearchEntry.Table != null ? Core.Components.SearchEntry.Table.MoveDown() : null;
                    }

                    if (code === Core.Enums.KeyCodeEnum.Enter) {
                        if (Core.Components.SearchEntry.Table.Show) {
                            this.EntrySelected(Core.Components.SearchEntry.Table != null && ($t = Core.Components.SearchEntry.Table.RowData) != null ? $t.Data.getItem(Core.Components.SearchEntry.Table.SelectedIndex) : null);
                        } else {
                            Core.Components.SearchEntry.Table.Show = !this.Disabled;
                        }
                    }
                }));
                Core.MVVM.Html.Instance.Event$1("input", Bridge.fn.bind(this, function (e) {
                    window.clearTimeout(this._waitForInput);
                    this._waitForInput = window.setTimeout(Bridge.fn.cacheBind(this, this.Search), 300);
                }));
            },
            FocusIn: function () {
                if (this._contextMenu) {
                    this._contextMenu = false;
                    return;
                }
                if (this.Disabled || this._focusIn) {
                    return;
                }

                this._focusIn = true;
                if (this._input.nextElementSibling != null) {
                    this._input.nextElementSibling.style.display = "block";
                }
                Core.Components.SearchEntry.Table.RowClick = Bridge.fn.cacheBind(this, this.EntrySelected);
                Core.Components.SearchEntry.Table.Parent = this;
                Core.Components.SearchEntry.Table.Entity = this.Entity;
                Core.Components.SearchEntry.Table.ParentElement = this.Element.parentElement;
                this.GuiInfo.DataSourceFilter = Core.Extensions.Utils.DecodeSpecialChar(this.DataSourceFilter);
                Core.Components.SearchEntry.Table.GuiInfo = this.GuiInfo;
                Core.Components.SearchEntry.Table.InputFocus = true;
                if (!Core.Components.BaseComponent.IsSmallUp) {
                    this._clone = Bridge.cast(this._input.cloneNode(true), HTMLInputElement);
                    this.ParentElement.appendChild(this._clone);
                    Core.Extensions.HtmlElementExtension.AddClass(this._input, "fixed-top");
                }
                window.setTimeout(Bridge.fn.bind(this, function () {
                    this._focusIn = false;
                }), 300);
            },
            FocusOut: function () {
                if (this._focusIn) {
                    this.ForceFocus();
                    return;
                }
                if (Core.Components.SearchEntry.Table != null) {
                    Core.Components.SearchEntry.Table.InputFocus = false;
                    Core.Components.SearchEntry.Table.InputBlur = true;
                    if (Core.Components.SearchEntry.Table.ListViewSearch != null) {
                        Core.Components.SearchEntry.Table.ListViewSearch.EntityVM.SearchTerm = "";
                    }
                }
                this.ClearClone();
                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = System.Threading.Tasks.Task.delay(250);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            ClearClone: function () {
                if (Core.Components.BaseComponent.IsSmallUp) {
                    return;
                }

                Core.Extensions.HtmlElementExtension.RemoveClass(this._input, "fixed-top");
                this.ParentElement.firstElementChild.appendChild(this._input);
                this._clone != null ? this._clone.remove() : null;
            },
            RenderIcons: function () {
                var title = Core.Components.LangSelect.Get("T\u1ea1o m\u1edbi d\u1eef li\u1ec7u ");
                Core.Components.Renderer.ClassName(Core.MVVM.Html.Take(this.Element.parentElement).Div, "search-icons");
                var div = Core.Components.Renderer.Title(Core.Components.Renderer.Icon(Core.Components.Renderer.Title(Core.Components.Renderer.Icon(Core.MVVM.Html.Instance, "fa fa-info-circle"), (Core.Components.LangSelect.Get("Th\u00f4ng tin chi ti\u1ebft ") || "") + (Core.Components.LangSelect.Get(this.GuiInfo.Label).toLowerCase() || "")).AsyncEvent("click", Bridge.fn.cacheBind(this, this.OpenRefDetail)).End, "fa fa-plus"), System.String.format("{0} {1}", title, Core.Components.LangSelect.Get(this.GuiInfo.Label).toLowerCase())).AsyncEvent("click", Bridge.fn.cacheBind(this, this.CreateNewRef)).End.GetContext();
                if (this.Element.nextElementSibling != null) {
                    this.Element.parentElement.insertBefore(div, this.Element.nextElementSibling);
                } else {
                    this.Element.parentElement.appendChild(div);
                }
            },
            OpenRefDetail: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    feature, 
                    type, 
                    instance, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (Core.Extensions.StringExt.IsNullOrEmpty(this.GuiInfo.RefClass) || this.Matched == null) {
                                            $tcs.setResult(null);
                                            return;
                                        }

                                        $task1 = Core.Components.Extensions.ComponentExt.LoadFeatureByNameOrViewClass(this.GuiInfo.RefClass);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        feature = $taskResult1;
                                        if (feature == null) {
                                            $tcs.setResult(null);
                                            return;
                                        }

                                        type = Bridge.Reflection.getType(this.GuiInfo.RefClass);
                                        if (type == null) {
                                            $tcs.setResult(null);
                                            return;
                                        }

                                        instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.TabEditor);
                                        instance.Id = feature.Name;
                                        instance.Entity = this.Matched;
                                        instance.ParentForm = this.TabEditor;
                                        instance.ParentElement = this.TabEditor.Element;
                                        this.TabEditor.AddChild(instance);
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CreateNewRef: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    feature, 
                    instance, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (Core.Extensions.StringExt.IsNullOrEmpty(this.GuiInfo.RefClass)) {
                                            $tcs.setResult(null);
                                            return;
                                        }

                                        $task1 = Core.Components.Extensions.ComponentExt.LoadFeatureByNameOrViewClass(this.GuiInfo.RefClass);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        feature = $taskResult1;
                                        instance = Bridge.as(Bridge.createInstance(Bridge.Reflection.getType(this.GuiInfo.RefClass)), Core.Components.Forms.TabEditor);
                                        instance.Id = feature.Name;
                                        instance.ParentForm = this.TabEditor;
                                        instance.ParentElement = this.TabEditor.Element;
                                        this.TabEditor.AddChild(instance);
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            Search: function () {
                var $t, $t1;
                Core.Components.SearchEntry.Table.ListViewSearch.EntityVM.SearchTerm = Core.Extensions.Utils.EncodeSpecialChar(this._input.value);
                if (Core.Extensions.StringExt.IsNullOrEmpty(this._input.value)) {
                    var oldValue = this._value;
                    var oldMatch = this.Matched;
                    this.Matched = null;
                    this._value = null;
                    this._input.value = "";
                    ($t = this.Entity) != null ? Core.Extensions.BridgeExt.SetComplexPropValue($t, this.GuiInfo.FieldName, null) : null;
                    if (!Bridge.staticEquals(this.UserInput, null)) {
                        this.UserInput(($t1 = new Core.MVVM.ObservableArgs(), $t1.NewData = null, $t1.OldData = Bridge.box(oldValue, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), $t1));
                    }
                    System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                        var $step = 0,
                            $task1, 
                            $task2, 
                            $jumpFromFinally, 
                            $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                            $returnValue, 
                            $async_e, 
                            $asyncBody = Bridge.fn.bind(this, function () {
                                try {
                                    for (;;) {
                                        $step = System.Array.min([0,1,2], $step);
                                        switch ($step) {
                                            case 0: {
                                                $task1 = Core.Components.Extensions.ComponentExt.DispatchEventToHandlerAsync(this, this.GuiInfo.Events, "change", [this.Entity, null, oldMatch]);
                                                $step = 1;
                                                if ($task1.isCompleted()) {
                                                    continue;
                                                }
                                                $task1.continue($asyncBody);
                                                return;
                                            }
                                            case 1: {
                                                $task1.getAwaitedResult();
                                                this.ForceFocus();
                                                $task2 = Core.Components.SearchEntry.Table.ApplyFilter();
                                                $step = 2;
                                                if ($task2.isCompleted()) {
                                                    continue;
                                                }
                                                $task2.continue($asyncBody);
                                                return;
                                            }
                                            case 2: {
                                                $task2.getAwaitedResult();
                                                this.ForceFocus();
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            default: {
                                                $tcs.setResult(null);
                                                return;
                                            }
                                        }
                                    }
                                } catch($async_e1) {
                                    $async_e = System.Exception.create($async_e1);
                                    $tcs.setException($async_e);
                                }
                            }, arguments);

                        $asyncBody();
                        return $tcs.task;
                    }));
                    return;
                }
                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            this.ForceFocus();
                                            $task1 = Core.Components.SearchEntry.Table.ApplyFilter();
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            this.ForceFocus();
                                            Core.Components.Extensions.ComponentExt.AlterPosition(Core.Components.SearchEntry.Table.Element, this.Element);
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            ForceFocus: function () {
                this._focusIn = true;
                this._input.focus();
                window.clearTimeout(this._resetFocuAwaiter);
                this._resetFocuAwaiter = window.setTimeout(Bridge.fn.bind(this, function () {
                    this._focusIn = false;
                }), 300);
            },
            FindMatchText: function (delay) {
                if (delay === void 0) { delay = 0; }
                window.clearTimeout(this._findMatchTextAwaiter);
                this._findMatchTextAwaiter = window.setTimeout(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.FindMatchTextAsync();
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }), delay);
            },
            FindMatchTextAsync: function (force) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $task3, 
                    $taskResult3, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    query, 
                    list, 
                    $t, 
                    formatted, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,10,12], $step);
                                switch ($step) {
                                    case 0: {
                                        if (force === void 0) { force = false; }
                                        if (this.EmptyRow || !force && this.ProcessLocalMatch()) {
                                            $tcs.setResult(null);
                                            return;
                                        }

                                        list = null;
                                        if (Bridge.referenceEquals((($t = this.GuiInfo.DefaultVal) != null ? $t.trim() : null), Bridge.toString((0))) && this.Value == null && Bridge.unbox(this.Entity[Core.Components.BaseComponent.IdField]) <= 0) {
                                            $step = 1;
                                            continue;
                                        } else  {
                                            $step = 3;
                                            continue;
                                        }
                                    }
                                    case 1: {
                                        query = (this.FormattedDataSource || "") + "&$top=1";
                                        $task1 = new Core.Clients.Client.$ctor1(this.GuiInfo.RefName).GetList(System.Object, query);
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        list = $taskResult1;
                                        $step = 12;
                                        continue;
                                    }
                                    case 3: {
                                        if (System.Nullable.hasValue(this.Value)) {
                                            $step = 4;
                                            continue;
                                        } else  {
                                            $step = 10;
                                            continue;
                                        }
                                    }
                                    case 4: {
                                        formatted = this.FormattedDataSource;
                                        if (System.String.startsWith(formatted, "/")) {
                                            $step = 5;
                                            continue;
                                        } else  {
                                            $step = 7;
                                            continue;
                                        }
                                    }
                                    case 5: {
                                        formatted = Core.Extensions.OdataExt.ApplyClause(formatted, System.String.format("Id in ({0})", [Bridge.box(this.Value, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]));
                                        $task2 = new Core.Clients.Client.$ctor1(this.GuiInfo.RefName).GetList(System.Object, (formatted || "") + "&$top=1");
                                        $step = 6;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 6: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        list = $taskResult2;
                                        $step = 9;
                                        continue;
                                    }
                                    case 7: {
                                        $task3 = new Core.Clients.Client.$ctor1(this.GuiInfo.RefName).LoadById(System.Nullable.toString(this.Value, null));
                                        $step = 8;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 8: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        list = $taskResult3;
                                        $step = 9;
                                        continue;
                                    }
                                    case 9: {
                                        $step = 11;
                                        continue;
                                    }
                                    case 10: {
                                        if (this.Value == null) {
                                            this.Matched = null;
                                            this._input.value = null;
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        $step = 11;
                                        continue;
                                    }

                                    case 12: {
                                        if (list == null || list.Value == null) {
                                            $tcs.setResult(null);
                                            return;
                                        }

                                        this.Matched = System.Linq.Enumerable.from(list.Value, System.Object).firstOrDefault(Bridge.fn.bind(this, function (x) {
                                            return System.Nullable.eq(System.Nullable.getValue(Bridge.cast(Bridge.unbox(x[Core.Components.BaseComponent.IdField], System.Int32), System.Int32)), this._value);
                                        }), null);
                                        this.SetMatchedValue();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ProcessLocalMatch: function () {
                var isLocalMatched = Core.Components.SearchEntry.Table != null && Core.Extensions.IEnumerableExtensions.HasElement(System.Object, this.RowData.Data) || this.GuiInfo.LocalData != null;
                if (isLocalMatched) {
                    this.Matched = Core.Extensions.IEnumerableExtensions.HasElement(System.Object, this.GuiInfo.LocalData) ? System.Linq.Enumerable.from(this.GuiInfo.LocalData, System.Object).firstOrDefault(Bridge.fn.bind(this, function (x) {
                            return System.Nullable.eq(System.Nullable.getValue(Bridge.cast(Bridge.unbox(x[Core.Components.BaseComponent.IdField], System.Int32), System.Int32)), this._value);
                        }), null) : System.Linq.Enumerable.from(this.RowData.Data, System.Object).firstOrDefault(Bridge.fn.bind(this, function (x) {
                            return System.Nullable.getValue(Bridge.cast(Bridge.unbox(x[Core.Components.BaseComponent.IdField], System.Int32), System.Int32)) === System.Nullable.getValue(this.Value);
                        }), null);
                }
                if (isLocalMatched || this.Matched != null && System.Nullable.eq(Bridge.cast(Bridge.unbox(this.Matched[Core.Components.BaseComponent.IdField], System.Int32), System.Int32, true), this.Value) || this.Matched == null && (this.Value == null || System.Nullable.eq(this.Value, 0))) {
                    this.SetMatchedValue();
                    return true;
                }
                return false;
            },
            TriggerValueChanged: function (arg) {
                this.CascadeField();
                this.PopulateFields(this.Matched);
            },
            SetMatchedValue: function () {
                var $t;
                this._input.value = this.EmptyRow ? "" : this.GetMatchedText(this.Matched);
                if (this.GuiInfo.AutoFit) {
                    Core.Components.Extensions.ComponentExt.SetAutoWidth(this, this._input.value, Core.Extensions.HtmlElementExtension.GetComputedStyle(this._input).font, 48);
                }
                if (!this.Dirty) {
                    !Bridge.staticEquals(($t = this.DOMContentLoaded), null) ? $t() : null;
                    this.OriginalText = this._input.value;
                    this.OldValue = System.Nullable.toString(this._value, null);
                }
            },
            GetMatchedText: function (matched) {
                if (matched == null) {
                    return "";
                }
                var res;
                if (Core.Extensions.StringExt.HasNonSpaceChar(this.GuiInfo.FormatEntity)) {
                    var fn = { };
                    if (Core.Extensions.Utils.IsFunction(this.GuiInfo.FormatEntity, fn)) {
                        res = Bridge.toString(fn.v.call(this, Bridge.unbox(matched)));
                    } else {
                        res = Core.Extensions.Utils.FormatEntity(this.GuiInfo.FormatEntity, null, matched, Core.Extensions.Utils.EmptyFormat, Core.Extensions.Utils.EmptyFormat);
                    }
                } else {
                    res = matched != null ? Core.Extensions.Utils.FormatEntity(this.GuiInfo.FormatData, null, matched, Core.Extensions.Utils.EmptyFormat, Core.Extensions.Utils.EmptyFormat) : "";
                }
                return Core.Extensions.Utils.DecodeSpecialChar(res);
            },
            EntrySelected: function (rowData) {
                var $t, $t1, $t2;
                this.EmptyRow = false;
                if (rowData == null || this.Disabled) {
                    return;
                }

                this.ClearClone();
                var oldMatch = this.Matched;
                this.Matched = rowData;
                var oldValue = this._value;
                this._value = System.Nullable.getValue(Bridge.cast(Bridge.unbox(rowData[Core.Components.BaseComponent.IdField], System.Int32), System.Int32));
                ($t = this.Entity) != null ? Core.Extensions.BridgeExt.SetComplexPropValue($t, ($t1 = this.GuiInfo) != null ? $t1.FieldName : null, Bridge.box(this._value, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)) : null;
                this.Dirty = true;
                this.Matched = rowData;
                this.SetMatchedValue();
                if (!Bridge.staticEquals(this.UserInput, null)) {
                    this.UserInput(($t2 = new Core.MVVM.ObservableArgs(), $t2.NewData = Bridge.box(this._value, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), $t2.OldData = Bridge.box(oldValue, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), $t2.EvType = "change", $t2));
                }
                if (Core.Components.SearchEntry.Table != null) {
                    Core.Components.SearchEntry.Table.RowClicking = true;
                    Core.Components.SearchEntry.Table.Show = false;
                }
                this._input.focus();
                this.CascadeField();
                this.PopulateFields(this.Matched);
                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = Core.Components.Extensions.ComponentExt.DispatchEventToHandlerAsync(this, this.GuiInfo.Events, "change", [this.Entity, rowData, oldMatch]);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            UpdateView: function (force, dirty, componentNames) {
                var $t;
                if (force === void 0) { force = false; }
                if (dirty === void 0) { dirty = null; }
                if (componentNames === void 0) { componentNames = []; }
                var updatedValue = null;
                var fieldVal = ($t = this.Entity) != null ? Core.Extensions.Utils.GetComplexPropValue($t, this.GuiInfo.FieldName) : null;
                if (fieldVal != null) {
                    if (Core.Extensions.ReflectionExt.IsNumber(Bridge.getType(fieldVal))) {
                        updatedValue = System.Convert.toInt32(fieldVal);
                    }
                } else {
                    updatedValue = null;
                }
                if (System.Nullable.eq(updatedValue, this.Value)) {
                    return;
                }
                this._value = updatedValue;
                if (updatedValue == null) {
                    this.Matched = null;
                    this._input.value = null;
                    return;
                }
                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = this.FindMatchTextAsync(true);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            ValidateAsync: function () {
                var $step = 0,
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0], $step);
                                switch ($step) {
                                    case 0: {
                                        if (Core.Extensions.IEnumerableExtensions.Nothing(System.Collections.Generic.KeyValuePair$2(System.String,Core.Extensions.ValidationRule), this.ValidationRules)) {
                                            $tcs.setResult(true);
                                            return;
                                        }
                                        this.ValidationResult.clear();
                                        this.ValidateRequired(System.Nullable$1(System.Int32), this._value);
                                        this.Validate(System.Nullable$1(System.Int64), System.Nullable$1(System.Int64), Core.Extensions.ValidationRule.Equal, System.Int64.lift(this._value), function (value, ruleValue) {
                                            return System.Nullable.lifteq("equals", value, ruleValue);
                                        });
                                        this.Validate(System.Nullable$1(System.Int64), System.Nullable$1(System.Int64), Core.Extensions.ValidationRule.NotEqual, System.Int64.lift(this._value), function (value, ruleValue) {
                                            return System.Nullable.liftne("ne", value, ruleValue);
                                        });
                                        $tcs.setResult(this.IsValid);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            SetDisableUI: function (value) {
                if (this._input != null) {
                    this._input.readOnly = value;
                }
            },
            RemoveDOM: function () {
                if (this._input != null && this._input.parentElement != null) {
                    this._input.parentElement.remove();
                }
            }
        }
    });

    Bridge.define("Core.Components.Number", {
        inherits: [Core.Components.EditableComponent],
        statics: {
            fields: {
                _decimalSeparator: 0
            },
            ctors: {
                init: function () {
                    this._decimalSeparator = 46;
                }
            }
        },
        fields: {
            _input: null,
            _value: null,
            _nullable: false,
            _isString: false
        },
        props: {
            Value: {
                get: function () {
                    return this._value;
                },
                set: function (value) {
                    var $t;
                    var oldValue = this._value;
                    this._value = value;
                    if (System.Nullable.liftne("ne", this._value, System.Decimal.lift(null))) {
                        this._value = System.Convert.toDecimal(this._value);
                        var precision = System.Convert.toInt32(Bridge.box(($t = this.GuiInfo.Precision, $t != null ? $t : 0), System.Int32));
                        this._value = System.Decimal.toDecimalPlaces(System.Nullable.getValue(this._value), precision, 7);
                        var selectionEnd = this._input.selectionEnd;
                        this._input.value = this.EmptyRow ? "" : System.String.format("{0:n" + precision + "}", [this._value]);
                        this._input.selectionStart = selectionEnd;
                        this._input.selectionEnd = selectionEnd;
                    } else if (!this._nullable) {
                        this._value = System.Decimal(0);
                        this._input.value = this._value.toString();
                    } else {
                        this._input.value = null;
                    }

                    if (System.Nullable.liftne("ne", oldValue, this._value)) {
                        this.Dirty = true;
                    }

                    Core.Extensions.BridgeExt.SetComplexPropValue(this.Entity, this.GuiInfo.FieldName, this._value);
                    this.PopulateFields();
                }
            }
        },
        ctors: {
            ctor: function (ui, ele) {
                if (ele === void 0) { ele = null; }

                this.$initialize();
                Core.Components.EditableComponent.ctor.call(this, ui);
                this._input = Bridge.as(ele, HTMLInputElement);
            }
        },
        methods: {
            Render: function () {
                var $t;
                this.SetDefaultVal();
                var fieldVal = Core.Extensions.Utils.GetComplexPropValue(this.Entity, this.GuiInfo.FieldName);
                this._isString = Bridge.is(fieldVal, System.String);
                this._nullable = this.IsNullable(System.Int32) || this.IsNullable(System.Int64) || this.IsNullable(System.Decimal);
                this._value = this.GetDecimalValue();
                Core.Extensions.BridgeExt.SetComplexPropValue(this.Entity, this.GuiInfo.FieldName, this._value);
                if (this._input == null) {
                    Core.MVVM.Html.Take(this.ParentElement).Input.Render();
                    this.Element = (this._input = Bridge.as(Core.MVVM.Html.Context, HTMLInputElement));
                } else {
                    this.Element = this._input;
                }
                this._input.type = "tel";
                this._input.setAttribute("autocorrect", "off");
                this._input.setAttribute("spellcheck", "false");
                this._input.addEventListener("input", Bridge.fn.cacheBind(this, this.SetValue));
                this._input.addEventListener("change", Bridge.fn.cacheBind(this, this.ChangeSetValue));
                this._input.autocomplete = "off";
                this.Value = this._value; // set again to render in correct format
                if (this.GuiInfo.AutoFit) {
                    Core.Components.Extensions.ComponentExt.SetAutoWidth(this, this._input.value, Core.Extensions.HtmlElementExtension.GetComputedStyle(this._input).font);
                }
                !Bridge.staticEquals(($t = this.DOMContentLoaded), null) ? $t() : null;
            },
            IsNullable: function (T) {
                return Core.Extensions.Utils.IsNullable(T, Bridge.getType(this.Entity), this.GuiInfo.FieldName, this.Entity);
            },
            ChangeSetValue: function () {
                var $t;
                this.EmptyRow = false;
                if (Core.Extensions.StringExt.IsNullOrWhiteSpace(this._input.value)) {
                    this.Value = System.Decimal.lift(null);
                    return;
                }
                this._input.value = this._input.value.trim();
                if (System.Linq.Enumerable.from(this._input.value, System.Char).last() === Core.Components.Number._decimalSeparator) {
                    this._input.value = this._input.value.substr(0, ((this._input.value.length - 1) | 0));
                }

                var text = System.String.replaceAll(this._input.value, ",", "");
                var value = { };
                var parsedResult = System.Decimal.tryParse(text, System.Globalization.CultureInfo.invariantCulture.numberFormat, value);
                if (!parsedResult) {
                    this.Value = this._value; // Set old value to avoid accept invalid value
                    return;
                }
                var oldVal = this._value;
                this.Value = value.v;
                if (!Bridge.staticEquals(this.UserInput, null)) {
                    this.UserInput(($t = new Core.MVVM.ObservableArgs(), $t.NewData = value.v, $t.OldData = oldVal, $t.EvType = "change", $t));
                }
                this.PopulateFields();
                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = Core.Components.Extensions.ComponentExt.DispatchEventToHandlerAsync(this, this.GuiInfo.Events, "change", [this.Entity, value.v, oldVal]);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            SetValue: function () {
                var $t;
                this.EmptyRow = false;
                if (Core.Extensions.StringExt.IsNullOrWhiteSpace(this._input.value)) {
                    this.Value = System.Decimal.lift(null);
                    return;
                }
                this._input.value = this._input.value.trim();
                if (System.Linq.Enumerable.from(this._input.value, System.Char).last() === Core.Components.Number._decimalSeparator) {
                    this._input.value = this._input.value.substr(0, ((this._input.value.length - 1) | 0));
                }

                var text = System.String.replaceAll(this._input.value, ",", "");
                var value = { };
                var parsedResult = System.Decimal.tryParse(text, System.Globalization.CultureInfo.invariantCulture.numberFormat, value);
                if (!parsedResult) {
                    this.Value = this._value; // Set old value to avoid accept invalid value
                    return;
                }
                var oldVal = this._value;
                this.Value = value.v;
                if (!Bridge.staticEquals(this.UserInput, null)) {
                    this.UserInput(($t = new Core.MVVM.ObservableArgs(), $t.NewData = value.v, $t.OldData = oldVal, $t.EvType = "input", $t));
                }
                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = Core.Components.Extensions.ComponentExt.DispatchEventToHandlerAsync(this, this.GuiInfo.Events, "change", [this.Entity, value.v, oldVal]);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            GetDecimalValue: function () {
                if (this.Entity == null) {
                    return System.Decimal.lift(null);
                }

                var value = Core.Extensions.Utils.GetComplexPropValue(this.Entity, this.GuiInfo.FieldName);
                if (value == null) {
                    return System.Decimal.lift(null);
                }

                if (this._isString && Core.Extensions.StringExt.IsNullOrWhiteSpace(Bridge.toString(value))) {
                    return System.Decimal.lift(null);
                }

                try {
                    var result = System.Convert.toDecimal(value);
                    return result;
                } catch ($e1) {
                    $e1 = System.Exception.create($e1);
                }
                return System.Decimal.lift(null);
            },
            UpdateView: function (force, dirty, componentNames) {
                if (force === void 0) { force = false; }
                if (dirty === void 0) { dirty = null; }
                if (componentNames === void 0) { componentNames = []; }
                this.Value = this.GetDecimalValue();
            },
            ValidateAsync: function () {
                var $step = 0,
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0], $step);
                                switch ($step) {
                                    case 0: {
                                        if (Core.Extensions.IEnumerableExtensions.Nothing(System.Collections.Generic.KeyValuePair$2(System.String,Core.Extensions.ValidationRule), this.ValidationRules)) {
                                            $tcs.setResult(true);
                                            return;
                                        }
                                        this.ValidationResult.clear();
                                        this.ValidateRequired(System.Nullable$1(System.Decimal), this._value);
                                        this.Validate(System.Nullable$1(System.Decimal), System.Nullable$1(System.Decimal), Core.Extensions.ValidationRule.GreaterThan, this._value, function (value, ruleValue) {
                                            return System.Nullable.lifteq("equals", ruleValue, System.Decimal.lift(null)) || System.Nullable.liftne("ne", value, System.Decimal.lift(null)) && System.Nullable.liftcmp("gt", value, ruleValue);
                                        });
                                        this.Validate(System.Nullable$1(System.Decimal), System.Nullable$1(System.Decimal), Core.Extensions.ValidationRule.LessThan, this._value, function (value, ruleValue) {
                                            return System.Nullable.lifteq("equals", ruleValue, System.Decimal.lift(null)) || System.Nullable.liftne("ne", value, System.Decimal.lift(null)) && System.Nullable.liftcmp("lt", value, ruleValue);
                                        });
                                        this.Validate(System.Nullable$1(System.Decimal), System.Nullable$1(System.Decimal), Core.Extensions.ValidationRule.GreaterThanOrEqual, this._value, function (value, ruleValue) {
                                            return System.Nullable.lifteq("equals", ruleValue, System.Decimal.lift(null)) || System.Nullable.liftne("ne", value, System.Decimal.lift(null)) && System.Nullable.liftcmp("gte", value, ruleValue);
                                        });
                                        this.Validate(System.Nullable$1(System.Decimal), System.Nullable$1(System.Decimal), Core.Extensions.ValidationRule.LessThanOrEqual, this._value, function (value, ruleValue) {
                                            return System.Nullable.lifteq("equals", ruleValue, System.Decimal.lift(null)) || System.Nullable.liftne("ne", value, System.Decimal.lift(null)) && System.Nullable.liftcmp("lte", value, ruleValue);
                                        });
                                        this.Validate(System.Nullable$1(System.Decimal), System.Nullable$1(System.Decimal), Core.Extensions.ValidationRule.Equal, this._value, function (value, ruleValue) {
                                            return System.Nullable.lifteq("equals", value, ruleValue);
                                        });
                                        this.Validate(System.Nullable$1(System.Decimal), System.Nullable$1(System.Decimal), Core.Extensions.ValidationRule.NotEqual, this._value, function (value, ruleValue) {
                                            return System.Nullable.liftne("ne", value, ruleValue);
                                        });
                                        $tcs.setResult(this.IsValid);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            SetDisableUI: function (value) {
                this._input.readOnly = value;
            }
        }
    });

    Bridge.define("Core.Components.Paginator", {
        inherits: [Core.Components.EditableComponent],
        props: {
            Options: {
                get: function () {
                    return Bridge.as(this.Entity, Core.Components.PaginationOptions);
                }
            },
            Disabled: {
                get: function () {
                    return false;
                },
                set: function (value) {
                    this._disabled = false;
                }
            }
        },
        ctors: {
            ctor: function (paginator) {
                this.$initialize();
                Core.Components.EditableComponent.ctor.call(this, null);
                this.Entity = paginator || (function () {
                    throw new System.ArgumentNullException.$ctor1("paginator");
                })();
                this.PopulateDirty = false;
                this.AlwaysValid = true;
                this.StopChildrenHistory = true;
            }
        },
        methods: {
            Render: function () {
                var $t, $t1;
                Core.Components.Renderer.IText(Core.Components.Renderer.ClassName(Core.MVVM.Html.Take(this.Parent.Element).Div, "grid-toolbar paging").Label, "Ph\u00e2n trang").End.Render();
                this.Element = Core.MVVM.Html.Context;
                var pageSize = new Core.Components.Number(($t = new Core.Models.Component(), $t.FieldName = "PageSize", $t), null);
                var startIndex = new Core.Components.CellText(($t = new Core.Models.Component(), $t.FieldName = "StartIndex", $t));
                var endIndex = new Core.Components.CellText(($t = new Core.Models.Component(), $t.FieldName = "EndIndex", $t));
                var total = new Core.Components.CellText(($t = new Core.Models.Component(), $t.FieldName = "Total", $t.FormatData = "{0:n0}", $t));
                var pageNum = ($t = new Core.Components.Number(($t1 = new Core.Models.Component(), $t1.FieldName = "PageNumber", $t1), null), $t.AlwaysValid = true, $t);

                this.AddChild(pageSize);
                pageSize.Element.addEventListener(System.Enum.toString(System.String, "change"), Bridge.fn.cacheBind(this, this.ReloadListView));
                Core.MVVM.Html.Instance.End.Span.Render();
                this.AddChild(startIndex);
                Core.MVVM.Html.Instance.Text("-");
                this.AddChild(endIndex);
                Core.Components.Renderer.IText(Core.MVVM.Html.Instance, " trong s\u1ed1 ");
                this.AddChild(total);

                Core.Components.Renderer.ClassName(Core.MVVM.Html.Take(this.Element).Ul, "pagination").Li.Text("\u276e").Event("click", Bridge.fn.cacheBind(this, this.PrevPage)).End.Render();
                this.AddChild(pageNum);
                pageNum.Element.addEventListener(System.Enum.toString(System.String, "change"), Bridge.fn.bind(this, function () {
                    this.Options.PageIndex = (this.Options.PageNumber - 1) | 0;
                    this.ReloadListView();
                }));
                Core.MVVM.Html.Instance.End.Li.Text("\u276f").Event("click", Bridge.fn.cacheBind(this, this.NextPage)).End.Render();
            },
            NextPage: function () {
                var $t, $t1;
                var pages = System.Decimal.toDecimalPlaces(System.Decimal(this.Options.Total).div(System.Decimal(this.Options.PageSize)), 0, 0);
                if (System.Decimal(this.Options.PageNumber).gte(pages)) {
                    return;
                }

                ($t = this.Options).PageIndex = ($t.PageIndex + 1) | 0;
                !Bridge.staticEquals(($t1 = this.Options.ClickHandler), null) ? $t1(this.Options.PageIndex, null) : null;
                this.ReloadListView();
            },
            PrevPage: function () {
                var $t, $t1;
                if (this.Options.PageIndex <= 0) {
                    return;
                }

                ($t = this.Options).PageIndex = ($t.PageIndex - 1) | 0;
                !Bridge.staticEquals(($t1 = this.Options.ClickHandler), null) ? $t1(this.Options.PageIndex, null) : null;
                this.ReloadListView();
            },
            ReloadListView: function () {
                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = (Bridge.as(this.Parent, Core.Components.ListView)).ApplyFilter(false);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            UpdateView: function (force, dirty, componentNames) {
                if (force === void 0) { force = false; }
                if (dirty === void 0) { dirty = null; }
                if (componentNames === void 0) { componentNames = []; }
                this.Show = this.Options.Total >= this.Options.PageSize;
                this.Children.ForEach(function (child) {
                    child.UpdateView();
                });
            },
            BuildTextHistory: function (builder, visited) {
                if (visited === void 0) { visited = null; }
                return builder;
            }
        }
    });

    Bridge.define("Core.Components.Rating", {
        inherits: [Core.Components.EditableComponent],
        fields: {
            InputList: null,
            _value: null
        },
        props: {
            Value: {
                get: function () {
                    return this._value;
                },
                set: function (value) {
                    if (System.Nullable.eq(this._value, value)) {
                        return;
                    }

                    this._value = value;
                    if (System.Nullable.hasValue(this._value)) {
                        this._value = System.Nullable.getValue(this._value);
                        this.SetSelected(value);
                    }

                    Core.Extensions.BridgeExt.SetComplexPropValue(this.Entity, this.GuiInfo.FieldName, Bridge.box(this._value, System.Int32, System.Nullable.toString, System.Nullable.getHashCode));
                    this.Dirty = true;
                }
            },
            Disabled: {
                get: function () {
                    return Bridge.ensureBaseProperty(this, "Disabled").$Core$Components$EditableComponent$Disabled;
                },
                set: function (value) {
                    Bridge.ensureBaseProperty(this, "Disabled").$Core$Components$EditableComponent$Disabled = value;
                    this.InputList.ForEach(function (x) {
                        x.disabled = value;
                    });
                }
            }
        },
        ctors: {
            init: function () {
                this.InputList = new (System.Collections.Generic.List$1(HTMLInputElement)).ctor();
            },
            ctor: function (ui, ele) {
                if (ele === void 0) { ele = null; }
                var $t;

                this.$initialize();
                Core.Components.EditableComponent.ctor.call(this, ui);
                this.GuiInfo = ui || (function () {
                    throw new System.ArgumentNullException.$ctor1("ui");
                })();
                this.GuiInfo.Precision = ($t = this.GuiInfo.Precision, $t != null ? $t : 5);
                this.ParentElement = ele;
            }
        },
        methods: {
            SetSelected: function (value) {
                if (value == null || System.Nullable.lte(value, 0) || System.Nullable.gt(value, this.GuiInfo.Precision)) {
                    return;
                }
                this.InputList.getItem(((System.Nullable.getValue(this.GuiInfo.Precision) - System.Nullable.getValue(value)) | 0)).checked = true;
            },
            Render: function () {
                var $t;
                Core.Components.Renderer.ClassName(Core.MVVM.Html.Take(this.ParentElement).Div, "rate");
                this.Element = Core.MVVM.Html.Context;
                var radioGroup = (this.GuiInfo.FieldName || "") + this.GuiInfo.Id + Bridge.getHashCode(this);
                for (var item = this.GuiInfo.Precision; System.Nullable.gte(item, 1); item = Bridge.Int.clip32(System.Nullable.sub(item, 1))) {
                    var radioId = System.String.format("{0}_{1}", radioGroup, Bridge.box(item, System.Int32, System.Nullable.toString, System.Nullable.getHashCode));
                    Core.MVVM.Html.Take(this.Element).Input.Attr$1("type", "radio").Id(radioId).Attr$1("name", radioGroup).Value(System.Nullable.toString(item, null)).Event$1("change", Bridge.fn.cacheBind(this, this.DispatchChange)).Style$1(this.GuiInfo.Style);
                    this.InputList.add(Core.MVVM.Html.Context);
                    Core.MVVM.Html.Take(this.Element).Label.Attr$1("for", radioId).Text(System.String.format("{0} stars", [Bridge.box(item, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]));
                }
                Core.MVVM.Html.Take(this.Element).End.Render();
                this._value = Bridge.unbox(Core.Extensions.Utils.GetComplexPropValue(this.Entity, this.GuiInfo.FieldName));
                this.SetSelected(this._value);
                !Bridge.staticEquals(($t = this.DOMContentLoaded), null) ? $t() : null;
            },
            DispatchChange: function (e) {
                var $t;
                if (this.Disabled) {
                    return;
                }

                if (Core.Extensions.IEnumerableExtensions.Nothing(HTMLInputElement, this.InputList)) {
                    return;
                }

                var check = System.Linq.Enumerable.from(this.InputList, HTMLInputElement).firstOrDefault(function (x) {
                        return x.checked;
                    }, null);
                var oldVal = this.Value;
                this.Value = System.Int32.parse(check.value);
                Core.Extensions.BridgeExt.SetComplexPropValue(this.Entity, this.GuiInfo.FieldName, Bridge.box(this._value, System.Int32, System.Nullable.toString, System.Nullable.getHashCode));
                if (!Bridge.staticEquals(this.UserInput, null)) {
                    this.UserInput(($t = new Core.MVVM.ObservableArgs(), $t.NewData = Bridge.box(this.Value, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), $t.OldData = Bridge.box(oldVal, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), $t));
                }
                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = Core.Components.Extensions.ComponentExt.DispatchEventToHandlerAsync(this, this.GuiInfo.Events, "click", [this.Entity]);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            UpdateView: function (force, dirty, componentNames) {
                if (force === void 0) { force = false; }
                if (dirty === void 0) { dirty = null; }
                if (componentNames === void 0) { componentNames = []; }
                this.Value = Bridge.unbox(Core.Extensions.Utils.GetComplexPropValue(this.Entity, this.GuiInfo.FieldName));
            },
            GetValueText: function () {
                return this._value == null ? "Kh\u00f4ng \u0111\u00e1nh gi\u00e1" : System.Nullable.toString(this._value, null) + " sao";
            },
            ValidateAsync: function () {
                var $step = 0,
                    $task1, 
                    $task2, 
                    $task3, 
                    $taskResult3, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $taskResult2, 
                    $taskResult1, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5], $step);
                                switch ($step) {
                                    case 0: {
                                        $task3 = Core.Components.EditableComponent.prototype.ValidateAsync.call(this);
                                        $step = 1;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        if (($taskResult3)) {
                                            $step = 2;
                                            continue;
                                        }
                                        $taskResult2 = false;
                                        $step = 3;
                                        continue;
                                    }
                                    case 2: {
                                        $taskResult2 = System.Nullable.hasValue(this.Value);
                                        $step = 3;
                                        continue;
                                    }
                                    case 3: {
                                        if ($taskResult2) {
                                            $step = 4;
                                            continue;
                                        }
                                        $taskResult1 = false;
                                        $step = 5;
                                        continue;
                                    }
                                    case 4: {
                                        $taskResult1 = this.ValidateRequired(System.Int32, System.Nullable.getValue(this.Value));
                                        $step = 5;
                                        continue;
                                    }
                                    case 5: {
                                        $tcs.setResult($taskResult1);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("Core.Components.RichTextBox", {
        inherits: [Core.Components.EditableComponent],
        fields: {
            _textArea: null,
            editor: null
        },
        ctors: {
            ctor: function (ui, ele) {
                if (ele === void 0) { ele = null; }

                this.$initialize();
                Core.Components.EditableComponent.ctor.call(this, ui);
                this._textArea = Bridge.as(ele, HTMLTextAreaElement);
            }
        },
        methods: {
            Render: function () {
                if (System.Nullable.lte(this.GuiInfo.Row, 0)) {
                    this.GuiInfo.Row = 1;
                }
                if (this._textArea == null) {
                    this._textArea = Bridge.as(Core.MVVM.Html.Take(this.ParentElement).TextArea.Id("RE_" + System.Guid.NewGuid()).GetContext(), HTMLTextAreaElement);
                }
                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = Core.Clients.Client.LoadScript("https://support.pavietnam.vn/js/tinymce/tinymce.min.js?v=1.9.84");
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            var self = this;
                                            tinymce.init({
                                                selector: '#' + this._textArea.id,
                                                menubar: 'file edit view insert format tools table tc help',
                                                plugins: 'print preview code powerpaste casechange importcss tinydrive searchreplace autolink autosave save directionality advcode visualblocks visualchars fullscreen image link media mediaembed template codesample table charmap hr pagebreak nonbreaking anchor toc insertdatetime advlist lists checklist wordcount tinymcespellchecker a11ychecker imagetools textpattern noneditable help formatpainter permanentpen pageembed charmap tinycomments mentions quickbars linkchecker emoticons advtable export',
                                                toolbar: 'undo redo | bold italic underline strikethrough | fontselect fontsizeselect formatselect | alignleft aligncenter alignright alignjustify | outdent indent |  numlist bullist checklist | forecolor backcolor anchor link media image table | hr code removeformat | fullscreen | casechange permanentpen formatpainter | pagebreak | charmap emoticons | preview save print | insertfile pageembed template | a11ycheck ltr rtl | showcomments addcomment',
                                                fontsize_formats: '8pt 9pt 10pt 11pt 12pt 13pt 14pt 15pt 16pt 17pt 18pt 24pt 36pt 48pt',
                                                images_upload_handler: self.ImageUploadHandler,
                                                setup: function(editor) {
                                                    self.editor = editor;
                                                    editor.on('init', function() {
                                                        editor.setContent(self.Entity[self.GuiInfo.FieldName] || '');
                                                    });
                                                    editor.on('input', function(e) {
                                                        self.Entity[self.GuiInfo.FieldName] = editor.getContent();
                                                        self.Dirty = true;
                                                    });
                                                }
                                            });
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            ImageUploadHandler: function (fileWrapper, success) {
                var file = Bridge.unbox(fileWrapper.blob)();
                var reader = new FileReader();
                reader.onload = Bridge.fn.combine(reader.onload, Bridge.fn.bind(this, function (e) {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        uploader, 
                        path, 
                        content, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        uploader = new Core.Components.ImageUploader(new Core.Models.Component());
                                        $task1 = uploader.ResizeAndUploadImage(Bridge.toString(e.target.result), file.name);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        path = $taskResult1;
                                        if (!Bridge.staticEquals(success, null)) {
                                            success(path);
                                            content = null;
                                            content = this.editor.setContent(text);
                                            Core.Extensions.BridgeExt.SetComplexPropValue(this.Entity, this.GuiInfo.FieldName, content);
                                        }
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }));
                reader.readAsDataURL(file);
            },
            UpdateView: function (force, dirty, componentNames) {
                if (force === void 0) { force = false; }
                if (dirty === void 0) { dirty = null; }
                if (componentNames === void 0) { componentNames = []; }
                var text = Core.Extensions.Utils.GetComplexPropValue(this.Entity, this.GuiInfo.FieldName);
                this.editor.setContent(text || '');
            }
        }
    });

    Bridge.define("Core.Components.Textbox", {
        inherits: [Core.Components.EditableComponent],
        fields: {
            _value: null,
            _oldText: null,
            _text: null
        },
        props: {
            Input: null,
            TextArea: null,
            MultipleLine: false,
            Password: false,
            Value: {
                get: function () {
                    return this._value;
                },
                set: function (value) {
                    var $t, $t1;
                    this._value = value;
                    var str_val;
                    if (this._value != null && ((str_val = Bridge.as(this._value, System.String))) != null && !this.EditForm.Feature.IgnoreEncode) {
                        ($t = this.Entity) != null ? Core.Extensions.BridgeExt.SetComplexPropValue($t, this.GuiInfo.FieldName, Core.Extensions.Utils.EncodeSpecialChar(Core.Extensions.Utils.DecodeSpecialChar(str_val))) : null;
                    }

                    if (this.Entity != null) {
                        Core.Extensions.BridgeExt.SetComplexPropValue(this.Entity, this.GuiInfo.FieldName, this._value);
                    }

                    var text = this.EditForm.Feature.IgnoreEncode ? this._value != null ? Bridge.toString(this._value) : null : this._value != null ? Core.Extensions.Utils.DecodeSpecialChar(Bridge.toString(this._value)) : null;
                    if (Core.Extensions.StringExt.HasAnyChar(this.GuiInfo.FormatData)) {
                        text = Core.Extensions.Utils.FormatEntity$1(this.GuiInfo.FormatData, ($t1 = this.Entity) != null ? Core.Extensions.Utils.GetComplexPropValue($t1, this.GuiInfo.FieldName) : null);
                    }

                    if (Core.Extensions.StringExt.HasAnyChar(this.GuiInfo.FormatEntity)) {
                        text = Core.Extensions.Utils.FormatEntity(this.GuiInfo.FormatEntity, null, this.Entity, Core.Extensions.Utils.EmptyFormat, Core.Extensions.Utils.EmptyFormat);
                    }

                    this.Text = text;
                    this.PopulateFields();
                }
            },
            Text: {
                get: function () {
                    return this._text;
                },
                set: function (value) {
                    this._text = value;
                    if (this.Input != null) {
                        this.Input.value = this._text;
                    }

                    if (this.TextArea != null) {
                        this.TextArea.value = this._text;
                    }
                }
            }
        },
        ctors: {
            ctor: function (ui, ele) {
                if (ele === void 0) { ele = null; }

                this.$initialize();
                Core.Components.EditableComponent.ctor.call(this, ui);
                if (Bridge.is(ele, HTMLInputElement)) {
                    this.Input = Bridge.as(ele, HTMLInputElement);
                } else if (Bridge.is(ele, HTMLTextAreaElement)) {
                    this.TextArea = Bridge.as(ele, HTMLTextAreaElement);
                }
            }
        },
        methods: {
            Render: function () {
                var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7;
                this.SetDefaultVal();
                var val = ($t = this.Entity) != null ? Core.Extensions.Utils.GetComplexPropValue($t, this.GuiInfo.FieldName) : null;
                var str_val;
                if (val != null && ((str_val = Bridge.as(val, System.String))) != null && this.EditForm != null && this.EditForm.Feature != null && !this.EditForm.Feature.IgnoreEncode) {
                    ($t1 = this.Entity) != null ? Core.Extensions.BridgeExt.SetComplexPropValue($t1, this.GuiInfo.FieldName, Core.Extensions.Utils.EncodeSpecialChar(Core.Extensions.Utils.DecodeSpecialChar(str_val))) : null;
                }
                var text = val != null ? Bridge.toString(val) : null;
                if (Core.Extensions.StringExt.HasAnyChar(this.GuiInfo.FormatData)) {
                    text = Core.Extensions.Utils.FormatEntity$1(this.GuiInfo.FormatData, val);
                }

                if (Core.Extensions.StringExt.HasAnyChar(this.GuiInfo.FormatEntity)) {
                    text = Core.Extensions.Utils.FormatEntity$1(this.GuiInfo.FormatEntity, this.Entity);
                }

                this._text = this.EditForm != null && this.EditForm.Feature != null && this.EditForm.Feature.IgnoreEncode ? text : Core.Extensions.Utils.DecodeSpecialChar(text);
                if (this.MultipleLine || this.TextArea != null) {
                    if (this.TextArea == null) {
                        Core.Components.Renderer.PlaceHolder(Core.MVVM.Html.Take(this.ParentElement).TextArea.Value(this._text), this.GuiInfo.PlainText);
                        this.Element = ($t2 = Bridge.as(Core.MVVM.Html.Context, HTMLTextAreaElement), this.TextArea = $t2, $t2);
                    } else {
                        this.Element = this.TextArea;
                        this.TextArea.value = this._text;
                    }
                    if (System.Nullable.gt(this.GuiInfo.Row, 0)) {
                        Core.MVVM.Html.Instance.Attr("rows", ($t3 = this.GuiInfo.Row, $t3 != null ? $t3 : 1));
                    }

                    this.TextArea.oninput = Bridge.fn.combine(this.TextArea.oninput, Bridge.fn.bind(this, function (e) {
                        this.PopulateUIChange("input");
                    }));
                    this.TextArea.onchange = Bridge.fn.combine(this.TextArea.onchange, Bridge.fn.bind(this, function (e) {
                        this.PopulateUIChange("change");
                    }));
                } else {
                    if (this.Input == null) {
                        Core.Components.Renderer.PlaceHolder(Core.MVVM.Html.Take(this.ParentElement).Input.Value(this._text), this.GuiInfo.PlainText);
                        this.Element = ($t4 = Bridge.as(Core.MVVM.Html.Context, HTMLInputElement), this.Input = $t4, $t4);
                    } else {
                        this.Element = this.Input;
                        this.Input.value = this._text;
                    }
                    this.Input.autocomplete = "off";
                    this.Input.name = ($t5 = this.GuiInfo.DataSourceFilter, $t5 != null ? $t5 : this.GuiInfo.FieldName);
                    this.Input.onchange = Bridge.fn.combine(this.Input.onchange, Bridge.fn.bind(this, function (e) {
                        this.PopulateUIChange("change");
                    }));
                    this.Input.oninput = Bridge.fn.combine(this.Input.oninput, Bridge.fn.bind(this, function (e) {
                        this.PopulateUIChange("input");
                    }));
                    this.Input.onchange = Bridge.fn.combine(this.Input.onchange, Bridge.fn.bind(this, function (e) {
                        this.PopulateUIChange("change", !this.Password);
                    }));
                    if (this.GuiInfo.AutoFit) {
                        Core.Components.Extensions.ComponentExt.SetAutoWidth(this, this.Input.value, Core.Extensions.HtmlElementExtension.GetComputedStyle(this.Input).font);
                    }
                }
                if (this.Password) {
                    Core.MVVM.Html.Instance.Style$1("text-security: disc;-webkit-text-security: disc;-moz-text-security: disc;");
                }
                if (!this.GuiInfo.ShowLabel) {
                    Core.Components.Renderer.PlaceHolder(Core.MVVM.Html.Instance, ($t6 = this.GuiInfo.Label, $t6 != null ? $t6 : ""));
                }

                !Bridge.staticEquals(($t7 = this.DOMContentLoaded), null) ? $t7() : null;
            },
            PopulateUIChange: function (type, shouldTrim) {
                var $t, $t1, $t2;
                if (shouldTrim === void 0) { shouldTrim = false; }
                this._oldText = this._text;
                this._text = ($t = (($t1 = this.Input) != null ? $t1.value : null), $t != null ? $t : this.TextArea.value);
                this._text = this.Password ? this._text : shouldTrim ? this._text != null ? this._text.trim() : null : this._text;
                this._value = (this.EditForm != null && this.EditForm.Feature != null && this.EditForm.Feature.IgnoreEncode) ? this._text : Core.Extensions.Utils.EncodeSpecialChar(this._text);
                if (this.Entity != null) {
                    Core.Extensions.BridgeExt.SetComplexPropValue(this.Entity, this.GuiInfo.FieldName, this._value);
                }
                this.Dirty = true;
                if (!Bridge.staticEquals(this.UserInput, null)) {
                    this.UserInput(($t2 = new Core.MVVM.ObservableArgs(), $t2.NewData = this._text, $t2.OldData = this._oldText, $t2.EvType = type, $t2));
                }
                this.PopulateFields();
                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = Core.Components.Extensions.ComponentExt.DispatchEventToHandlerAsync(this, this.GuiInfo.Events, "change", [this.Entity]);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            UpdateView: function (force, dirty, componentNames) {
                var $t;
                if (force === void 0) { force = false; }
                if (dirty === void 0) { dirty = null; }
                if (componentNames === void 0) { componentNames = []; }
                this.Value = ($t = this.Entity) != null ? Core.Extensions.Utils.GetComplexPropValue($t, this.GuiInfo.FieldName) : null;
            },
            ValidateAsync: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2], $step);
                                switch ($step) {
                                    case 0: {
                                        if (Core.Extensions.IEnumerableExtensions.Nothing(System.Collections.Generic.KeyValuePair$2(System.String,Core.Extensions.ValidationRule), this.ValidationRules)) {
                                            $tcs.setResult(true);
                                            return;
                                        }
                                        $task1 = Core.Components.EditableComponent.prototype.ValidateAsync.call(this);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        this.Validate(System.String, System.Int64, Core.Extensions.ValidationRule.MinLength, this._text, Bridge.fn.bind(this, function (value, minLength) {
                                            return this._text != null && System.Int64(this._text.length).gte(minLength);
                                        }));
                                        this.Validate(System.String, System.Int64, Core.Extensions.ValidationRule.CheckLength, this._text, Bridge.fn.bind(this, function (text, checkLength) {
                                            return this._text == null || Bridge.referenceEquals(this._text, "") || System.Int64(this._text.length).equals(checkLength);
                                        }));
                                        this.Validate(System.String, System.Int64, Core.Extensions.ValidationRule.MaxLength, this._text, Bridge.fn.bind(this, function (text, maxLength) {
                                            return this._text == null || System.Int64(this._text.length).lte(maxLength);
                                        }));
                                        this.Validate(System.String, System.String, Core.Extensions.ValidationRule.RegEx, this._text, Bridge.fn.cacheBind(this, this.ValidateRegEx));
                                        this.ValidateRequired(System.String, this.Text);
                                        $task2 = this.ValidateUnique();
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $task2.getAwaitedResult();
                                        $tcs.setResult(this.IsValid);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ValidateUnique: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    rule, 
                    fieldName, 
                    entityId, 
                    filter, 
                    $t, 
                    exists, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (!this.ValidationRules.containsKey(Core.Extensions.ValidationRule.Unique)) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        rule = this.ValidationRules.getItem(Core.Extensions.ValidationRule.Unique);
                                        if (rule == null || Core.Extensions.StringExt.IsNullOrWhiteSpace(this._text)) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        fieldName = this.GuiInfo.FieldName;
                                        entityId = Bridge.unbox(this.Entity[Core.Components.BaseComponent.IdField]);
                                        filter = ($t = rule.Condition, $t != null ? $t : System.String.format("Active eq true and ", null));
                                        if (System.Nullable.gt(entityId, 0)) {
                                            filter = (filter || "") + ((System.String.format("{0} eq '{1}' and Id ne {2}", fieldName, Core.Extensions.Utils.EncodeSpecialChar(this._text), Bridge.box(entityId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode))) || "");
                                        } else {
                                            filter = (filter || "") + ((System.String.format("{0} eq '{1}'", fieldName, Core.Extensions.Utils.EncodeSpecialChar(this._text))) || "");
                                        }
                                        $task1 = new Core.Clients.Client.$ctor1(System.Enum.toString(Core.Enums.EntityEnum, System.Nullable.getValue(this.EditForm.Feature.EntityId))).GetAsync$1(System.Boolean, System.String.format("/Exists/?$select={0},{1}&$filter={2}", Core.Components.BaseComponent.IdField, fieldName, filter));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        exists = $taskResult1;
                                        if (!exists) {
                                            this.ValidationResult.remove(Core.Extensions.ValidationRule.Unique);
                                        } else {
                                            System.Collections.Generic.CollectionExtensions.TryAdd(System.String, System.String, this.ValidationResult, Core.Extensions.ValidationRule.Unique, System.String.format(rule.Message, Core.Components.LangSelect.Get(this.GuiInfo.Label), this._text));
                                        }
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ValidateRegEx: function (value, regText) {
                if (value == null) {
                    return true;
                }

                var regEx = new RegExp(regText);
                var res = regEx.test(value);
                var rule = this.ValidationRules.getItem(Core.Extensions.ValidationRule.RegEx);
                if (!res && rule.RejectInvalid) {
                    var end = this.Input.selectionEnd;
                    this.Text = this._oldText;
                    this._value = this._oldText;
                    this.Input.selectionStart = end;
                    this.Input.selectionEnd = end;
                    return regEx.test(this._oldText);
                }
                return res;
            },
            SetDisableUI: function (value) {
                if (this.Input != null) {
                    this.Input.readOnly = value;
                }

                if (this.TextArea != null) {
                    this.TextArea.readOnly = value;
                }
            }
        }
    });

    Bridge.define("Core.Notifications.NotificationBL", {
        inherits: [Core.Components.EditableComponent],
        statics: {
            fields: {
                _instance: null,
                _countNtf: null
            },
            props: {
                Notifications: null,
                Instance: {
                    get: function () {
                        if (Core.Notifications.NotificationBL._instance == null) {
                            Core.Notifications.NotificationBL._instance = new Core.Notifications.NotificationBL();
                        }
                        return Core.Notifications.NotificationBL._instance;
                    }
                }
            }
        },
        fields: {
            _profile: null,
            _task: null,
            _countBadge: null
        },
        props: {
            CurrentUser: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.EditableComponent.ctor.call(this, null);
                Core.Notifications.NotificationBL.Notifications = new (Core.MVVM.ObservableList$1(Core.Models.TaskNotification)).ctor();
                Core.Notifications.NotificationBL._countNtf = new (Core.MVVM.Observable$1(System.String)).ctor();
                Core.Components.Forms.EditForm.NotificationClient != null ? Core.Components.Forms.EditForm.NotificationClient.AddListener(Core.Enums.EntityEnum.TaskNotification, Bridge.fn.cacheBind(this, this.ProcessIncomMessage)) : null;
            }
        },
        methods: {
            ProcessIncomMessage: function (obj) {
                var $t;
                if (obj == null) {
                    return;
                }

                var task = Bridge.cast(obj, Core.Models.TaskNotification);
                if (task == null) {
                    return;
                }

                var existTask = System.Linq.Enumerable.from(Core.Notifications.NotificationBL.Notifications.Data, Core.Models.TaskNotification).firstOrDefault(function (x) {
                        return x.Id === task.Id;
                    }, null);
                if (existTask == null) {
                    Core.Notifications.NotificationBL.Notifications.Add(task, 0);
                    this.ToggleBageCount(System.Linq.Enumerable.from(Core.Notifications.NotificationBL.Notifications.Data, Core.Models.TaskNotification).count(function (x) {
                            return System.Nullable.eq(x.StatusId, Core.Enums.TaskStateEnum.UnreadStatus);
                        }));
                    this.PopupNotification(task);
                }
                this.SetBadgeNumber();
                var entity = System.Nullable.getValue(task.EntityId);
                task.Entity = ($t = new Core.Models.Entity(), $t.Name = System.Enum.toString(Core.Enums.EntityEnum, entity), $t);
                if (typeof(Notification) !== 'undefined' && Notification.permission === "granted") {
                    this.ShowNativeNtf(task);
                } else if (typeof(Notification) !== 'undefined' && Notification.permission !== "denied") {
                    Notification.requestPermission().then((permission) => {
                        if (permission !== 'granted') {
                            this.ShowToast(task);
                        }
                        else this.ShowNativeNtf(task);
                    });
                } else this.ShowToast(task);
            },
            SetBadgeNumber: function () {
                var unreadCount = System.Linq.Enumerable.from(Core.Notifications.NotificationBL.Notifications.Data, Core.Models.TaskNotification).count(function (x) {
                        return System.Nullable.eq(x.StatusId, Core.Enums.TaskStateEnum.UnreadStatus);
                    });
                Core.Notifications.NotificationBL._countNtf.Data = unreadCount > 9 ? "9+" : Bridge.toString(unreadCount);
                var badge = unreadCount > 9 ? 9 : unreadCount;
                if (typeof(cordova) !== 'undefined' &&
                    typeof(cordova.plugins) !== 'undefined' &&
                    typeof(cordova.plugins.notification) !== 'undefined') {
                    cordova.plugins.notification.badge.requestPermission(function (granted) {
                        cordova.plugins.notification.badge.set(unreadCount);
                    });
                }
                return badge;
            },
            ShowNativeNtf: function (task) {
                if (task == null) {
                    return;
                }

                var nativeNtf = null;
                var nativeNtf = new Notification(task.Title,
                {
                    body: task.Description,
                    icon: task.Attachment,
                    vibrate: [200, 100, 200],
                    badge: "./favicon.ico"
                });
                nativeNtf.addEventListener('click', () => this.OpenNotification(task));
                window.setTimeout(function () {
                    nativeNtf.close();
                }, 7000);
            },
            ShowToast: function (task) {
                Core.Extensions.Toast.Success(System.String.format("Th\u00f4ng b\u00e1o t\u1eeb h\u1ec7 th\u1ed1ng <br /> {0} - {1}", task.Title, task.Description));
            },
            Render: function () {
                System.Threading.Tasks.Task.run(Bridge.fn.cacheBind(this, this.RenderAsync));
            },
            RenderAsync: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    notifications, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        Core.MVVM.Html.Take$1("#notification").Clear();
                                        $task1 = new Core.Clients.Client.$ctor1("TaskNotification").GetRawList(Core.Models.TaskNotification, System.String.format("?$expand=Entity&$orderby=InsertedDate desc&$top=50", null));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        notifications = $taskResult1;
                                        Core.Notifications.NotificationBL.Notifications.Data = notifications;
                                        this.SetBadgeNumber();
                                        this.CurrentUser = Core.Clients.Client.Token;
                                        this.CurrentUser.Avatar = (Core.Clients.Client.Origin || "") + ((Core.Extensions.StringExt.IsNullOrWhiteSpace(this.CurrentUser.Avatar) ? "./image/chinese.jfif" : this.CurrentUser.Avatar) || "");
                                        this.RenderNotification();
                                        this.RenderProfile();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            RenderProfile: function () {
                var $t, $t1;
                var html = Core.MVVM.Html.Instance;
                Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.MVVM.Html.Take$1("#notification .app-bar-container").A, "app-bar-item").Event("click", Bridge.fn.cacheBind(this, this.ShowProfile)).Img.Src(this.CurrentUser.Avatar).Attr$1("alt", "Avatar"), "user-image").Id("user-image").End.Span, "hidden-xs").Id("name-user").Text(this.CurrentUser.FullName).EndOf(Core.MVVM.ElementType.a);
                Core.Components.Renderer.ClassName(Core.Components.Renderer.TabIndex(Core.Components.Renderer.ClassName(html.Div, "pos-relative fix-pos-relative shadow"), -1).Div, "fg-black");
                this._profile = Core.MVVM.Html.Context.parentElement;
                this._profile.style.display = "none";
                this._profile.addEventListener("focusout", Bridge.fn.bind(this, function () {
                    this._profile.style.display = "none";
                }));
                Core.Components.Renderer.IText(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(html.Ul, "ul-Warning").Li, "user-header").Img.Src(this.CurrentUser.Avatar).Attr$1("alt", "Avatar"), "img-circle").Id("img-detail").End.P.Id("Username-text").Text(System.String.format("{0} {1}", Core.Clients.Client.Token.TenantCode, this.CurrentUser.FullName)).End.Span.Id("text-address").Text(($t = this.CurrentUser.Address, $t != null ? $t : "")).End.EndOf$1(".user-header").Li, "user-footer").Span.AsyncEvent$1("click", Bridge.fn.cacheBind(this, this.ViewProfile)), "Trang c\u00e1 nh\u00e2n").EndOf(Core.MVVM.ElementType.span);
                var langSelect = ($t1 = new Core.Components.LangSelect(null, null), $t1.ParentElement = Core.MVVM.Html.Context, $t1);
                langSelect.Render();
                Core.Components.Renderer.IText(Core.Components.Renderer.ClassName(html.Span, "pull-right").AsyncEvent$1("click", Bridge.fn.cacheBind(this, this.SignOut)), "\u0110\u0103ng xu\u1ea5t");
            },
            ShowProfile: function () {
                this._profile.style.display = "block";
                this._profile.focus();
            },
            SignOut: function (e) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    client, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2], $step);
                                switch ($step) {
                                    case 0: {
                                        e.preventDefault();
                                        client = new Core.Clients.Client.$ctor1("User");
                                        $task1 = client.CreateAsync(System.Boolean, Core.Clients.Client.Token, "SignOut");
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        !Bridge.staticEquals(Core.Clients.Client.SignOutEventHandler, null) ? Core.Clients.Client.SignOutEventHandler() : null;
                                        Core.Clients.Client.Token = null;
                                        Core.Components.Forms.EditForm.NotificationClient != null ? Core.Components.Forms.EditForm.NotificationClient.Close() : null;
                                        $task2 = System.Threading.Tasks.Task.delay(1000);
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $task2.getAwaitedResult();
                                        window.location.reload();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ViewProfile: function (e) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        e.preventDefault();
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenTab$1(this, (System.Enum.toString(Core.Enums.EntityEnum, Core.Enums.EntityEnum.User) || "") + Core.Clients.Client.Token.UserId, "UserProfile", function () {
                                            var type = Bridge.Reflection.getType("Core.Fw.User.UserProfileBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.TabEditor);
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        this.Dispose();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            RenderNotification: function () {
                var html = Core.Components.Renderer.ClassName(Core.MVVM.Html.Take$1("#notification").Div, "app-bar-container");
                Core.Components.Renderer.ClassName(html.A, "app-bar-item").Event("click", Bridge.fn.cacheBind(this, this.ToggleNotification));
                Core.Components.Renderer.ClassName(html.Span, "fas fa-bell");
                Core.Components.Renderer.ClassName(html.Span, "badge bg-orange fg-white").Id("span-count").Text$1(System.String, Core.Notifications.NotificationBL._countNtf);
                this._countBadge = Core.MVVM.Html.Context;
                this.ToggleBageCount(System.Linq.Enumerable.from(Core.Notifications.NotificationBL.Notifications.Data, Core.Models.TaskNotification).count(function (x) {
                        return System.Nullable.eq(x.StatusId, Core.Enums.TaskStateEnum.UnreadStatus);
                    }));
                html.EndOf(Core.MVVM.ElementType.a);
                Core.Components.Renderer.TabIndex(Core.Components.Renderer.ClassName(html.Div, "pos-relative fix-pos-relative hide shadow"), -1);
                this._task = Core.MVVM.Html.Context;
                this._task.addEventListener("focusout", Bridge.fn.bind(this, function () {
                    this._task.style.display = "none";
                }));
                html.DataAttr$1("role", "dropdown");
                Core.Components.Renderer.ClassName(html.Div, "fg-black");
                Core.Components.Renderer.ClassName(html.Ul, "ul-Warning");
                Core.Components.Renderer.IText(Core.Components.Renderer.ClassName(html.Li, "header1").Span.Id("span-count-liabilitiesWarning").Text$1(System.String, Core.Notifications.NotificationBL._countNtf).End, " th\u00f4ng b\u00e1o m\u1edbi !").End.Render();
                Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(html.Li, "li-Root").Ul, "menu").ForEach(Core.Models.TaskNotification, Core.Notifications.NotificationBL.Notifications, Bridge.fn.bind(this, function (task, index) {
                    if (task == null) {
                        return;
                    }

                    var className = System.Nullable.eq(task.StatusId, Core.Enums.TaskStateEnum.UnreadStatus) ? "task-unread" : "task-read";
                    Core.Components.Renderer.ClassName(html.Li, "task " + (className || ""));
                    var li = Core.MVVM.Html.Context;
                    Core.Components.Renderer.ClassName(html.Div, "a-items").Event("click", Bridge.fn.bind(this, function () {
                        var $step = 0,
                            $task1, 
                            $jumpFromFinally, 
                            $asyncBody = Bridge.fn.bind(this, function () {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = this.OpenNotification(task);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            Core.Extensions.HtmlElementExtension.ReplaceClass(li, "task-unread", "task-read");
                                            return;
                                        }
                                        default: {
                                            return;
                                        }
                                    }
                                }
                            }, arguments);

                        $asyncBody();
                    }));
                    Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(html.Div, "pull-left").I, (task.Attachment || "") + " text-red").EndOf$1(".pull-left");
                    Core.Components.Renderer.IText(Core.Components.Renderer.ClassName(html.H4, "h4-items"), task.Title).End.Render();
                    Core.Components.Renderer.IText(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(html.P, "p-warning").Text(Core.Extensions.DateTimeExt.DateString(task.Deadline)).End.P, "p-warning"), task.Description).EndOf(Core.MVVM.ElementType.li);
                }));

                Core.Components.Renderer.ClassName(Core.MVVM.Html.Instance.EndOf(Core.MVVM.ElementType.ul).Ul, "footer-viewall").Li.Span.Text("Xem th\u00eam").AsyncEvent$1("click", Bridge.fn.cacheBind(this, this.SeeMore)).End.Span.Text("\u0110\u1ecdc t\u1ea5t c\u1ea3").AsyncEvent$1("click", Bridge.fn.cacheBind(this, this.MarkAllAsRead));
                Core.Notifications.NotificationBL.Notifications.Data.ForEach(Bridge.fn.cacheBind(this, this.PopupNotification));
            },
            ToggleBageCount: function (count) {
                this._countBadge.style.display = count === 0 ? "none" : "inline-block";
            },
            PopupNotification: function (task) {
                var $t;
                if (System.Nullable.neq(task.StatusId, Core.Enums.TaskStateEnum.UnreadStatus)) {
                    return;
                }

                if (System.Nullable.eq(task.EntityId, Core.Enums.EntityEnum.CoordinationDetail) && (Core.Clients.Client.CheckHasRole(Core.Enums.RoleEnum.Driver_Cont) || Core.Clients.Client.CheckHasRole(Core.Enums.RoleEnum.Driver_Truck))) {
                    task.StatusId = Core.Enums.TaskStateEnum.Read;
                    var count = System.DateTime.subdd(System.DateTime.getNow(), task.Deadline);
                    var days = { };
                    var hour = { };
                    var minute = { };
                    Bridge.Deconstruct(Core.Extensions.DateTimeExt.ToDayHourMinute(count).$clone(), days, hour, minute);
                    var dayStr = days.v > 0 ? (days.v + " ng\u00e0y") : "";
                    var confirm = ($t = new Core.Components.Forms.ConfirmDialog(), $t.Title = System.String.format("<b>Th\u00f4ng b\u00e1o</b> - <span class=\"text-small\">{0} {1}h {2} ph\u00fat tr\u01b0\u1edbc</span>", dayStr, Bridge.box(hour.v, System.Int32), Bridge.box(minute.v, System.Int32)), $t.Content = System.String.format("{0}<br />{1}", task.Title, task.Description), $t.IgnoreNoButton = true, $t.YesText = "\u0110\u1ed3ng \u00fd", $t.CancelText = "\u0110\u00f3ng", $t);
                    confirm.YesConfirmed = Bridge.fn.combine(confirm.YesConfirmed, Bridge.fn.bind(this, function () {
                        var $step = 0,
                            $task1, 
                            $jumpFromFinally, 
                            $asyncBody = Bridge.fn.bind(this, function () {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = this.OpenNotification(task);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            return;
                                        }
                                        default: {
                                            return;
                                        }
                                    }
                                }
                            }, arguments);

                        $asyncBody();
                    }));
                    confirm.Canceled = Bridge.fn.combine(confirm.Canceled, Bridge.fn.bind(this, function () {
                        var $step = 0,
                            $task1, 
                            $jumpFromFinally, 
                            $asyncBody = Bridge.fn.bind(this, function () {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = this.MarkAsRead(task);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            return;
                                        }
                                        default: {
                                            return;
                                        }
                                    }
                                }
                            }, arguments);

                        $asyncBody();
                    }));
                    confirm.Render();
                }
            },
            ToggleNotification: function () {
                this._task.style.display = "block";
                this._task.focus();
            },
            SeeMore: function (e) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    lastSeenTask, 
                    lastSeenDate, 
                    $t, 
                    olderTasks, 
                    taskList, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        lastSeenTask = System.Linq.Enumerable.from(Core.Notifications.NotificationBL.Notifications.Data, Core.Models.TaskNotification).lastOrDefault(null, null);
                                        lastSeenDate = ($t = (lastSeenTask != null ? lastSeenTask.InsertedDate : null), $t != null ? $t : System.DateTime.getNow());
                                        $task1 = new Core.Clients.Client.$ctor1("TaskNotification").GetRawList(Core.Models.TaskNotification, System.String.format("?$filter=InsertedDate lt {0}&$expand=Entity&$orderby=InsertedDate desc&$top=50", [Core.Extensions.DateTimeExt.ToISOFormat(lastSeenDate)]));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        olderTasks = $taskResult1;
                                        taskList = System.Linq.Enumerable.from(Core.Notifications.NotificationBL.Notifications.Data, Core.Models.TaskNotification).union(olderTasks).toList(Core.Models.TaskNotification);
                                        Core.Notifications.NotificationBL.Notifications.Data = taskList;
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            MarkAllAsRead: function (e) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    client, 
                    res, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        e.preventDefault();
                                        client = new Core.Clients.Client.$ctor1("TaskNotification");
                                        $task1 = client.PostAsync(System.Boolean, null, "MarkAllAsRead");
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        res = $taskResult1;
                                        this.ToggleBageCount(System.Linq.Enumerable.from(Core.Notifications.NotificationBL.Notifications.Data, Core.Models.TaskNotification).count(function (x) {
                                            return System.Nullable.eq(x.StatusId, Core.Enums.TaskStateEnum.UnreadStatus);
                                        }));
                                        Core.Extensions.IEnumerableExtensions.ForEach(Node, this._task.querySelectorAll(".task-unread"), function (task) {
                                            Core.Extensions.HtmlElementExtension.ReplaceClass(task, "task-unread", "task-read");
                                        });
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            OpenNotification: function (notification) {
                var $step = 0,
                    $task1, 
                    $task2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.MarkAsRead(notification);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $task2 = this.OpenTaskFeature(notification, this);
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $task2.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            OpenTaskFeature: function (notification, baseComponent) {
                var $step = 0,
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0], $step);
                                switch ($step) {
                                    case 0: {
                                        // Not to do anything
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            RemoveDOM: function () {
                Core.MVVM.Html.Take$1("#notification").Clear();
            },
            MarkAsRead: function (task) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        task.StatusId = Core.Enums.TaskStateEnum.Read;
                                        $task1 = new Core.Clients.Client.$ctor1("TaskNotification").UpdateAsync(Core.Models.TaskNotification, task);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        this.SetBadgeNumber();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            Dispose: function () {
                Core.Extensions.HtmlElementExtension.AddClass(this._task, "hide");
            }
        }
    });

    Bridge.define("Core.Components.Forms.TabEditor", {
        inherits: [Core.Components.Forms.EditForm],
        statics: {
            fields: {
                TabContainer: null,
                Tabs: null,
                _showTabText: null
            },
            props: {
                ActiveTab: {
                    get: function () {
                        return System.Linq.Enumerable.from(Core.Components.Forms.TabEditor.Tabs, Core.Components.Forms.TabEditor).firstOrDefault(function (x) {
                                return x.Show;
                            }, null);
                    }
                },
                ShowTabText: {
                    get: function () {
                        if (Core.Components.Forms.TabEditor._showTabText != null) {
                            return System.Nullable.getValue(Core.Components.Forms.TabEditor._showTabText);
                        }
                        var savedVal = window.localStorage.getItem("ShowTabText");
                        if (savedVal != null) {
                            var res = savedVal != null ? System.Boolean.parse(Bridge.toString(savedVal)) : false;
                            Core.Components.Forms.TabEditor._showTabText = res;
                            return System.Nullable.getValue(Core.Components.Forms.TabEditor._showTabText);
                        }
                        return false;
                    },
                    set: function (value) {
                        Core.Components.Forms.TabEditor._showTabText = value;
                        window.localStorage.setItem("ShowTabText", value);
                    }
                }
            },
            ctors: {
                init: function () {
                    this.TabContainer = document.getElementById("tab-content");
                    this.Tabs = new (System.Collections.Generic.List$1(Core.Components.Forms.TabEditor)).ctor();
                }
            },
            methods: {
                FindTab: function (id) {
                    return System.Linq.Enumerable.from(Core.Components.Forms.TabEditor.Tabs, Core.Components.Forms.TabEditor).firstOrDefault(function (x) {
                            return Bridge.referenceEquals(x.Id, id);
                        }, null);
                }
            }
        },
        fields: {
            _backdrop: null,
            _li: null,
            Url: null,
            _hotKeyComponents: null
        },
        props: {
            Popup: false,
            ChildForm: false,
            TabTitle: {
                get: function () {
                    var $t, $t1;
                    return ($t = (($t1 = this.Feature) != null ? $t1.Label : null), $t != null ? $t : this.Title);
                }
            },
            Show: {
                get: function () {
                    return Bridge.ensureBaseProperty(this, "Show").$Core$Components$BaseComponent$Show;
                },
                set: function (value) {
                    Bridge.ensureBaseProperty(this, "Show").$Core$Components$BaseComponent$Show = value;
                    if (this._li == null) {
                        return;
                    }

                    if (value) {
                        Core.Extensions.HtmlElementExtension.AddClass(this._li, "active");
                        this.Element.focus();
                    } else {
                        Core.Extensions.HtmlElementExtension.RemoveClass(this._li, "active");
                    }
                }
            }
        },
        ctors: {
            ctor: function (entity) {
                this.$initialize();
                Core.Components.Forms.EditForm.ctor.call(this, entity);
                this.PopulateDirty = false;
                this.ShouldLoadEntity = true;
            }
        },
        methods: {
            Render: function () {
                var $t;
                this.Url = window.location.href;
                if (this.ParentElement == null && !this.ChildForm) {
                    this.ParentElement = (($t = this.TabEditor) != null ? $t.Element : null) || Core.Components.Forms.TabEditor.TabContainer;
                }
                if (this.Popup) {
                    this.RenderPopup();
                } else {
                    this.RenderTab();
                }
                this.Focus();
            },
            RenderTab: function () {
                if (this.ChildForm) {
                    Core.MVVM.Html.Take(this.ParentElement).Div.Render();
                    this.Element = Core.MVVM.Html.Context;
                    Core.Components.Forms.EditForm.prototype.Render.call(this);
                    return;
                }
                var html = Core.MVVM.Html.Take$1("#tabs");
                Core.Components.Renderer.Title(html.Li, this.TabTitle).Event("click", Bridge.fn.cacheBind(this, this.Focus)).Event$1("mouseup", Bridge.fn.cacheBind(this, this.Close));
                Core.Components.Renderer.Icon(Core.Components.Renderer.Icon(html, this.Icon).End, "fa fa-times").Event$1("click", Bridge.fn.bind(this, function (e) {
                    e.stopPropagation();
                    this.DirtyCheckAndCancel();
                })).End.Render();
                if (Core.Components.Forms.TabEditor.ShowTabText) {
                    Core.Components.Renderer.IText(Core.Components.Renderer.ClassName(html.Span, "title"), this.TabTitle).End.Render();
                }

                this._li = Core.MVVM.Html.Context;
                this.IconElement = this._li.firstElementChild;
                Core.Components.Renderer.TabIndex(Core.MVVM.Html.Take(Core.Components.Forms.TabEditor.TabContainer).Div, -1).Trigger("focus").Event$1("keydown", Bridge.fn.cacheBind(this, this.HotKeyHandler)).Render();
                this.Element = Core.MVVM.Html.Context;
                this.ParentElement = Core.Components.Forms.TabEditor.TabContainer;
                Core.Components.Forms.TabEditor.Tabs.add(this);
                Core.Components.Forms.EditForm.prototype.Render.call(this);
            },
            RenderPopup: function () {
                var $t;
                Core.Components.Renderer.TabIndex(Core.Components.Renderer.ClassName(Core.MVVM.Html.Take(this.ParentElement || (($t = this.Parent) != null ? $t.Element : null) || Core.Components.Forms.TabEditor.TabContainer).Div, "backdrop"), -1).Trigger("focus").Event$1("keydown", Bridge.fn.cacheBind(this, this.HotKeyHandler));
                this._backdrop = Core.MVVM.Html.Context;
                Core.Components.Renderer.IconForSpan(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.MVVM.Html.Instance.Div, "popup-content").Div, "popup-title").Span, this.Icon);
                this.IconElement = Core.MVVM.Html.Context;
                Core.Components.Renderer.IText(Core.MVVM.Html.Instance.End.Span, this.Title);
                this.TitleElement = Core.MVVM.Html.Context;
                Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.MVVM.Html.Instance.End.Div, "icon-box").Span, "fa fa-times").Event("click", Bridge.fn.cacheBind(this, this.Dispose)).EndOf$1(".popup-title").Div, "popup-body");
                this.Element = Core.MVVM.Html.Context;
                Core.Components.Forms.EditForm.prototype.Render.call(this);
                if (Core.Extensions.HtmlElementExtension.OutOfViewport(this._backdrop).Top) {
                    this._backdrop.scrollIntoView(true);
                }
            },
            HotKeyHandler: function (e) {
                if (e.keyCode == null) {
                    return;
                }

                var keyCode = Core.Extensions.EventExt.KeyCodeEnum(e);
                var shiftKey = Core.Extensions.EventExt.ShiftKey(e);
                var ctrlKey = Core.Extensions.EventExt.CtrlOrMetaKey(e);
                var altKey = Core.Extensions.EventExt.AltKey(e);
                var defaultKeys = this.DefaultHotKeys(keyCode, shiftKey, ctrlKey, altKey);
                if (defaultKeys) {
                    e.preventDefault();
                    e.stopPropagation();
                    return;
                }
                if (keyCode >= Core.Enums.KeyCodeEnum.Shift && keyCode <= Core.Enums.KeyCodeEnum.Alt) {
                    return;
                }

                this.TriggerMatchHotKey(e, keyCode, shiftKey, ctrlKey, altKey);
            },
            TriggerMatchHotKey: function (e, keyCode, shiftKey, ctrlKey, altKey) {
                var $t, $t1;
                var patternList = new (System.Collections.Generic.List$1(Core.Enums.KeyCodeEnum)).ctor();
                if (shiftKey) {
                    patternList.add(Core.Enums.KeyCodeEnum.Shift);
                }

                if (ctrlKey) {
                    patternList.add(Core.Enums.KeyCodeEnum.Ctrl);
                }

                if (altKey) {
                    patternList.add(Core.Enums.KeyCodeEnum.Alt);
                }

                if (keyCode < Core.Enums.KeyCodeEnum.Shift) {
                    patternList.insert(0, keyCode);
                } else if (keyCode > Core.Enums.KeyCodeEnum.Alt) {
                    patternList.add(keyCode);
                }

                this._hotKeyComponents = this._hotKeyComponents || System.Linq.Enumerable.from(this.FilterChildren$1(function (x) {
                    return Bridge.is(x, Core.Components.Button) && !Core.Extensions.StringExt.IsNullOrWhiteSpace(x.GuiInfo.HotKey);
                })).select(function (x) { return Bridge.cast(x, Core.Components.Button); }).toList(Core.Components.Button);
                $t = Bridge.getEnumerator(this._hotKeyComponents);
                try {
                    while ($t.moveNext()) {
                        var com = $t.Current;
                        var parts = com.GuiInfo.HotKey.split(",");
                        if (Core.Extensions.IEnumerableExtensions.Nothing(System.String, parts)) {
                            continue;
                        }

                        var lastPart = System.Linq.Enumerable.from(parts, System.String).lastOrDefault(null, null);
                        var configKeys = System.Linq.Enumerable.from(lastPart.split("-"), System.String).select(function (x) {
                                var key = { v : new Core.Enums.KeyCodeEnum() };
                                var parsed = System.Enum.tryParse(Core.Enums.KeyCodeEnum, x, key);
                                return parsed ? Bridge.cast(key.v, System.Int32, true) : null;
                            }).where(function (x) {
                            return x != null;
                        }).select(function (x) {{ return Bridge.cast(x, Core.Enums.KeyCodeEnum); }}).orderBy(function (x) {
                            return x;
                        });
                        var isMatch = System.Linq.Enumerable.from(patternList, Core.Enums.KeyCodeEnum).sequenceEqual(configKeys);
                        if (!isMatch) {
                            continue;
                        }

                        e.preventDefault();
                        e.stopPropagation();
                        ($t1 = com.Element) != null ? $t1.click() : null;
                        return;
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            },
            DefaultHotKeys: function (keyCode, shiftKey, ctrlKey, altKey) {
                var $t;
                if (keyCode === Core.Enums.KeyCodeEnum.Escape && !shiftKey && !ctrlKey && !altKey) {
                    this.DirtyCheckAndCancel();
                    return true;
                } else if (ctrlKey && altKey && (keyCode === Core.Enums.KeyCodeEnum.LeftArrow || keyCode === Core.Enums.KeyCodeEnum.RightArrow)) {
                    var index;
                    index = Core.Components.Forms.TabEditor.Tabs.indexOf(this);
                    if (keyCode === Core.Enums.KeyCodeEnum.LeftArrow) {
                        if (index === 0) {
                            index = (Core.Components.Forms.TabEditor.Tabs.Count - 1) | 0;
                        } else {
                            index = (index - 1) | 0;
                        }
                    } else {
                        if (index >= ((Core.Components.Forms.TabEditor.Tabs.Count - 1) | 0)) {
                            index = 0;
                        } else {
                            index = (index + 1) | 0;
                        }
                    }
                    if (index < 0 || index > Core.Components.Forms.TabEditor.Tabs.Count) {
                        return false;
                    }

                    ($t = System.Linq.Enumerable.from(Core.Components.Forms.TabEditor.Tabs, Core.Components.Forms.TabEditor).elementAt(index)) != null ? $t.Focus() : null;
                    return true;
                } else if (ctrlKey && shiftKey && keyCode === Core.Enums.KeyCodeEnum.F) {
                    // trigger search gridview
                    var listView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.ListView, this), Core.Components.ListView).firstOrDefault(null, null);
                    if (listView == null || !listView.GuiInfo.CanSearch) {
                        return true;
                    }

                    listView.ListViewSearch.AdvancedSearch(null);
                    return true;
                }
                return false;
            },
            Focus: function () {
                if (!this.Popup && !this.ChildForm) {
                    Core.Components.Forms.TabEditor.Tabs.ForEach(function (x) {
                        x.Show = false;
                    });
                }

                if (!this.ChildForm) {
                    this.Show = true;
                }
                window.history.replaceState(null, Core.Components.LangSelect.Get(this.TabTitle), this.Url);
                document.title = Core.Components.LangSelect.Get(this.TabTitle);
                Core.Components.Forms.EditForm.prototype.Focus.call(this);
                window.dispatchEvent(new Event(System.Enum.toString(System.String, "resize")));
                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        tab, 
                        $t, 
                        task, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            tab = ($t = Core.Components.Forms.TabComponent, System.Linq.Enumerable.from(this.FilterChildren(Core.Components.Forms.TabComponent), $t).ToArray($t));
                                            task = System.Linq.Enumerable.from(tab, Core.Components.Forms.TabComponent).select(function (x) {
                                                return x.CountBage();
                                            });
                                            $task1 = System.Threading.Tasks.Task.whenAll(task);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            Close: function (e) {
                var $t, $t1;
                var intWhich = { };
                System.Int32.tryParse(($t = e.which) != null ? Bridge.toString($t) : null, intWhich);
                var intButton = { };
                System.Int32.tryParse(($t1 = e.button) != null ? Bridge.toString($t1) : null, intButton);
                if (intWhich.v === 2 || intButton.v === 1) {
                    e.preventDefault();
                    this.DirtyCheckAndCancel();
                }
            },
            Dispose: function () {
                if (this.ParentForm != null) {
                    this.ParentForm.Focus();
                } else if (this.Parent != null) {
                    this.Parent.Focus();
                } else if (this.ParentElement != null) {
                    this.ParentElement.focus();
                }

                if (!this.Popup) {
                    this.DisposeTab();
                } else {
                    // Update the Gridview row that open this tab if possible
                }
                Core.Components.Forms.EditForm.prototype.Dispose.call(this);
            },
            DisposeTab: function () {
                var $t;
                if (this.ParentForm == null) {
                    ($t = System.Linq.Enumerable.from(Core.Components.Forms.TabEditor.Tabs, Core.Components.Forms.TabEditor).lastOrDefault(Bridge.fn.bind(this, function (x) {
                                return !Bridge.referenceEquals(x, this);
                            }), null)) != null ? $t.Focus() : null;
                } else {
                    this.ParentForm.Focus();
                    this.ParentForm = null;
                }
                Core.Components.Forms.TabEditor.Tabs.remove(this);
            },
            RemoveDOM: function () {
                var $t;
                ($t = this.Element) != null ? $t.remove() : null;
                this._li != null ? this._li.remove() : null;
                this._backdrop != null ? this._backdrop.remove() : null;
            }
        }
    });

    Bridge.define("Core.Components.GridView", {
        inherits: [Core.Components.ListView],
        statics: {
            fields: {
                SummaryClass: null,
                ToolbarColumn: null
            },
            ctors: {
                init: function () {
                    var $t;
                    this.SummaryClass = "summary";
                    this.ToolbarColumn = ($t = new Core.Models.GridPolicy(), $t.StatusBar = true, $t.ShortDesc = "", $t.Frozen = true, $t);
                }
            },
            methods: {
                SetSummaryHeaderText: function (sum, tr) {
                    if (Core.Extensions.StringExt.IsNullOrWhiteSpace(sum.Summary)) {
                        return;
                    }

                    var cell = tr.cells[0];
                    cell.colSpan = (System.Nullable.getValue(sum.SummaryColSpan)) >>> 0;
                    cell.textContent = sum.Summary;
                    Core.Extensions.HtmlElementExtension.AddClass(cell, "summary-header");
                },
                ResetSummaryRow: function (tr, colSpan) {
                    var $t;
                    for (var i = 1; i < colSpan; i = (i + 1) | 0) {
                        ($t = tr.cells[0]) != null ? $t.remove() : null;
                    }
                    Core.Components.GridView.ClearSummaryContent(tr);
                },
                ClearSummaryContent: function (tr) {
                    var $t;
                    $t = Bridge.getEnumerator(tr.cells, "getEnumerator");
                    try {
                        while ($t.moveNext()) {
                            var c = $t.Current;
                            c.innerHTML = "";
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                },
                RenderSortIcon: function (header, sortedFields) {
                    if (Core.Extensions.StringExt.HasAnyChar(header.FieldName) && sortedFields.containsKey(header.FieldName)) {
                        var desc = sortedFields.getItem(header.FieldName);
                        Core.Components.Renderer.Icon(Core.MVVM.Html.Instance, desc ? "fa fa-sort-amount-down-alt" : "fa fa-sort-amount-up-alt").End.Render();
                    }
                }
            }
        },
        fields: {
            _renderIndexAwaiter: 0
        },
        ctors: {
            ctor: function (ui) {
                this.$initialize();
                Core.Components.ListView.ctor.call(this, ui);
                this.DOMContentLoaded = Bridge.fn.combine(this.DOMContentLoaded, Bridge.fn.cacheBind(this, this.DOMContentLoadedHandler));
            }
        },
        methods: {
            DOMContentLoadedHandler: function () {
                this.AddSummaries();
                this.PopulateFields$1();
            },
            PopulateFields$1: function () {
                if (!Core.Extensions.StringExt.IsNullOrWhiteSpace(this.GuiInfo.PopulateField)) {
                    var fields = this.GuiInfo.PopulateField.split(",");
                    if (fields.length > 0) {
                        this.EditForm.UpdateView$1(true, fields);
                    }
                }
            },
            Rerender: function () {
                this.DisposeNoRecord();
                this.Editable = this.GuiInfo.CanAdd && System.Linq.Enumerable.from(this.Header, Core.Models.GridPolicy).any(function (x) {
                        return !x.Hidden && x.Editable;
                    });
                this.Header = System.Linq.Enumerable.from(this.Header, Core.Models.GridPolicy).where(function (x) {
                        return !x.Hidden;
                    }).toList(Core.Models.GridPolicy);

                this.RenderTableHeader();
                this.RenderContent();
                this.StickyColumn(this);
                this.RenderIndex();

                if (this.Editable) {
                    this.AddNewEmptyRow();
                } else if (Core.Extensions.IEnumerableExtensions.Nothing(System.Object, this.RowData.Data)) {
                    this.NoRecordFound();
                    this.DomLoaded();
                    return;
                }
                var tableElement;
                if (((tableElement = Bridge.as(this.MainSection.Element, HTMLTableSectionElement))) != null) {
                    tableElement.addEventListener("contextmenu", Bridge.fn.cacheBind(this, this.BodyContextMenuHandler));
                }
                this.DomLoaded();
                Core.Components.Spinner.Hide();
            },
            StickyColumn: function (rows) {
                var $t;
                var shouldStickEle = System.Array.init(["th", "td"], System.String);
                var frozen = ($t = Core.Components.BaseComponent, System.Linq.Enumerable.from(rows.FilterChildren(Core.Components.BaseComponent, function (x) {
                        return x.GuiInfo != null && x.GuiInfo.Frozen;
                    }, function (x) {
                        return Bridge.is(x, Core.Components.ListViewSearch);
                    }, void 0), $t).ToArray($t));
                frozen.forEach(function (x) {
                        var cell = x.Element;
                        var isCell = System.Array.contains(shouldStickEle, x.Element.tagName.toLowerCase(), System.String);
                        if (!isCell) {
                            cell = Core.Extensions.HtmlElementExtension.Closest(x.Element, "td");
                        }
                        Core.Components.Renderer.Sticky(Core.MVVM.Html.Take(cell), void 0, Bridge.toString((0)));
                    });
            },
            AddSections: function () {
                Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.MVVM.Html.Take(this.ParentElement).Div, "grid-wrapper"), this.Editable ? "editable" : "");
                this.Element = Core.MVVM.Html.Context;
                if (this.GuiInfo.CanSearch) {
                    Core.Components.Renderer.ClassName(Core.MVVM.Html.Instance.Div, "grid-toolbar search").End.Render();
                }
                this.ListViewSearch = new Core.Components.ListViewSearch(this.GuiInfo);
                this.AddChild(this.ListViewSearch);
                Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.MVVM.Html.Take(this.Element).Div, "table-wrapper").Table, "table").Thead.End.TBody.Render();
                this.HeaderSection = new Core.Components.ListViewSection.ctor(Core.MVVM.Html.Context.previousElementSibling);
                this.AddChild(this.HeaderSection);
                this.MainSection = new Core.Components.ListViewSection.ctor(Core.MVVM.Html.Context);
                this.AddChild(this.MainSection);
                Core.MVVM.Html.Instance.EndOf$1(".table-wrapper");
                this.RenderPaginator();
            },
            AddRow: function (rowData, index, singleAdd) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    rowSection, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (index === void 0) { index = 0; }
                                        if (singleAdd === void 0) { singleAdd = true; }
                                        $task1 = Core.Components.ListView.prototype.AddRow.call(this, rowData, index, singleAdd);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        rowSection = $taskResult1;
                                        this.StickyColumn(rowSection);
                                        this.RenderIndex();
                                        $tcs.setResult(rowSection);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            AddNewEmptyRow: function () {
                if (this.Disabled || !this.Editable) {
                    return;
                }
                var lastEmptyRow = System.Linq.Enumerable.from(this.AllListViewItem, Core.Components.ListViewItem).firstOrDefault(function (x) {
                        return x.EmptyRow;
                    }, null);
                if (lastEmptyRow != null) {
                    return;
                }
                var emptyRowData = this.EmptyRowData();
                emptyRowData[Core.Components.BaseComponent.IdField] = Bridge.box((-Math.abs(Bridge.getHashCode(emptyRowData))) | 0, System.Int32); // Not to add this row into the submitted list
                var rowSection = this.RenderRowData(this.Header, emptyRowData, this.MainSection, 0, true);
                //MainSection.Element.InsertBefore(rowSection.Element, MainSection.Element.FirstChild);
                this.StickyColumn(rowSection);
                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = Core.Components.Extensions.ComponentExt.DispatchCustomEventAsync(this, this.GuiInfo.Events, Core.Enums.CustomEventType.AfterEmptyRowCreated, [Bridge.box(this.emptyRow, System.Boolean, System.Nullable.toStringFn(System.Boolean.toString), System.Nullable.getHashCode)]);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            EmptyRowData: function () {
                var $t;
                return Bridge.createInstance(Bridge.Reflection.getType(((($t = this.GuiInfo.Reference.Namespace, $t != null ? $t : Core.Clients.Client.ModelNamespace)) || "") + (this.GuiInfo.RefName || "")));
            },
            FilterColumns: function (gridPolicy) {
                var specificComponent = System.Linq.Enumerable.from(gridPolicy, Core.Models.GridPolicy).any(Bridge.fn.bind(this, function (x) {
                        return System.Nullable.eq(x.ComponentId, this.GuiInfo.Id);
                    }));
                if (specificComponent) {
                    gridPolicy = System.Linq.Enumerable.from(gridPolicy, Core.Models.GridPolicy).where(Bridge.fn.bind(this, function (x) {
                            return System.Nullable.eq(x.ComponentId, this.GuiInfo.Id);
                        })).toList(Core.Models.GridPolicy);
                } else {
                    gridPolicy = System.Linq.Enumerable.from(gridPolicy, Core.Models.GridPolicy).where(function (x) {
                            return x.ComponentId == null;
                        }).toList(Core.Models.GridPolicy);
                }

                var permission = this.EditForm.GetElementPolicies$1(System.Linq.Enumerable.from(gridPolicy, Core.Models.GridPolicy).select(function (x) {
                        return x.Id;
                    }).ToArray(System.Int32), Core.Enums.EntityEnum.GridPolicy);
                var headers = System.Linq.Enumerable.from(gridPolicy, Core.Models.GridPolicy).where(function (x) {
                        return !x.Hidden;
                    }).where(function (header) {
                    return !header.IsPrivate || Core.Extensions.IEnumerableExtensions.HasElementAndAll(Core.Models.FeaturePolicy, System.Linq.Enumerable.from(permission, Core.Models.FeaturePolicy).where(function (x) {
                            return x.RecordId === header.Id;
                        }), function (policy) {
                        return policy.CanRead;
                    });
                }).select(Bridge.fn.cacheBind(this, this.CalcTextAlign)).orderByDescending(function (x) {
                    return x.Frozen;
                }).thenByDescending(function (header) {
                    return Bridge.referenceEquals(header.ComponentType, "Button");
                }).thenBy(function (x) {
                    return x.Order;
                }).toList(Core.Models.GridPolicy);
                Core.Components.ListView.OrderHeaderGroup(headers);
                this.Header.clear();
                this.Header.add(Core.Components.GridView.ToolbarColumn);
                this.Header.AddRange(headers);
                this.HeaderComponentMap = System.Linq.Enumerable.from(this.Header, Core.Models.GridPolicy).toDictionary(function (x) {
                        return Bridge.getHashCode(x);
                    }, function (x) {
                        return Core.Extensions.Utils.MapToComponent(x);
                    }, System.Int32, Core.Models.Component);
                return headers;
            },
            RenderContent: function () {
                this.FormattedRowData = Core.Extensions.IEnumerableExtensions.Nothing(System.Object, this.FormattedRowData) ? this.RowData.Data : this.FormattedRowData;
                if (Core.Extensions.IEnumerableExtensions.Nothing(System.Object, this.FormattedRowData)) {
                    return;
                }
                this.MainSection.DisposeChildren();
                Core.MVVM.Html.Take(this.MainSection.Element);
                Core.Extensions.IEnumerableExtensions.ForEach$1(System.Object, this.FormattedRowData, Bridge.fn.bind(this, function (row, index) {
                    var rowSection = this.RenderRowData(this.Header, row, this.MainSection);
                }));
            },
            RenderRowData: function (headers, row, section, index, emptyRow) {
                var $t;
                if (index === void 0) { index = null; }
                if (emptyRow === void 0) { emptyRow = false; }
                var tbody = Bridge.as(section.Element, HTMLTableSectionElement);
                Core.MVVM.Html.Take(tbody);
                var rowSection = ($t = new Core.Components.ListViewItem(Core.MVVM.ElementType.tr), $t.EmptyRow = emptyRow, $t.Entity = row, $t.ParentElement = tbody, $t);
                section.AddChild(rowSection, index);
                var id = Bridge.unbox(row[Core.Components.BaseComponent.IdField]);
                if (id <= 0 && !emptyRow) {
                    rowSection.Dirty = true;
                }
                var tr = Bridge.as(Core.MVVM.Html.Context, HTMLTableRowElement);
                tr.tabIndex = -1;
                if (System.Nullable.hasValue(index)) {
                    if (System.Nullable.gte(index, System.Linq.Enumerable.from(tr.parentElement.children, HTMLElement).count()) || System.Nullable.lt(index, 0)) {
                        index = 0;
                    }

                    tr.parentElement.insertBefore(tr, tr.parentElement.children[System.Nullable.getValue(index)]);
                }
                if (Core.Extensions.IEnumerableExtensions.HasElement(Core.Models.GridPolicy, headers)) {
                    Core.MVVM.Html.Instance.ForEach$2(Core.Models.GridPolicy, headers, Bridge.fn.bind(this, function (header, headerIndex) {
                        this.RenderTableCell(row, this.HeaderComponentMap.getItem(Bridge.getHashCode(header)), rowSection, headerIndex);
                    }));
                }
                !Bridge.staticEquals(($t = rowSection.DOMContentLoaded), null) ? $t() : null;
                if (emptyRow) {
                    this.Children.ForEach(function (x) {
                        x.AlwaysLogHistory = true;
                    });
                }
                var isApproved = System.Nullable.eq(Bridge.unbox(row.StatusId), Core.Enums.ApprovalStatusEnum.Approved) || System.Nullable.eq(Bridge.unbox(row.StatusId), Core.Enums.ReceiptStatusEnum.Finished);
                if (isApproved) {
                    rowSection.Disabled = true;
                    Core.Components.Extensions.ComponentExt.SetDisabled$1(rowSection, false, ["btnEdit"]);
                }
                if (this.Disabled) {
                    Core.Components.Extensions.ComponentExt.SetDisabled$1(rowSection, false, ["btnEdit"]);
                }
                return rowSection;
            },
            RenderTableCell: function (rowData, header, rowSection, index) {
                Core.MVVM.Html.Instance.TData.DataAttr$1("field", header.FieldName).Render();
                if (header.StatusBar) {
                    Core.Components.Renderer.Icon(Core.MVVM.Html.Instance, "fa fa-pencil").End.Render();
                }

                Core.MVVM.Html.Instance.Style$1(System.String.format("width: {0}; min-width: {1}; max-width: {2};", header.Width, header.MinWidth, header.MaxWidth));
                if (System.String.isNullOrEmpty(header.FieldName)) {
                    return;
                }

                this.RenderCellComponent(rowData, header, rowSection);
                Core.MVVM.Html.Instance.EndOf(Core.MVVM.ElementType.td);
            },
            AddSummaries: function () {
                if (System.Linq.Enumerable.from(this.Header, Core.Models.GridPolicy).all(function (x) {
                        return Core.Extensions.StringExt.IsNullOrEmpty(x.Summary);
                    })) {
                    return;
                }

                var sums = System.Linq.Enumerable.from(this.Header, Core.Models.GridPolicy).where(function (x) {
                        return !Core.Extensions.StringExt.IsNullOrWhiteSpace(x.Summary);
                    });
                System.Linq.Enumerable.from(this.MainSection.Element.children, HTMLElement).where(function (x) {
                            return Core.Extensions.HtmlElementExtension.HasClass(x, Core.Components.GridView.SummaryClass);
                        }).ToArray(HTMLElement).forEach(function (x) {
                        x.remove();
                    });
                var count = System.Linq.Enumerable.from(Core.Extensions.BridgeExt.DistinctBy(Core.Models.GridPolicy, System.String, sums, function (x) {
                        return x.Summary;
                    }), Core.Models.GridPolicy).count();
                sums.forEach(Bridge.fn.bind(this, function (header) {
                    this.AddNewEmptyRow();
                    this.RenderSummaryRow(header, this.Header, Bridge.as(this.MainSection.Element.parentElement, HTMLTableElement), count);
                }));
            },
            RenderSummaryRow: function (sum, headers, table, count) {
                var $t;
                var tr = this.CreateSummaryTableRow(sum, table, count);
                if (tr == null) {
                    return;
                }

                var hasSummaryClass = Core.Extensions.HtmlElementExtension.HasClass(tr, Core.Components.GridView.SummaryClass);
                var colSpan = ($t = sum.SummaryColSpan, $t != null ? $t : 0);
                Core.Extensions.HtmlElementExtension.AddClass(tr, Core.Components.GridView.SummaryClass);
                if (!hasSummaryClass && headers.contains(sum)) {
                    Core.Components.GridView.ResetSummaryRow(tr, colSpan);
                }
                if (!headers.contains(sum)) {
                    Core.Components.GridView.ClearSummaryContent(tr);
                    return;
                }
                Core.Components.GridView.SetSummaryHeaderText(sum, tr);
                this.CalcSumCol(sum, headers, tr, colSpan);
            },
            AlterWidth: function (id, width) {
                throw new System.NotImplementedException.ctor();
            },
            CreateSummaryTableRow: function (sum, table, count) {
                var summaryText = sum.Summary;
                if (table == null || Core.Extensions.IEnumerableExtensions.Nothing(HTMLTableSectionElement, table.tBodies) || Core.Extensions.IEnumerableExtensions.Nothing(HTMLElement, table.tBodies[0].children)) {
                    return null;
                }

                var summaryRowCount = System.Linq.Enumerable.from(table.tBodies[0].rows, HTMLTableRowElement).count(function (x) {
                        return Core.Extensions.HtmlElementExtension.HasClass(x, Core.Components.GridView.SummaryClass);
                    });
                var existSumRow = System.Linq.Enumerable.from(table.tBodies[0].rows, HTMLTableRowElement).reverse().firstOrDefault(function (x) {
                        return Core.Extensions.HtmlElementExtension.HasClass(x, Core.Components.GridView.SummaryClass) && System.Linq.Enumerable.from(x.children, HTMLElement).any(function (y) {
                                return Bridge.referenceEquals(y.textContent, summaryText);
                            });
                    }, null);
                if (existSumRow == null) {
                    existSumRow = System.Linq.Enumerable.from(table.tBodies[0].rows, HTMLTableRowElement).lastOrDefault(null, null);
                }

                if (summaryRowCount >= count) {
                    return existSumRow;
                }
                if (table == null || Core.Extensions.IEnumerableExtensions.Nothing(HTMLTableSectionElement, table.tBodies)) {
                    return null;
                }
                var result = Bridge.as(table.tBodies[0].lastElementChild.cloneNode(true), HTMLTableRowElement);
                table.tBodies[0].appendChild(result);
                Core.Extensions.IEnumerableExtensions.ForEach(HTMLElement, result.children, function (x) {
                    x.innerHTML = null;
                });
                return result;
            },
            CalcSumCol: function (header, headers, tr, colSpan) {
                var index = headers.indexOf(header);
                var cellVal = tr.cells[((((index - colSpan) | 0) + 1) | 0)];
                var format = Core.Extensions.StringExt.IsNullOrWhiteSpace(header.FormatCell) ? "{0:n0}" : header.FormatCell;
                var isNumber = System.Linq.Enumerable.from(this.RowData.Data, System.Object).any(function (x) {
                        return Core.Extensions.ReflectionExt.IsNumber(Bridge.Reflection.getMembers(Bridge.getType(x), 16, 284, header.FieldName).rt);
                    });
                var sum = System.Linq.Enumerable.from(this.RowData.Data, System.Object).sum(function (x) {
                        var val = x[header.FieldName];
                        if (val == null) {
                            return System.Decimal(0);
                        }

                        return System.Convert.toDecimal(val);
                    }, System.Decimal.Zero);
                cellVal.textContent = Core.Extensions.Utils.FormatEntity$1(format, isNumber ? sum : System.Decimal(System.Linq.Enumerable.from(this.RowData.Data, System.Object).count()));
            },
            RowChangeHandler: function (rowData, rowSection) {
                var $step = 0,
                    $task1, 
                    $task2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.ListView.prototype.RowChangeHandler.call(this, rowData, rowSection);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $task2 = System.Threading.Tasks.Task.delay(50);
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $task2.getAwaitedResult();
                                        this.AddSummaries();
                                        this.PopulateFields$1();
                                        this.RenderIndex();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            RenderTableHeader: function () {
                var headers = this.Header;
                var sortedFields = this.GetSortedFields();
                Core.Extensions.IEnumerableExtensions.ForEach$1(Core.Models.GridPolicy, headers, function (x, index) {
                    x.PostOrder = index;
                });
                this.HeaderSection.DisposeChildren();
                var anyGroup = System.Linq.Enumerable.from(headers, Core.Models.GridPolicy).any(function (x) {
                        return !System.String.isNullOrEmpty(x.GroupName);
                    });
                Core.MVVM.Html.Take(this.HeaderSection.Element).Clear().TRow.ForEach$2(Core.Models.GridPolicy, headers, Bridge.fn.bind(this, function (header, index) {
                    var $t;
                    var textAlignEnum = { v : new Core.Enums.TextAlign() };
                    var parsed = System.Enum.tryParse(Core.Enums.TextAlign, header.TextAlign, textAlignEnum);
                    header.TextAlignEnum = parsed ? textAlignEnum.v : Core.Enums.TextAlign.left;
                    if (anyGroup && !System.String.isNullOrEmpty(header.GroupName)) {
                        if (!Bridge.referenceEquals(header, System.Linq.Enumerable.from(headers, Core.Models.GridPolicy).firstOrDefault(function (x) {
                                return Bridge.referenceEquals(x.GroupName, header.GroupName);
                            }, null))) {
                            return;
                        }

                        Core.MVVM.Html.Instance.Th.Render();
                        Core.Components.Renderer.ColSpan(Core.MVVM.Html.Instance, System.Linq.Enumerable.from(headers, Core.Models.GridPolicy).count(function (x) {
                                return Bridge.referenceEquals(x.GroupName, header.GroupName);
                            }));
                        Core.Components.Renderer.IHtml(Core.MVVM.Html.Instance, header.GroupName).Render();
                        return;
                    }
                    Core.Components.Renderer.TextAlign(Core.Components.Renderer.Width(Core.MVVM.Html.Instance.Th.DataAttr$1("field", header.FieldName), header.AutoFit ? "auto" : header.Width).Style$1(System.String.format("min-width: {0}; max-width: {1}", header.MinWidth, header.MaxWidth)), header.TextAlignEnum).Event$4(Core.Models.GridPolicy, "contextmenu", Bridge.fn.cacheBind(this, this.HeaderContextMenu), header);
                    this.HeaderSection.AddChild(($t = new Core.Components.Section.ctor(Core.MVVM.Html.Context), $t.GuiInfo = Core.Extensions.Utils.MapToComponent(header), $t));
                    if (anyGroup && System.String.isNullOrEmpty(header.GroupName)) {
                        Core.Components.Renderer.RowSpan(Core.MVVM.Html.Instance, 2);
                    }
                    if (!anyGroup && System.Linq.Enumerable.from(this.Header, Core.Models.GridPolicy).any(function (x) {
                            return Core.Extensions.StringExt.HasAnyChar(x.GroupName);
                        })) {
                        Core.Components.Renderer.ClassName(Core.MVVM.Html.Instance, "header-group");
                    }
                    if (header.StatusBar) {
                        Core.Components.Renderer.Icon(Core.MVVM.Html.Instance, "fa fa-edit").Event("click", Bridge.fn.cacheBind(this, this.ToggleAll)).End.Render();
                    }

                    if (!Core.Extensions.StringExt.IsNullOrWhiteSpace(header.Icon)) {
                        Core.Components.Renderer.Margin(Core.Components.Renderer.Icon(Core.Components.Renderer.TextAlign(Core.MVVM.Html.Instance, Core.Enums.TextAlign.center), header.Icon), Core.Components.Direction.right, 0).End.Render();
                    } else {
                        Core.Components.Renderer.IHtml(Core.MVVM.Html.Instance.Span, header.ShortDesc).End.Render();
                        Core.Components.GridView.RenderSortIcon(header, sortedFields);
                    }
                    if (header.Description != null) {
                        Core.MVVM.Html.Instance.Attr$1("title", header.Description);
                    }
                    Core.MVVM.Html.Instance.Event$1("click", Bridge.fn.bind(this, function (e) {
                        this.ChangeFieldOrder(header, e);
                    })).EndOf(Core.MVVM.ElementType.th);
                })).EndOf(Core.MVVM.ElementType.tr).Render();

                if (anyGroup) {
                    Core.MVVM.Html.Instance.TRow.ForEach$2(Core.Models.GridPolicy, headers, Bridge.fn.bind(this, function (header, index) {
                        var $t;
                        if (anyGroup && !System.String.isNullOrEmpty(header.GroupName)) {
                            Core.Components.Renderer.IHtml(Core.Components.Renderer.TextAlign(Core.Components.Renderer.Width(Core.MVVM.Html.Instance.Th.DataAttr$1("field", header.FieldName), header.Width).Style$1(System.String.format("min-width: {0}; max-width: {1}", header.MinWidth, header.MaxWidth)), header.TextAlignEnum).Event$4(Core.Models.GridPolicy, "contextmenu", Bridge.fn.cacheBind(this, this.HeaderContextMenu), header).Event$1("click", Bridge.fn.bind(this, function (e) {
                                this.ChangeFieldOrder(header, e);
                            })).Span, header.ShortDesc);
                            Core.Components.GridView.RenderSortIcon(header, sortedFields);
                            this.HeaderSection.AddChild(Bridge.cast(($t = new Core.Components.Section.ctor(Core.MVVM.Html.Context.parentElement), $t.GuiInfo = Core.Extensions.Utils.MapToComponent(header), $t), Core.Components.BaseComponent));
                        }
                    }));
                }
                this.HeaderSection.Children = System.Linq.Enumerable.from(this.HeaderSection.Children, Core.Components.BaseComponent).orderBy(function (x) {
                        return x.GuiInfo.PostOrder;
                    }).toList(Core.Components.BaseComponent);
            },
            ChangeFieldOrder: function (header, e) {
                if (this.GuiInfo.CanCache || Core.Extensions.StringExt.IsNullOrWhiteSpace(header.ShortDesc)) {
                    return;
                }

                var sortFields = this.GetSortedFields();
                if (!sortFields.containsKey(header.FieldName)) {
                    sortFields.add(header.FieldName, false);
                }
                var target = e.target;
                var th = Core.MVVM.Html.Take(target).Closest(Core.MVVM.ElementType.th).GetContext();
                var sortEle = th.querySelector(".fa");
                if (sortEle == null) {
                    Core.Components.Renderer.Icon(Core.MVVM.Html.Take(target), "fa fa-sort-amount-up-alt").End.Render();
                } else if (Core.Extensions.HtmlElementExtension.HasClass(sortEle, "fa-sort-amount-down-alt")) {
                    sortFields.remove(header.FieldName);
                    Core.Extensions.HtmlElementExtension.RemoveClass(sortEle, "fa-sort-amount-down-alt");
                } else if (Core.Extensions.HtmlElementExtension.HasClass(sortEle, "fa-sort-amount-up-alt")) {
                    sortFields.setItem(header.FieldName, true);
                    Core.Extensions.HtmlElementExtension.ReplaceClass(sortEle, "fa-sort-amount-up-alt", "fa-sort-amount-down-alt");
                }
                var orderPart = Bridge.toArray(System.Linq.Enumerable.from(sortFields, System.Collections.Generic.KeyValuePair$2(System.String,System.Boolean)).select(function (x) {
                            return (x.key || "") + ((x.value ? " desc" : "") || "");
                        })).join(",");
                this.DataSourceFilter = Core.Extensions.OdataExt.ApplyClause(this.DataSourceFilter, orderPart, Core.Extensions.OdataExt.OrderByKeyword);
                this.UpdateView();
            },
            GetSortedFields: function () {
                var fieldSorts = new (System.Collections.Generic.Dictionary$2(System.String,System.Boolean)).ctor();
                var dataSource = this.DataSourceFilter;
                if (Core.Extensions.StringExt.IsNullOrWhiteSpace(dataSource)) {
                    return fieldSorts;
                }

                dataSource = dataSource.replace(new RegExp("\\s+"), " ");
                var orderClause = Core.Extensions.OdataExt.GetClausePart(dataSource, Core.Extensions.OdataExt.OrderByKeyword);
                if (Core.Extensions.StringExt.IsNullOrWhiteSpace(orderClause)) {
                    return fieldSorts;
                }

                fieldSorts = System.Linq.Enumerable.from(Core.Extensions.BridgeExt.DistinctBy(System.Object, System.String, System.Linq.Enumerable.from(orderClause.split(","), System.String).select(function (x) {
                        if (Core.Extensions.StringExt.IsNullOrWhiteSpace(x)) {
                            return null;
                        }

                        var sortedField = x.split(" ");
                        if (sortedField.length < 1) {
                            return null;
                        }

                        return new $asm.$AnonymousType$6(sortedField[System.Array.index(0, sortedField)], sortedField.length === 2 && Bridge.referenceEquals(sortedField[System.Array.index(1, sortedField)].toLowerCase(), "desc"));
                    }).where(function (x) {
                    return x != null;
                }), function (x) {
                    return x.Field;
                }), System.Object).toDictionary(function (x) {
                        return x.Field;
                    }, function (x) {
                        return x.Desc;
                    }, System.String, System.Boolean);

                return fieldSorts;
            },
            ToggleAll: function () {
                var allSelected = System.Linq.Enumerable.from(this.AllListViewItem, Core.Components.ListViewItem).all(function (x) {
                        return x.Selected;
                    });
                if (allSelected) {
                    this.ClearSelected();
                } else {
                    this.RowAction(function (x) {
                        if (x.EmptyRow) {
                            return;
                        }

                        x.Selected = !x.Selected;
                    });
                }
            },
            HeaderContextMenu: function (e, header) {
                if (!Core.Clients.Client.SystemRole) {
                    return;
                }

                e.preventDefault();
                e.stopPropagation();
                var editForm = Core.Components.Extensions.ComponentExt.FindClosest(Core.Components.Forms.EditForm, this);
                var section = Core.Components.Extensions.ComponentExt.FindClosest(Core.Components.Section, this);
                var menu = Core.Components.Forms.ContextMenu.Instance;
                menu.Top = Core.Extensions.EventExt.Top(e);
                menu.Left = Core.Extensions.EventExt.Left(e);
                menu.MenuItems = Bridge.fn.bind(this, function (_o1) {
                        var $t;
                        _o1.add(($t = new Core.Components.Forms.ContextMenuItem(), $t.Icon = "fal fa-wrench", $t.Text = "T\u00f9y ch\u1ecdn c\u1ed9t d\u1eef li\u1ec7u", $t.Click = Bridge.fn.cacheBind(editForm, editForm.HeaderProperties), $t.Parameter = header, $t));
                        _o1.add(($t = new Core.Components.Forms.ContextMenuItem(), $t.Icon = "fal fa-clone", $t.Text = "Clone c\u1ed9t", $t.Click = Bridge.fn.cacheBind(this, this.CloneHeader), $t.Parameter = header, $t));
                        _o1.add(($t = new Core.Components.Forms.ContextMenuItem(), $t.Icon = "fal fa-trash-alt", $t.Text = "X\u00f3a c\u1ed9t", $t.Click = Bridge.fn.cacheBind(this, this.RemoveHeader), $t.Parameter = header, $t));
                        _o1.add(($t = new Core.Components.Forms.ContextMenuItem(), $t.Icon = "fal fa-cog", $t.Text = "T\u00f9y ch\u1ecdn b\u1ea3ng d\u1eef li\u1ec7u", $t.Click = Bridge.fn.cacheBind(editForm, editForm.ComponentProperties), $t.Parameter = this.GuiInfo, $t));
                        _o1.add(($t = new Core.Components.Forms.ContextMenuItem(), $t.Icon = "fal fa-cogs", $t.Text = "T\u00f9y ch\u1ecdn v\u00f9ng d\u1eef li\u1ec7u", $t.Click = Bridge.fn.cacheBind(editForm, editForm.SectionProperties), $t.Parameter = section.ComponentGroup, $t));
                        _o1.add(($t = new Core.Components.Forms.ContextMenuItem(), $t.Icon = "fal fa-folder-open", $t.Text = "Thi\u1ebft l\u1eadp chung", $t.Click = Bridge.fn.cacheBind(editForm, editForm.FeatureProperties), $t.Parameter = editForm.Feature, $t));
                        return _o1;
                    })(new (System.Collections.Generic.List$1(Core.Components.Forms.ContextMenuItem)).ctor());
                menu.Render();
            },
            CloneHeader: function (arg) {
                var $t;
                var entity = Bridge.as(arg, Core.Models.GridPolicy);
                var confirm = ($t = new Core.Components.Forms.ConfirmDialog(), $t.Content = "B\u1ea1n c\u00f3 ch\u1eafc ch\u1eafn mu\u1ed1n clone c\u1ed9t n\u00e0y kh\u00f4ng?", $t);
                confirm.Render();
                confirm.YesConfirmed = Bridge.fn.combine(confirm.YesConfirmed, Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        ids, 
                        client, 
                        success, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        ids = function (_o1) {
                                            _o1.add(entity.Id);
                                            return _o1;
                                        }(new (System.Collections.Generic.List$1(System.Int32)).ctor());
                                        client = new Core.Clients.Client.$ctor1("GridPolicy");
                                        entity.Id = 0;
                                        $task1 = client.CreateAsync(Core.Models.GridPolicy, entity);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        success = $taskResult1;
                                        if (success != null) {
                                            this.Header.add(success);
                                            this.Header = System.Linq.Enumerable.from(this.Header, Core.Models.GridPolicy).orderByDescending(function (x) {
                                                return x.Frozen;
                                            }).thenByDescending(function (header) {
                                                return Bridge.referenceEquals(header.ComponentType, "Button");
                                            }).thenBy(function (x) {
                                                return x.Order;
                                            }).toList(Core.Models.GridPolicy);
                                            this.Rerender();
                                            Core.Extensions.Toast.Success("Clone th\u00e0ng c\u00f4ng");
                                        } else {
                                            Core.Extensions.Toast.Warning("Clone error");
                                        }
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }));
            },
            RemoveHeader: function (arg) {
                var $t;
                var entity = Bridge.as(arg, Core.Models.GridPolicy);
                var confirm = ($t = new Core.Components.Forms.ConfirmDialog(), $t.Content = "B\u1ea1n c\u00f3 ch\u1eafc ch\u1eafn mu\u1ed1n x\u00f3a c\u1ed9t n\u00e0y kh\u00f4ng?", $t);
                confirm.Render();
                confirm.YesConfirmed = Bridge.fn.combine(confirm.YesConfirmed, Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        ids, 
                        client, 
                        success, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        ids = function (_o1) {
                                            _o1.add(entity.Id);
                                            return _o1;
                                        }(new (System.Collections.Generic.List$1(System.Int32)).ctor());
                                        client = new Core.Clients.Client.$ctor1("GridPolicy");
                                        $task1 = client.HardDeleteAsync(ids);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        success = $taskResult1;
                                        if (success) {
                                            this.Header.remove(entity);
                                            this.Rerender();
                                            Core.Extensions.Toast.Success("delete success");
                                        } else {
                                            Core.Extensions.Toast.Warning("delete error");
                                        }
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }));
            },
            GetSelectedRows: function () {
                return System.Linq.Enumerable.from(this.AllListViewItem, Core.Components.ListViewItem).where(function (x) {
                        return x.Selected;
                    }).select(function (x) {
                    return x.Entity;
                }).toList(System.Object);
            },
            AddOrUpdateRows: function (rows) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.ListView.prototype.AddOrUpdateRows.call(this, rows);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            RemoveRowById: function (id) {
                Core.Components.ListView.prototype.RemoveRowById.call(this, id);
                this.RenderIndex();
            },
            RemoveRow: function (row) {
                Core.Components.ListView.prototype.RemoveRow.call(this, row);
                this.RenderIndex();
            },
            HardDeleteConfirmed: function () {
                var res = Core.Components.ListView.prototype.HardDeleteConfirmed.call(this);
                this.RenderIndex();
                return res;
            },
            RenderIndex: function () {
                window.clearTimeout(this._renderIndexAwaiter);
                this._renderIndexAwaiter = window.setTimeout(Bridge.fn.bind(this, function () {
                    Core.Extensions.IEnumerableExtensions.ForEach$1(Core.Components.BaseComponent, this.MainSection.Children, function (row, index) {
                        var toolbar = System.Linq.Enumerable.from(row.Children, Core.Components.BaseComponent).firstOrDefault(null, null);
                        if (toolbar == null || row.EmptyRow) {
                            return;
                        }
                        var previous = Core.Extensions.HtmlElementExtension.Closest(toolbar.Element, "td").previousElementSibling;
                        if (previous == null) {
                            return;
                        } else {
                            previous.innerHTML = Bridge.toString(index);
                        }
                    });
                }));
            }
        }
    });

    Bridge.define("$AnonymousType$6", $asm, {
        $kind: "anonymous",
        ctors: {
            ctor: function (field, desc) {
                this.Field = field;
                this.Desc = desc;
            }
        },
        methods: {
            equals: function (o) {
                if (!Bridge.is(o, $asm.$AnonymousType$6)) {
                    return false;
                }
                return Bridge.equals(this.Field, o.Field) && Bridge.equals(this.Desc, o.Desc);
            },
            getHashCode: function () {
                var h = Bridge.addHash([7550196191, this.Field, this.Desc]);
                return h;
            },
            toJSON: function () {
                return {
                    Field : this.Field,
                    Desc : this.Desc
                };
            }
        },
        statics : {
            methods: {
                $metadata : function () { return {"m":[{"a":2,"n":"Desc","t":16,"rt":System.Boolean,"g":{"a":2,"n":"get_Desc","t":8,"rt":System.Boolean,"fg":"Desc","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"Desc"},{"a":2,"n":"Field","t":16,"rt":System.String,"g":{"a":2,"n":"get_Field","t":8,"rt":System.String,"fg":"Field"},"fn":"Field"}]}; }
            }
        }
    });

    Bridge.define("Core.Components.Forms.ConfirmDialog", {
        inherits: [Core.Components.Forms.EditForm],
        statics: {
            methods: {
                RenderConfirm: function (content, yesConfirm, noConfirm) {
                    var $t;
                    if (noConfirm === void 0) { noConfirm = null; }
                    var confirm = ($t = new Core.Components.Forms.ConfirmDialog(), $t.Content = content, $t);
                    confirm.Render();
                    confirm.YesConfirmed = Bridge.fn.combine(confirm.YesConfirmed, yesConfirm);
                    confirm.NoConfirmed = Bridge.fn.combine(confirm.NoConfirmed, noConfirm);
                    return confirm;
                },
                RenderConfirm$1: function (content, textButton) {
                    var $t;
                    if (textButton === void 0) { textButton = "\u0110\u00f3ng"; }
                    var dialog = ($t = new Core.Components.Forms.ConfirmDialog(), $t.Content = content, $t);
                    dialog.YesText = textButton;
                    dialog.IgnoreNoButton = true;
                    dialog.Render();
                    return dialog;
                }
            }
        },
        fields: {
            _cancel: false,
            _yesBtn: null,
            YesConfirmed: null,
            NoConfirmed: null,
            Canceled: null
        },
        props: {
            Textbox: null,
            IgnoreNoButton: false,
            YesText: null,
            NoText: null,
            CancelText: null,
            Content: null,
            NeedAnswer: false,
            IgnoreCancelButton: false,
            DisposeAfterYes: false
        },
        ctors: {
            init: function () {
                this.YesText = "\u0110\u1ed3ng \u00fd";
                this.NoText = "Kh\u00f4ng";
                this.CancelText = "\u0110\u00f3ng";
                this.Content = "B\u1ea1n c\u00f3 ch\u1eafc ch\u1eafn mu\u1ed1n x\u00f3a d\u1eef li\u1ec7u?";
                this.IgnoreCancelButton = true;
                this.DisposeAfterYes = true;
            },
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.EditForm.ctor.call(this, null);
                this.PopulateDirty = false;
                this.Title = "X\u00e1c nh\u1eadn";
            }
        },
        methods: {
            Render: function () {
                var $t, $t1;
                Core.Components.Renderer.Escape(Core.Components.Renderer.ClassName(Core.MVVM.Html.Take(document.body).Div, "backdrop").Style$1("align-items: center;"), Bridge.fn.bind(this, function (e) {
                    this.Dispose();
                }));
                this.Element = Core.MVVM.Html.Context;
                this.ParentElement = this.Element.parentElement;
                Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.MVVM.Html.Instance.Div, "popup-content confirm-dialog").Style$1("top: auto;").Div, "popup-title").InnerHTML(this.Title).Div, "icon-box").Span, "fa fa-times").Event("click", Bridge.fn.cacheBind(this, this.Dispose)).EndOf$1(".popup-title").Div, "popup-body");

                Core.Components.Renderer.MarginRem(Core.MVVM.Html.Instance.P.InnerHTML(this.Content).End.Div, Core.Components.Direction.top, 1);
                if (this.NeedAnswer) {
                    this.Textbox = ($t = new Core.Components.Textbox(($t1 = new Core.Models.Component(), $t1.PlainText = "Nh\u1eadp c\u00e2u tr\u1ea3 l\u1eddi", $t1.ShowLabel = false, $t1.FieldName = Core.Components.CompareGridView.ReasonOfChange, $t1.Row = 2, $t1)), $t.MultipleLine = true, $t);
                    this.AddChild(this.Textbox);
                    Core.MVVM.Html.Instance.End.Render();
                }
                Core.Components.Renderer.Button(Core.MVVM.Html.Instance, this.YesText, "button info small", "fa fa-check").Trigger("focus").Event("click", Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        isValid, 
                        ex, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.IsFormValid();
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        isValid = $taskResult1;
                                        if (!isValid) {
                                            return;
                                        }

                                        try {
                                            !Bridge.staticEquals(this.YesConfirmed, null) ? this.YesConfirmed() : null;
                                        } catch (ex) {
                                            ex = System.Exception.create(ex);
                                            System.Console.WriteLine(ex.StackTrace);
                                        }
                                        if (this.DisposeAfterYes) {
                                            this.Dispose();
                                        }
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                })).Render();
                this._yesBtn = Core.MVVM.Html.Context;
                Core.MVVM.Html.Instance.End.Render();
                if (!this.IgnoreNoButton) {
                    Core.Components.Renderer.MarginRem(Core.Components.Renderer.Button(Core.MVVM.Html.Instance, this.NoText, "button alert small", "mif-exit"), Core.Components.Direction.left, 1).Event("click", Bridge.fn.bind(this, function () {
                        try {
                            !Bridge.staticEquals(this.NoConfirmed, null) ? this.NoConfirmed() : null;
                        } catch (ex) {
                            ex = System.Exception.create(ex);
                            System.Console.WriteLine(ex.StackTrace);
                        }
                        this.Dispose();
                    })).End.Render();
                }

                if (!this.IgnoreCancelButton) {
                    Core.Components.Renderer.MarginRem(Core.Components.Renderer.Button(Core.MVVM.Html.Instance, this.CancelText, "button info small", "fa fa-times"), Core.Components.Direction.left, 1).Event("click", Bridge.fn.bind(this, function () {
                        this._cancel = true;
                        this.Dispose();
                    }));
                }

                if (this.NeedAnswer) {
                    this.Textbox.Element.focus();
                } else {
                    this._yesBtn.focus();
                }
            },
            Dispose: function () {
                if (this._cancel) {
                    !Bridge.staticEquals(this.Canceled, null) ? this.Canceled() : null;
                }

                Core.Components.Forms.EditForm.prototype.Dispose.call(this);
            }
        }
    });

    Bridge.define("Core.Components.GroupListView", {
        inherits: [Core.Components.ListView],
        statics: {
            fields: {
                _groupKey: null,
                GroupRowClass: null
            },
            ctors: {
                init: function () {
                    this._groupKey = "__groupkey__";
                    this.GroupRowClass = "group-row";
                }
            }
        },
        ctors: {
            ctor: function (ui) {
                this.$initialize();
                Core.Components.ListView.ctor.call(this, ui);
            }
        },
        methods: {
            Render: function () {
                Core.Components.ListView.prototype.Render.call(this);
                Core.Components.Renderer.ClassName(Core.MVVM.Html.Take(this.Element), "group-listview").End.Render();
            },
            RowDataChanged: function (args) {
                if (System.Nullable.eq(args.Action, Core.MVVM.ObservableAction.Remove)) {
                    this.RemoveRowById(Bridge.unbox(args.Item[Core.Components.BaseComponent.IdField]));
                    return;
                }
                window.clearTimeout(this._rowDataChangeAwaiter);
                this._rowDataChangeAwaiter = window.setTimeout(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $task2, 
                        $task3, 
                        $task4, 
                        $jumpFromFinally, 
                        $t, 
                        $t1, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7,8], $step);
                                switch ($step) {
                                    case 0: {
                                        if (Core.Extensions.StringExt.IsNullOrEmpty(this.GuiInfo.GroupBy)) {
                                            return;
                                        }

                                        if (Core.Extensions.IEnumerableExtensions.Nothing(System.Object, args.ListData)) {
                                            this.NoRecordFound();
                                            return;
                                        }
                                        $t = args.Action;
                                        if ($t === Core.MVVM.ObservableAction.Add) {
                                            $step = 1;
                                            continue;
                                        }
                                        else if ($t === Core.MVVM.ObservableAction.AddRange) {
                                            $step = 3;
                                            continue;
                                        }
                                        else if ($t === Core.MVVM.ObservableAction.Update) {
                                            $step = 5;
                                            continue;
                                        }
                                        $step = 7;
                                        continue;
                                    }
                                    case 1: {
                                        $task1 = this.AddRow(args.Item);
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        return;
                                    }
                                    case 3: {
                                        $task2 = this.AddRows(args.ListData);
                                        $step = 4;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $task2.getAwaitedResult();
                                        return;
                                    }
                                    case 5: {
                                        $task3 = this.AddOrUpdateRow(args.Item);
                                        $step = 6;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 6: {
                                        $task3.getAwaitedResult();
                                        return;
                                    }
                                    case 7: {
                                        this.FormattedRowData = ($t1 = System.Object, System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.BuildGroupTree(args.ListData, this.GuiInfo.GroupBy.split(",")), $t1).toList($t1));
                                        $task4 = this.LoadMasterData();
                                        $step = 8;
                                        if ($task4.isCompleted()) {
                                            continue;
                                        }
                                        $task4.continue($asyncBody);
                                        return;
                                    }
                                    case 8: {
                                        $task4.getAwaitedResult();
                                        Core.Components.ListView.prototype.Rerender.call(this);
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }));
            },
            AddRow: function (item, fromIndex, singleAdd) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    keys, 
                    groupKey, 
                    existGroup, 
                    rowSection, 
                    groupData, 
                    $t, 
                    index, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3], $step);
                                switch ($step) {
                                    case 0: {
                                        if (fromIndex === void 0) { fromIndex = 0; }
                                        if (singleAdd === void 0) { singleAdd = true; }
                                        this.DisposeNoRecord();
                                        keys = this.GuiInfo.GroupBy.split(",");
                                        if (singleAdd) {
                                            $step = 1;
                                            continue;
                                        } 
                                        $step = 3;
                                        continue;
                                    }
                                    case 1: {
                                        $task1 = this.LoadMasterData(function (_o1) {
                                            _o1.add(item);
                                            return _o1;
                                        }(new (System.Collections.Generic.List$1(System.Object)).ctor()));
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $task1.getAwaitedResult();
                                        $step = 3;
                                        continue;
                                    }
                                    case 3: {
                                        item[Core.Components.GroupListView._groupKey] = Bridge.toArray(System.Linq.Enumerable.from(keys, System.String).select(function (key) {
                                            var $t;
                                            return ($t = Core.Extensions.Utils.GetComplexPropValue(item, key)) != null ? Bridge.toString($t) : null;
                                        })).join(" ");
                                        groupKey = item[Core.Components.GroupListView._groupKey];
                                        existGroup = System.Linq.Enumerable.from(this.AllListViewItem, Core.Components.ListViewItem).firstOrDefault(function (group) {
                                            return group.GroupRow && Bridge.referenceEquals(Bridge.unbox(group.Entity).Key, groupKey);
                                        }, null);
                                        if (existGroup == null) {
                                            groupData = ($t = new Core.Components.GroupRowData(), $t.Key = groupKey, $t.Children = function (_o2) {
                                                _o2.add(item);
                                                return _o2;
                                            }(new (System.Collections.Generic.List$1(System.Object)).ctor()), $t);
                                            this.FormattedRowData.add(groupData);
                                            rowSection = this.RenderRowData(this.Header, groupData, this.MainSection, this.MainSection.Children.Count);
                                        } else {
                                            Bridge.unbox(existGroup.Entity).Children.add(item);
                                            index = this.MainSection.Children.indexOf(existGroup);
                                            rowSection = this.RenderRowData(this.Header, item, this.MainSection, Bridge.Int.clip32(index + existGroup.Children.Count));
                                        }
                                        if (singleAdd) {
                                            this.FinalAddOrUpdate();
                                        }
                                        this.Dirty = true;
                                        $tcs.setResult(rowSection);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            AddRows: function (rowsData, index) {
                var $step = 0,
                    $task1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2], $step);
                                switch ($step) {
                                    case 0: {
                                        if (index === void 0) { index = 0; }
                                        $task1 = this.LoadMasterData(rowsData);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $task2 = Core.Extensions.IEnumerableExtensions.ForEachAsync(System.Object, rowsData, Bridge.fn.bind(this, function (x) {
                                            var $step = 0,
                                                $task1, 
                                                $taskResult1, 
                                                $jumpFromFinally, 
                                                $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                                                $returnValue, 
                                                $async_e, 
                                                $asyncBody = Bridge.fn.bind(this, function () {
                                                    try {
                                                        for (;;) {
                                                            $step = System.Array.min([0,1], $step);
                                                            switch ($step) {
                                                                case 0: {
                                                                    $task1 = this.AddRow(x, 0, false);
                                                                    $step = 1;
                                                                    if ($task1.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task1.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 1: {
                                                                    $taskResult1 = $task1.getAwaitedResult();
                                                                    $tcs.setResult(null);
                                                                    return;
                                                                }
                                                                default: {
                                                                    $tcs.setResult(null);
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    } catch($async_e1) {
                                                        $async_e = System.Exception.create($async_e1);
                                                        $tcs.setException($async_e);
                                                    }
                                                }, arguments);

                                            $asyncBody();
                                            return $tcs.task;
                                        }));
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            RenderRowData: function (headers, row, listViewSection, index, emptyRow) {
                var $t;
                if (emptyRow === void 0) { emptyRow = false; }
                var groupRow;
                if (!(((groupRow = Bridge.as(row, Core.Components.GroupRowData))) != null)) {
                    return Core.Components.ListView.prototype.RenderRowData.call(this, headers, row, listViewSection, index, emptyRow);
                }
                var wrapper = listViewSection.Element;
                if (groupRow.Key == null || Core.Extensions.StringExt.IsNullOrWhiteSpace(Bridge.toString(groupRow.Key))) {
                    var rowResult = null;
                    groupRow.Children.ForEach(Bridge.fn.bind(this, function (child) {
                        Core.MVVM.Html.Take(wrapper);
                        rowResult = this.RenderRowData(headers, child, listViewSection, null);
                    }));
                    return rowResult;
                }
                var groupSection = ($t = new Core.Components.GroupViewItem(Core.MVVM.ElementType.div), $t.Entity = row, $t.ParentElement = wrapper, $t.GroupRow = true, $t);
                listViewSection.AddChild(groupSection);
                var first = System.Linq.Enumerable.from(groupRow.Children, System.Object).firstOrDefault(null, null);
                var groupText = Core.Extensions.Utils.FormatEntity(this.GuiInfo.GroupFormat, null, first, function (x) {
                    return "N/A";
                }, function (x) {
                    return "N/A";
                });
                Core.Components.Renderer.Icon(Core.MVVM.Html.Take(groupSection.Element).AsyncEvent$2(System.Object, "click", Bridge.fn.cacheBind(this, this.DispatchClick), first).AsyncEvent$2(System.Object, "dblclick", Bridge.fn.cacheBind(this, this.DispatchDblClick), first), "fa fa-chevron-right").Event$3(Core.Components.GroupViewItem, "click", Bridge.fn.cacheBind(this, this.ToggleGroupRow), groupSection).End.Span.InnerHTML(groupText);
                groupSection.GroupText = Core.MVVM.Html.Context;
                groupRow.Children.ForEach(Bridge.fn.bind(this, function (child) {
                    Core.MVVM.Html.Take(groupSection.Element);
                    var childRow = this.RenderRowData(headers, child, groupSection, null);
                    childRow.GroupSection = groupSection;
                    Core.Components.Renderer.SmallCheckbox(Core.MVVM.Html.Take(childRow.Element)).Render();
                    var chk = Bridge.as(Core.MVVM.Html.Context.previousElementSibling, HTMLInputElement);
                    Core.MVVM.Html.Instance.End.End.Event$1("click", function (e) {
                        e.preventDefault();
                        childRow.Selected = !childRow.Selected;
                        chk.checked = childRow.Selected;
                    });
                }));
                return groupSection;
            },
            DispatchClick: function (row) {
                return Core.Components.Extensions.ComponentExt.DispatchEventToHandlerAsync(this, this.GuiInfo.GroupEvent, "click", [row]);
            },
            DispatchDblClick: function (row) {
                return Core.Components.Extensions.ComponentExt.DispatchEventToHandlerAsync(this, this.GuiInfo.GroupEvent, "dblclick", [row]);
            },
            ToggleGroupRow: function (groupSection, e) {
                var target;
                if (!(((target = Bridge.as(e.target, HTMLElement))) != null)) {
                    return;
                }

                if (Core.Extensions.HtmlElementExtension.HasClass(target, "fa-chevron-right")) {
                    Core.Extensions.HtmlElementExtension.ReplaceClass(target, "fa-chevron-right", "fa-chevron-down");
                    groupSection.Children.ForEach(function (x) {
                        x.Show = false;
                    });
                } else {
                    Core.Extensions.HtmlElementExtension.ReplaceClass(target, "fa-chevron-down", "fa-chevron-right");
                    groupSection.Children.ForEach(function (x) {
                        x.Show = true;
                    });
                }
            },
            RemoveRowById: function (id) {
                var index = Core.Extensions.IEnumerableExtensions.IndexOf(System.Object, this.RowData.Data, function (x) {
                    return Bridge.unbox(x[Core.Components.BaseComponent.IdField]) === id;
                });
                if (index < 0) {
                    return;
                }

                this.RowData.Data.removeAt(index);
                System.Linq.Enumerable.from(this.FilterChildren$1(function (x) {
                    return Bridge.is(x, Core.Components.ListViewItem) && Bridge.unbox(x.Entity[Core.Components.BaseComponent.IdField]) === id;
                })).select(function (x) { return Bridge.cast(x, Core.Components.ListViewItem); }).toList(Core.Components.ListViewItem).ForEach(Bridge.fn.bind(this, function (x) {
                    if (x.GroupSection != null && Bridge.is(x.GroupSection.Entity, Core.Components.GroupRowData)) {
                        var groupChildren = Bridge.unbox(x.GroupSection.Entity).Children;
                        groupChildren.remove(x.Entity);
                        if (Core.Extensions.IEnumerableExtensions.Nothing(System.Object, groupChildren)) {
                            this.RowData.Data.remove(x.GroupSection.Entity);
                            x.GroupSection.Dispose();
                        }
                    }
                    x.Dispose();
                }));
                if (Core.Extensions.IEnumerableExtensions.Nothing(System.Object, this.RowData.Data)) {
                    this.NoRecordFound();
                }
            },
            RemoveRange: function (data) {
                Core.Extensions.IEnumerableExtensions.ForEach(System.Object, data, Bridge.fn.bind(this, function (x) {
                    this.RemoveRowById(Bridge.unbox(x[Core.Components.BaseComponent.IdField]));
                }));
            },
            AddOrUpdateRow: function (rowData, singleAdd, force, fields) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $task3, 
                    $taskResult3, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    existRowData, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,10], $step);
                                switch ($step) {
                                    case 0: {
                                        if (singleAdd === void 0) { singleAdd = true; }
                                        if (force === void 0) { force = false; }
                                        if (fields === void 0) { fields = []; }
                                        existRowData = System.Linq.Enumerable.from(this.FilterChildren$1(function (x) {
                                            return Bridge.is(x, Core.Components.ListViewItem) && Bridge.referenceEquals(x.Entity, rowData);
                                        })).select(function (x) { return Bridge.cast(x, Core.Components.ListViewItem); }).firstOrDefault(null, null);
                                        if (existRowData == null) {
                                            $step = 1;
                                            continue;
                                        } 
                                        $step = 3;
                                        continue;
                                    }
                                    case 1: {
                                        $task1 = this.AddRow(rowData, 0, singleAdd);
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    case 3: {
                                        if (singleAdd) {
                                            $step = 4;
                                            continue;
                                        } 
                                        $step = 6;
                                        continue;
                                    }
                                    case 4: {
                                        $task2 = this.LoadMasterData(function (_o1) {
                                            _o1.add(rowData);
                                            return _o1;
                                        }(new (System.Collections.Generic.List$1(System.Object)).ctor()), false);
                                        $step = 5;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 5: {
                                        $task2.getAwaitedResult();
                                        $step = 6;
                                        continue;
                                    }
                                    case 6: {
                                        if (existRowData.EmptyRow) {
                                            $step = 7;
                                            continue;
                                        } else  {
                                            $step = 9;
                                            continue;
                                        }
                                    }
                                    case 7: {
                                        existRowData.Entity = null;
                                        $task3 = this.AddRow(rowData, 0, singleAdd);
                                        $step = 8;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 8: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        $step = 10;
                                        continue;
                                    }
                                    case 9: {
                                        Core.Extensions.ReflectionExt.CopyPropFrom$1(existRowData.Entity, rowData);
                                        this.RowAction$1(function (x) {
                                            return Bridge.referenceEquals(x.Entity, existRowData.Entity);
                                        }, function (x) {
                                            x.EmptyRow = false;
                                            x.UpdateView$1(force, fields);
                                            x.Dirty = true;
                                        });
                                        $step = 10;
                                        continue;
                                    }
                                    case 10: {
                                        if (singleAdd) {
                                            this.FinalAddOrUpdate();
                                        }
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            AddOrUpdateRows: function (rows) {
                var $step = 0,
                    $task1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.LoadMasterData(rows);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $task2 = Core.Extensions.IEnumerableExtensions.ForEachAsync(System.Object, rows, Bridge.fn.bind(this, function (row) {
                                            var $step = 0,
                                                $task1, 
                                                $jumpFromFinally, 
                                                $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                                                $returnValue, 
                                                $async_e, 
                                                $asyncBody = Bridge.fn.bind(this, function () {
                                                    try {
                                                        for (;;) {
                                                            $step = System.Array.min([0,1], $step);
                                                            switch ($step) {
                                                                case 0: {
                                                                    $task1 = this.AddOrUpdateRow(row, false);
                                                                    $step = 1;
                                                                    if ($task1.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task1.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 1: {
                                                                    $task1.getAwaitedResult();
                                                                    $tcs.setResult(null);
                                                                    return;
                                                                }
                                                                default: {
                                                                    $tcs.setResult(null);
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    } catch($async_e1) {
                                                        $async_e = System.Exception.create($async_e1);
                                                        $tcs.setException($async_e);
                                                    }
                                                }, arguments);

                                            $asyncBody();
                                            return $tcs.task;
                                        }));
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        this.AddNewEmptyRow();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("Core.Components.ListViewItem", {
        inherits: [Core.Components.Section],
        statics: {
            fields: {
                EmptyRowClass: null,
                SelectedClass: null,
                HoveringClass: null
            },
            ctors: {
                init: function () {
                    this.EmptyRowClass = "empty-row";
                    this.SelectedClass = "__selected__";
                    this.HoveringClass = "hovering";
                }
            }
        },
        fields: {
            _selected: false,
            _emptyRow: false
        },
        props: {
            GroupSection: null,
            ListViewSection: null,
            Index: {
                get: function () {
                    return this.ListViewSection.Children.indexOf(this);
                }
            },
            Selected: {
                get: function () {
                    return this._selected;
                },
                set: function (value) {
                    this._selected = value;
                    this.SetSelected(value);
                }
            },
            EmptyRow: {
                get: function () {
                    return this._emptyRow;
                },
                set: function (value) {
                    this._emptyRow = value;
                    if (value) {
                        Core.Extensions.HtmlElementExtension.AddClass(this.Element, Core.Components.ListViewItem.EmptyRowClass);
                    } else {
                        Core.Extensions.HtmlElementExtension.RemoveClass(this.Element, Core.Components.ListViewItem.EmptyRowClass);
                    }

                    this.AlwaysValid = value;
                }
            },
            GroupRow: false,
            Show: {
                get: function () {
                    return Bridge.ensureBaseProperty(this, "Show").$Core$Components$BaseComponent$Show;
                },
                set: function (value) {
                    this.Toggle(value);
                }
            }
        },
        ctors: {
            ctor: function (elementType) {
                if (elementType === void 0) { elementType = 96; }

                this.$initialize();
                Core.Components.Section.$ctor1.call(this, elementType);
                this.StopChildrenHistory = true;
                this.DOMContentLoaded = Bridge.fn.combine(this.DOMContentLoaded, Bridge.fn.cacheBind(this, this.RowItemReady));
            }
        },
        methods: {
            SetSelected: function (value) {
                if (value) {
                    Core.Extensions.HtmlElementExtension.AddClass(this.Element, Core.Components.ListViewItem.SelectedClass);
                } else {
                    Core.Extensions.HtmlElementExtension.RemoveClass(this.Element, Core.Components.ListViewItem.SelectedClass);
                }
            },
            RowItemReady: function () {
                var historyBuilder = new System.Text.StringBuilder();
                this.BuildTextHistory(historyBuilder);
                this.OriginalText = historyBuilder.toString();
            },
            Render: function () {
                this.ListViewSection = this.ListViewSection || Bridge.as(this.Parent, Core.Components.ListViewSection);
                this.GuiInfo = this.ListViewSection.ListView.GuiInfo;
                Core.Components.Section.prototype.Render.call(this);
                if (this._selected) {
                    Core.Extensions.HtmlElementExtension.AddClass(this.Element, Core.Components.ListViewItem.SelectedClass);
                }

                Core.MVVM.Html.Take(this.Element).AsyncEvent$1("click", Bridge.fn.cacheBind(this, this.RowItemClick)).AsyncEvent$1("dblclick", Bridge.fn.cacheBind(this, this.RowDblClick)).Event("focusout", Bridge.fn.cacheBind(this, this.RowFocusOut)).Event("mouseenter", Bridge.fn.cacheBind(this, this.MouseEnter)).Event("mouseleave", Bridge.fn.cacheBind(this, this.MouseLeave));
            },
            RowDblClick: function (e) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        e.stopPropagation();
                                        $task1 = Core.Components.Extensions.ComponentExt.DispatchEventToHandlerAsync(this, this.GuiInfo.Events, "dblclick", [this.Entity]);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            RowItemClick: function (e) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    ctrl, 
                    shift, 
                    target, 
                    focusing, 
                    editing, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        ctrl = Core.Extensions.EventExt.CtrlOrMetaKey(e);
                                        shift = Core.Extensions.EventExt.ShiftKey(e);
                                        target = Bridge.as(e.target, Node);
                                        focusing = Bridge.as(Core.Components.Extensions.ComponentExt.FirstOrDefault(this, function (x) {
                                            return Bridge.referenceEquals(x.Element, target) || x.ParentElement.contains(target);
                                        }), Core.Components.EditableComponent);
                                        editing = focusing != null;
                                        this.HotKeySelectRow(ctrl, shift, editing);
                                        !Bridge.staticEquals(($t = this.ListViewSection.ListView.RowClick), null) ? $t(this.Entity) : null;
                                        $task1 = Core.Components.Extensions.ComponentExt.DispatchEventToHandlerAsync(this, this.GuiInfo.Events, "click", [this.Entity]);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            HotKeySelectRow: function (ctrl, shift, editing) {
                // Process selected
                if (editing && !ctrl || !shift && !ctrl) {
                    this.ListViewSection.ListView.ClearSelected();
                }
                this.Selected = editing || !this._selected;

                // process hot key
                if (!shift && !ctrl && this._selected) {
                    this.ListViewSection.ListView.SelectedIndex = this.ListViewSection.Children.indexOf(this);
                }
                if (shift) {
                    this.ListViewSection.ListView.ClearSelected();
                    var _lastIndex = { v : this.ListViewSection.ListView.SelectedIndex };
                    var currentIndex = { v : this.ListViewSection.Children.indexOf(this) };
                    if (_lastIndex.v > currentIndex.v) {
                        Bridge.Deconstruct(new (System.ValueTuple$2(System.Int32,System.Int32)).$ctor1(currentIndex.v, _lastIndex.v).$clone(), _lastIndex, currentIndex);
                    }
                    for (var i = _lastIndex.v; i <= currentIndex.v; i = (i + 1) | 0) {
                        var row;
                        if (((row = Bridge.as(this.ListViewSection.Children.getItem(i), Core.Components.ListViewItem))) != null) {
                            row.Selected = true;
                        }
                    }
                }
            },
            RowFocusOut: function () {
                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = Core.Components.Extensions.ComponentExt.DispatchCustomEventAsync(this, this.GuiInfo.Events, Core.Enums.CustomEventType.RowFocusOut, [this.Entity]);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            MouseEnter: function () {
                Core.Extensions.HtmlElementExtension.AddClass(this.Element, Core.Components.ListViewItem.HoveringClass);
                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = Core.Components.Extensions.ComponentExt.DispatchCustomEventAsync(this, this.ListViewSection.ListView.GuiInfo.Events, Core.Enums.CustomEventType.RowMouseEnter, [this.Entity]);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            MouseLeave: function () {
                Core.Extensions.HtmlElementExtension.RemoveClass(this.Element, Core.Components.ListViewItem.HoveringClass);
                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = Core.Components.Extensions.ComponentExt.DispatchCustomEventAsync(this, this.ListViewSection.ListView.GuiInfo.Events, Core.Enums.CustomEventType.RowMouseLeave, [this.Entity]);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            BuildTextHistory: function (builder, visited) {
                if (builder === void 0) { builder = null; }
                if (visited === void 0) { visited = null; }
                var buildFromRow = builder == null;
                if (buildFromRow) {
                    builder = new System.Text.StringBuilder();
                }
                if (visited == null) {
                    visited = new (System.Collections.Generic.HashSet$1(System.Object)).ctor();
                }
                if (visited.contains(this)) {
                    return builder;
                }
                if (Core.Extensions.IEnumerableExtensions.Nothing(Core.Components.BaseComponent, this.Children)) {
                    return builder;
                }
                visited.add(this);
                if (!buildFromRow) {
                    builder.append(Core.Extensions.Utils.Indent).append(this.BasicUpdateText).append(" d\u00f2ng ").append(((this.Index + 1) | 0)).append(":").append(Core.Extensions.Utils.NewLine);
                }
                System.Linq.Enumerable.from(this.Children, Core.Components.BaseComponent).where(function (x) {
                        return Bridge.is(x, Core.Components.EditableComponent);
                    }).select(function (x) {{ return Bridge.cast(x, Core.Components.EditableComponent); }}).forEach(function (x) {
                    if (!buildFromRow) {
                        builder.append(Core.Extensions.Utils.Indent);
                    }
                    x.BuildTextHistory(builder);
                });
                return builder;
            }
        }
    });

    Bridge.define("Core.Components.ListViewSection", {
        inherits: [Core.Components.Section],
        props: {
            ListView: null
        },
        ctors: {
            $ctor1: function (elementType) {
                this.$initialize();
                Core.Components.Section.$ctor1.call(this, elementType);
            },
            ctor: function (interactiveEle) {
                this.$initialize();
                Core.Components.Section.ctor.call(this, interactiveEle);
            }
        },
        methods: {
            Render: function () {
                this.ListView = Bridge.as(this.Parent, Core.Components.ListView);
                Core.Components.Section.prototype.Render.call(this);
            }
        }
    });

    Bridge.define("Core.Components.MultipleSearchEntry", {
        inherits: [Core.Components.SearchEntry],
        statics: {
            fields: {
                MultipleClass: null
            },
            ctors: {
                init: function () {
                    this.MultipleClass = "multiple";
                }
            }
        },
        fields: {
            _isToggle: false,
            _isStringSource: false,
            _fieldName: null,
            _listValues: null
        },
        props: {
            ListValues: {
                get: function () {
                    return this._listValues;
                },
                set: function (value) {
                    if (Core.Extensions.IEnumerableExtensions.Nothing(System.Int32, value)) {
                        this._listValues != null ? this._listValues.clear() : null;
                    } else {
                        if (!Bridge.referenceEquals(this._listValues, value)) {
                            this._listValues.clear();
                            System.Linq.Enumerable.from(value, System.Int32).distinct().forEach(Bridge.fn.cacheBind(this._listValues, this._listValues.add));
                        }
                    }

                    this.SetEntityValue(value);
                    this.CascadeField();
                    this.PopulateFields();
                }
            },
            MatchedItems: null
        },
        ctors: {
            init: function () {
                this._listValues = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                this.MatchedItems = new (System.Collections.Generic.List$1(System.Object)).ctor();
            },
            ctor: function (ui) {
                this.$initialize();
                Core.Components.SearchEntry.ctor.call(this, ui);
                this._fieldName = this.GuiInfo.FieldName;
            }
        },
        methods: {
            Render: function () {
                this._isStringSource = this.Entity != null && Bridge.equals(Core.Extensions.BridgeExt.GetComplexPropType(Bridge.getType(this.Entity), this._fieldName, this.Entity), System.String);
                Core.Components.SearchEntry.prototype.Render.call(this);
                Core.Extensions.HtmlElementExtension.AddClass(this.Element.parentElement, Core.Components.MultipleSearchEntry.MultipleClass);
                this.TryParseData();
                this.FindMatchText();
            },
            TryParseData: function () {
                if (this.Entity == null) {
                    return;
                }
                var source = Core.Extensions.Utils.GetComplexPropValue(this.Entity, this._fieldName);
                if (source == null) {
                    return;
                }
                var list = null;
                if (this._isStringSource) {
                    list = System.Linq.Enumerable.from((Bridge.as(source, System.String)).split(","), System.String).select(function (x) {
                            var $t;
                            return ($t = Core.Extensions.Utils.TryParseInt(x), $t != null ? $t : 0);
                        }).where(function (x) {
                        return x !== 0;
                    }).toList(System.Int32);
                } else {
                    list = Bridge.unbox(source);
                }
                System.Linq.Enumerable.from(list, System.Int32).except(this._listValues).ToArray(System.Int32).forEach(Bridge.fn.cacheBind(this._listValues, this._listValues.add));
            },
            SetEntityValue: function (value) {
                if (this._isStringSource) {
                    Core.Extensions.BridgeExt.SetComplexPropValue(this.Entity, this._fieldName, Core.Extensions.IEnumerableExtensions.Combine(System.Int32, value));
                } else {
                    Core.Extensions.BridgeExt.SetComplexPropValue(this.Entity, this._fieldName, value);
                }
            },
            FindMatchText: function (delay) {
                if (delay === void 0) { delay = 250; }
                if (this.EmptyRow || this.ProcessLocalMatch()) {
                    return;
                }
                var values = this.ListValues;
                this.ClearTagIfNotExists();
                if (Core.Extensions.IEnumerableExtensions.HasElement(System.Object, this.MatchedItems) && Core.Extensions.IEnumerableExtensions.Nothing(System.Int32, System.Linq.Enumerable.from(values, System.Int32).except(System.Linq.Enumerable.from(this.MatchedItems, System.Object).select(function (x) {
                            return Bridge.unbox(x[Core.Components.BaseComponent.IdField]);
                        })))) {
                    this.SetMatchedValue();
                    return;
                }
                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $task2, 
                        $taskResult2, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        source, 
                        formatted, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1,2,3,4,5], $step);
                                    switch ($step) {
                                        case 0: {
                                            formatted = this.FormattedDataSource;
                                            if (System.String.startsWith(formatted, "/")) {
                                                $step = 1;
                                                continue;
                                            } else  {
                                                $step = 3;
                                                continue;
                                            }
                                        }
                                        case 1: {
                                            formatted = Core.Extensions.OdataExt.ApplyClause(formatted, System.String.format("Id in ({0})", [Core.Extensions.IEnumerableExtensions.Combine(System.Int32, values)]));
                                            $task1 = new Core.Clients.Client.$ctor1(this.GuiInfo.RefName).GetList(System.Object, formatted);
                                            $step = 2;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 2: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            source = $taskResult1;
                                            $step = 5;
                                            continue;
                                        }
                                        case 3: {
                                            $task2 = new Core.Clients.Client.$ctor1(this.GuiInfo.RefName).LoadById(Core.Extensions.IEnumerableExtensions.Combine(System.Int32, values));
                                            $step = 4;
                                            if ($task2.isCompleted()) {
                                                continue;
                                            }
                                            $task2.continue($asyncBody);
                                            return;
                                        }
                                        case 4: {
                                            $taskResult2 = $task2.getAwaitedResult();
                                            source = $taskResult2;
                                            $step = 5;
                                            continue;
                                        }
                                        case 5: {
                                            if (source == null || source.Value == null) {
                                                $tcs.setResult(null);
                                                return;
                                            }

                                            this.MatchedItems = source.Value;
                                            this.SetMatchedValue();
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            ProcessLocalMatch: function () {
                var isLocalMatched = Core.Components.SearchEntry.Table != null && Core.Extensions.IEnumerableExtensions.HasElement(System.Object, this.RowData.Data) || this.GuiInfo.LocalData != null;
                if (isLocalMatched) {
                    var rows = Core.Extensions.IEnumerableExtensions.Nothing(System.Object, this.GuiInfo.LocalData) ? this.RowData.Data : this.GuiInfo.LocalData;
                    this.MatchedItems = System.Linq.Enumerable.from(rows, System.Object).where(Bridge.fn.bind(this, function (x) {
                            return this._listValues.contains(System.Nullable.getValue(Bridge.cast(Bridge.unbox(x[Core.Components.BaseComponent.IdField], System.Int32), System.Int32)));
                        })).toList(System.Object);
                }
                if (Core.Extensions.IEnumerableExtensions.HasElement(System.Object, this.MatchedItems) && this.MatchedItems.Count === this._listValues.Count) {
                    this.SetMatchedValue();
                    return true;
                }
                return false;
            },
            SetMatchedValue: function () {
                this._input.value = "";
                this.ClearTagIfNotExists();
                for (var i = 0; i < this.ListValues.Count; i = (i + 1) | 0) {
                    var item = System.Linq.Enumerable.from(this.MatchedItems, System.Object).firstOrDefault(Bridge.fn.bind(this, function (x) {
                            return Bridge.unbox(x[Core.Components.BaseComponent.IdField]) === this.ListValues.getItem(i);
                        }), null);
                    this.RenderTag(item);
                }
            },
            ClearTagIfNotExists: function () {
                var $t, $t1;
                var tags = this.ParentElement.querySelectorAll("div > span");
                $t = Bridge.getEnumerator(tags, "getEnumerator");
                try {
                    while ($t.moveNext()) {
                        var tag = Bridge.cast($t.Current, HTMLElement);
                        var id = tag.dataset.id;
                        if (id != null && !this.ListValues.contains(($t1 = Core.Extensions.Utils.TryParseInt(id), $t1 != null ? $t1 : 0))) {
                            tag.remove();
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            },
            RenderTag: function (item) {
                var idAttr = Bridge.toString(item[Core.Components.BaseComponent.IdField]);
                var exist = this.Element.parentElement.querySelector(System.String.format("span[data-id='{0}']", [idAttr]));
                if (exist != null) {
                    return;
                }
                Core.MVVM.Html.Take(this.Element.parentElement).Span.Attr$1("data-id", idAttr).InnerHTML(this.GetMatchedText(item));
                var tag = Core.MVVM.Html.Context;
                this.Element.parentElement.insertBefore(Core.MVVM.Html.Context, this._input);
                Core.Components.Renderer.ClassName(Core.MVVM.Html.Instance.Button, "fa fa-times").End.Event("click", Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        oldList, 
                        $t, 
                        id, 
                        $t1, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        oldList = ($t = System.Int32, System.Linq.Enumerable.from(this.ListValues, $t).toList($t));
                                        this.MatchedItems.remove(item);
                                        id = Bridge.unbox(item[Core.Components.BaseComponent.IdField]);
                                        while (this.ListValues.contains(id)) {
                                            this.ListValues.remove(id);
                                        }
                                        this.ListValues = this.ListValues;
                                        this.Dirty = true;
                                        this.FindMatchText();
                                        if (!Bridge.staticEquals(this.UserInput, null)) {
                                            this.UserInput(($t1 = new Core.MVVM.ObservableArgs(), $t1.NewData = this.ListValues, $t1.OldData = oldList, $t1));
                                        }
                                        $task1 = Core.Components.Extensions.ComponentExt.DispatchEventToHandlerAsync(this, this.GuiInfo.Events, "change", [this.Entity, this.ListValues, oldList]);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                })).End.Render();
            },
            EntrySelected: function (rowData) {
                var $t;
                if (rowData == null) {
                    return;
                }

                var id = Bridge.unbox(rowData[Core.Components.BaseComponent.IdField]);
                if (this.ListValues == null) {
                    this.ListValues = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                }
                if (!this.ListValues.contains(id)) {
                    this.ListValues.add(id);
                    this.MatchedItems.add(rowData);
                } else {
                    this.ListValues.remove(id);
                    var exist = System.Linq.Enumerable.from(this.MatchedItems, System.Object).firstOrDefault(function (x) {
                            return Bridge.unbox(x[Core.Components.BaseComponent.IdField]) === id;
                        }, null);
                    this.MatchedItems.remove(exist);
                }
                this.ListValues = this.ListValues;
                this.Dirty = true;
                Core.Components.SearchEntry.Table.RowClicking = true;
                this.FindMatchText();
                this._input.focus();
                if (!Bridge.staticEquals(this.UserInput, null)) {
                    this.UserInput(($t = new Core.MVVM.ObservableArgs(), $t.NewData = this.ListValues, $t.OldData = this.ListValues, $t.NewMatch = rowData, $t));
                }
                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = Core.Components.Extensions.ComponentExt.DispatchEventToHandlerAsync(this, this.GuiInfo.Events, "change", [this.Entity]);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            FocusOut: function () {
                window.setTimeout(Bridge.fn.bind(this, function () {
                    if (this._isToggle) {
                        this._isToggle = false;
                        return;
                    }
                    Core.Components.SearchEntry.prototype.FocusOut.call(this);
                }), 300);
            },
            UpdateView: function (force, dirty, componentNames) {
                if (force === void 0) { force = false; }
                if (dirty === void 0) { dirty = null; }
                if (componentNames === void 0) { componentNames = []; }
                this.TryParseData();
                this.FindMatchText();
            }
        }
    });

    Bridge.define("Core.Components.Timepicker", {
        inherits: [Core.Components.Textbox],
        statics: {
            fields: {
                _waiter: 0,
                _hour: null,
                _minute: null
            },
            methods: {
                ClearClosingWaiter: function () {
                    window.clearTimeout(Core.Components.Timepicker._waiter);
                }
            }
        },
        props: {
            HHmmFormat: {
                get: function () {
                    return Core.Components.Datepicker.HHmmFormat;
                }
            },
            Hour: {
                get: function () {
                    var $t;
                    if (Core.Extensions.StringExt.IsNullOrWhiteSpace(this.Text) || !Core.Extensions.StringExt.IsMatch(this.Text, "\\d{2}h\\d{2}")) {
                        this.Value = "00h00";
                    }

                    return System.Int64(($t = Core.Extensions.Utils.TryParseInt(System.Linq.Enumerable.from(this.Text.split("h"), System.String).firstOrDefault(null, null)), $t != null ? $t : 0));
                }
            },
            Minute: {
                get: function () {
                    var $t;
                    if (Core.Extensions.StringExt.IsNullOrWhiteSpace(this.Text) || !Core.Extensions.StringExt.IsMatch(this.Text, "\\d{2}h\\d{2}")) {
                        this.Value = "00h00";
                    }

                    return System.Int64(($t = Core.Extensions.Utils.TryParseInt(System.Linq.Enumerable.from(this.Text.split("h"), System.String).lastOrDefault(null, null)), $t != null ? $t : 0));
                }
            }
        },
        ctors: {
            ctor: function (ui) {
                this.$initialize();
                Core.Components.Textbox.ctor.call(this, ui);
            }
        },
        methods: {
            Render: function () {
                Core.Components.Textbox.prototype.Render.call(this);
                this.Disabled = true;
                this.Input.style.backgroundColor = "transparent";
                this.Input.addEventListener("focusin", Bridge.fn.cacheBind(this, this.RenderTimepicker));
                this.Input.addEventListener("focusout", Bridge.fn.cacheBind(this, this.WaitToClose));
            },
            WaitToClose: function () {
                window.clearTimeout(Core.Components.Timepicker._waiter);
                Core.Components.Timepicker._waiter = window.setTimeout(function () {
                    Core.Components.Timepicker._hour.parentElement.parentElement.remove();
                }, 250);
            },
            RenderTimepicker: function () {
                Core.Components.Renderer.Icon(Core.Components.Renderer.ClassName(Core.Components.Renderer.TabIndex(Core.Components.Renderer.ClassName(Core.MVVM.Html.Take(this.Element.parentElement).Div, "time-picker"), -1).Event("focusin", Core.Components.Timepicker.ClearClosingWaiter).Event("focusout", Bridge.fn.cacheBind(this, this.WaitToClose)).Div, "hour"), "fa fa-chevron-up").Event("click", Bridge.fn.bind(this, function () {
                    this.IncreaseTime(System.Int64(1));
                })).End.Input.Value(this.Hour.toString(this.HHmmFormat));
                Core.Components.Timepicker._hour = Bridge.as(Core.MVVM.Html.Context, HTMLInputElement);
                Core.Components.Timepicker._hour.addEventListener("change", Bridge.fn.cacheBind(this, this.ChangeHour));
                Core.Components.Renderer.Icon(Core.Components.Renderer.ClassName(Core.Components.Renderer.Icon(Core.MVVM.Html.Instance.End, "fa fa-chevron-down").Event("click", Bridge.fn.bind(this, function () {
                    this.IncreaseTime(System.Int64(-1));
                })).EndOf$1(".hour").Div, "minute"), "fa fa-chevron-up").Event("click", Bridge.fn.bind(this, function () {
                    this.IncreaseTime(System.Int64(5), true);
                })).End.Input.Value(this.Minute.toString(this.HHmmFormat));
                Core.Components.Timepicker._minute = Bridge.as(Core.MVVM.Html.Context, HTMLInputElement);
                Core.Components.Timepicker._minute.addEventListener("change", Bridge.fn.cacheBind(this, this.ChangeMinute));
                Core.Components.Renderer.Icon(Core.MVVM.Html.Instance.End, "fa fa-chevron-down").Event("click", Bridge.fn.bind(this, function () {
                    this.IncreaseTime(System.Int64(-5), true);
                })).EndOf$1(".minute");
            },
            ChangeMinute: function (e) {
                var newMinute = { };
                var parsed = System.Int64.tryParse(Core.Components.Timepicker._minute.value, newMinute);
                Core.Components.Timepicker._minute.value = parsed ? newMinute.v.toString(this.HHmmFormat) : this.Minute.toString(this.HHmmFormat);
                this.Value = (Core.Components.Timepicker._hour.value || "") + "h" + (Core.Components.Timepicker._minute.value || "");
            },
            ChangeHour: function () {
                var newHour = { };
                var parsed = System.Int64.tryParse(Core.Components.Timepicker._hour.value, newHour);
                Core.Components.Timepicker._hour.value = parsed ? newHour.v.toString(this.HHmmFormat) : this.Hour.toString(this.HHmmFormat);
                this.Value = (Core.Components.Timepicker._hour.value || "") + "h" + (Core.Components.Timepicker._minute.value || "");
            },
            IncreaseTime: function (value, minute) {
                if (minute === void 0) { minute = false; }
                Core.Components.Timepicker.ClearClosingWaiter();
                var afterIncreaseHour = this.Hour.add(value);
                var afterIncreaseMinute = this.Minute.add(value);
                if (!minute && afterIncreaseHour.gte(System.Int64(0)) && afterIncreaseHour.lt(System.Int64(24))) {
                    Core.Components.Timepicker._hour.value = afterIncreaseHour.toString(this.HHmmFormat);
                } else if (afterIncreaseMinute.gte(System.Int64(0)) && afterIncreaseMinute.lt(System.Int64(60))) {
                    Core.Components.Timepicker._minute.value = afterIncreaseMinute.toString(this.HHmmFormat);
                }
                this.Value = (Core.Components.Timepicker._hour.value || "") + "h" + (Core.Components.Timepicker._minute.value || "");
                this.Dirty = true;
            }
        }
    });

    Bridge.define("Core.Components.TreeView", {
        inherits: [Core.Components.ListView],
        ctors: {
            ctor: function (ui) {
                this.$initialize();
                Core.Components.ListView.ctor.call(this, ui);

            }
        },
        methods: {
            Rerender: function () {
                var $t;
                this.DisposeNoRecord();
                this.Editable = this.GuiInfo.CanAdd && System.Linq.Enumerable.from(this.Header, Core.Models.GridPolicy).any(function (x) {
                        return !x.Hidden && x.Editable;
                    });
                this.Header = System.Linq.Enumerable.from(this.Header, Core.Models.GridPolicy).where(function (x) {
                        return !x.Hidden;
                    }).toList(Core.Models.GridPolicy);
                Core.Extensions.HtmlElementExtension.AddClass(this.MainSection.Element, "overflow");
                var firstData = ($t = Core.Extensions.IEnumerableExtensions.Nothing(System.Object, this.FormattedRowData) ? this.RowData.Data : this.FormattedRowData, this.FormattedRowData = $t, $t);
                this.RenderContent$1(this.Header, this.MainSection, true, firstData);
                this.MainSection.DisposeChildren();
                if (this.Editable) {
                    this.AddNewEmptyRow();
                } else if (Core.Extensions.IEnumerableExtensions.Nothing(System.Object, this.RowData.Data)) {
                    this.NoRecordFound();
                    this.DomLoaded();
                    return;
                }
                var tableElement;
                if (((tableElement = Bridge.as(this.MainSection.Element, HTMLTableSectionElement))) != null) {
                    tableElement.addEventListener("contextmenu", Bridge.fn.cacheBind(this, this.BodyContextMenuHandler));
                }
                this.DomLoaded();
                Core.Components.Spinner.Hide();
            },
            RenderContent$1: function (headers, node, first, rowDatas) {
                if (Core.Extensions.IEnumerableExtensions.Nothing(System.Object, rowDatas)) {
                    return;
                }
                Core.Components.Renderer.ClassName(Core.MVVM.Html.Take(node.Element).Ul, ((!first ? "d-block " : " ") || "") + ((first ? " treeview" : " ") || ""));
                var ul = Core.MVVM.Html.Context;
                rowDatas.ForEach(Bridge.fn.bind(this, function (row) {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.RenderRow(headers, node, row, ul);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }));
            },
            RenderRow: function (headers, node, row, ul) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    data, 
                    datas, 
                    count, 
                    rowSection, 
                    $t, 
                    tr, 
                    width, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = new Core.Clients.Client.$ctor1(this.GuiInfo.RefName).GetList(System.Object, System.String.format("?$filter=ParentId eq {0}", [Core.Extensions.BridgeExt.GetPropValue(row, Core.Components.BaseComponent.IdField)]));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        data = $taskResult1;
                                        datas = data.Value;
                                        count = datas.Count;
                                        Core.MVVM.Html.Take(ul);
                                        rowSection = ($t = new Core.Components.ListViewItem(Core.MVVM.ElementType.li), $t.Entity = row, $t.ListViewSection = this.MainSection, $t);
                                        node.AddChild(rowSection);
                                        Core.Extensions.HtmlElementExtension.AddClass(rowSection.Element, "tree-node");
                                        if (count > 0) {
                                            Core.Components.Renderer.ClassName(Core.MVVM.Html.Take(rowSection.Element).I, "fas fa-folder mr-2").End.Render();
                                        } else {
                                            Core.MVVM.Html.Take(rowSection.Element).Span.Text("- ").End.Render();
                                        }

                                        Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.MVVM.Html.Instance.Div, "d-inline-flex-fs").Table, "table").TRow.Render();
                                        tr = Core.MVVM.Html.Context;
                                        width = (Bridge.Int.div(95, System.Linq.Enumerable.from(headers, Core.Models.GridPolicy).count())) | 0;
                                        Core.Extensions.IEnumerableExtensions.ForEach(Core.Models.GridPolicy, headers, Bridge.fn.bind(this, function (header) {
                                            var com = Core.Extensions.Utils.MapToComponent(header);
                                            Core.Components.Renderer.Width(Core.MVVM.Html.Take(tr).TData, System.String.format("{0}%", [Bridge.box(width, System.Int32)])).Render();
                                            Core.Components.ListView.prototype.RenderCellComponent.call(this, row, com, rowSection);
                                            Core.MVVM.Html.Take(tr).EndOf(Core.MVVM.ElementType.td);
                                        }));
                                        if (count > 0) {
                                            Core.Components.Renderer.ClassName(Core.MVVM.Html.Take(rowSection.Element).Span, "node-toggle").Event("click", Bridge.fn.bind(this, function () {
                                                this.FocusIn(rowSection, row, datas);
                                            }));
                                        }
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            FocusIn: function (listViewItem, row, datas) {
                var ul = listViewItem.Element.querySelector("ul");
                if (Core.Extensions.HtmlElementExtension.HasClass(listViewItem.Element, "expanded")) {
                    Core.Extensions.HtmlElementExtension.RemoveClass(ul, "d-block");
                    Core.Extensions.HtmlElementExtension.AddClass(ul, "d-none");
                    Core.Extensions.HtmlElementExtension.RemoveClass(listViewItem.Element, "expanded");
                } else {
                    Core.Extensions.HtmlElementExtension.AddClass(listViewItem.Element, "expanded");
                    if (ul == null) {
                        this.RenderContent$1(this.Header, listViewItem, false, datas);
                    } else {
                        Core.Extensions.HtmlElementExtension.RemoveClass(ul, "d-none");
                        Core.Extensions.HtmlElementExtension.AddClass(ul, "d-block");
                        Core.Extensions.HtmlElementExtension.AddClass(listViewItem.Element, "expanded");
                    }
                }
            },
            CalcFilterQuery: function (searching) {
                var res = Core.Components.ListView.prototype.CalcFilterQuery.call(this, searching);
                var resetSearch = Core.Extensions.StringExt.IsNullOrWhiteSpace(this.ListViewSearch.EntityVM.SearchTerm) && Core.Extensions.IEnumerableExtensions.Nothing(Core.Models.FieldCondition, this.AdvSearchVM.Conditions);
                if (searching && !resetSearch) {
                    var filterPart = Core.Extensions.OdataExt.GetClausePart(res, Core.Extensions.OdataExt.FilterKeyword);
                    filterPart = filterPart.replace(new RegExp("((and|or) )?Parent(\\w|\\W)* eq null( (and|or)$)?"), "");
                    filterPart = filterPart.replace(new RegExp("^Parent(\\w|\\W)* eq null( (and|or))?"), "");
                    return Core.Extensions.OdataExt.ApplyClause(res, filterPart);
                }
                return res;
            }
        }
    });

    Bridge.define("TMS.UI.PortalBL", {
        inherits: [Core.Components.Forms.EditForm],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.EditForm.ctor.call(this, "User");
                this.Name = "Home";
                this.Entity = new Core.Models.User();
            }
        },
        methods: {
            Render: function () {
                System.Threading.Tasks.Task.run(Bridge.fn.cacheBind(this, this.RenderLandingPage));
            },
            RenderLandingPage: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4], $step);
                                switch ($step) {
                                    case 0: {
                                        if (this.Feature == null) {
                                            $step = 1;
                                            continue;
                                        } 
                                        $step = 3;
                                        continue;
                                    }
                                    case 1: {
                                        $task1 = Core.Components.Extensions.ComponentExt.LoadFeatureByName(this.Name, true);
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        this.Feature = $taskResult1;
                                        $step = 3;
                                        continue;
                                    }
                                    case 3: {
                                        $task2 = this.RenderAsync();
                                        $step = 4;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $task2.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("Core.Components.Forms.PopupEditor", {
        inherits: [Core.Components.Forms.TabEditor],
        ctors: {
            ctor: function (entity) {
                var $t;
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, entity);
                this.Popup = true;
                this.ParentElement = ($t = this.TabEditor) != null ? $t.Element : null;
                this.ShouldLoadEntity = false;
            }
        }
    });

    Bridge.define("Core.Components.CompareGridView", {
        inherits: [Core.Components.GridView],
        statics: {
            fields: {
                ContentFieldName: null,
                ReasonOfChange: null,
                Style: null
            },
            ctors: {
                init: function () {
                    this.ContentFieldName = "TextHistory";
                    this.ReasonOfChange = "ReasonOfChange";
                    this.Style = "white-space: pre-wrap;";
                }
            }
        },
        ctors: {
            ctor: function (ui) {
                this.$initialize();
                Core.Components.GridView.ctor.call(this, ui);
                this.GuiInfo.LocalHeader = function (_o1) {
                        var $t, $t1;
                        _o1.add(($t = new Core.Models.GridPolicy(), $t.FieldName = "InsertedBy", $t.ComponentType = "Label", $t.ShortDesc = "Ng\u01b0\u1eddi thao t\u00e1c", $t.Description = "Ng\u01b0\u1eddi thao t\u00e1c", $t.ReferenceId = Core.Enums.EntityEnum.User, $t.Reference = ($t1 = new Core.Models.Entity(), $t1.Name = "User", $t1), $t.RefName = "User", $t.FormatCell = "{FullName}", $t.AdvancedSearch = true, $t.Active = true, $t));
                        _o1.add(($t = new Core.Models.GridPolicy(), $t.FieldName = "InsertedDate", $t.ComponentType = "Label", $t.ShortDesc = "Ng\u00e0y thao t\u00e1c", $t.Description = "Ng\u00e0y thao t\u00e1c", $t.AdvancedSearch = true, $t.Active = true, $t.TextAlign = "left", $t.FormatCell = "{0:dd/MM/yyyy HH:mm zz}", $t));
                        _o1.add(($t = new Core.Models.GridPolicy(), $t.FieldName = "ReasonOfChange", $t.ComponentType = "Label", $t.ShortDesc = "N\u1ed9i dung", $t.Description = "N\u1ed9i dung", $t.HasFilter = true, $t.AdvancedSearch = true, $t.Active = true, $t));
                        _o1.add(($t = new Core.Models.GridPolicy(), $t.FieldName = "TextHistory", $t.ComponentType = "Label", $t.ChildStyle = Core.Components.CompareGridView.Style, $t.ShortDesc = "Chi ti\u1ebft thay \u0111\u1ed5i", $t.Description = "Chi ti\u1ebft thay \u0111\u1ed5i", $t.HasFilter = true, $t.AdvancedSearch = true, $t.Active = true, $t));
                        return _o1;
                    }(new (System.Collections.Generic.List$1(Core.Models.GridPolicy)).ctor());
            }
        },
        methods: {
            FilterColumns: function (gridPolicy) {
                Core.Components.GridView.prototype.FilterColumns.call(this, gridPolicy);
                gridPolicy.ForEach(function (x) {
                    x.Frozen = false;
                });
                this.Header.remove(System.Linq.Enumerable.from(this.Header, Core.Models.GridPolicy).firstOrDefault(function (x) {
                        return Bridge.referenceEquals(x, Core.Components.GridView.ToolbarColumn);
                    }, null));
                return gridPolicy;
            }
        }
    });

    Bridge.define("Core.Components.FloatingGridView", {
        inherits: [Core.Components.GridView],
        statics: {
            fields: {
                MultipleClass: null,
                _instance: null
            },
            props: {
                Instance: {
                    get: function () {
                        if (Core.Components.FloatingGridView._instance == null) {
                            Core.Components.FloatingGridView._instance = new Core.Components.FloatingGridView(new Core.Models.Component());
                            Core.Components.FloatingGridView._instance.DOMContentLoaded = Bridge.fn.combine(Core.Components.FloatingGridView._instance.DOMContentLoaded, function () {
                                var $t, $t1;
                                Core.Components.FloatingGridView._instance.SelectedIndex = 0;
                                Core.Components.FloatingGridView._instance.RowAction(function (x) {
                                    x.Selected = false;
                                });
                                Core.Components.FloatingGridView._instance.RowAction$2(0, function (x) {
                                    x.Selected = true;
                                });
                                Core.Components.Extensions.ComponentExt.AlterPosition(Core.Components.FloatingGridView._instance.Element, ($t = Core.Components.FloatingGridView._instance.Parent) != null ? $t.Element : null);
                                ($t1 = Core.Components.FloatingGridView._instance.Parent.Element) != null ? $t1.focus() : null;
                                Core.Components.FloatingGridView.ToggleMultipleClass();
                            });
                        }
                        return Core.Components.FloatingGridView._instance;
                    }
                }
            },
            ctors: {
                init: function () {
                    this.MultipleClass = "multiple";
                }
            },
            methods: {
                ToggleMultipleClass: function () {
                    if (Core.Extensions.HtmlElementExtension.HasClass(Core.Components.FloatingGridView._instance.Parent.Element.parentElement, Core.Components.FloatingGridView.MultipleClass)) {
                        Core.Extensions.HtmlElementExtension.AddClass(Core.Components.FloatingGridView._instance.Element, Core.Components.FloatingGridView.MultipleClass);
                    } else {
                        Core.Extensions.HtmlElementExtension.RemoveClass(Core.Components.FloatingGridView._instance.Element, Core.Components.FloatingGridView.MultipleClass);
                    }
                }
            }
        },
        fields: {
            _inputBlur: false,
            _disposingWaiter: 0,
            _inputFocus: false,
            _renderWaiter: 0,
            _rowClicking: false,
            _paginationClicking: false,
            _toggleButton: null
        },
        props: {
            ParentSearch: {
                get: function () {
                    return Bridge.as(this.Parent, Core.Components.SearchEntry);
                }
            },
            InputFocus: {
                get: function () {
                    return this._inputFocus;
                },
                set: function (value) {
                    this._inputFocus = value;
                    if (value) {
                        this.WaitToRender();
                    }
                }
            },
            RowClicking: {
                get: function () {
                    return this._rowClicking;
                },
                set: function (value) {
                    this._rowClicking = value;
                    if (value) {
                        Core.Components.Extensions.ComponentExt.AlterPosition(this.Element, this.Parent.Element);
                        this.WaitToDispose();
                    }
                }
            },
            PaginationClicking: {
                get: function () {
                    return this._paginationClicking;
                },
                set: function (value) {
                    this._paginationClicking = value;
                    if (value) {
                        this.WaitToDispose();
                    }
                }
            },
            InputBlur: {
                get: function () {
                    return this._inputBlur;
                },
                set: function (value) {
                    this._inputBlur = value;
                    if (value) {
                        this.WaitToDispose();
                    }
                }
            }
        },
        ctors: {
            ctor: function (ui) {
                this.$initialize();
                Core.Components.GridView.ctor.call(this, ui);
                this.Name = null;
                this.AlwaysValid = true;
                this.PopulateDirty = false;
                this.IsSingleton = true;
            }
        },
        methods: {
            FilterColumns: function (gridPolicy) {
                Core.Components.GridView.prototype.FilterColumns.call(this, gridPolicy);
                this.Header.remove(Core.Components.GridView.ToolbarColumn);
                return this.Header;
            },
            WaitToDispose: function () {
                window.clearTimeout(this._disposingWaiter);
                this._disposingWaiter = window.setTimeout(Bridge.fn.bind(this, function () {
                    if (!this.InputFocus && !this.PaginationClicking && !this.RowClicking) {
                        this.Show = false;
                        this.Dispose();
                    }
                    this._inputFocus = false;
                    this._paginationClicking = false;
                    this._rowClicking = false;
                }), 400);
            },
            WaitToRender: function () {
                window.clearTimeout(this._renderWaiter);
                if (this.PaginationClicking) {
                    this._paginationClicking = false;
                    return;
                }
                if (this.RowClicking) {
                    this._rowClicking = false;
                    return;
                }
                this._renderWaiter = window.setTimeout(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4], $step);
                                switch ($step) {
                                    case 0: {
                                        if (this.Element == null) {
                                            $step = 1;
                                            continue;
                                        } else  {
                                            $step = 2;
                                            continue;
                                        }
                                    }
                                    case 1: {
                                        this.Render();
                                        $step = 4;
                                        continue;
                                    }
                                    case 2: {
                                        if (this.Paginator != null && this.Paginator.Options != null && this.Show === false) {
                                            this.Paginator.Options.PageIndex = 0;
                                        }
                                        this.RenderPaginator();
                                        $task1 = this.LoadAllData();
                                        $step = 3;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $task1.getAwaitedResult();
                                        document.body.appendChild(this.Element);
                                        this.Show = false;
                                        this.RowData.Data = this.RowData.Data;
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        if (this.ParentSearch.GuiInfo.LocalHeader == null) {
                                            this.ParentSearch.GuiInfo.LocalHeader = new (System.Collections.Generic.List$1(Core.Models.GridPolicy)).$ctor1(System.Linq.Enumerable.from(this.Header, Core.Models.GridPolicy).where(function (x) {
                                                return x.Id > 0;
                                            }));
                                        }
                                        this.Show = true;
                                        Core.Components.Extensions.ComponentExt.AlterPosition(this.Element, this.Parent.Element);
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }), 100);
            },
            Render: function () {
                var multiple = Bridge.as(this.Parent, Core.Components.MultipleSearchEntry);
                if (multiple != null) {
                    this.GuiInfo.FieldName = null;
                }

                Core.Components.GridView.prototype.Render.call(this);
                var canSelectAll = (multiple != null ? multiple.ListValues : null) != null;
                Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.MVVM.Html.Take(this.Element), "floating").Div, "dropdown-toolbar").Button.Event("click", Bridge.fn.cacheBind(this, this.ToggleAllRecord)), "fa fa-check").Attr$1("title", canSelectAll ? "Ch\u1ecdn t\u1ea5t c\u1ea3" : "H\u1ee7y ch\u1ecdn").End.Button.Event("click", Bridge.fn.cacheBind(this, this.Dispose)), "fa fa-times").Attr$1("title", "\u0110\u00f3ng g\u1ee3i \u00fd");
                this._toggleButton = Bridge.as(Core.MVVM.Html.Context.previousElementSibling, HTMLButtonElement);
                if (this.Paginator != null) {
                    this.Paginator.Options.ClickHandler = Bridge.fn.combine(this.Paginator.Options.ClickHandler, Bridge.fn.bind(this, function (i, obj) {
                        var $t;
                        this.PaginationClicking = true;
                        window.clearTimeout(this._disposingWaiter);
                        ($t = this.Parent.Element) != null ? $t.focus() : null;
                    }));
                    var elementInput = this.Paginator.Element.querySelector("input");
                    elementInput.addEventListener("focus", Bridge.fn.bind(this, function () {
                        window.clearTimeout(this._disposingWaiter);
                    }));
                    elementInput.addEventListener("blur", Bridge.fn.bind(this, function () {
                        this.WaitToDispose();
                    }));
                }
            },
            ToggleAllRecord: function () {
                var parent = this.Parent;
                if (parent == null) {
                    return;
                }

                var value = parent.ListValues;
                if (value == null) {
                    parent.ListValues = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                    this._toggleButton.setAttribute("title", "Ch\u1ecdn t\u1ea5t c\u1ea3");
                } else {
                    parent.ListValues = null;
                    this._toggleButton.setAttribute("title", "H\u1ee7y ch\u1ecdn");
                }
                (Bridge.as(this.Parent, Core.Components.MultipleSearchEntry)).FindMatchText();
                Core.Components.Extensions.ComponentExt.AlterPosition(this.Element, this.Parent.Element);
            },
            Dispose: function () {
                var $t;
                ($t = this.RowData.Data) != null ? $t.clear() : null;
                this.Show = false;
            },
            SetRowData: function (listData, ignoreRender) {
                var $t;
                this.RowData._data.clear();
                var hasElement = Core.Extensions.IEnumerableExtensions.HasElement(System.Object, listData);
                if (hasElement) {
                    listData.ForEach(Bridge.fn.cacheBind(this.RowData._data, this.RowData._data.add)); // Not to use AddRange because the _data is not always List
                }
                if (!ignoreRender) {
                    this.RowDataChanged(($t = new (Core.MVVM.ObservableListArgs$1(System.Object))(), $t.Action = Core.MVVM.ObservableAction.Render, $t.ListData = this.RowData._data, $t));
                }
            },
            ChangeFieldOrder: function (header, e) {
                // Not to do anything here
            }
        }
    });

    Bridge.define("Core.Components.Framework.FeatureBL", {
        inherits: [Core.Components.Forms.TabEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "Feature");
                this.Name = "Feature management";
                this.Title = "Feature";
                this.Icon = "icons/config.png";
            }
        },
        methods: {
            Save: function (entity) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    grid, 
                    rs, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        grid = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(null, null);
                                        $task1 = grid.BulkUpdate();
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        rs = $taskResult1;
                                        if (!Core.Extensions.IEnumerableExtensions.HasElement(System.Object, rs)) {
                                            Core.Extensions.Toast.Warning("Save feature failed!");
                                            $tcs.setResult(false);
                                            return;
                                        }
                                        Core.Extensions.Toast.Success("Save feature succeeded!");
                                        this.UpdateView();
                                        this.Dirty = false;
                                        $tcs.setResult(true);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            EditFeature: function (feature) {
                var id = "Feature_" + feature.Id;
                Core.Components.Extensions.ComponentExt.OpenTab(this, id, function () {
                    var $t, $t1, $t2;
                    return ($t = new Core.Components.Framework.FeatureDetailBL(), $t.Id = id, $t.Entity = feature, $t.Title = System.String.format("Feature {0}", [($t1 = feature.Name, $t1 != null ? $t1 : ($t2 = feature.Label, $t2 != null ? $t2 : feature.Description))]), $t);
                });
            }
        }
    });

    Bridge.define("Core.Components.GroupGridView", {
        inherits: [Core.Components.GridView],
        statics: {
            fields: {
                _groupKey: null,
                GroupRowClass: null
            },
            ctors: {
                init: function () {
                    this._groupKey = "__groupkey__";
                    this.GroupRowClass = "group-row";
                }
            }
        },
        ctors: {
            ctor: function (ui) {
                this.$initialize();
                Core.Components.GridView.ctor.call(this, ui);
            }
        },
        methods: {
            Render: function () {
                Core.Components.GridView.prototype.Render.call(this);
                Core.Components.Renderer.ClassName(Core.MVVM.Html.Take(this.Element), "group-table").End.Render();
            },
            RowDataChanged: function (args) {
                if (System.Nullable.eq(args.Action, Core.MVVM.ObservableAction.Remove)) {
                    if (args.Item == null && Bridge.unbox(args.Item[Core.Components.BaseComponent.IdField]) != null) {
                        return;
                    }

                    this.RemoveRowById(Bridge.unbox(args.Item[Core.Components.BaseComponent.IdField]));
                    return;
                }
                window.clearTimeout(this._rowDataChangeAwaiter);
                this._rowDataChangeAwaiter = window.setTimeout(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $task2, 
                        $task3, 
                        $task4, 
                        $jumpFromFinally, 
                        $t, 
                        keys, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7,8], $step);
                                switch ($step) {
                                    case 0: {
                                        if (Core.Extensions.StringExt.IsNullOrEmpty(this.GuiInfo.GroupBy)) {
                                            return;
                                        }

                                        if (System.Nullable.eq(args.Action, Core.MVVM.ObservableAction.Render)) {
                                            this.NoRowData(args.ListData);
                                        }
                                        $t = args.Action;
                                        if ($t === Core.MVVM.ObservableAction.Add) {
                                            $step = 1;
                                            continue;
                                        }
                                        else if ($t === Core.MVVM.ObservableAction.AddRange) {
                                            $step = 3;
                                            continue;
                                        }
                                        else if ($t === Core.MVVM.ObservableAction.Update) {
                                            $step = 5;
                                            continue;
                                        }
                                        $step = 7;
                                        continue;
                                    }
                                    case 1: {
                                        $task1 = this.AddRow(args.Item);
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        return;
                                    }
                                    case 3: {
                                        $task2 = this.AddRows(args.ListData, args.Index);
                                        $step = 4;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $task2.getAwaitedResult();
                                        return;
                                    }
                                    case 5: {
                                        $task3 = this.AddOrUpdateRow(args.Item);
                                        $step = 6;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 6: {
                                        $task3.getAwaitedResult();
                                        return;
                                    }
                                    case 7: {
                                        keys = this.GuiInfo.GroupBy.split(",");
                                        this.FormattedRowData = System.Linq.Enumerable.from(args.ListData, System.Object).select(function (x) {
                                            x[Core.Components.GroupGridView._groupKey] = Bridge.toArray(System.Linq.Enumerable.from(keys, System.String).select(function (key) {
                                                var $t1;
                                                return (($t1 = Core.Extensions.Utils.GetComplexPropValue(x, key)) != null ? Bridge.toString($t1) : null);
                                            })).join(" ");
                                            return x;
                                        }).groupBy(function (x) {
                                            return x[Core.Components.GroupGridView._groupKey];
                                        }).select(function (x) {
                                            var $t1;
                                            return ($t1 = new Core.Components.GroupRowData(), $t1.Key = x.key(), $t1.Children = x.toList(System.Object), $t1);
                                        }).select(function (x) {{ return Bridge.cast(x, System.Object); }}).toList(System.Object);
                                        $task4 = this.LoadMasterData();
                                        $step = 8;
                                        if ($task4.isCompleted()) {
                                            continue;
                                        }
                                        $task4.continue($asyncBody);
                                        return;
                                    }
                                    case 8: {
                                        $task4.getAwaitedResult();
                                        Core.Components.GridView.prototype.Rerender.call(this);
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }));
            },
            NoRowData: function (list) {
                this.Editable = this.GuiInfo.CanAdd && System.Linq.Enumerable.from(this.Header, Core.Models.GridPolicy).any(function (x) {
                        return !x.Hidden && x.Editable;
                    });
                if (this.Editable) {
                    this.AddNewEmptyRow();
                } else if (Core.Extensions.IEnumerableExtensions.Nothing(System.Object, list)) {
                    this.NoRecordFound();
                }
            },
            AddRow: function (item, fromIndex, loadMasterData) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    keys, 
                    groupKey, 
                    existGroup, 
                    row, 
                    groupData, 
                    $t, 
                    index, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3], $step);
                                switch ($step) {
                                    case 0: {
                                        if (fromIndex === void 0) { fromIndex = 0; }
                                        if (loadMasterData === void 0) { loadMasterData = true; }
                                        this.DisposeNoRecord();
                                        keys = this.GuiInfo.GroupBy.split(",");
                                        if (loadMasterData) {
                                            $step = 1;
                                            continue;
                                        } 
                                        $step = 3;
                                        continue;
                                    }
                                    case 1: {
                                        $task1 = this.LoadMasterData(function (_o1) {
                                            _o1.add(item);
                                            return _o1;
                                        }(new (System.Collections.Generic.List$1(System.Object)).ctor()));
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $task1.getAwaitedResult();
                                        $step = 3;
                                        continue;
                                    }
                                    case 3: {
                                        item[Core.Components.GroupGridView._groupKey] = Bridge.toArray(System.Linq.Enumerable.from(keys, System.String).select(function (key) {
                                            var $t;
                                            return ($t = Core.Extensions.Utils.GetComplexPropValue(item, key)) != null ? Bridge.toString($t) : null;
                                        })).join(" ");
                                        groupKey = item[Core.Components.GroupGridView._groupKey];
                                        existGroup = System.Linq.Enumerable.from(this.AllListViewItem, Core.Components.ListViewItem).firstOrDefault(function (group) {
                                            return group.GroupRow && Bridge.referenceEquals(Bridge.unbox(group.Entity).Key, groupKey);
                                        }, null);
                                        if (existGroup == null) {
                                            groupData = ($t = new Core.Components.GroupRowData(), $t.Key = groupKey, $t.Children = function (_o2) {
                                                _o2.add(item);
                                                return _o2;
                                            }(new (System.Collections.Generic.List$1(System.Object)).ctor()), $t);
                                            this.FormattedRowData.add(groupData);
                                            row = this.RenderRowData(this.Header, groupData, this.MainSection, 0);
                                        } else {
                                            Bridge.unbox(existGroup.Entity).Children.add(item);
                                            index = this.MainSection.Children.indexOf(existGroup);
                                            row = this.RenderRowData(this.Header, item, this.MainSection, Bridge.Int.clip32(index + existGroup.Children.Count));
                                        }
                                        this.Dirty = true;
                                        $tcs.setResult(row);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            RenderRowData: function (headers, row, section, index, emptyRow) {
                var $t;
                if (emptyRow === void 0) { emptyRow = false; }
                var groupRow;
                if (!(((groupRow = Bridge.as(row, Core.Components.GroupRowData))) != null)) {
                    return Core.Components.GridView.prototype.RenderRowData.call(this, headers, row, section, index, emptyRow);
                }
                var tbody;
                if (!(((tbody = Bridge.as(section.Element, HTMLTableSectionElement))) != null)) {
                    throw new System.InvalidOperationException.$ctor1("The section is not HTML table element");
                }
                Core.MVVM.Html.Take(tbody);
                if (groupRow.Key == null || Core.Extensions.StringExt.IsNullOrWhiteSpace(Bridge.toString(groupRow.Key))) {
                    var rowResult = null;
                    groupRow.Children.ForEach(Bridge.fn.bind(this, function (child) {
                        Core.MVVM.Html.Take(tbody);
                        rowResult = Core.Components.GridView.prototype.RenderRowData.call(this, headers, child, section, null);
                    }));
                    return rowResult;
                }
                var groupSection = ($t = new Core.Components.GroupViewItem(Core.MVVM.ElementType.tr), $t.Entity = row, $t.ParentElement = tbody, $t.GroupRow = true, $t);
                section.AddChild(groupSection);
                groupSection.Element.tabIndex = -1;
                var first = System.Linq.Enumerable.from(groupRow.Children, System.Object).firstOrDefault(null, null);
                var groupText;
                var fn = { };
                if (Core.Extensions.Utils.IsFunction(this.GuiInfo.GroupFormat, fn)) {
                    groupText = Bridge.toString(fn.v.call(this, this, Bridge.unbox(first)));
                } else {
                    groupText = Core.Extensions.Utils.FormatEntity(this.GuiInfo.GroupFormat, null, first, Core.Extensions.Utils.EmptyFormat, Core.Extensions.Utils.EmptyFormat);
                }
                Core.Components.Renderer.Icon(Core.Components.Renderer.Icon(Core.Components.Renderer.ClassName(Core.MVVM.Html.Instance.TData, "status-cell"), "mif-pencil").EndOf(Core.MVVM.ElementType.td).TData.AsyncEvent$2(System.Object, "click", Bridge.fn.cacheBind(this, this.DispatchClick), first).AsyncEvent$2(System.Object, "dblclick", Bridge.fn.cacheBind(this, this.DispatchDblClick), first), "fa fa-chevron-right").Event("click", function () {
                    groupSection.ShowChildren = !groupSection.ShowChildren;
                }).End.Span.InnerHTML(groupText);
                groupSection.GroupText = Core.MVVM.Html.Context;
                groupSection.Chevron = Core.MVVM.Html.Context.previousElementSibling;
                groupSection.Chevron.parentElement.previousElementSibling.appendChild(groupSection.Chevron);
                Core.MVVM.Html.Instance.EndOf(Core.MVVM.ElementType.td);
                for (var i = 1; i < ((headers.Count - 1) | 0); i = (i + 1) | 0) {
                    Core.MVVM.Html.Instance.TData.End.Render();
                }
                Core.MVVM.Html.Instance.EndOf(Core.MVVM.ElementType.tr);
                groupRow.Children.ForEach(Bridge.fn.bind(this, function (child) {
                    Core.MVVM.Html.Take(tbody);
                    var rowSection = Core.Components.GridView.prototype.RenderRowData.call(this, headers, child, section);
                    Core.Extensions.HtmlElementExtension.AddClass(rowSection.Element, "group-detail");
                    groupSection.ChildrenItems.add(rowSection);
                    rowSection.GroupSection = groupSection;
                }));
                return groupSection;
            },
            DispatchClick: function (row) {
                return Core.Components.Extensions.ComponentExt.DispatchEventToHandlerAsync(this, this.GuiInfo.GroupEvent, "click", [row]);
            },
            DispatchDblClick: function (row) {
                return Core.Components.Extensions.ComponentExt.DispatchEventToHandlerAsync(this, this.GuiInfo.GroupEvent, "dblclick", [row]);
            },
            ToggleAll: function () {
                var allSelected = System.Linq.Enumerable.from(this.AllListViewItem, Core.Components.ListViewItem).where(function (x) {
                        return !x.GroupRow && !x.EmptyRow;
                    }).all(function (x) {
                    return x.Selected;
                });
                if (allSelected) {
                    this.ClearSelected();
                } else {
                    this.RowAction(function (x) {
                        x.Selected = !x.GroupRow && !x.EmptyRow;
                    });
                }
            },
            RemoveRowById: function (id) {
                var index = Core.Extensions.IEnumerableExtensions.IndexOf(System.Object, this.RowData.Data, function (x) {
                    return Bridge.unbox(x[Core.Components.BaseComponent.IdField]) === id;
                });
                if (index < 0) {
                    return;
                }

                this.RowData.Data.removeAt(index);
                System.Linq.Enumerable.from(this.FilterChildren$1(function (x) {
                    return Bridge.is(x, Core.Components.ListViewItem) && Bridge.unbox(x.Entity[Core.Components.BaseComponent.IdField]) === id;
                })).select(function (x) { return Bridge.cast(x, Core.Components.ListViewItem); }).toList(Core.Components.ListViewItem).ForEach(Bridge.fn.bind(this, function (x) {
                    if (x.GroupSection != null && Bridge.is(x.GroupSection.Entity, Core.Components.GroupRowData)) {
                        var groupChildren = Bridge.unbox(x.GroupSection.Entity).Children;
                        groupChildren.remove(x.Entity);
                        if (Core.Extensions.IEnumerableExtensions.Nothing(System.Object, groupChildren)) {
                            this.RowData.Data.remove(x.GroupSection.Entity);
                            x.GroupSection.Dispose();
                        }
                    }
                    x.Dispose();
                }));
                this.NoRowData(this.RowData.Data);
            },
            RemoveRange: function (data) {
                Core.Extensions.IEnumerableExtensions.ForEach(System.Object, data, Bridge.fn.bind(this, function (x) {
                    this.RemoveRowById(Bridge.unbox(x[Core.Components.BaseComponent.IdField]));
                }));
            },
            AddRows: function (rowsData, index) {
                var $step = 0,
                    $task1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2], $step);
                                switch ($step) {
                                    case 0: {
                                        if (index === void 0) { index = 0; }
                                        $task1 = this.LoadMasterData(rowsData);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $task2 = Core.Extensions.IEnumerableExtensions.ForEachAsync(System.Object, rowsData, Bridge.fn.bind(this, function (x) {
                                            var $step = 0,
                                                $task1, 
                                                $taskResult1, 
                                                $jumpFromFinally, 
                                                $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                                                $returnValue, 
                                                $async_e, 
                                                $asyncBody = Bridge.fn.bind(this, function () {
                                                    try {
                                                        for (;;) {
                                                            $step = System.Array.min([0,1], $step);
                                                            switch ($step) {
                                                                case 0: {
                                                                    $task1 = this.AddRow(x, index, false);
                                                                    $step = 1;
                                                                    if ($task1.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task1.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 1: {
                                                                    $taskResult1 = $task1.getAwaitedResult();
                                                                    $tcs.setResult(null);
                                                                    return;
                                                                }
                                                                default: {
                                                                    $tcs.setResult(null);
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    } catch($async_e1) {
                                                        $async_e = System.Exception.create($async_e1);
                                                        $tcs.setException($async_e);
                                                    }
                                                }, arguments);

                                            $asyncBody();
                                            return $tcs.task;
                                        }));
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            AddOrUpdateRow: function (rowData, singleAdd, force, fields) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $task3, 
                    $taskResult3, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    existRowData, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,10], $step);
                                switch ($step) {
                                    case 0: {
                                        if (singleAdd === void 0) { singleAdd = true; }
                                        if (force === void 0) { force = false; }
                                        if (fields === void 0) { fields = []; }
                                        existRowData = System.Linq.Enumerable.from(this.FilterChildren$1(function (x) {
                                            return Bridge.is(x, Core.Components.ListViewItem) && Bridge.referenceEquals(x.Entity[Core.Components.BaseComponent.IdField], rowData[Core.Components.BaseComponent.IdField]);
                                        })).select(function (x) { return Bridge.cast(x, Core.Components.ListViewItem); }).firstOrDefault(null, null);
                                        if (existRowData == null) {
                                            $step = 1;
                                            continue;
                                        } 
                                        $step = 3;
                                        continue;
                                    }
                                    case 1: {
                                        $task1 = this.AddRow(rowData, 0, singleAdd);
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    case 3: {
                                        if (singleAdd) {
                                            $step = 4;
                                            continue;
                                        } 
                                        $step = 6;
                                        continue;
                                    }
                                    case 4: {
                                        $task2 = this.LoadMasterData(function (_o1) {
                                            _o1.add(rowData);
                                            return _o1;
                                        }(new (System.Collections.Generic.List$1(System.Object)).ctor()), false);
                                        $step = 5;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 5: {
                                        $task2.getAwaitedResult();
                                        $step = 6;
                                        continue;
                                    }
                                    case 6: {
                                        if (existRowData.EmptyRow) {
                                            $step = 7;
                                            continue;
                                        } else  {
                                            $step = 9;
                                            continue;
                                        }
                                    }
                                    case 7: {
                                        existRowData.Entity = null;
                                        $task3 = this.AddRow(rowData, 0, singleAdd);
                                        $step = 8;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 8: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        $step = 10;
                                        continue;
                                    }
                                    case 9: {
                                        Core.Extensions.ReflectionExt.CopyPropFrom$1(existRowData.Entity, rowData);
                                        this.RowAction$1(function (x) {
                                            return Bridge.referenceEquals(x.Entity, existRowData.Entity);
                                        }, function (x) {
                                            x.UpdateView$1(force, fields);
                                        });
                                        $step = 10;
                                        continue;
                                    }
                                    case 10: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            AddOrUpdateRows: function (rows) {
                var $step = 0,
                    $task1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.LoadMasterData(rows);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $task2 = Core.Extensions.IEnumerableExtensions.ForEachAsync(System.Object, rows, Bridge.fn.bind(this, function (row) {
                                            var $step = 0,
                                                $task1, 
                                                $jumpFromFinally, 
                                                $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                                                $returnValue, 
                                                $async_e, 
                                                $asyncBody = Bridge.fn.bind(this, function () {
                                                    try {
                                                        for (;;) {
                                                            $step = System.Array.min([0,1], $step);
                                                            switch ($step) {
                                                                case 0: {
                                                                    $task1 = this.AddOrUpdateRow(row, false);
                                                                    $step = 1;
                                                                    if ($task1.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task1.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 1: {
                                                                    $task1.getAwaitedResult();
                                                                    $tcs.setResult(null);
                                                                    return;
                                                                }
                                                                default: {
                                                                    $tcs.setResult(null);
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    } catch($async_e1) {
                                                        $async_e = System.Exception.create($async_e1);
                                                        $tcs.setException($async_e);
                                                    }
                                                }, arguments);

                                            $asyncBody();
                                            return $tcs.task;
                                        }));
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            RenderIndex: function () {
                window.clearTimeout(this._renderIndexAwaiter);
                this._renderIndexAwaiter = window.setTimeout(Bridge.fn.bind(this, function () {
                    var index = 0;
                    System.Linq.Enumerable.from(this.MainSection.Children).select(function (x) { return Bridge.cast(x, Core.Components.ListViewItem); }).forEach(function (row) {
                        if (row.GroupRow) {
                            index = 0;
                            return;
                        }
                        var previous = Core.Extensions.HtmlElementExtension.Closest(row.FirstChild.Element, "td").previousElementSibling;
                        if (previous == null) {
                            return;
                        }
                        if (row.EmptyRow) {
                            index = 0;
                            previous.innerHTML = "<i class='fal fa-plus'></i>";
                        } else {
                            previous.innerHTML = Bridge.toString((((index + 1) | 0)));
                            index = (index + 1) | 0;
                        }
                    });
                }));
            }
        }
    });

    Bridge.define("Core.Components.GroupViewItem", {
        inherits: [Core.Components.ListViewItem],
        statics: {
            fields: {
                ChevronDown: null,
                ChevronRight: null
            },
            ctors: {
                init: function () {
                    this.ChevronDown = "fa-chevron-down";
                    this.ChevronRight = "fa-chevron-right";
                }
            }
        },
        fields: {
            _showChildren: false
        },
        props: {
            ParentItem: null,
            ChildrenItems: null,
            GroupText: null,
            Chevron: null,
            Selected: {
                get: function () {
                    return false;
                },
                set: function (value) {
                    this._selected = false;
                }
            },
            ShowChildren: {
                get: function () {
                    return this._showChildren;
                },
                set: function (value) {
                    this._showChildren = value;
                    this.ChildrenItems.ForEach(function (x) {
                        x.Show = value;
                    });
                    if (value) {
                        Core.Extensions.HtmlElementExtension.ReplaceClass(this.Chevron, Core.Components.GroupViewItem.ChevronDown, Core.Components.GroupViewItem.ChevronRight);
                    } else {
                        Core.Extensions.HtmlElementExtension.ReplaceClass(this.Chevron, Core.Components.GroupViewItem.ChevronRight, Core.Components.GroupViewItem.ChevronDown);
                    }
                }
            }
        },
        ctors: {
            ctor: function (elementType) {
                this.$initialize();
                Core.Components.ListViewItem.ctor.call(this, elementType);
                this.GroupRow = true;
                this.ChildrenItems = new (System.Collections.Generic.List$1(Core.Components.ListViewItem)).ctor();
            }
        },
        methods: {
            Render: function () {
                Core.Components.ListViewItem.prototype.Render.call(this);
                Core.Extensions.HtmlElementExtension.AddClass(this.Element, Core.Components.GroupGridView.GroupRowClass);
            },
            AppendGroupText: function (text) {
                if (this.GroupText == null) {
                    return;
                }

                this.GroupText.innerHTML = (this.GroupText.firstElementChild.outerHTML || "") + (text || "");
            },
            SetGroupText: function (text) {
                if (this.GroupText == null) {
                    return;
                }

                this.GroupText.innerHTML = text;
            },
            RowItemClick: function (e) {
                var $step = 0,
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0], $step);
                                switch ($step) {
                                    case 0: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("Core.Components.Table", {
        inherits: [Core.Components.GridView],
        fields: {
            _bodyEle: null,
            _headerEle: null,
            _btnEle: null
        },
        props: {
            Data: null
        },
        ctors: {
            ctor: function (ui) {
                this.$initialize();
                Core.Components.GridView.ctor.call(this, ui);
                this.GuiInfo = ui || (function () {
                    throw new System.ArgumentNullException.$ctor1("ui");
                })();
            }
        },
        methods: {
            Render: function () {
                Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.MVVM.Html.Take(this.ParentElement).Div, "table-report").Style$1("overflow: auto;").Button, "btn-toolbar fas fa-bars box-shadow").Style$1("padding: 8px;").Event$1("click", Bridge.fn.cacheBind(this, this.ShowExportMenu)).End.Table, "table").Thead.End.TBody.Render();
                this._bodyEle = Bridge.as(Core.MVVM.Html.Context, HTMLTableSectionElement);
                this._headerEle = this._bodyEle.previousElementSibling;
                this.Element = this._bodyEle.parentElement.parentElement;
                this._btnEle = this.Element.firstElementChild;
                System.Threading.Tasks.Task.run(Bridge.fn.cacheBind(this, this.RenderAsync));
            },
            ShowExportMenu: function (e) {
                var ctx = Core.Components.Forms.ContextMenu.Instance;
                ctx.Top = Core.Extensions.EventExt.Top(e);
                ctx.Left = Core.Extensions.EventExt.Left(e);
                ctx.MenuItems = Bridge.fn.bind(this, function (_o1) {
                        var $t;
                        _o1.add(($t = new Core.Components.Forms.ContextMenuItem(), $t.Text = "Excel", $t.Icon = "fa fa-file-excel", $t.Click = Bridge.fn.cacheBind(this, this.ExportExcel), $t));
                        return _o1;
                    })(new (System.Collections.Generic.List$1(Core.Components.Forms.ContextMenuItem)).ctor());
                ctx.Render();
                Core.Components.Extensions.ComponentExt.AlterPosition(ctx.Element, this._btnEle);
            },
            ExportExcel: function (arg) {
                throw new System.NotImplementedException.ctor();
            },
            RenderAsync: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $t, 
                    fn, 
                    isFn, 
                    datasource, 
                    firstData, 
                    header, 
                    html, 
                    $t1, 
                    data, 
                    $t2, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4], $step);
                                switch ($step) {
                                    case 0: {
                                        if (Core.Extensions.StringExt.HasAnyChar(this.GuiInfo.FormatData)) {
                                            this.Header = ($t = Core.Models.GridPolicy, System.Linq.Enumerable.from(Newtonsoft.Json.JsonConvert.DeserializeObject(this.GuiInfo.FormatData, System.Array.type(Core.Models.GridPolicy)), $t).toList($t));
                                        }
                                        fn = { };
                                        isFn = Core.Extensions.Utils.IsFunction(this.GuiInfo.Query, fn);
                                        if (!isFn) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        datasource = Bridge.toString(fn.v.call(this, Bridge.unbox(this.Entity)));
                                        if (this.Data == null) {
                                            $step = 1;
                                            continue;
                                        } 
                                        $step = 3;
                                        continue;
                                    }
                                    case 1: {
                                        $task1 = new Core.Clients.Client.$ctor1("User").PostAsync(System.Array.type(System.Object), datasource, "ReportQuery");
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        this.Data = $taskResult1;
                                        $step = 3;
                                        continue;
                                    }
                                    case 3: {
                                        if (Core.Extensions.IEnumerableExtensions.Nothing(System.Object, this.Data)) {
                                            this.NoRecordFound();
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        this.DisposeNoRecord();
                                        firstData = System.Linq.Enumerable.from(this.Data, System.Object).first();
                                        header = this.Header.ToArray();
                                        this.HeaderComponentMap = System.Linq.Enumerable.from(this.Header, Core.Models.GridPolicy).toDictionary(function (x) {
                                            return Bridge.getHashCode(x);
                                        }, function (x) {
                                            return Core.Extensions.Utils.MapToComponent(x);
                                        }, System.Int32, Core.Models.Component);
                                        Core.MVVM.Html.Take(this._headerEle).Render();
                                        html = Core.MVVM.Html.Instance;
                                        for (var key in firstData) {
                                            if (header != null && header.map(x => x.FieldName).indexOf(key) >= 0) {
                                                var matchHeader = header.filter(x => x.FieldName == key)[0];
                                                this.RenderHeader(matchHeader && matchHeader.ShortDesc);
                                            } else {
                                                this.RenderHeader(key);
                                            }
                                        }
                                        $task2 = this.LoadMasterData(this.Data);
                                        $step = 4;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $task2.getAwaitedResult();
                                        $t1 = Bridge.getEnumerator(this.Data);
                                        try {
                                            while ($t1.moveNext()) {
                                                data = $t1.Current;
                                                Core.MVVM.Html.Take(this._bodyEle).TRow.Render();
                                                for (var key in firstData) {
                                                    if (header != null && header.map(x => x.FieldName).indexOf(key) >= 0) {
                                                        var matchHeader = header.filter(x => x.FieldName == key);
                                                        this.RenderCell(data[key], matchHeader[0] && matchHeader[0].FormatCell);
                                                    } else {
                                                        this.RenderCell(data[key]);
                                                    }
                                                }
                                            }
                                        } finally {
                                            if (Bridge.is($t1, System.IDisposable)) {
                                                $t1.System$IDisposable$Dispose();
                                            }
                                        }
                                        !Bridge.staticEquals(($t2 = this.DOMContentLoaded), null) ? $t2() : null;
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            RenderHeader: function (text) {
                var $t;
                this.Header.add(($t = new Core.Models.GridPolicy(), $t.ShortDesc = text, $t));
                Core.Components.Renderer.IText(Core.MVVM.Html.Instance.Th, text).End.Render();
            },
            RenderCell: function (text, formatData) {
                var finalText = Core.Extensions.StringExt.IsNullOrEmpty(formatData) ? text : System.String.format(formatData, [text]);
                Core.Components.Renderer.IText(Core.MVVM.Html.Instance.TData, finalText).End.Render();
            }
        }
    });

    Bridge.define("Core.Fw.Authentication.PolicyManagementBL", {
        inherits: [Core.Components.Forms.TabEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "Role");
                this.Name = "Policy";
                this.Title = this.Name;
            }
        },
        methods: {
            CopyRole: function (originRole, copied) {
                copied.ForEach(function (x) {
                    x.InverseParentRole = null;
                });
            },
            EditRole: function (role) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Role Detail", function () {
                                            var type = Bridge.Reflection.getType("Core.Fw.Setting.RoleDetailBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Entity = role || new Core.Models.Role();
                                            return instance;
                                        }, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("Core.Fw.Setting.MasterDataBL", {
        inherits: [Core.Components.Forms.TabEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "MasterData");
                this.Name = "Master Data";
                this.Title = this.Name;
            }
        },
        methods: {
            EditMasterData: function (masterData) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "MasterData Detail", function () {
                                            var type = Bridge.Reflection.getType("Core.Fw.Setting.MasterDataDetailsBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = masterData == null ? "Th\u00eam tham chi\u1ebfu m\u1edbi" : "C\u1eadp nh\u1eadt tham chi\u1ebfu";
                                            instance.Entity = masterData || new Core.Models.MasterData();
                                            return instance;
                                        }, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("Core.Fw.User.UserBL", {
        inherits: [Core.Components.Forms.TabEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "User");
                this.Name = "User List";
                this.Title = this.Name;
            }
        },
        methods: {
            EditUser: function (user) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.InitUserForm(user);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CreateUser: function () {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.InitUserForm(new Core.Models.User());
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            InitUserForm: function (user) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenTab$1(this, (System.Enum.toString(Core.Enums.EntityEnum, Core.Enums.EntityEnum.User) || "") + user.Id, "User Detail", function () {
                                            var type = Bridge.Reflection.getType("Core.Fw.User.UserDetailBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.TabEditor);
                                            instance.Entity = user;
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("Core.Fw.User.UserDetailBL", {
        inherits: [Core.Components.Forms.TabEditor],
        props: {
            UserEntity: {
                get: function () {
                    return Bridge.as(this.Entity, Core.Models.User);
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "User");
                this.Entity = new Core.Models.User();
                this.Name = "User Detail";
                this.Title = "User Detail";
            }
        },
        methods: {
            ReSend: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    client, 
                    res, 
                    dialog, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        client = new Core.Clients.Client.$ctor1("User");
                                        $task1 = client.GetAsync$1(System.String, System.String.format("/ReSendUser/{0}", [Bridge.box(this.UserEntity.Id, System.Int32)]));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        res = $taskResult1;
                                        dialog = ($t = new Core.Components.Forms.ConfirmDialog(), $t.Title = System.String.format("\u0110\u1ed5i m\u1eadt kh\u1ea9u cho user {0}", [this.UserEntity.UserName]), $t.Content = System.String.format("\u0110\u1ed5i m\u1eadt kh\u1ea9u cho user th\u00e0nh c\u00f4ng.<br />M\u1eadt kh\u1ea9u m\u1edbi l\u00e0 {0}", [res]), $t);
                                        dialog.IgnoreNoButton = true;
                                        dialog.Render();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("Core.Fw.User.UserProfileBL", {
        inherits: [Core.Components.Forms.TabEditor],
        ctors: {
            ctor: function () {
                var $t;
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "User");
                var user = ($t = new Core.ViewModels.UserProfileVM(), $t.Id = Core.Clients.Client.Token.UserId, $t);
                this.ShouldLoadEntity = true;
                this.Entity = user;
                this.Name = "UserProfile";
                this.Title = "User profile";
                this.Icon = "/icons/profile.png";
                this.Client = new Core.Clients.Client.$ctor1("User");
                this.DOMContentLoaded = Bridge.fn.combine(this.DOMContentLoaded, Bridge.fn.bind(this, function () {
                    this.CheckShowNative();
                }));
            }
        },
        methods: {
            OpenChangePassword: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    vm, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        vm = Bridge.as(this.Entity, Core.ViewModels.UserProfileVM);
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "ChangePassword", function () {
                                            var type = Bridge.Reflection.getType("Core.Fw.User.ChangePasswordBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Entity = vm;
                                            return instance;
                                        }, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ShowButtonNative: function () {
                Core.Components.Extensions.ComponentExt.FindComponentByName(Core.Components.Button, this, "btnNative").Show = false;
                Core.Components.Extensions.ComponentExt.FindComponentByName(Core.Components.Section, this, "Image").UpdateView();
            },
            ShowNative: function () {
                Notification.requestPermission()
            },
            Save: function (entity) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $task3, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    isValid, 
                    vm, 
                    saved, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6], $step);
                                switch ($step) {
                                    case 0: {
                                        if (!this.Dirty) {
                                            Core.Extensions.Toast.Warning(Core.Components.Forms.EditForm.NotDirtyMessage);
                                            $tcs.setResult(false);
                                            return;
                                        }
                                        $task1 = this.IsFormValid();
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        isValid = $taskResult1;
                                        if (!isValid) {
                                            $tcs.setResult(false);
                                            return;
                                        }
                                        vm = Bridge.as(this.Entity, Core.ViewModels.UserProfileVM);
                                        Core.Extensions.ReflectionExt.ClearReferences(vm);
                                        vm.OldPassword = null;
                                        vm.NewPassword = null;
                                        vm.ConfirmedPassword = null;
                                        $task2 = this.Client.UpdateAsync(System.Boolean, vm, "UpdateProfile");
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        saved = $taskResult2;
                                        if (saved) {
                                            $step = 3;
                                            continue;
                                        } else  {
                                            $step = 5;
                                            continue;
                                        }
                                    }
                                    case 3: {
                                        Core.Extensions.Toast.Success("Update profile succeeded!");
                                        $task3 = Core.Notifications.NotificationBL.Instance.RenderAsync();
                                        $step = 4;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $task3.getAwaitedResult();
                                        $step = 6;
                                        continue;
                                    }
                                    case 5: {
                                        Core.Extensions.Toast.Warning("Update profile failed!");
                                        $step = 6;
                                        continue;
                                    }
                                    case 6: {
                                        this.Dirty = false;
                                        $tcs.setResult(saved);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CheckShowNative: function () {
                if(Notification.permission === "granted")
                        this.ShowButtonNative()
                else if(Notification.permission === "denied")
                Core.Extensions.Toast.Warning("Vui l\u00f2ng g\u1ee1 block th\u00f4ng b\u00e1o cho trang n\u00e0y!");
            }
        }
    });

    Bridge.define("Core.Fw.User.VendorBL", {
        inherits: [Core.Components.Forms.TabEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "Vendor");
                this.Entity = new Core.Fw.User.VendorListVM();
                this.Name = "Vendor List";
                this.Title = this.Name;
            }
        },
        methods: {
            EditVendor: function (vendor) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.InitVendorForm(vendor);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CreateVendor: function () {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.InitVendorForm(($t = new Core.Models.Vendor(), $t.VendorTypeId = Core.Enums.VendorTypeEnum.Vendor, $t));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            InitVendorForm: function (vendor) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenTab$1(this, (System.Enum.toString(Core.Enums.EntityEnum, Core.Enums.EntityEnum.Vendor) || "") + vendor.Id, "VendorDetail", function () {
                                            var type = Bridge.Reflection.getType("Core.Fw.User.VendorDetailBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.TabEditor);
                                            instance.Entity = vendor;
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("Core.Notifications.TaskNotificationListBL", {
        inherits: [Core.Components.Forms.TabEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "TaskNotification");
                this.Name = "TaskNotification List";
                this.Entity = new Core.Models.TaskNotification();
            }
        },
        methods: {
            EditNotification: function (taskNotification) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Notifications.NotificationBL.Instance.OpenNotification(taskNotification);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("Core.Components.AdvancedSearch", {
        inherits: [Core.Components.Forms.PopupEditor],
        statics: {
            methods: {
                GetLogicOp: function (condition) {
                    if (condition.LogicOperatorId == null) {
                        return null;
                    }

                    return System.Nullable.eq(condition.LogicOperatorId, Core.Enums.LogicOperation.And) ? " and " : " or ";
                },
                SetSearchString: function (compareCell, comInfo) {
                    var component;
                    comInfo.ComponentType = "Textbox";
                    component = new Core.Components.Textbox(comInfo);
                    compareCell.GuiInfo.LocalData = System.Linq.Enumerable.from(Core.Components.AdvancedSearch.OperatorFactory(Core.Enums.ComponentTypeTypeEnum.Textbox)).select(function (x) { return Bridge.cast(x, System.Object); }).toList(System.Object);
                    return component;
                },
                OperatorFactory: function (componentType) {
                    var entities = System.Linq.Enumerable.from(Core.Extensions.IEnumerableExtensions.ToEntity(Core.Enums.AdvSearchOperation)).select(function (x) { return Bridge.cast(x, Core.Models.Entity); });
                    switch (componentType) {
                        case Core.Enums.ComponentTypeTypeEnum.Textbox: 
                            return entities.where(function (x) {
                                return (x.Id >= Core.Enums.AdvSearchOperation.Contains && x.Id < Core.Enums.AdvSearchOperation.In) || x.Id === Core.Enums.AdvSearchOperation.Equal || x.Id === Core.Enums.AdvSearchOperation.NotEqual;
                            }).orderByDescending(function (x) {
                                return x.Id === Core.Enums.AdvSearchOperation.Contains;
                            });
                        case Core.Enums.ComponentTypeTypeEnum.Datepicker: 
                            return entities.where(function (x) {
                                return x.Id < Core.Enums.AdvSearchOperation.Contains;
                            });
                        case Core.Enums.ComponentTypeTypeEnum.Number: 
                            return entities.where(function (x) {
                                return x.Id < Core.Enums.AdvSearchOperation.Contains;
                            });
                        case Core.Enums.ComponentTypeTypeEnum.Checkbox: 
                            return entities.where(function (x) {
                                return x.Id === Core.Enums.AdvSearchOperation.Equal;
                            });
                        case Core.Enums.ComponentTypeTypeEnum.SearchEntry: 
                            return entities.where(function (x) {
                                return x.Id === Core.Enums.AdvSearchOperation.In || x.Id === Core.Enums.AdvSearchOperation.NotIn;
                            });
                    }
                    return null;
                },
                SetSearchDecimal: function (compareCell, comInfo) {
                    var component;
                    comInfo.ComponentType = "Number";
                    component = new Core.Components.Number(comInfo);
                    compareCell.GuiInfo.LocalData = System.Linq.Enumerable.from(Core.Components.AdvancedSearch.OperatorFactory(Core.Enums.ComponentTypeTypeEnum.Number)).select(function (x) { return Bridge.cast(x, System.Object); }).toList(System.Object);
                    return component;
                },
                SetSearchBool: function (compareCell, comInfo) {
                    var component;
                    comInfo.FormatData = "{Description}";
                    comInfo.ComponentType = "SearchEntry";
                    comInfo.LocalData = Core.Extensions.IEnumerableExtensions.ToEntity(Core.Enums.ActiveStateEnum);
                    comInfo.LocalHeader = function (_o1) {
                            var $t;
                            _o1.add(($t = new Core.Models.GridPolicy(), $t.FieldName = "Name", $t.ShortDesc = "Tr\u1ea1ng th\u00e1i", $t.Active = true, $t));
                            _o1.add(($t = new Core.Models.GridPolicy(), $t.FieldName = "Description", $t.ShortDesc = "Mi\u00eau t\u1ea3", $t.Active = true, $t));
                            return _o1;
                        }(new (System.Collections.Generic.List$1(Core.Models.GridPolicy)).ctor());
                    component = new Core.Components.SearchEntry(comInfo);
                    compareCell.GuiInfo.LocalData = System.Linq.Enumerable.from(Core.Components.AdvancedSearch.OperatorFactory(Core.Enums.ComponentTypeTypeEnum.Checkbox)).select(function (x) { return Bridge.cast(x, System.Object); }).toList(System.Object);
                    return component;
                },
                SetSearchDateTime: function (compareCell, comInfo) {
                    var component;
                    comInfo.ComponentType = "Datepicker";
                    comInfo.Precision = 7; // add time picker
                    component = new Core.Components.Datepicker(comInfo);
                    compareCell.GuiInfo.LocalData = System.Linq.Enumerable.from(Core.Extensions.IEnumerableExtensions.ToEntity(Core.Enums.AdvSearchOperation)).select(function (x) { return Bridge.cast(x, Core.Models.Entity); }).where(function (x) {
                        return x.Id < Core.Enums.AdvSearchOperation.Contains;
                    }).select(function (x) {{ return Bridge.cast(x, System.Object); }}).toList(System.Object);
                    return component;
                }
            }
        },
        fields: {
            _filterGrid: null,
            _orderByGrid: null,
            _activeState: null,
            _entityType: null,
            _headers: null,
            ParentListView: null
        },
        props: {
            ModelNameSpace: null,
            AdvSearchEntity: {
                get: function () {
                    return Bridge.as(this.Entity, Core.Models.AdvSearchVM);
                }
            }
        },
        ctors: {
            ctor: function (parent) {
                var $t;
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "GridPolicy");
                this.Name = "AdvancedSearch";
                this.Title = "T\u00ecm ki\u1ebfm n\u00e2ng cao";
                this.Icon = "fa fa-search-plus";
                this.ParentListView = parent;
                this._entityType = Bridge.Reflection.getType(((($t = this.ParentListView.GuiInfo.Reference.Namespace, $t != null ? $t : Core.Clients.Client.ModelNamespace)) || "") + (this.ParentListView.GuiInfo.RefName || ""));
                this.DOMContentLoaded = Bridge.fn.combine(this.DOMContentLoaded, Bridge.fn.cacheBind(this, this.LocalRender));
            }
        },
        methods: {
            LocalRender: function () {
                var $t;
                this._headers = System.Linq.Enumerable.from(this.ParentListView.Header, Core.Models.GridPolicy).where(function (x) {
                        return x.Id > 0 && !Core.Extensions.StringExt.IsNullOrWhiteSpace(x.ShortDesc) && x.AdvancedSearch && x.Active && !x.Hidden;
                    }).toList(Core.Models.GridPolicy);
                System.Array.add(this.Feature.FeaturePolicy, ($t = new Core.Models.FeaturePolicy(), $t.CanRead = true, $t.CanWrite = true, $t.CanDelete = true, $t), Core.Models.FeaturePolicy);
                this.Entity = this.ParentListView.AdvSearchVM;
                var fieldMap = this.HeaderForAdvSearch();
                var orderby = Core.Extensions.OdataExt.GetClausePart(this.ParentListView.FormattedDataSource, Core.Extensions.OdataExt.OrderByKeyword);
                this.ParentListView.AdvSearchVM.OrderBy = System.Linq.Enumerable.from(orderby.split(","), System.String).select(Bridge.fn.bind(this, function (x) {
                        var $t1;
                        var orderField = x.trim().replace(new RegExp("\\s+"), " ").split(" ");
                        if (orderField.length < 1) {
                            return null;
                        }

                        var field = System.Linq.Enumerable.from(this._headers, Core.Models.GridPolicy).firstOrDefault(function (header) {
                                return Bridge.referenceEquals(header.FieldName, orderField[System.Array.index(0, orderField)]);
                            }, null);
                        if (field == null) {
                            return null;
                        }

                        var result = ($t1 = new Core.Models.OrderBy(), $t1.FieldId = field.Id, $t1.Field = field, $t1);
                        if (orderField.length === 1) {
                            result.OrderbyOptionId = Core.Enums.OrderbyOption.ASC;
                        } else {
                            var orderbyOption = { v : new Core.Enums.OrderbyOption() };
                            var parsed = System.Enum.tryParse(Core.Enums.OrderbyOption, Bridge.toString(orderField[System.Array.index(1, orderField)]).toUpperCase(), orderbyOption);
                            result.OrderbyOptionId = parsed ? orderbyOption.v : Core.Enums.OrderbyOption.ASC;
                        }
                        return result;
                    })).where(function (x) {
                    return x != null;
                }).toList(Core.Models.OrderBy);
                var section = this.AddSection();
                this.AddFilters(section);
                this.AddOrderByGrid(section);
            },
            AddSection: function () {
                var $t, $t1;
                var section = ($t = new Core.Components.Section.$ctor1(Core.MVVM.ElementType.div), $t.ComponentGroup = ($t1 = new Core.Models.ComponentGroup(), $t1.Column = 4, $t1.Label = "B\u1ed9 l\u1ecdc", $t1.Active = true, $t1.ClassName = "scroll-content", $t1), $t);
                this.AddChild(section);
                var label = document.createElement("label");
                section.Element.appendChild(label);
                label.textContent = "Tr\u1ea1ng th\u00e1i";
                section.ClassName = "filter-warpper panel group wrapper";
                return section;
            },
            AddFilters: function (section) {
                var $t, $t1;
                this._activeState = new Core.Components.SearchEntry(($t = new Core.Models.Component(), $t.FieldName = "ActiveState", $t.Column = 4, $t.Label = "Tr\u1ea1ng th\u00e1i", $t.FormatData = "{Description}", $t.ShowLabel = true, $t.LocalRender = true, $t.ReferenceId = Core.Enums.EntityEnum.Entity, $t.Reference = ($t1 = new Core.Models.Entity(), $t1.Name = "Entity", $t1), $t.Validation = "[{\"Rule\": \"required\", \"Message\": \"{0} is required\"}]", $t));
                this._activeState.GuiInfo.LocalData = Core.Extensions.IEnumerableExtensions.ToEntity(Core.Enums.ActiveStateEnum);
                this._activeState.GuiInfo.LocalHeader = function (_o1) {
                        var $t2;
                        _o1.add(($t2 = new Core.Models.GridPolicy(), $t2.FieldName = "Name", $t2.ShortDesc = "Tr\u1ea1ng th\u00e1i", $t2.Active = true, $t2));
                        _o1.add(($t2 = new Core.Models.GridPolicy(), $t2.FieldName = "Description", $t2.ShortDesc = "Mi\u00eau t\u1ea3", $t2.Active = true, $t2));
                        return _o1;
                    }(new (System.Collections.Generic.List$1(Core.Models.GridPolicy)).ctor());
                this._activeState.ParentElement = section.Element;
                section.AddChild(this._activeState);

                this._filterGrid = new Core.Components.GridView(($t = new Core.Models.Component(), $t.FieldName = "Conditions", $t.Column = 4, $t.ReferenceId = Core.Enums.EntityEnum.FieldCondition, $t.Reference = ($t1 = new Core.Models.Entity(), $t1.Name = "FieldCondition", $t1.Namespace = (Bridge.Reflection.getTypeNamespace(Core.Models.Component) || "") + ".", $t1), $t.LocalRender = true, $t.IgnoreConfirmHardDelete = true, $t.CanAdd = true, $t.Events = "{'DOMContentLoaded': 'FilterDomLoaded'}", $t));
                this._filterGrid.OnDeleteConfirmed = Bridge.fn.combine(this._filterGrid.OnDeleteConfirmed, Bridge.fn.bind(this, function () {
                    this._filterGrid.GetSelectedRows().ForEach(Bridge.fn.cacheBind(this._filterGrid.RowData, this._filterGrid.RowData.Remove));
                }));
                this._filterGrid.GuiInfo.LocalHeader = Bridge.fn.bind(this, function (_o5) {
                        var $t2;
                        _o5.add(($t2 = new Core.Models.GridPolicy(), $t2.Id = 1, $t2.EntityId = Core.Enums.EntityEnum.FieldCondition, $t2.FieldName = "FieldId", $t2.Events = "{'change': 'FieldId_Changed'}", $t2.ShortDesc = "T\u00ean c\u1ed9t", $t2.ReferenceId = Core.Enums.EntityEnum.GridPolicy, $t2.FormatCell = "{ShortDesc}", $t2.Active = true, $t2.Editable = true, $t2.ComponentType = "Dropdown", $t2.MinWidth = "100px", $t2.MaxWidth = "200px", $t2.LocalRender = true, $t2.LocalData = System.Linq.Enumerable.from(this._headers, Core.Models.GridPolicy).where(function (x) {
                                return !Bridge.referenceEquals(x.FieldName, Core.Components.BaseComponent.IdField);
                            }).select(function (x) {{ return Bridge.cast(x, System.Object); }}).toList(System.Object), $t2.LocalHeader = function (_o2) {
                                var $t3;
                                _o2.add(($t3 = new Core.Models.GridPolicy(), $t3.EntityId = Core.Enums.EntityEnum.GridPolicy, $t3.FieldName = "ShortDesc", $t3.ShortDesc = "T\u00ean c\u1ed9t", $t3.Active = true, $t3));
                                return _o2;
                            }(new (System.Collections.Generic.List$1(Core.Models.GridPolicy)).ctor()), $t2.Validation = "[{\"Rule\": \"required\", \"Message\": \"{0} is required\"}]", $t2));
                        _o5.add(($t2 = new Core.Models.GridPolicy(), $t2.Id = 2, $t2.EntityId = Core.Enums.EntityEnum.FieldCondition, $t2.FieldName = "CompareOperatorId", $t2.ShortDesc = "To\u00e1n t\u1eed", $t2.ReferenceId = Core.Enums.EntityEnum.Entity, $t2.ComponentType = "Dropdown", $t2.FormatCell = "{Description}", $t2.Active = true, $t2.Editable = true, $t2.MinWidth = "150px", $t2.LocalRender = true, $t2.LocalData = Core.Extensions.IEnumerableExtensions.ToEntity(Core.Enums.AdvSearchOperation), $t2.LocalHeader = function (_o3) {
                                var $t3;
                                _o3.add(($t3 = new Core.Models.GridPolicy(), $t3.EntityId = Core.Enums.EntityEnum.Entity, $t3.FieldName = "Name", $t3.ShortDesc = "To\u00e1n t\u1eed", $t3.Active = true, $t3));
                                _o3.add(($t3 = new Core.Models.GridPolicy(), $t3.EntityId = Core.Enums.EntityEnum.Entity, $t3.FieldName = "Description", $t3.ShortDesc = "K\u00fd hi\u1ec7u", $t3.Active = true, $t3));
                                return _o3;
                            }(new (System.Collections.Generic.List$1(Core.Models.GridPolicy)).ctor()), $t2.Validation = "[{\"Rule\": \"required\", \"Message\": \"{0} is required\"}]", $t2));
                        _o5.add(($t2 = new Core.Models.GridPolicy(), $t2.Id = 3, $t2.EntityId = Core.Enums.EntityEnum.FieldCondition, $t2.FieldName = "Value", $t2.ShortDesc = "Gi\u00e1 tr\u1ecb", $t2.ReferenceId = Core.Enums.EntityEnum.Entity, $t2.ComponentType = "Input", $t2.Active = true, $t2.Editable = true, $t2.MinWidth = "450px", $t2.Validation = "[{\"Rule\": \"required\", \"Message\": \"{0} is required\"}]", $t2));
                        _o5.add(($t2 = new Core.Models.GridPolicy(), $t2.Id = 2, $t2.EntityId = Core.Enums.EntityEnum.FieldCondition, $t2.FieldName = "LogicOperatorId", $t2.ShortDesc = "K\u1ebft h\u1ee3p", $t2.ReferenceId = Core.Enums.EntityEnum.Entity, $t2.ComponentType = "Dropdown", $t2.FormatCell = "{Description}", $t2.Active = true, $t2.Editable = true, $t2.DefaultVal = "0", $t2.LocalRender = true, $t2.LocalData = Core.Extensions.IEnumerableExtensions.ToEntity(Core.Enums.LogicOperation), $t2.LocalHeader = function (_o4) {
                                var $t3;
                                _o4.add(($t3 = new Core.Models.GridPolicy(), $t3.EntityId = Core.Enums.EntityEnum.Entity, $t3.FieldName = "Name", $t3.ShortDesc = "K\u1ebft h\u1ee3p", $t3.Active = true, $t3));
                                _o4.add(($t3 = new Core.Models.GridPolicy(), $t3.EntityId = Core.Enums.EntityEnum.Entity, $t3.FieldName = "Description", $t3.ShortDesc = "Mi\u00eau t\u1ea3", $t3.Active = true, $t3));
                                return _o4;
                            }(new (System.Collections.Generic.List$1(Core.Models.GridPolicy)).ctor()), $t2));
                        return _o5;
                    })(new (System.Collections.Generic.List$1(Core.Models.GridPolicy)).ctor());
                this._filterGrid.GuiInfo.LocalData = System.Linq.Enumerable.from(this.AdvSearchEntity.Conditions).select(function (x) { return Bridge.cast(x, System.Object); }).toList(System.Object);
                this._filterGrid.ParentElement = section.Element;
                section.AddChild(this._filterGrid);
                //_grid.Element.AddEventListener(EventType.KeyDown, ToggleIndent);
            },
            FilterDomLoaded: function () {
                this._filterGrid.MainSection.Children.ForEach(Bridge.fn.bind(this, function (x) {
                    var condition = Bridge.unbox(x.Entity);
                    Bridge._ = this.FieldId_Changed(condition, condition.Field);
                }));
            },
            HeaderForAdvSearch: function () {
                return System.Linq.Enumerable.from(this.ParentListView.Header, Core.Models.GridPolicy).where(function (x) {
                        return x.Id > 0 && !Core.Extensions.StringExt.IsNullOrWhiteSpace(x.ShortDesc) && x.AdvancedSearch && x.Active && !x.Hidden;
                    });
            },
            AddOrderByGrid: function (section) {
                var $t, $t1;
                this._orderByGrid = new Core.Components.GridView(($t = new Core.Models.Component(), $t.FieldName = "OrderBy", $t.Column = 4, $t.ReferenceId = Core.Enums.EntityEnum.OrderByCondition, $t.Reference = ($t1 = new Core.Models.Entity(), $t1.Name = "OrderBy", $t1.Namespace = (Bridge.Reflection.getTypeNamespace(Core.Models.OrderBy) || "") + ".", $t1), $t.CanAdd = true, $t.IgnoreConfirmHardDelete = true, $t.LocalRender = true, $t));
                this._orderByGrid.OnDeleteConfirmed = Bridge.fn.combine(this._orderByGrid.OnDeleteConfirmed, Bridge.fn.bind(this, function () {
                    this._orderByGrid.GetSelectedRows().ForEach(Bridge.fn.cacheBind(this._orderByGrid.RowData, this._orderByGrid.RowData.Remove));
                }));
                this._orderByGrid.GuiInfo.LocalHeader = Bridge.fn.bind(this, function (_o3) {
                        var $t2;
                        _o3.add(($t2 = new Core.Models.GridPolicy(), $t2.Id = 1, $t2.EntityId = Core.Enums.EntityEnum.FieldCondition, $t2.FieldName = "FieldId", $t2.Events = "{'change': 'FieldId_Changed'}", $t2.ShortDesc = "T\u00ean c\u1ed9t", $t2.ReferenceId = Core.Enums.EntityEnum.GridPolicy, $t2.FormatCell = "{ShortDesc}", $t2.Active = true, $t2.Editable = true, $t2.ComponentType = "Dropdown", $t2.MinWidth = "100px", $t2.MaxWidth = "200px", $t2.LocalData = System.Linq.Enumerable.from(this._headers).select(function (x) { return Bridge.cast(x, System.Object); }).toList(System.Object), $t2.LocalRender = true, $t2.LocalHeader = function (_o1) {
                                var $t3;
                                _o1.add(($t3 = new Core.Models.GridPolicy(), $t3.EntityId = Core.Enums.EntityEnum.GridPolicy, $t3.FieldName = "ShortDesc", $t3.ShortDesc = "T\u00ean c\u1ed9t", $t3.Active = true, $t3));
                                return _o1;
                            }(new (System.Collections.Generic.List$1(Core.Models.GridPolicy)).ctor()), $t2));
                        _o3.add(($t2 = new Core.Models.GridPolicy(), $t2.Id = 2, $t2.EntityId = Core.Enums.EntityEnum.OrderByCondition, $t2.FieldName = "OrderbyOptionId", $t2.ShortDesc = "Th\u1ee9 t\u1ef1", $t2.ReferenceId = Core.Enums.EntityEnum.Entity, $t2.ComponentType = "Dropdown", $t2.FormatCell = "{Description}", $t2.Active = true, $t2.Editable = true, $t2.MinWidth = "100px", $t2.MaxWidth = "120px", $t2.LocalData = Core.Extensions.IEnumerableExtensions.ToEntity(Core.Enums.OrderbyOption), $t2.LocalHeader = function (_o2) {
                                var $t3;
                                _o2.add(($t3 = new Core.Models.GridPolicy(), $t3.EntityId = Core.Enums.EntityEnum.Entity, $t3.FieldName = "Name", $t3.ShortDesc = "Th\u1ee9 t\u1ef1", $t3.Active = true, $t3));
                                return _o2;
                            }(new (System.Collections.Generic.List$1(Core.Models.GridPolicy)).ctor()), $t2.LocalRender = true, $t2));
                        return _o3;
                    })(new (System.Collections.Generic.List$1(Core.Models.GridPolicy)).ctor());
                this._orderByGrid.GuiInfo.LocalData = System.Linq.Enumerable.from(this.AdvSearchEntity.OrderBy).select(function (x) { return Bridge.cast(x, System.Object); }).toList(System.Object);
                this._orderByGrid.ParentElement = section.Element;
                section.AddChild(this._orderByGrid);
            },
            ToggleIndent: function (e) {
                var $t;
                var keyCode = Core.Extensions.EventExt.KeyCodeEnum(e);
                if (keyCode !== Core.Enums.KeyCodeEnum.Tab) {
                    return;
                }

                e.preventDefault();
                var reducing = Core.Extensions.EventExt.ShiftKey(e);
                var selectedRows = this._filterGrid.GetSelectedRows();
                var idMap = ($t = System.Object, System.Linq.Enumerable.from(selectedRows, $t).toDictionary(function (x) {
                        return Bridge.unbox(x[Core.Components.BaseComponent.IdField]);
                    }, null, System.Int32, $t));
                this._filterGrid.RowAction$1(function (x) {
                    return idMap.containsKey(Bridge.unbox(x.Entity[Core.Components.BaseComponent.IdField]));
                }, function (x) {
                    var fieldCondition = Bridge.as(x.Entity, Core.Models.FieldCondition);
                    fieldCondition.Level = (fieldCondition.Level + (reducing ? -1 : 1)) | 0;
                    System.Linq.Enumerable.from(x.Element.querySelectorAll("td")).select(function (x) { return Bridge.cast(x, HTMLElement); }).forEach(function (td) {
                        td.style.paddingLeft = fieldCondition.Level + "rem";
                    });
                });
            },
            DirtyCheckAndCancel: function () {
                Core.Components.Forms.PopupEditor.prototype.Dispose.call(this);
            },
            ApplyFilter: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    isValid, 
                    query, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.IsFormValid();
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        isValid = $taskResult1;
                                        if (!isValid) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        query = this.CalcAdvSearchQuery();
                                        $task2 = this.ParentListView.ReloadData(query);
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $task2.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CalcAdvSearchQuery: function () {
                var query = this.ParentListView.FormattedDataSource;
                query = query.replace(new RegExp("(Active eq true (and|or)?)|( (and|or)?Active eq true^)"), "");
                if (this.AdvSearchEntity.ActiveState === Core.Enums.ActiveStateEnum.Yes) {
                    query = Core.Extensions.OdataExt.AppendClause(query, " and Active eq true");
                } else if (this.AdvSearchEntity.ActiveState === Core.Enums.ActiveStateEnum.No) {
                    query = Core.Extensions.OdataExt.AppendClause(query, " and Active eq false");
                }

                var originFilter = Core.Extensions.OdataExt.GetClausePart(query);
                var conditions = System.Linq.Enumerable.from(this.AdvSearchEntity.Conditions, Core.Models.FieldCondition).select(Bridge.fn.bind(this, function (x, index) {
                        var $t;
                        return new $asm.$AnonymousType$7(this.GetSearchValue(x), ($t = Core.Components.AdvancedSearch.GetLogicOp(x), $t != null ? $t : " and "));
                    })).where(function (x) {
                    return Core.Extensions.StringExt.HasAnyChar(x.Term);
                }).toList(System.Object);
                var filterPart = Core.Extensions.IEnumerableExtensions.Combine(System.String, System.Linq.Enumerable.from(conditions, System.Object).select(function (x, index) {
                        return index < ((conditions.Count - 1) | 0) ? (x.Term || "") + (x.Operator || "") : x.Term;
                    }), "");
                if (!Core.Extensions.StringExt.IsNullOrWhiteSpace(filterPart)) {
                    query = Core.Extensions.OdataExt.ApplyClause(query, System.String.format("({0}) and ({1})", originFilter, filterPart));
                }
                var orderbyList = System.Linq.Enumerable.from(this.AdvSearchEntity.OrderBy, Core.Models.OrderBy).select(function (orderby) {
                        return System.String.format("{0} {1}", orderby.Field.FieldName, System.Nullable.toString(orderby.OrderbyOptionId, System.Enum.toStringFn(Core.Enums.OrderbyOption)).toLowerCase());
                    });
                var orderByPart = Bridge.toArray(orderbyList).join(",");
                if (!Core.Extensions.StringExt.IsNullOrWhiteSpace(orderByPart)) {
                    query = Core.Extensions.OdataExt.ApplyClause(query, Bridge.toArray(orderbyList).join(","), Core.Extensions.OdataExt.OrderByKeyword);
                }

                return query;
            },
            GetSearchValue: function (condition) {
                var $t, $t1;
                var ignoreSearch = false;
                var value = ($t = condition.Value) != null ? Bridge.toString($t) : null;
                if (Core.Extensions.StringExt.IsNullOrWhiteSpace(value)) {
                    return null;
                }
                var fieldType = Bridge.Reflection.getMembers(this._entityType, 16, 284, condition.Field.FieldName).rt;
                if (Core.Extensions.ReflectionExt.IsDate(fieldType)) {
                    var dateTime = System.DateTime.parse(value);
                    value = System.String.format("cast({0},Edm.DateTimeOffset)", [Core.Extensions.DateTimeExt.ToISOFormat(dateTime)]);
                } else if (Core.Extensions.ReflectionExt.IsInt32(fieldType) && System.String.endsWith(condition.Field.FieldName, Core.Components.BaseComponent.IdField)) {
                    if (value == null) {
                        ignoreSearch = true;
                    } else {
                        var list = System.Linq.Enumerable.from(value.split(","), System.String).select(function (x) {
                                return Core.Extensions.Utils.TryParseInt(x);
                            }).where(function (x) {
                            return x != null;
                        }).select(function (x) {{ return Bridge.cast(x, System.Int32); }});
                        value = Bridge.toArray(list).join(",");
                    }
                } else if (Core.Extensions.ReflectionExt.IsNumber(fieldType)) {
                    value = System.String.format("{0}", [value]);
                } else if (Core.Extensions.ReflectionExt.IsBool(fieldType)) {
                    var state = { v : new Core.Enums.ActiveStateEnum() };
                    var tryParsed = System.Enum.tryParse(Core.Enums.ActiveStateEnum, value, state);
                    if (tryParsed && state.v === Core.Enums.ActiveStateEnum.Yes) {
                        value = "true";
                    } else if (state.v === Core.Enums.ActiveStateEnum.No) {
                        value = "false";
                    } else {
                        ignoreSearch = true;
                    }
                } else {
                    value = System.String.format("'{0}'", [Core.Extensions.Utils.EncodeSpecialChar(value)]);
                }

                var func = Core.Extensions.AdvOptionExt.OperationToOdata.getItem(System.Nullable.getValue(condition.CompareOperatorId));
                var formattedFunc = ignoreSearch ? "" : System.String.format(func, ($t1 = condition.Field) != null ? $t1.FieldName : null, value);

                return formattedFunc;
            },
            FieldId_Changed: function (condition, field) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    fieldType, 
                    cell, 
                    compareCell, 
                    parentCellElement, 
                    parentCell, 
                    comInfo, 
                    component, 
                    searchByIdList, 
                    isSearchId, 
                    $t, 
                    $t1, 
                    $t2, 
                    $t3, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,7], $step);
                                switch ($step) {
                                    case 0: {
                                        if (condition == null || field == null) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        condition.Field = field;
                                        fieldType = Bridge.Reflection.getMembers(this._entityType, 16, 284, field.FieldName).rt;
                                        cell = Core.Components.Extensions.ComponentExt.FirstOrDefault(this._filterGrid, function (x) {
                                            return x.GuiInfo != null && Bridge.referenceEquals(x.Entity, condition) && Bridge.referenceEquals(x.GuiInfo.FieldName, "Value");
                                        });
                                        compareCell = Bridge.as(Core.Components.Extensions.ComponentExt.FirstOrDefault(this._filterGrid, function (x) {
                                            return x.GuiInfo != null && Bridge.referenceEquals(x.Entity, condition) && Bridge.referenceEquals(x.GuiInfo.FieldName, "CompareOperatorId");
                                        }), Core.Components.SearchEntry);
                                        if (cell == null) {
                                            $tcs.setResult(null);
                                            return;
                                        }

                                        parentCellElement = cell.ParentElement;
                                        parentCell = cell.Parent;
                                        cell.Dispose();
                                        comInfo = Core.Extensions.Utils.MapToComponent(field);
                                        comInfo.FieldName = "Value";
                                        component = null;
                                        searchByIdList = System.Array.init(["Dropdown", "SearchEntry", "MultipleSearchEntry"], System.String);
                                        isSearchId = System.Array.contains(searchByIdList, field.ComponentType, System.String) || Core.Extensions.ReflectionExt.IsInt32(fieldType) && (System.Nullable.eq((($t = field.FieldName) != null ? System.String.endsWith($t, Core.Components.BaseComponent.IdField) : null), true) || Bridge.referenceEquals(field.FieldName, "InsertedBy") || Bridge.referenceEquals(field.FieldName, "UpdatedBy"));
                                        if (Core.Extensions.ReflectionExt.IsDate(fieldType)) {
                                            $step = 1;
                                            continue;
                                        } else  {
                                            $step = 2;
                                            continue;
                                        }
                                    }
                                    case 1: {
                                        component = Core.Components.AdvancedSearch.SetSearchDateTime(compareCell, comInfo);
                                        condition.Value = System.DateTime.format(System.DateTime.getNow());
                                        $step = 7;
                                        continue;
                                    }
                                    case 2: {
                                        if (isSearchId) {
                                            $step = 3;
                                            continue;
                                        } else  {
                                            $step = 5;
                                            continue;
                                        }
                                    }
                                    case 3: {
                                        $task1 = this.SetSearchId(field, compareCell, comInfo, component);
                                        $step = 4;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        component = $taskResult1;
                                        condition.Value = "";
                                        $step = 6;
                                        continue;
                                    }
                                    case 5: {
                                        if (Core.Extensions.ReflectionExt.IsBool(fieldType)) {
                                            component = Core.Components.AdvancedSearch.SetSearchBool(compareCell, comInfo);
                                            condition.Value = Bridge.toString((Core.Enums.ActiveStateEnum.All));
                                        } else if (Core.Extensions.ReflectionExt.IsNumber(fieldType)) {
                                            component = Core.Components.AdvancedSearch.SetSearchDecimal(compareCell, comInfo);
                                            condition.Value = Bridge.toString((0));
                                        } else {
                                            component = Core.Components.AdvancedSearch.SetSearchString(compareCell, comInfo);
                                        }
                                        $step = 6;
                                        continue;
                                    }

                                    case 7: {
                                        condition.LogicOperatorId = ($t1 = condition.LogicOperatorId, $t1 != null ? $t1 : Core.Enums.LogicOperation.And);
                                        ($t2 = Core.Components.Extensions.ComponentExt.FirstOrDefault(this._filterGrid, function (x) {
                                            return x.GuiInfo != null && Bridge.referenceEquals(x.Entity, condition) && Bridge.referenceEquals(x.GuiInfo.FieldName, "LogicOperatorId");
                                        })) != null ? $t2.UpdateView() : null;
                                        condition.CompareOperatorId = ($t3 = System.Linq.Enumerable.from(compareCell.GuiInfo.LocalData).select(function (x) { return Bridge.cast(x, Core.Models.Entity); }).firstOrDefault(null, null)) != null ? $t3.Id : null;
                                        compareCell.Value = condition.CompareOperatorId;
                                        compareCell.UpdateView();
                                        component.Entity = condition;
                                        Core.Components.Extensions.ComponentExt.SetValue(component, "Value", condition.Value);
                                        component.Parent = parentCell;
                                        parentCell.Children.insert(2, component);
                                        component.ParentElement = parentCellElement;
                                        component.Render();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            SetSearchId: function (field, compareCell, comInfo, component) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    refId, 
                    $t, 
                    $t1, 
                    $t2, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        comInfo.ComponentType = "MultipleSearchEntry";
                                        refId = ($t = field.ReferenceId, $t != null ? $t : ($t1 = this.ParentListView.GuiInfo.ReferenceId, $t1 != null ? $t1 : 0));
                                        comInfo.ReferenceId = refId;
                                        comInfo.Reference = ($t2 = new Core.Models.Entity(), $t2.Id = refId, $t2.Name = System.Enum.toString(Core.Enums.EntityEnum, refId), $t2);
                                        comInfo.DataSourceFilter = field.DataSource;
                                        $task1 = new Core.Clients.Client.$ctor1("GridPolicy", Bridge.Reflection.getTypeNamespace(Core.Models.User)).GetRawList(Core.Models.GridPolicy, System.String.format("?$filter=Active eq true and FeatureId eq null and EntityId eq {0}", [Bridge.box(($t2 = field.ReferenceId, $t2 != null ? $t2 : field.EntityId), System.Int32)]));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        comInfo.LocalHeader = $taskResult1;
                                        compareCell.GuiInfo.LocalData = System.Linq.Enumerable.from(Core.Components.AdvancedSearch.OperatorFactory(Core.Enums.ComponentTypeTypeEnum.SearchEntry)).select(function (x) { return Bridge.cast(x, System.Object); }).toList(System.Object);
                                        component = new Core.Components.MultipleSearchEntry(comInfo);
                                        component.EntityType = Core.Models.FieldCondition;
                                        compareCell.Value = Core.Enums.AdvSearchOperation.In;
                                        $tcs.setResult(component);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("$AnonymousType$7", $asm, {
        $kind: "anonymous",
        ctors: {
            ctor: function (term, operator) {
                this.Term = term;
                this.Operator = operator;
            }
        },
        methods: {
            equals: function (o) {
                if (!Bridge.is(o, $asm.$AnonymousType$7)) {
                    return false;
                }
                return Bridge.equals(this.Term, o.Term) && Bridge.equals(this.Operator, o.Operator);
            },
            getHashCode: function () {
                var h = Bridge.addHash([7550196192, this.Term, this.Operator]);
                return h;
            },
            toJSON: function () {
                return {
                    Term : this.Term,
                    Operator : this.Operator
                };
            }
        },
        statics : {
            methods: {
                $metadata : function () { return {"m":[{"a":2,"n":"Operator","t":16,"rt":System.String,"g":{"a":2,"n":"get_Operator","t":8,"rt":System.String,"fg":"Operator"},"fn":"Operator"},{"a":2,"n":"Term","t":16,"rt":System.String,"g":{"a":2,"n":"get_Term","t":8,"rt":System.String,"fg":"Term"},"fn":"Term"}]}; }
            }
        }
    });

    Bridge.define("Core.Components.Framework.ComponentBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        fields: {
            _syncConfig: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "Component");
                this.Name = "ComponentEditor";
                this.Title = "Component properties";
                this.Icon = "fa fa-wrench";
                this.Id = "EditComponent_" + (this.Id || "");
                this.Entity = new Core.Models.Component();
                this.PopulateDirty = false;
                this.DOMContentLoaded = Bridge.fn.combine(this.DOMContentLoaded, Bridge.fn.cacheBind(this, this.AlterPosition));
            }
        },
        methods: {
            AlterPosition: function () {
                Core.Extensions.HtmlElementExtension.AddClass(this.Element.parentElement, "properties");
            },
            Save: function (entity) {
                var component = Bridge.unbox(this.Entity);
                Core.Extensions.ReflectionExt.ClearReferences(component);
                return Core.Components.Forms.PopupEditor.prototype.Save.call(this, entity);
            }
        }
    });

    Bridge.define("Core.Components.Framework.ComponentGroupBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        fields: {
            _syncConfig: null
        },
        props: {
            ComGroupEntity: {
                get: function () {
                    return Bridge.as(this.Entity, Core.Models.ComponentGroup);
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "ComponentGroup");
                this.Name = "ComponentGroup";
                this.Title = "Section properties";
                this.Icon = "fa fa-wrench";
                this.PopulateDirty = false;
            }
        },
        methods: {
            Save: function (entity) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (this.ComGroupEntity == null) {
                                            $tcs.setResult(false);
                                            return;
                                        }

                                        Core.Extensions.ReflectionExt.ClearReferences(this.ComGroupEntity);
                                        Core.Extensions.IEnumerableExtensions.ForEach(Core.Models.Component, this.ComGroupEntity.Component, function (x) {
                                            x.Reference = null;
                                            x.ComponentGroup = null;
                                        });
                                        $task1 = Core.Components.Forms.PopupEditor.prototype.Save.call(this, entity);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult($taskResult1);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("Core.Components.Framework.FeatureDetailBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        props: {
            FeatureEntity: {
                get: function () {
                    return Core.Extensions.BridgeExt.CastProp(Core.Models.Feature, this.Entity);
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "Feature");
                this.Name = "FeatureEditor";
                this.Title = "Feature";
                this.Icon = "icons/config.png";
                this.PopulateDirty = false;
                this.ShouldLoadEntity = true;
                this.Entity = new Core.Models.Feature();
            }
        },
        methods: {
            SaveFeature: function (feature) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    extendedProp, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3], $step);
                                switch ($step) {
                                    case 0: {
                                        extendedProp = feature.Properties;
                                        if (!Core.Extensions.StringExt.HasAnyChar(extendedProp)) {
                                            $step = 1;
                                            continue;
                                        } 
                                        $step = 3;
                                        continue;
                                    }
                                    case 1: {
                                        $task1 = this.SaveFeatureInternal(feature);
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult($taskResult1);
                                        return;
                                    }
                                    case 3: {
                                        Core.Components.Forms.ConfirmDialog.RenderConfirm("Feature properties has data.<br />Do you want to merge to the database?", Bridge.fn.bind(this, function () {
                                            var $step = 0,
                                                $task1, 
                                                $task2, 
                                                $taskResult2, 
                                                $jumpFromFinally, 
                                                $asyncBody = Bridge.fn.bind(this, function () {
                                                    for (;;) {
                                                        $step = System.Array.min([0,1,2], $step);
                                                        switch ($step) {
                                                            case 0: {
                                                                $task1 = this.MergeFeatureProp(feature, feature.Properties);
                                                                $step = 1;
                                                                if ($task1.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task1.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 1: {
                                                                $task1.getAwaitedResult();
                                                                feature.Properties = null;
                                                                $task2 = this.SaveFeatureInternal(feature);
                                                                $step = 2;
                                                                if ($task2.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task2.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 2: {
                                                                $taskResult2 = $task2.getAwaitedResult();
                                                                return;
                                                            }
                                                            default: {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }, arguments);

                                            $asyncBody();
                                        }), Bridge.fn.bind(this, function () {
                                            var $step = 0,
                                                $task1, 
                                                $taskResult1, 
                                                $jumpFromFinally, 
                                                $asyncBody = Bridge.fn.bind(this, function () {
                                                    for (;;) {
                                                        $step = System.Array.min([0,1], $step);
                                                        switch ($step) {
                                                            case 0: {
                                                                $task1 = this.SaveFeatureInternal(feature);
                                                                $step = 1;
                                                                if ($task1.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task1.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 1: {
                                                                $taskResult1 = $task1.getAwaitedResult();
                                                                return;
                                                            }
                                                            default: {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }, arguments);

                                            $asyncBody();
                                        }));
                                        $tcs.setResult(true);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            MergeFeatureProp: function (feature, str_prop) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    properties, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (Core.Extensions.StringExt.IsNullOrWhiteSpace(str_prop)) {
                                            $tcs.setResult(null);
                                            return;
                                        }

                                        properties = Newtonsoft.Json.JsonConvert.DeserializeObject(str_prop, Core.Models.Feature);
                                        this.MergeFeature(feature, properties);
                                        $task1 = this.CreateSection(feature, properties);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CreateSection: function (feature, properties) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    newSections, 
                    extSection, 
                    originSection, 
                    $t, 
                    $t1, 
                    section, 
                    newSection, 
                    udpated, 
                    $async_e, 
                    $async_e1, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4], $step);
                                switch ($step) {
                                    case 0: {
                                        if (Core.Extensions.IEnumerableExtensions.Nothing(Core.Models.ComponentGroup, properties.ComponentGroup)) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        newSections = new (System.Collections.Generic.List$1(System.Object)).ctor();
                                        extSection = Core.Extensions.ReflectionExt.ToDictionaryDistinct(Core.Models.ComponentGroup, System.Int32, properties.ComponentGroup, function (x) {
                                            return x.Id;
                                        });
                                        originSection = ($t = Core.Models.ComponentGroup, System.Linq.Enumerable.from(feature.ComponentGroup, $t).toDictionary(function (x) {
                                            return x.Id;
                                        }, null, System.Int32, $t));
                                        $t1 = Bridge.getEnumerator(extSection);
                                        try {
                                            while ($t1.moveNext()) {
                                                section = $t1.Current;
                                                if (originSection.containsKey(section.key)) {
                                                    Core.Extensions.ReflectionExt.CopyPropFrom$1(originSection.getItem(section.key), section.value);
                                                } else {
                                                    newSection = new Core.Models.ComponentGroup();
                                                    Core.Extensions.ReflectionExt.CopyPropFrom$1(newSection, section.value);
                                                    Core.Extensions.ReflectionExt.ClearReferences(newSection);
                                                    Core.Extensions.ReflectionExt.ProcessObjectRecursive(newSection, Bridge.fn.bind(this, function (x) {
                                                        if (x.hasOwnProperty(Core.Components.BaseComponent.IdField)) {
                                                            x[Core.Components.BaseComponent.IdField] = Bridge.box(0, System.Int32);
                                                        }
                                                        if (x.hasOwnProperty("FeatureId")) {
                                                            x.FeatureId = Bridge.box(this.FeatureEntity.Id, System.Int32);
                                                        }
                                                        if (x.hasOwnProperty("ParentId")) {
                                                            x.ParentId = null;
                                                        }
                                                        if (x.hasOwnProperty("ComponentId")) {
                                                            x.ComponentId = null;
                                                        }
                                                    }));
                                                    newSections.add(newSection);
                                                }
                                            }
                                        } finally {
                                            if (Bridge.is($t1, System.IDisposable)) {
                                                $t1.System$IDisposable$Dispose();
                                            }
                                        }
                                        $step = 1;
                                        continue;
                                    }
                                    case 1: {
                                        $task1 = new Core.Clients.Client.$ctor1("ComponentGroup", Bridge.Reflection.getTypeNamespace(Core.Models.User)).BulkUpdateAsync(System.Object, newSections);
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        udpated = $taskResult1;
                                        $step = 4;
                                        continue;
                                    }
                                    case 3: {
                                        $async_e = null;
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            if ( $step >= 1 && $step <= 2 ) {
                                $step = 3;
                                $asyncBody();
                                return;
                            }
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            MergeFeature: function (feature, properties) {
                if (feature.Id === properties.Id) {
                    return;
                }
                Core.Extensions.ReflectionExt.CopyPropFrom(feature, properties, 1, System.Array.init([Core.Components.BaseComponent.IdField, "Name"], System.String));
            },
            LoadEntity: function () {
                var $step = 0,
                    $task1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    featureTask, 
                    sectionTask, 
                    headerTask, 
                    feature, 
                    res, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2], $step);
                                switch ($step) {
                                    case 0: {
                                        featureTask = new Core.Clients.Client.$ctor1("Feature", Bridge.Reflection.getTypeNamespace(Core.Models.User)).GetAsync(Core.Models.Feature, this.FeatureEntity.Id);
                                        sectionTask = new Core.Clients.Client.$ctor1("ComponentGroup", Bridge.Reflection.getTypeNamespace(Core.Models.User)).GetRawList(Core.Models.ComponentGroup, System.String.format("?$expad=Component&$filter=Active eq true and FeatureId eq {0}", [Bridge.box(this.FeatureEntity.Id, System.Int32)]));
                                        headerTask = new Core.Clients.Client.$ctor1("GridPolicy", Bridge.Reflection.getTypeNamespace(Core.Models.User)).GetRawList(Core.Models.GridPolicy, System.String.format("?$filter=Active eq true and FeatureId eq {0}", [Bridge.box(this.FeatureEntity.Id, System.Int32)]));
                                        $task1 = System.Threading.Tasks.Task.whenAll(featureTask, sectionTask, headerTask);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        feature = featureTask.getResult();
                                        this.BuildTree(sectionTask.getResult());
                                        feature.ComponentGroup = sectionTask.getResult();
                                        feature.GridPolicy = headerTask.getResult();
                                        Core.Extensions.ReflectionExt.ClearReferences(feature);
                                        $task2 = Core.Components.Forms.PopupEditor.prototype.LoadEntity.call(this);
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        res = $taskResult2;
                                        $tcs.setResult(res);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            SaveFeatureInternal: function (feature) {
                var $step = 0,
                    $task1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    comGroup, 
                    components, 
                    comGroupTask, 
                    $t, 
                    comTask, 
                    $t1, 
                    saved, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2], $step);
                                switch ($step) {
                                    case 0: {
                                        Core.Extensions.ReflectionExt.ClearReferences(feature);
                                        comGroup = Core.Extensions.IEnumerableExtensions.ForEach(Core.Models.ComponentGroup, feature.ComponentGroup, function (cg) {
                                            cg.Component = null;
                                            cg.InverseParent = null;
                                            cg.Parent = null;
                                            cg.Feature = null;
                                            cg.FeatureId = feature.Id;
                                        });
                                        components = Core.Extensions.IEnumerableExtensions.ForEach(Core.Models.Component, feature.Component, function (cg) {
                                            cg.ComponentGroup = null;
                                        });
                                        comGroupTask = Core.Extensions.IEnumerableExtensions.HasElement(Core.Models.ComponentGroup, comGroup) ? new Core.Clients.Client.$ctor1("ComponentGroup", Bridge.Reflection.getTypeNamespace(Core.Models.User)).BulkUpdateAsync(Core.Models.ComponentGroup, ($t = Core.Models.ComponentGroup, System.Linq.Enumerable.from(comGroup, $t).toList($t))) : System.Threading.Tasks.Task.fromResult(new (System.Collections.Generic.List$1(Core.Models.ComponentGroup)).ctor(), System.Collections.Generic.List$1(Core.Models.ComponentGroup));
                                        comTask = Core.Extensions.IEnumerableExtensions.HasElement(Core.Models.Component, components) ? new Core.Clients.Client.$ctor1("Component", Bridge.Reflection.getTypeNamespace(Core.Models.User)).BulkUpdateAsync(Core.Models.Component, ($t1 = Core.Models.Component, System.Linq.Enumerable.from(components, $t1).toList($t1))) : System.Threading.Tasks.Task.fromResult(new (System.Collections.Generic.List$1(Core.Models.Component)).ctor(), System.Collections.Generic.List$1(Core.Models.Component));
                                        $task1 = System.Threading.Tasks.Task.whenAll(comGroupTask, comTask);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        feature.Active = true;
                                        Core.Extensions.ReflectionExt.CopyPropFrom$1(feature.ComponentGroup, comGroupTask.getResult());
                                        Core.Extensions.ReflectionExt.CopyPropFrom$1(feature.Component, comTask.getResult());
                                        $task2 = Core.Components.Forms.PopupEditor.prototype.Save.call(this, Bridge.box(true, System.Boolean, System.Boolean.toString));
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        saved = $taskResult2;
                                        $tcs.setResult(saved);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            EditGridColumn: function (arg) {
                var $t;
                var header = Bridge.as(arg, Core.Models.GridPolicy);
                var editor = ($t = new Core.Components.HeaderEditor(), $t.Entity = header, $t.ParentElement = this.TabEditor.Element, $t);
                var tab = System.Linq.Enumerable.from(Core.Components.Forms.TabEditor.Tabs, Core.Components.Forms.TabEditor).firstOrDefault(function (x) {
                        return x.Show;
                    }, null);
                tab != null ? tab.AddChild(editor) : null;
            }
        }
    });

    Bridge.define("Core.Components.GridEditor", {
        inherits: [Core.Components.Forms.PopupEditor],
        fields: {
            _columnGrid: null
        },
        props: {
            ListView: null
        },
        ctors: {
            ctor: function () {
                var $t;
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "GridPolicy");
                this.Name = "GridEditor";
                this.Title = "T\u00f9y ch\u1ec9nh";
                this.Icon = "fa fa-sort-size-up-alt";
                this.PopulateDirty = false;
                this.Feature = ($t = new Core.Models.Feature(), $t.IgnoreEncode = true, $t.Style = System.String.format("max-width: {0}px", [Bridge.box(Core.Components.BaseComponent.SmallScreen, System.Int32)]), $t.FeaturePolicy = function (_o1) {
                        var $t1;
                        _o1.add(($t1 = new Core.Models.FeaturePolicy(), $t1.CanRead = true, $t1.CanWrite = true, $t1));
                        _o1.add(($t1 = new Core.Models.FeaturePolicy(), $t1.CanDelete = true, $t1.RoleId = Core.Enums.RoleEnum.System, $t1));
                        return _o1;
                    }(new (System.Collections.Generic.List$1(Core.Models.FeaturePolicy)).ctor()), $t);
            }
        },
        methods: {
            Render: function () {
                Core.Components.Forms.PopupEditor.prototype.Render.call(this);
                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = this.LoadUserColumn();
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            LoadUserColumn: function () {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    btnSection, 
                    $t, 
                    $t1, 
                    button, 
                    section, 
                    columnMap, 
                    mergedColumns, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        btnSection = new Core.Components.Section.$ctor1(Core.MVVM.ElementType.div);
                                        this.AddChild(btnSection);
                                        btnSection.ClassName = "ribbon-group";
                                        btnSection.AddChild(($t = new Core.Components.Button(($t1 = new Core.Models.Component(), $t1.HotKey = "Ctrl-Shift-S", $t1.Events = "{'click': 'UpdateSetting'}", $t1.Icon = "fa fa-save", $t1.ClassName = "ribbon-button", $t1.Label = "L\u01b0u", $t1)), $t.ParentElement = btnSection.Element, $t));
                                        button = ($t = new Core.Components.Button(($t1 = new Core.Models.Component(), $t1.Icon = "mif-exit", $t1.ClassName = "ribbon-button last", $t1.Label = "\u0110\u00f3ng", $t1)), $t.ParentElement = btnSection.Element, $t);
                                        btnSection.AddChild(button);
                                        button.Element.addEventListener("click", Bridge.fn.cacheBind(this, this.DirtyCheckAndCancel));
                                        section = ($t = new Core.Components.Section.$ctor1(Core.MVVM.ElementType.div), $t.ParentElement = this.Element, $t);
                                        this.AddChild(section);
                                        section.ClassName = "wrapper scroll-content";
                                        columnMap = null;
                                        this._columnGrid = new Core.Components.GridView(($t = new Core.Models.Component(), $t.ComponentType = "GridView", $t.ReferenceId = Core.Enums.EntityEnum.GridPolicy, $t.CanAdd = true, $t));
                                        this._columnGrid.GuiInfo = ($t = new Core.Models.Component(), $t.RefName = "GridPolicy", $t);
                                        this._columnGrid.ParentElement = section.Element;
                                        section.AddChild(this._columnGrid);
                                        this._columnGrid.GuiInfo.LocalHeader = function (_o1) {
                                            var $t2;
                                            _o1.add(Core.Components.GridView.ToolbarColumn);
                                            _o1.add(($t2 = new Core.Models.GridPolicy(), $t2.FieldName = "FieldName", $t2.ComponentType = "Button", $t2.Icon = "mif-enter", $t2.ClassName = "button small warning", $t2.TextAlign = "center", $t2.ShortDesc = "", $t2.Editable = true, $t2.Frozen = true, $t2.Events = "{'click': 'HeaderProperty'}", $t2));
                                            _o1.add(($t2 = new Core.Models.GridPolicy(), $t2.FieldName = "FieldName", $t2.ComponentType = "Label", $t2.ShortDesc = "Tr\u01b0\u1eddng d\u1eef li\u1ec7u", $t2.Frozen = true, $t2));
                                            _o1.add(($t2 = new Core.Models.GridPolicy(), $t2.FieldName = "Order", $t2.ComponentType = "Number", $t2.ShortDesc = "Th\u1ee9 t\u1ef1", $t2.Editable = true, $t2));
                                            _o1.add(($t2 = new Core.Models.GridPolicy(), $t2.FieldName = "ShortDesc", $t2.ComponentType = "Input", $t2.ShortDesc = "T\u00ean", $t2.Editable = true, $t2));
                                            _o1.add(($t2 = new Core.Models.GridPolicy(), $t2.FieldName = "Description", $t2.ComponentType = "Input", $t2.ShortDesc = "Mi\u00eau t\u1ea3", $t2.Editable = true, $t2));
                                            _o1.add(($t2 = new Core.Models.GridPolicy(), $t2.FieldName = "GroupName", $t2.ComponentType = "Input", $t2.ShortDesc = "Nh\u00f3m", $t2.Editable = true, $t2));
                                            _o1.add(($t2 = new Core.Models.GridPolicy(), $t2.FieldName = "MinWidth", $t2.ComponentType = "Input", $t2.ShortDesc = "Chi\u1ec1u r\u1ed9ng t\u1ed1i thi\u1ec3u", $t2.Editable = true, $t2));
                                            _o1.add(($t2 = new Core.Models.GridPolicy(), $t2.FieldName = "MaxWidth", $t2.ComponentType = "Input", $t2.ShortDesc = "Chi\u1ec1u d\u00e0i l\u1edbn nh\u1ea5t", $t2.Editable = true, $t2));
                                            _o1.add(($t2 = new Core.Models.GridPolicy(), $t2.FieldName = "Frozen", $t2.ComponentType = "Checkbox", $t2.ShortDesc = "C\u1ed1 \u0111\u1ecbnh", $t2.Editable = true, $t2));
                                            _o1.add(($t2 = new Core.Models.GridPolicy(), $t2.FieldName = "Hidden", $t2.ComponentType = "Checkbox", $t2.ShortDesc = "\u1ea8n", $t2.Editable = true, $t2));
                                            return _o1;
                                        }(new (System.Collections.Generic.List$1(Core.Models.GridPolicy)).ctor());
                                        if (Core.Clients.Client.SystemRole) {
                                            this._columnGrid.GuiInfo.LocalHeader.AddRange(function (_o2) {
                                                var $t2;
                                                _o2.add(($t2 = new Core.Models.GridPolicy(), $t2.FieldName = "Active", $t2.ComponentType = "Checkbox", $t2.ShortDesc = "Hi\u1ec7u l\u1ef1c", $t2.Editable = true, $t2));
                                                _o2.add(($t2 = new Core.Models.GridPolicy(), $t2.FieldName = "AdvancedSearch", $t2.ComponentType = "Checkbox", $t2.ShortDesc = "T\u00ecm ki\u1ebfm n\u00e2ng cao", $t2.Editable = true, $t2));
                                                _o2.add(($t2 = new Core.Models.GridPolicy(), $t2.FieldName = "ClassName", $t2.ComponentType = "Input", $t2.ShortDesc = "Class", $t2.Editable = true, $t2));
                                                _o2.add(($t2 = new Core.Models.GridPolicy(), $t2.FieldName = "ComponentType", $t2.ComponentType = "Input", $t2.ShortDesc = "Lo\u1ea1i nh\u1eadp li\u1ec7u", $t2.Editable = true, $t2));
                                                _o2.add(($t2 = new Core.Models.GridPolicy(), $t2.FieldName = "Precision", $t2.ComponentType = "Number", $t2.ShortDesc = "\u0110\u1ed9 ch\u00ednh x\u00e1c", $t2.Editable = true, $t2));
                                                _o2.add(($t2 = new Core.Models.GridPolicy(), $t2.FieldName = "Style", $t2.ComponentType = "Input", $t2.ShortDesc = "Style", $t2.Editable = true, $t2));
                                                _o2.add(($t2 = new Core.Models.GridPolicy(), $t2.FieldName = "ChildStyle", $t2.ComponentType = "Input", $t2.ShortDesc = "Child style", $t2.Editable = true, $t2));
                                                _o2.add(($t2 = new Core.Models.GridPolicy(), $t2.FieldName = "Width", $t2.ComponentType = "Input", $t2.ShortDesc = "\u0110\u1ed9 d\u00e0i", $t2.Editable = true, $t2));
                                                _o2.add(($t2 = new Core.Models.GridPolicy(), $t2.FieldName = "PlainText", $t2.ComponentType = "Input", $t2.ShortDesc = "Placeholder", $t2.Editable = true, $t2));
                                                _o2.add(($t2 = new Core.Models.GridPolicy(), $t2.FieldName = "RefClass", $t2.ComponentType = "Input", $t2.ShortDesc = "View class", $t2.Editable = true, $t2));
                                                _o2.add(($t2 = new Core.Models.GridPolicy(), $t2.FieldName = "ReferenceId", $t2.ComponentType = "Dropdown", $t2.ReferenceId = Core.Enums.EntityEnum.Entity, $t2.FormatCell = "{Name}", $t2.ShortDesc = "Tham chi\u1ebfu", $t2.Editable = true, $t2));
                                                _o2.add(($t2 = new Core.Models.GridPolicy(), $t2.FieldName = "TextAlign", $t2.ComponentType = "Input", $t2.ShortDesc = "Canh l\u1ec1", $t2.Editable = true, $t2));
                                                _o2.add(($t2 = new Core.Models.GridPolicy(), $t2.FieldName = "Validation", $t2.ComponentType = "Input", $t2.ShortDesc = "Validation", $t2.Editable = true, $t2));
                                                _o2.add(($t2 = new Core.Models.GridPolicy(), $t2.FieldName = "IsPivot", $t2.ComponentType = "Checkbox", $t2.ShortDesc = "Pivot", $t2.Editable = true, $t2));
                                                _o2.add(($t2 = new Core.Models.GridPolicy(), $t2.FieldName = "FormatCell", $t2.ComponentType = "Input", $t2.ShortDesc = "Format cell", $t2.Editable = true, $t2));
                                                _o2.add(($t2 = new Core.Models.GridPolicy(), $t2.FieldName = "FormatRow", $t2.ComponentType = "Input", $t2.ShortDesc = "Format row", $t2.Editable = true, $t2));
                                                _o2.add(($t2 = new Core.Models.GridPolicy(), $t2.FieldName = "FilterTemplate", $t2.ComponentType = "Input", $t2.ShortDesc = "Filter template", $t2.Editable = true, $t2));
                                                _o2.add(($t2 = new Core.Models.GridPolicy(), $t2.FieldName = "FeatureId", $t2.ComponentType = "Dropdown", $t2.ReferenceId = Core.Enums.EntityEnum.Feature, $t2.FormatCell = "{Name} {Label}", $t2.ShortDesc = "M\u00e0n h\u00ecnh", $t2.Editable = true, $t2));
                                                _o2.add(($t2 = new Core.Models.GridPolicy(), $t2.FieldName = "Events", $t2.ComponentType = "Input", $t2.ShortDesc = "S\u1ef1 ki\u1ec7n", $t2.Editable = true, $t2));
                                                _o2.add(($t2 = new Core.Models.GridPolicy(), $t2.FieldName = "EntityId", $t2.ComponentType = "Dropdown", $t2.ReferenceId = Core.Enums.EntityEnum.Entity, $t2.FormatCell = "{Name}", $t2.ShortDesc = "B\u1ea3ng d\u1eef li\u1ec7u", $t2.Editable = true, $t2));
                                                _o2.add(($t2 = new Core.Models.GridPolicy(), $t2.FieldName = "Editable", $t2.ComponentType = "Checkbox", $t2.ShortDesc = "Cho ph\u00e9p s\u1eeda", $t2.Editable = true, $t2));
                                                _o2.add(($t2 = new Core.Models.GridPolicy(), $t2.FieldName = "Disabled", $t2.ComponentType = "Checkbox", $t2.ShortDesc = "V\u00f4 hi\u1ec7u h\u00f3a", $t2.Editable = true, $t2));
                                                _o2.add(($t2 = new Core.Models.GridPolicy(), $t2.FieldName = "DefaultVal", $t2.ComponentType = "Input", $t2.ShortDesc = "Gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh", $t2.Editable = true, $t2));
                                                _o2.add(($t2 = new Core.Models.GridPolicy(), $t2.FieldName = "DataSource", $t2.ComponentType = "Input", $t2.ShortDesc = "Ngu\u1ed3n d\u1eef li\u1ec7u", $t2.Editable = true, $t2));
                                                _o2.add(($t2 = new Core.Models.GridPolicy(), $t2.FieldName = "ComponentId", $t2.ComponentType = "Dropdown", $t2.ReferenceId = Core.Enums.EntityEnum.Component, $t2.FormatCell = "C{Id:0000000}", $t2.ShortDesc = "Component", $t2.Editable = true, $t2));
                                                _o2.add(($t2 = new Core.Models.GridPolicy(), $t2.FieldName = "CascadeField", $t2.ComponentType = "Input", $t2.ShortDesc = "Cascade", $t2.Editable = true, $t2));
                                                _o2.add(($t2 = new Core.Models.GridPolicy(), $t2.FieldName = "PopulateField", $t2.ComponentType = "Input", $t2.ShortDesc = "Populate", $t2.Editable = true, $t2));
                                                return _o2;
                                            }(new (System.Collections.Generic.List$1(Core.Models.GridPolicy)).ctor()));
                                        }
                                        this._columnGrid.GuiInfo.LocalHeader.ForEach(function (x) {
                                            var $t2;
                                            if (Bridge.referenceEquals(x.ComponentType, "Input")) {
                                                x.MinWidth = "100px";
                                            }

                                            if (x.ReferenceId == null) {
                                                return;
                                            }

                                            var name = System.Enum.toString(Core.Enums.EntityEnum, System.Nullable.getValue(x.ReferenceId));
                                            x.Reference = ($t2 = new Core.Models.Entity(), $t2.Name = name, $t2);
                                            x.RefName = name;
                                        });
                                        mergedColumns = System.Linq.Enumerable.from(this.ListView.Header, Core.Models.GridPolicy).where(function (x) {
                                            return !x.StatusBar;
                                        }).select(function (x) {
                                            if (columnMap != null && columnMap.containsKey(x.Id)) {
                                                Core.Extensions.ReflectionExt.CopyPropFrom$1(x, columnMap.getItem(x.Id));
                                            }

                                            return x;
                                        }).select(function (x) {{ return Bridge.cast(x, System.Object); }}).toList(System.Object);
                                        this._columnGrid.GuiInfo.LocalData = mergedColumns;
                                        $task1 = this._columnGrid.LoadMasterData();
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        if (this._columnGrid.Paginator != null) {
                                            this._columnGrid.Paginator.Show = false;
                                        }
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            UpdateSetting: function () {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (!this._columnGrid.Dirty) {
                                            $tcs.setResult(null);
                                            return;
                                        }

                                        $task1 = this.UpdateSysSetting();
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        Core.Extensions.Toast.Success("D\u1eef li\u1ec7u \u0111\u00e3 \u0111\u01b0\u1ee3c c\u1eadp nh\u1eadt");
                                        this.Dirty = false;
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            HeaderProperty: function (policy) {
                var $t;
                var editor = ($t = new Core.Components.HeaderEditor(), $t.Entity = policy, $t);
                this.TabEditor.AddChild(editor);
            },
            UpdateSysSetting: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (!Core.Clients.Client.SystemRole) {
                                            $tcs.setResult(null);
                                            return;
                                        }

                                        Core.Extensions.ReflectionExt.ClearReferences(this._columnGrid.RowData.Data);
                                        $task1 = new Core.Clients.Client.$ctor1("GridPolicy", Bridge.Reflection.getTypeNamespace(Core.Models.User)).BulkUpdateAsync(System.Object, this._columnGrid.RowData.Data);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            Dispose: function () {
                this.Dirty = false;
                Core.Components.Forms.PopupEditor.prototype.Dispose.call(this);
            }
        }
    });

    Bridge.define("Core.Components.HeaderEditor", {
        inherits: [Core.Components.Forms.PopupEditor],
        fields: {
            _syncConfig: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "GridPolicy");
                this.Name = "HeaderEditor";
                this.Title = "Properties";
                this.Icon = "fa fa-wrench";
                this.DOMContentLoaded = Bridge.fn.combine(this.DOMContentLoaded, Bridge.fn.cacheBind(this, this.AlterPosition));
                this.PopulateDirty = false;
                this.ShouldLoadEntity = true;
            }
        },
        methods: {
            AlterPosition: function () {
                Core.Extensions.HtmlElementExtension.AddClass(this.Element.parentElement, "properties");
            },
            SyncConfig: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    component, 
                    header, 
                    $t, 
                    syncDialog, 
                    vendorSearch, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3], $step);
                                switch ($step) {
                                    case 0: {
                                        component = Bridge.as(this.Entity, Core.Models.GridPolicy);
                                        if (this.Dirty) {
                                            $step = 1;
                                            continue;
                                        } 
                                        $step = 3;
                                        continue;
                                    }
                                    case 1: {
                                        $task1 = this.Save();
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $step = 3;
                                        continue;
                                    }
                                    case 3: {
                                        header = Bridge.as(this.Entity, Core.Models.GridPolicy);
                                        header.Feature = (Bridge.as(this.Parent, Core.Components.Forms.EditForm)).Feature;
                                        this._syncConfig = ($t = new Core.ViewModels.SyncConfigVM(), $t.GridPolicy = header, $t);
                                        syncDialog = ($t = new Core.Components.Forms.ConfirmDialog(), $t.Entity = this._syncConfig, $t.Content = "Ch\u1ecdn danh s\u00e1ch kh\u00e1ch h\u00e0ng c\u1ea7n \u0111\u1ed3ng b\u1ed9", $t);
                                        this.AddChild(syncDialog);
                                        vendorSearch = new Core.Components.MultipleSearchEntry(($t = new Core.Models.Component(), $t.PlainText = "C\u1eadp nh\u1eadt cho c\u00e1c c\u00f4ng ty", $t.ShowLabel = true, $t.Label = "C\u00f4ng ty", $t.FieldName = "VendorId", $t.FormatData = "{CompanyLocalShortName}", $t.Row = 12, $t.ReferenceId = Core.Enums.EntityEnum.Vendor, $t.DataSourceFilter = "?$filter=Active eq true and IsTenant eq true", $t.Visibility = true, $t));
                                        syncDialog.AddChild(vendorSearch);
                                        syncDialog.DisposeAfterYes = false;
                                        syncDialog.YesConfirmed = Bridge.fn.combine(syncDialog.YesConfirmed, Bridge.fn.bind(this, function () {
                                            System.Threading.Tasks.Task.run(Bridge.fn.cacheBind(this, this.SyncDialog_YesConfirmed));
                                        }));
                                        $tcs.setResult(true);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            SyncDialog_YesConfirmed: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    ok, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        Core.Extensions.ReflectionExt.ClearReferences(this._syncConfig.GridPolicy);
                                        $task1 = new Core.Clients.Client.$ctor1("Component", Bridge.Reflection.getTypeNamespace(Core.Models.User)).PostAsync(System.Boolean, this._syncConfig, "SyncTenant", false, true);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        ok = $taskResult1;
                                        if (ok) {
                                            Core.Extensions.Toast.Success("C\u1eadp nh\u1eadt c\u1ea5u h\u00ecnh th\u00e0nh c\u00f4ng");
                                        }
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("Core.Components.SecurityBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        props: {
            Security: {
                get: function () {
                    return Bridge.as(this.Entity, Core.ViewModels.SecurityVM);
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "FeaturePolicy");
                this.Name = "SecurityEditor";
                this.Title = "B\u1ea3o m\u1eadt & Ph\u00e2n quy\u1ec1n";
                this.Icon = "mif-security";
            }
        }
    });

    Bridge.define("Core.Components.SecurityEditorBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        props: {
            SecurityEntity: {
                get: function () {
                    return Bridge.as(this.Entity, Core.ViewModels.SecurityVM);
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "FeaturePolicy");
                this.Name = "CreateSecurity";
                this.Title = "B\u1ea3o m\u1eadt & Ph\u00e2n quy\u1ec1n";
                this.Icon = "mif-security";
                this.DOMContentLoaded = Bridge.fn.combine(this.DOMContentLoaded, Bridge.fn.cacheBind(this, this.CheckAllPolicy));
            }
        },
        methods: {
            CheckAllPolicy: function () {
                this.SecurityEntity.CanDelete = this.SecurityEntity.AllPermission;
                this.SecurityEntity.CanDeactivate = this.SecurityEntity.AllPermission;
                this.SecurityEntity.CanRead = this.SecurityEntity.AllPermission;
                this.SecurityEntity.CanWrite = this.SecurityEntity.AllPermission;
                this.SecurityEntity.CanShare = this.SecurityEntity.AllPermission;
                Core.Components.Extensions.ComponentExt.FindComponentByName(Core.Components.Section, this, "Properties").UpdateView();
            },
            CheckPolicy: function () {
                this.SecurityEntity.AllPermission = !(!this.SecurityEntity.CanDeactivate || !this.SecurityEntity.CanDelete || !this.SecurityEntity.CanRead || !this.SecurityEntity.CanShare || !this.SecurityEntity.CanWrite);
                Core.Components.Extensions.ComponentExt.FindComponentByName(Core.Components.Section, this, "Properties").UpdateView();
            },
            Save: function (entity) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    res, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (this.SecurityEntity.UserId == null && this.SecurityEntity.RoleId == null) {
                                            Core.Extensions.Toast.Warning("User v\u00e0 Role kh\u00f4ng th\u1ec3 \u0111\u1ed3ng th\u1eddi \u0111\u1ec3 tr\u1ed1ng");
                                            $tcs.setResult(false);
                                            return;
                                        }
                                        if (this.SecurityEntity.UserId != null && this.SecurityEntity.RoleId != null) {
                                            Core.Extensions.Toast.Warning("User v\u00e0 Role kh\u00f4ng th\u1ec3 \u0111\u1ed3ng th\u1eddi c\u00f3 gi\u00e1 tr\u1ecb");
                                            $tcs.setResult(false);
                                            return;
                                        }
                                        $task1 = this.Client.PostAsync(System.Boolean, this.SecurityEntity, "SharePermission");
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        res = $taskResult1;
                                        if (res) {
                                            Core.Extensions.Toast.Success("\u0110\u00e3 t\u1ea1o m\u1edbi th\u00e0nh c\u00f4ng");
                                        } else {
                                            Core.Extensions.Toast.Warning("Chia s\u1ebb quy\u1ec1n h\u1ea1n kh\u00f4ng th\u00e0nh c\u00f4ng");
                                        }

                                        this.SecurityEntity.RoleId = null;
                                        this.SecurityEntity.UserId = null;
                                        this.Parent.UpdateView();
                                        this.Dirty = false;
                                        $tcs.setResult(true);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    /** @namespace System */

    /**
     * @memberof System
     * @callback System.Action
     * @param   {Core.ViewModels.Token}    arg
     * @return  {void}
     */

    Bridge.define("Core.Fw.Authentication.LoginBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        statics: {
            fields: {
                _instance: null,
                _initApp: false
            },
            props: {
                MenuComponent: null,
                TaskList: null,
                Instance: {
                    get: function () {
                        if (Core.Fw.Authentication.LoginBL._instance == null) {
                            Core.Fw.Authentication.LoginBL._instance = new Core.Fw.Authentication.LoginBL();
                        }

                        return Core.Fw.Authentication.LoginBL._instance;
                    }
                }
            },
            methods: {
                InitFCM: function (signout) {
                    if (signout === void 0) { signout = false; }
                    System.Console.WriteLine("Init fcm");
                    var tanentCode = Core.Clients.Client.Token.TenantCode.toUpperCase();
                    var strUserId = System.String.format("U{0:0000000}", [Bridge.box(Core.Clients.Client.Token.UserId, System.Int32)]);
                    if (typeof(PushNotification) === 'undefined') return;
                    var topics = ['/topics/' + tanentCode + strUserId];
                    const push = PushNotification.init({
                        android: {
                            senderID: '9681598079',
                            topics: topics
                        },
                        ios: {
                            alert: "true",
                            badge: "true",
                            sound: "true",
                            topics: topics
                        },
                    });
                    if (signout && push.unregister) {
                        push.unregister();
                        return;
                    }
                    push.on('registration', (data) => {
                    });
                    push.on('notification', (data) => {
                        if (typeof(cordova) !== 'undefined' &&
                            typeof(cordova.plugins) !== 'undefined' &&
                            typeof(cordova.plugins.notification) !== 'undefined') {
                            cordova.plugins.notification.local.schedule({
                                title: data.title,
                                text: data.message,
                                foreground: true,
                            });
                        }
                        // data.message,
                        // data.title,
                        // data.count,
                        // data.sound,
                        // data.image,
                        // data.additionalData
                    });

                    push.on('error', (e) => {
                        // e.message
                    });
                },
                DiposeAll: function () {
                    var $t;
                    while (Core.Components.Forms.TabEditor.Tabs.Count > 0) {
                        ($t = Core.Components.Forms.TabEditor.Tabs.getItem(0)) != null ? $t.Dispose() : null;
                    }
                    if (Core.Fw.Authentication.LoginBL.MenuComponent != null) {
                        Core.Fw.Authentication.LoginBL.MenuComponent.Dispose();
                    }

                    if (Core.Fw.Authentication.LoginBL.TaskList != null) {
                        Core.Fw.Authentication.LoginBL.TaskList.Dispose();
                    }

                    Core.Fw.Authentication.LoginBL.MenuComponent = null;
                    Core.Fw.Authentication.LoginBL.TaskList = null;
                }
            }
        },
        fields: {
            _renderAwaiter: 0
        },
        props: {
            LoginEntity: {
                get: function () {
                    return Bridge.as(this.Entity, Core.ViewModels.LoginVM);
                }
            },
            /**
             * This action is invoke after the user get signed in
             *
             * @instance
             * @public
             * @memberof Core.Fw.Authentication.LoginBL
             * @function SignedInHandler
             * @type System.Action
             */
            SignedInHandler: null,
            /**
             * This action is invoked when the app is initial
             *
             * @instance
             * @public
             * @memberof Core.Fw.Authentication.LoginBL
             * @function InitAppHanlder
             * @type System.Action
             */
            InitAppHanlder: null,
            /**
             * This action is invoked after user signed in or the token is refreshed
             *
             * @instance
             * @public
             * @memberof Core.Fw.Authentication.LoginBL
             * @function TokenRefreshedHandler
             * @type System.Action
             */
            TokenRefreshedHandler: null
        },
        ctors: {
            ctor: function () {
                var $t, $t1, $t2;
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "User");
                this.Entity = ($t = new Core.ViewModels.LoginVM(), $t.CompanyName = ($t1 = (($t2 = window.localStorage.getItem("Tanent")) != null ? Bridge.toString($t2) : null), $t1 != null ? $t1 : "Softek"), $t.AutoSignIn = true, $t);
                this.Name = "Login";
                this.Title = "\u0110\u0103ng nh\u1eadp";
                window.addEventListener("beforeunload", function () {
                    Core.Components.Forms.EditForm.NotificationClient != null ? Core.Components.Forms.EditForm.NotificationClient.Close() : null;
                });
                this.Public = true;
            }
        },
        methods: {
            Render: function () {
                var oldToken = Core.Clients.Client.Token;
                if (oldToken == null || System.DateTime.lte(oldToken.RefreshTokenExp, Core.Clients.Client.EpsilonNow)) {
                    this.RenderLoginForm();
                } else if (System.DateTime.gt(oldToken.AccessTokenExp, Core.Clients.Client.EpsilonNow)) {
                    this.InitAppIfEmpty();
                } else if (System.DateTime.gt(oldToken.RefreshTokenExp, Core.Clients.Client.EpsilonNow)) {
                    System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                        var $step = 0,
                            $task1, 
                            $taskResult1, 
                            $jumpFromFinally, 
                            $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                            $returnValue, 
                            $async_e, 
                            $asyncBody = Bridge.fn.bind(this, function () {
                                try {
                                    for (;;) {
                                        $step = System.Array.min([0,1], $step);
                                        switch ($step) {
                                            case 0: {
                                                $task1 = Core.Clients.Client.RefreshToken(Bridge.fn.bind(this, function (newToken) {
                                                        this.InitAppIfEmpty();
                                                    }));
                                                    $step = 1;
                                                    if ($task1.isCompleted()) {
                                                        continue;
                                                    }
                                                    $task1.continue($asyncBody);
                                                    return;
                                            }
                                            case 1: {
                                                $taskResult1 = $task1.getAwaitedResult();
                                                $tcs.setResult($taskResult1);
                                                    return;
                                            }
                                            default: {
                                                $tcs.setResult(null);
                                                return;
                                            }
                                        }
                                    }
                                } catch($async_e1) {
                                    $async_e = System.Exception.create($async_e1);
                                    $tcs.setException($async_e);
                                }
                            }, arguments);

                        $asyncBody();
                        return $tcs.task;
                    }));
                }
            },
            RenderLoginForm: function (formName) {
                if (formName === void 0) { formName = "Login"; }
                window.clearTimeout(this._renderAwaiter);
                this._renderAwaiter = window.setTimeout(Bridge.fn.bind(this, function () {
                    var $t;
                    if (this._backdrop != null) {
                        document.body.appendChild(this._backdrop);
                        Core.Extensions.HtmlElementExtension.Show(this._backdrop);
                        return;
                    }
                    this._backdrop = Core.Components.Renderer.TabIndex(Core.Components.Renderer.ClassName(Core.MVVM.Html.Take(document.body).Div, "modal is-open"), -1).Event$1("keypress", Bridge.fn.cacheBind(this, this.KeyCodeEnter)).GetContext();
                    Core.Components.Renderer.ClassName(Core.Components.Renderer.IText(Core.Components.Renderer.ClassName(Core.Components.Renderer.IText(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.IText(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.IText(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.IText(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.IText(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.IText(Core.Components.Renderer.ClassName(Core.Components.Renderer.IText(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.MVVM.Html.Instance.Div, "modal-container").Button, "fa fa-times").Event("click", Bridge.fn.cacheBind(this, this.Dispose)).End.Div, "modal-left").H1, "modal-title"), "Welcome!").End.P, "modal-desc"), "Administrator management!").End.Div, "input-block").Label, "input-label"), "Company name").End.Input.Id("CompanyName").Event$1("input", Bridge.fn.bind(this, function (e) {
                        this.LoginEntity.CompanyName = Bridge.cast(e.target, HTMLInputElement).value;
                    })).Attr$1("name", "CompanyName").Value(this.LoginEntity.CompanyName).Type$1("text").End.End.Div, "input-block").Label, "input-label"), "User name").End.Input.Event$1("input", Bridge.fn.bind(this, function (e) {
                        this.LoginEntity.UserName = Bridge.cast(e.target, HTMLInputElement).value;
                    })).Attr$1("name", "UserName").Value(this.LoginEntity.UserName).Type$1("text").End.End.Div, "input-block").Label, "input-label"), "Password").End.Input.Event$1("input", Bridge.fn.bind(this, function (e) {
                        this.LoginEntity.Password = Bridge.cast(e.target, HTMLInputElement).value;
                    })).Attr$1("name", "Password").Value(this.LoginEntity.Password).Type$1("password").End.End.Div, "input-block").Label, "input-label"), "Auto signin").End.Label, "checkbox input-small transition-on style2").Checkbox(this.LoginEntity.AutoSignIn).Event$1("input", Bridge.fn.bind(this, function (e) {
                        this.LoginEntity.AutoSignIn = Bridge.cast(e.target, HTMLInputElement).checked;
                    })).Attr$1("name", "AutoSignIn").Attr$1("name", "AutoSignIn").End.Span, "check myCheckbox").End.End.End.Div, "modal-buttons").A.Href(""), "Forgot your password?").End.Button.Id("btnLogin").Event("click", Bridge.fn.bind(this, function () {
                        var $step = 0,
                            $task1, 
                            $taskResult1, 
                            $jumpFromFinally, 
                            $asyncBody = Bridge.fn.bind(this, function () {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = this.Login(this.LoginEntity);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            return;
                                        }
                                        default: {
                                            return;
                                        }
                                    }
                                }
                            }, arguments);

                        $asyncBody();
                    })), "input-button"), "Login").End.End.End.Div, "modal-right").Img.Src("../image/bg-launch.jpg").End.Render();
                    ($t = (Bridge.as(this._backdrop.querySelector("#CompanyName"), HTMLInputElement))) != null ? $t.focus() : null;
                }), 100);
            },
            KeyCodeEnter: function (e) {
                switch (Core.Extensions.EventExt.KeyCode(e)) {
                    case Core.Enums.KeyCodeEnum.Enter: 
                        e.preventDefault();
                        document.getElementById("btnLogin").click();
                        break;
                    case Core.Enums.KeyCodeEnum.Escape: 
                        this.Dispose();
                        break;
                }
            },
            Login: function (login) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    isValid, 
                    res, 
                    $async_e, 
                    $t, 
                    $t1, 
                    $t2, 
                    $async_e1, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.IsFormValid();
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        isValid = $taskResult1;
                                        if (!isValid) {
                                            $tcs.setResult(false);
                                            return;
                                        }
                                        login.RecoveryToken = Core.Extensions.Utils.GetUrlParam("recovery");
                                        res = null;
                                        $step = 2;
                                        continue;
                                    }
                                    case 2: {
                                        $task2 = this.Client.CreateAsync(Core.ViewModels.Token, login, "SignIn?t=" + (login.CompanyName || ""));
                                        $step = 3;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        res = $taskResult2;
                                        $step = 5;
                                        continue;
                                    }
                                    case 4: {
                                        $async_e = null;
                                        $step = 5;
                                        continue;
                                    }
                                    case 5: {
                                        if (!login.AutoSignIn) {
                                            login.Password = "";
                                        }
                                        if (res == null) {
                                            Core.Extensions.Toast.Warning("T\u00ean \u0111\u0103ng nh\u1eadp ho\u1eb7c m\u1eadt kh\u1ea9u kh\u00f4ng ch\u00ednh x\u00e1c!");
                                        } else {
                                            Core.Extensions.Toast.Success(System.String.format("Xin ch\u00e0o {0}!", [res.FullName]));
                                            Core.Clients.Client.Token = res;
                                            login.UserName = "";
                                            window.localStorage.setItem("Tanent", login.CompanyName);
                                            ($t = Core.Components.Forms.EditForm.LayoutForm) != null ? $t.UpdateView() : null;
                                            // InitAppIfEmpty();
                                            Core.Fw.Authentication.LoginBL.InitFCM();
                                            !Bridge.staticEquals(($t1 = this.SignedInHandler), null) ? $t1(Core.Clients.Client.Token) : null;
                                            Core.Clients.Client.SignOutEventHandler = function () {
                                                Core.Fw.Authentication.LoginBL.InitFCM(false);
                                            };
                                            this.Dispose();
                                        }
                                        ($t2 = Core.Components.Extensions.ComponentExt.FindComponentByName(Core.Components.Section, this, "Form")) != null ? $t2.UpdateView() : null;

                                        $tcs.setResult(true);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            if ( $step >= 2 && $step <= 3 ) {
                                $step = 4;
                                $asyncBody();
                                return;
                            }
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ForgotPassword: function (login) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    res, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.Client.PostAsync(System.Nullable$1(System.Boolean), login, "ForgotPassword");
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        res = $taskResult1;
                                        if (res == null || !System.Nullable.getValue(res)) {
                                            Core.Extensions.Toast.Warning("An error occurs. Please contact the administrator to get your password!");
                                        } else {
                                            Core.Extensions.Toast.Success(System.String.format("A recovery email has been sent to your email address. Please check and follow the steps in the email!", null));
                                        }
                                        $tcs.setResult(true);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            InitAppIfEmpty: function () {
                var $t, $t1;
                Core.Clients.Client.SystemRole = Core.Clients.Client.Token.RoleIds.contains(Core.Enums.RoleEnum.System);
                ($t = Core.Components.Forms.EditForm.LayoutForm) != null ? $t.UpdateView() : null;
                if (Core.Fw.Authentication.LoginBL._initApp || Core.Components.Forms.EditForm.Portal) {
                    return;
                }
                Core.Fw.Authentication.LoginBL._initApp = true;
                !Bridge.staticEquals(($t1 = this.InitAppHanlder), null) ? $t1(Core.Clients.Client.Token) : null;
                var userId = Core.Clients.Client.Token.UserId;
                if (Core.Components.Forms.EditForm.NotificationClient == null) {
                    Core.Components.Forms.EditForm.NotificationClient = new Core.Clients.WebSocketClient("task");
                }

                if (Core.Fw.Authentication.LoginBL.MenuComponent == null) {
                    Core.Fw.Menu.Instance.Render();
                }
                if (Core.Fw.Authentication.LoginBL.TaskList == null) {
                    Core.Fw.Authentication.LoginBL.TaskList = this.InitNotification();
                    Core.Fw.Authentication.LoginBL.TaskList.Render();
                    Core.Fw.Authentication.LoginBL.TaskList.DOMContentLoaded = Bridge.fn.combine(Core.Fw.Authentication.LoginBL.TaskList.DOMContentLoaded, function () {
                        document.getElementById("name-user").textContent = Core.Clients.Client.Token.UserName;
                        document.getElementById("Username-text").textContent = Core.Clients.Client.Token.FullName;
                        document.getElementById("text-address").textContent = Core.Clients.Client.Token.Address;
                        Core.MVVM.Html.Take$1("#user-image").Src("./image/" + (Core.Clients.Client.Token.Avatar || ""));
                        Core.MVVM.Html.Take$1("#img-detail").Src("./image/" + (Core.Clients.Client.Token.Avatar || ""));
                    });
                }
            },
            InitNotification: function () {
                return Core.Notifications.NotificationBL.Instance;
            },
            Dispose: function () {
                Core.Extensions.HtmlElementExtension.Hide(this._backdrop);
            }
        }
    });

    Bridge.define("Core.Fw.Authentication.PolicyEditorBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "FeaturePolicy");
                this.Name = "PolicyEditor";
                this.Title = "Policy detail";
            }
        }
    });

    Bridge.define("Core.Fw.Setting.EntityDetailBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "Entity");
                this.Entity = new Core.Models.Entity();
                this.Name = "Entity Detail";
                this.Title = "Entity Detail";
            }
        }
    });

    Bridge.define("Core.Fw.Setting.GridPolicyDetailBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "GridPolicy");
                this.Entity = new Core.Models.GridPolicy();
                this.Name = "GridDetail";
                this.Title = "Grid Detail";
            }
        }
    });

    Bridge.define("Core.Fw.Setting.MasterDataDetailsBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        props: {
            masEntity: {
                get: function () {
                    return Bridge.as(this.Entity, Core.Models.MasterData);
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "MasterData");
                this.Name = "MasterData Detail";
                this.Title = "MasterData Detail";
                this.Entity = new Core.Models.MasterData();
            }
        }
    });

    Bridge.define("Core.Fw.Setting.RoleDetailBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "Role");
                this.Entity = new Core.Models.Role();
                this.Name = "Role Detail";
                this.Title = "Chi ti\u1ebft lo\u1ea1i quy\u1ec1n h\u1ea1n";
            }
        }
    });

    Bridge.define("Core.Fw.User.ChangePasswordBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "User");
                this.Name = "ChangePassword";
                this.Entity = new Core.ViewModels.UserProfileVM();
            }
        },
        methods: {
            Save: function (entity) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    vm, 
                    saved, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        vm = Bridge.as(this.Entity, Core.ViewModels.UserProfileVM);
                                        Core.Extensions.ReflectionExt.ClearReferences(vm);
                                        $task1 = this.Client.UpdateAsync(System.Boolean, vm, "UpdateProfile");
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        saved = $taskResult1;
                                        if (saved) {
                                            Core.Extensions.Toast.Success("Update profile succeeded!");
                                        } else {
                                            Core.Extensions.Toast.Warning("Update profile failed!");
                                        }
                                        $tcs.setResult(saved);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("Core.Fw.User.RegistrationBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        props: {
            VM: {
                get: function () {
                    return Bridge.as(this.Entity, Core.ViewModels.RegistrationVM);
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "User");
                this.Entity = new Core.ViewModels.RegistrationVM();
                this.Name = "Registration";
                this.Title = this.Name;
                this.Public = true;
            }
        },
        methods: {
            Register: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    isValid, 
                    result, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.IsFormValid();
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        isValid = $taskResult1;
                                        if (!isValid) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        $task2 = this.Client.PostAsync(System.Boolean, this.VM, "Register", true);
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        result = $taskResult2;
                                        if (result) {
                                            this.ShowDialog();
                                        }
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ShowDialog: function () {
                var $t;
                this._confirm = ($t = new Core.Components.Forms.ConfirmDialog(), $t.Content = (System.String.format("B\u1ea1n \u0111\u00e3 \u0111\u0103ng k\u00fd th\u00e0nh c\u00f4ng, 1 email \u0111\u00e3 \u0111\u01b0\u1ee3c g\u1edfi v\u00e0o \u0111\u1ecba ch\u1ec9 {0}.<br />", [this.VM.Email]) || "") + (System.String.format("Vui l\u00f2ng ki\u1ec3m tra email \u0111\u1ec3 x\u00e1c nh\u1eadn vi\u1ec7c \u0111\u0103ng k\u00fd.<br />", null) || "") + (System.String.format("Email g\u1edfi \u0111\u1ebfn c\u00f3 th\u1ec3 n\u1eb1m trong th\u00f9ng r\u00e1c.<br />", null) || "") + (System.String.format("Xin l\u01b0u \u00fd, duy\u1ec7t t\u00e0i kho\u1ea3n c\u1ee7a b\u1ea1n c\u00f3 th\u1ec3 di\u1ec5n ra trong 1 - 3 ng\u00e0y l\u00e0m vi\u1ec7c.", null) || ""), $t);
                this._confirm.YesText = "\u0110\u1ed3ng \u00fd";
                this._confirm.YesConfirmed = Bridge.fn.combine(this._confirm.YesConfirmed, Bridge.fn.cacheBind(this, this.Dispose));
                this._confirm.Canceled = Bridge.fn.combine(this._confirm.Canceled, Bridge.fn.cacheBind(this, this.Dispose));
                this._confirm.IgnoreNoButton = true;
                this._confirm.Render();
            },
            Dispose: function () {
                this._confirm != null ? this._confirm.Dispose() : null;
                Core.Components.Forms.PopupEditor.prototype.Dispose.call(this);
            }
        }
    });
});
