/**
 * @version 1.0.0.0
 * @copyright Copyright Â©  2019
 * @compiler Bridge.NET 17.10.1
 */
Bridge.assembly("TMS.UI", function ($asm, globals) {
    "use strict";

    Bridge.define("TMS.API.Enums.ApprovalEnum", {
        $kind: "enum",
        statics: {
            fields: {
                Approved: 1,
                New: 2,
                Rejected: 3,
                Approving: 4
            }
        }
    });

    Bridge.define("TMS.API.Enums.ContainerMovingTypeEnum", {
        $kind: "enum",
        statics: {
            fields: {
                Import: 2696,
                Export: 2697,
                PortTransferEmpty: 2698,
                D2D: 2874,
                PortTransferCont: 2885,
                WareHouse: 2699
            }
        }
    });

    Bridge.define("TMS.API.Enums.CoorDetailReportTypeEnum", {
        $kind: "enum",
        statics: {
            fields: {
                Day: 1,
                Month: 2,
                Year: 3
            }
        }
    });

    Bridge.define("TMS.API.Enums.CoordinationTypeEnum", {
        $kind: "enum",
        statics: {
            fields: {
                Assembly: 2710
            }
        }
    });

    Bridge.define("TMS.API.Enums.FreightStateEnum", {
        $kind: "enum",
        statics: {
            fields: {
                New: 7555,
                Quotation: 7556,
                Delivering: 7557,
                Delivered: 7558,
                Paid: 7559,
                Cancel: 7560
            }
        }
    });

    Bridge.define("TMS.API.Enums.StatusPayslipEnum", {
        $kind: "enum",
        statics: {
            fields: {
                CloseToBookBank: 571
            }
        }
    });

    Bridge.define("TMS.API.Enums.StopType", {
        $kind: "enum",
        statics: {
            fields: {
                AnchorTruck: 3042,
                AnchorTrailer: 3043,
                UnAnchorTruck: 3044,
                UnAnchorTrailer: 3045,
                CutTrailer: 3059
            }
        }
    });

    Bridge.define("TMS.API.Enums.TerminalTypeEnum", {
        $kind: "enum",
        statics: {
            fields: {
                Depot: 3035,
                Fac: 3036,
                ICD: 3034,
                Port: 3033
            }
        }
    });

    Bridge.define("TMS.API.Enums.TruckTypeEnum", {
        $kind: "enum",
        statics: {
            fields: {
                Truck: 65,
                Tractor: 66,
                Trailer: 1572
            }
        }
    });

    Bridge.define("TMS.API.Enums.VendorService", {
        $kind: "enum",
        statics: {
            fields: {
                Packing: 7572,
                Return: 7573
            }
        }
    });

    Bridge.define("TMS.API.Enums.VendorTypeEnum", {
        $kind: "enum",
        statics: {
            fields: {
                Partner: 7552,
                Boss: 7551
            }
        }
    });

    Bridge.define("TMS.API.Enums.WareHouseTypeEnum", {
        $kind: "enum",
        statics: {
            fields: {
                Import: 7563,
                Check: 7564
            }
        }
    });

    Bridge.define("TMS.API.Models.Allotment", {
        props: {
            Id: 0,
            ExpenseTypeId: null,
            IsFull: false,
            UnitPrice: System.Decimal(0.0),
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null,
            BranchId: null,
            IsVat: false,
            IsCollectOnBehaft: false,
            Notes: null,
            Expense: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            },
            ctor: function () {
                this.$initialize();
                this.Expense = new (System.Collections.Generic.HashSet$1(TMS.API.Models.Expense)).ctor();
            }
        }
    });

    Bridge.define("TMS.API.Models.ApprovalConfig", {
        props: {
            Id: 0,
            Level: 0,
            Description: null,
            UserId: null,
            RoleId: null,
            DataSource: null,
            EntityId: 0,
            WorkflowId: null,
            MinAmount: System.Decimal(0.0),
            MaxAmount: null,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null,
            RoleLevel: null,
            IsSameCostCenter: false,
            IsSupervisor: false,
            CostCenterId: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            }
        }
    });

    Bridge.define("TMS.API.Models.Approvement", {
        props: {
            Id: 0,
            ReasonOfChange: null,
            EntityId: null,
            LevelName: null,
            RecordId: null,
            StatusId: null,
            Amount: System.Decimal(0.0),
            UserApproveId: 0,
            IsEnd: false,
            NextLevel: null,
            CurrentLevel: 0,
            Approved: false,
            ApprovedBy: null,
            ApprovedDate: null,
            RejectBy: null,
            RejectDate: null,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            }
        }
    });

    Bridge.define("TMS.API.Models.BankAccount", {
        props: {
            Id: 0,
            Name: null,
            BankNo: null,
            Address: null,
            City: null,
            AccountantId: null,
            ObjectId: null,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            }
        }
    });

    Bridge.define("TMS.API.Models.Booking", {
        props: {
            Id: 0,
            BranchId: null,
            BrandShipId: null,
            ShipId: null,
            RouteId: null,
            LineId: null,
            Trip: null,
            BookingNo: null,
            StartShip: null,
            PickupEmptyId: null,
            PortLoadingId: null,
            TeusId: null,
            Teus20: System.Decimal(0.0),
            Teus40: System.Decimal(0.0),
            Teus20Using: System.Decimal(0.0),
            Teus40Using: System.Decimal(0.0),
            Teus20Remain: System.Decimal(0.0),
            Teus40Remain: System.Decimal(0.0),
            BookingExpired: null,
            PackingMethodId: null,
            Note: null,
            Note1: null,
            Note2: null,
            Note3: null,
            Note4: null,
            Files: null,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null,
            Ship: null,
            TotalDate: {
                get: function () {
                    return System.Decimal(Bridge.equals(System.Convert.toDateTime(Bridge.box(this.BookingExpired, System.DateTime, System.Nullable.toStringFn(System.DateTime.format), System.Nullable.getHashCode)), null) ? 0 : (System.DateTime.subdd(System.Convert.toDateTime(Bridge.box(this.BookingExpired, System.DateTime, System.Nullable.toStringFn(System.DateTime.format), System.Nullable.getHashCode)), System.Convert.toDateTime(Bridge.box(System.DateTime.getNow(), System.DateTime, System.DateTime.format)))).getTotalHours(), null, System.Double);
                }
            },
            IsLock: {
                get: function () {
                    return !Bridge.equals(System.Convert.toDateTime(Bridge.box(this.BookingExpired, System.DateTime, System.Nullable.toStringFn(System.DateTime.format), System.Nullable.getHashCode)), null) && System.DateTime.lt(System.Convert.toDateTime(Bridge.box(this.BookingExpired, System.DateTime, System.Nullable.toStringFn(System.DateTime.format), System.Nullable.getHashCode)), System.Convert.toDateTime(Bridge.box(System.DateTime.getNow(), System.DateTime, System.DateTime.format)));
                }
            }
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            }
        }
    });

    Bridge.define("TMS.API.Models.BookingList", {
        props: {
            Id: 0,
            Month: null,
            Year: null,
            RouteId: null,
            BrandShipId: null,
            ExportListId: null,
            ShipId: null,
            LineId: null,
            SocId: null,
            Trip: null,
            StartShip: null,
            ContainerTypeId: null,
            PolicyId: null,
            Count: null,
            ShipUnitPrice: System.Decimal(0.0),
            ShipPrice: System.Decimal(0.0),
            ShipPolicyPrice: System.Decimal(0.0),
            OrtherFeePrice: System.Decimal(0.0),
            TotalFee: null,
            Note: null,
            InvNo: null,
            InvDate: null,
            PaymentDate: null,
            PaymentMethodId: null,
            Note1: null,
            Submit: false,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null,
            TotalPrice: null,
            ActShipPrice: System.Decimal(0.0),
            FromDate: null,
            ToDate: null,
            TransportationIds: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            }
        }
    });

    Bridge.define("TMS.API.Models.BrandShip", {
        props: {
            Id: 0,
            BranchId: null,
            ShipId: null,
            Code: null,
            OldCode: null,
            Name: null,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            }
        }
    });

    Bridge.define("TMS.API.Models.CheckFeeHistory", {
        props: {
            Id: 0,
            ClosingId: null,
            FromDate: null,
            ToDate: null,
            TypeId: null,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null,
            RouteIds: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            }
        }
    });

    Bridge.define("TMS.API.Models.CommodityValue", {
        props: {
            Id: 0,
            SaleId: null,
            BossId: null,
            CommodityId: null,
            ContainerId: null,
            TotalPrice: System.Decimal(0.0),
            IsWet: false,
            StartDate: null,
            EndDate: null,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null,
            Notes: null,
            IsBought: false,
            CustomerTypeId: null,
            JourneyId: null,
            SteamingTerms: false,
            BreakTerms: false,
            CreatedBy: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            }
        }
    });

    Bridge.define("TMS.API.Models.Component", {
        props: {
            Id: 0,
            FieldName: null,
            Order: null,
            ComponentType: null,
            ComponentGroupId: 0,
            DataSourceFilter: null,
            ReferenceId: null,
            FormatData: null,
            FormatEntity: null,
            PlainText: null,
            Column: null,
            Offset: null,
            Row: null,
            CanSearch: false,
            CanCache: false,
            Precision: null,
            GroupBy: null,
            GroupFormat: null,
            Label: null,
            ShowLabel: false,
            Icon: null,
            ClassName: null,
            Style: null,
            ChildStyle: null,
            HotKey: null,
            RefClass: null,
            Events: null,
            Disabled: false,
            Visibility: false,
            Hidden: false,
            Validation: null,
            Focus: false,
            Width: null,
            PopulateField: null,
            CascadeField: null,
            GroupEvent: null,
            XsCol: null,
            SmCol: null,
            LgCol: null,
            XlCol: null,
            XxlCol: null,
            DefaultVal: null,
            DateTimeField: null,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null,
            RoleId: null,
            IgnoreSync: false,
            CanAdd: false,
            ShowAudit: false,
            IsPrivate: false,
            IdField: null,
            DescFieldName: null,
            DescValue: null,
            MonthCount: null,
            IsDoubleLine: null,
            Query: null,
            IsRealtime: false,
            RefName: null,
            TopEmpty: false,
            IsCollapsible: false,
            Template: null,
            System: null,
            PreQuery: null,
            DisabledExp: null,
            FocusSearch: false,
            IsSumary: false,
            FormatSumaryField: null,
            OrderBySumary: null,
            ShowHotKey: false,
            DefaultAddStart: null,
            DefaultAddEnd: null,
            UpperCase: null,
            VirtualScroll: null,
            Migration: null,
            ListClass: null,
            ExcelFieldName: null,
            LiteGrid: null,
            ShowDatetimeField: null,
            ShowNull: null,
            AddDate: null,
            ComponentGroup: null,
            Reference: null,
            EntityRef: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            },
            ctor: function () {
                this.$initialize();
                this.EntityRef = new (System.Collections.Generic.HashSet$1(TMS.API.Models.EntityRef)).ctor();
            }
        }
    });

    Bridge.define("TMS.API.Models.ComponentGroup", {
        props: {
            Id: 0,
            FeatureId: 0,
            Name: null,
            Label: null,
            Description: null,
            ClassName: null,
            IsTab: false,
            TabGroup: null,
            IsVertialTab: false,
            Responsive: false,
            Events: null,
            Width: null,
            Style: null,
            Column: 0,
            Row: 0,
            PolicyId: null,
            Hidden: false,
            ParentId: null,
            Order: null,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null,
            Disabled: false,
            XsCol: null,
            SmCol: null,
            LgCol: null,
            XlCol: null,
            XxlCol: null,
            OuterColumn: null,
            XsOuterColumn: null,
            SmOuterColumn: null,
            LgOuterColumn: null,
            XlOuterColumn: null,
            XxlOuterColumn: null,
            RoleId: null,
            Icon: null,
            IgnoreSync: false,
            IsPrivate: false,
            BadgeMonth: null,
            IsCollapsible: null,
            DisabledExp: null,
            IsDropDown: false,
            DefaultCollapsed: false,
            Feature: null,
            Parent: null,
            Component: null,
            InverseParent: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            },
            ctor: function () {
                this.$initialize();
                this.Component = new (System.Collections.Generic.HashSet$1(TMS.API.Models.Component)).ctor();
                this.InverseParent = new (System.Collections.Generic.HashSet$1(TMS.API.Models.ComponentGroup)).ctor();
            }
        }
    });

    Bridge.define("TMS.API.Models.Entity", {
        props: {
            Id: 0,
            Name: null,
            Description: null,
            AliasFor: null,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null,
            RefDetailClass: null,
            RefListClass: null,
            Component: null,
            Feature: null,
            GridPolicyEntity: null,
            GridPolicyReference: null,
            TaskNotification: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            },
            ctor: function () {
                this.$initialize();
                this.Component = new (System.Collections.Generic.HashSet$1(TMS.API.Models.Component)).ctor();
                this.Feature = new (System.Collections.Generic.HashSet$1(TMS.API.Models.Feature)).ctor();
                this.GridPolicyEntity = new (System.Collections.Generic.HashSet$1(TMS.API.Models.GridPolicy)).ctor();
                this.GridPolicyReference = new (System.Collections.Generic.HashSet$1(TMS.API.Models.GridPolicy)).ctor();
                this.TaskNotification = new (System.Collections.Generic.HashSet$1(TMS.API.Models.TaskNotification)).ctor();
            }
        }
    });

    Bridge.define("TMS.API.Models.EntityRef", {
        props: {
            Id: 0,
            ComId: null,
            HeaderId: null,
            SectionId: null,
            TargetComId: null,
            TargetFieldName: null,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null,
            MenuText: null,
            ViewClass: null,
            FieldName: null,
            Com: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            }
        }
    });

    Bridge.define("TMS.API.Models.ErrorLog", {
        props: {
            Id: 0,
            ErrorTypeId: null,
            CoordinationDetailId: null,
            AccountableUserId: null,
            AccountableVendorId: null,
            VendorId: null,
            VendorAmount: System.Decimal(0.0),
            Note: null,
            Credit: System.Decimal(0.0),
            CurrencyId: null,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null,
            AccountableUser: null,
            AccountableVendor: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            }
        }
    });

    Bridge.define("TMS.API.Models.Expense", {
        props: {
            Id: 0,
            TransportationId: null,
            ExpenseTypeId: null,
            Quantity: System.Decimal(0.0),
            UnitPrice: System.Decimal(0.0),
            Vat: System.Decimal(0.0),
            IsVat: false,
            IsCollectOnBehaft: false,
            TotalPriceBeforeTax: System.Decimal(0.0),
            TotalPriceAfterTax: System.Decimal(0.0),
            Notes: null,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null,
            BranchId: null,
            AllotmentId: null,
            IsReturn: false,
            RouteId: null,
            ShipId: null,
            Trip: null,
            StartShip: null,
            ContainerTypeId: null,
            ContainerNo: null,
            SealNo: null,
            BossId: null,
            CommodityId: null,
            TransportationTypeId: null,
            IsWet: false,
            CommodityId2: null,
            IsBought: false,
            InsuranceFeeNotes: null,
            CustomerTypeId: null,
            IsPurchasedInsurance: false,
            InsuranceFeeRate: null,
            DatePurchasedInsurance: null,
            JourneyId: null,
            CommodityValueNotes: null,
            ClosingId: null,
            SaleId: null,
            IsCompany: false,
            CommodityValue: null,
            NotesInsuranceFees: null,
            IsClosing: false,
            RequestChangeId: null,
            StatusId: null,
            isDelete: false,
            SteamingTerms: false,
            BreakTerms: false,
            ClosingDate: null,
            ReturnDate: null,
            Cont20: System.Decimal(0.0),
            Cont40: System.Decimal(0.0),
            ReceivedId: null,
            Reason: null,
            MonthText: null,
            YearText: null,
            IsApproveChange: false,
            IsHasChange: false,
            Allotment: null,
            Transportation: null,
            FromDate: null,
            ToDate: null,
            TransportationIds: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            }
        }
    });

    Bridge.define("TMS.API.Models.Feature", {
        props: {
            Id: 0,
            Name: null,
            Label: null,
            ParentId: null,
            Order: null,
            ClassName: null,
            Style: null,
            StyleSheet: null,
            Script: null,
            Events: null,
            Icon: null,
            IsDevider: false,
            IsGroup: false,
            IsMenu: false,
            IsPublic: false,
            StartUp: false,
            ViewClass: null,
            EntityId: null,
            Description: null,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null,
            IsSystem: false,
            IgnoreEncode: false,
            RequireJS: null,
            GuiInfo: null,
            RoleId: 0,
            IsPermissionInherited: false,
            FeatureGroup: null,
            InheritParentFeature: false,
            Properties: null,
            Template: null,
            LayoutId: null,
            DataSource: null,
            Gallery: null,
            Entity: null,
            Parent: null,
            ComponentGroup: null,
            FeaturePolicy: null,
            GridPolicy: null,
            InverseParent: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            },
            ctor: function () {
                this.$initialize();
                this.ComponentGroup = new (System.Collections.Generic.HashSet$1(TMS.API.Models.ComponentGroup)).ctor();
                this.FeaturePolicy = new (System.Collections.Generic.HashSet$1(TMS.API.Models.FeaturePolicy)).ctor();
                this.GridPolicy = new (System.Collections.Generic.HashSet$1(TMS.API.Models.GridPolicy)).ctor();
                this.InverseParent = new (System.Collections.Generic.HashSet$1(TMS.API.Models.Feature)).ctor();
            }
        }
    });

    Bridge.define("TMS.API.Models.FeaturePolicy", {
        props: {
            Id: 0,
            FeatureId: null,
            RoleId: null,
            CanRead: false,
            CanWrite: false,
            CanDelete: false,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null,
            CanDeactivate: false,
            LockDeleteAfterCreated: null,
            LockUpdateAfterCreated: null,
            EntityId: null,
            RecordId: 0,
            UserId: null,
            CanShare: false,
            Desc: null,
            CanDeleteAll: false,
            CanWriteAll: false,
            Feature: null,
            Role: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            }
        }
    });

    Bridge.define("TMS.API.Models.FileUpload", {
        props: {
            Id: 0,
            SectionId: 0,
            RecordId: 0,
            FileName: null,
            FilePath: null,
            InsertedBy: 0,
            InsertedDate: null,
            UpdatedBy: null,
            UpdatedDate: null,
            FieldName: null,
            EntityName: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            }
        }
    });

    Bridge.define("TMS.API.Models.FreightRate", {
        props: {
            Id: 0,
            BossId: null,
            UserId: null,
            TransportationTypeId: null,
            ReceivedId: null,
            ReturnId: null,
            UnitPriceCont20: null,
            UnitPriceNoVatCont20: null,
            UnitPriceCont40: null,
            UnitPriceNoVatCont40: null,
            UnitPriceTon: null,
            UnitPriceNoVatTon: null,
            StartDate: null,
            EndDate: null,
            GCContainerType: null,
            Notes: null,
            RouteId: null,
            IsClosing: false,
            IsApproveClosing: false,
            IsChange: false,
            RequestChangeId: null,
            IsLocation: null,
            Reason: null,
            ContainerTypeId: null,
            RegionReceivedId: null,
            RegionReturnId: null,
            IsEmptyCombination: false,
            TypeId: null,
            ReceivedCVCUnitPrice: null,
            ReturnCVCUnitPrice: null,
            ReceivedUnitPriceMax: null,
            ReturnUnitPriceMax: null,
            ReceivedUnitPriceAVG: null,
            ReturnUnitPriceAVG: null,
            ShipUnitPriceMax: null,
            ShipUnitPriceAVG: null,
            ReceivedReturnUnitPriceMax: null,
            ReceivedReturnUnitPriceAVG: null,
            InsuranceFee: null,
            OrtherUnitPrice: null,
            ProfitUnitPrice: null,
            TotalPriceMax: null,
            TotalPriceAVG: null,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            }
        }
    });

    Bridge.define("TMS.API.Models.GridPolicy", {
        props: {
            Id: 0,
            UniqueId: null,
            FeatureId: null,
            EntityId: 0,
            FieldName: null,
            Order: null,
            GroupOrder: null,
            ShortDesc: null,
            Description: null,
            IsPivot: false,
            ReferenceId: null,
            FilterTemplate: null,
            RefClass: null,
            DataSource: null,
            GroupName: null,
            FormatCell: null,
            FormatRow: null,
            PlainText: null,
            Width: null,
            MinWidth: null,
            MaxWidth: null,
            Precision: null,
            Validation: null,
            TextAlign: null,
            Frozen: false,
            Hidden: false,
            Events: null,
            ClassName: null,
            Style: null,
            ChildStyle: null,
            Icon: null,
            AdvancedSearch: false,
            HasFilter: false,
            Editable: false,
            Disabled: false,
            ComponentType: null,
            PopulateField: null,
            CascadeField: null,
            Summary: null,
            SummaryColSpan: null,
            ComponentId: null,
            DefaultVal: null,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null,
            RoleId: null,
            IgnoreSync: false,
            AutoFit: false,
            IsPrivate: false,
            BasicSearch: false,
            FormatExcell: null,
            Query: null,
            RefName: null,
            DisabledExp: null,
            FocusSearch: false,
            Template: null,
            System: null,
            UpperCase: null,
            VirtualScroll: null,
            DisplayNone: false,
            Migration: null,
            ListClass: null,
            IsExport: false,
            OrderExport: null,
            GroupBy: null,
            GroupFormat: null,
            IsSumary: null,
            ExcelFieldName: null,
            Row: null,
            Entity: null,
            Feature: null,
            Reference: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            }
        }
    });

    Bridge.define("TMS.API.Models.History", {
        props: {
            Id: System.Int64(0),
            TanentCode: null,
            EntityId: 0,
            RecordId: 0,
            ReasonOfChange: null,
            JsonHistory: null,
            TextHistory: null,
            ValueText: null,
            OldValueText: null,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            }
        }
    });

    Bridge.define("TMS.API.Models.ImageEntity", {
        props: {
            Id: 0,
            TypeId: null,
            Order: null,
            EntityId: null,
            RecordId: null,
            Url: null,
            Link: null,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            }
        }
    });

    Bridge.define("TMS.API.Models.Images", {
        props: {
            Id: 0,
            Name: null,
            Size: null,
            Url: null,
            IsAvatar: false,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            }
        }
    });

    Bridge.define("TMS.API.Models.InsuranceFeesRate", {
        props: {
            Id: 0,
            TransportationTypeId: null,
            IsWet: false,
            JourneyId: null,
            IsBought: false,
            IsVAT: null,
            IsSOC: null,
            Rate: System.Decimal(0.0),
            IsSubRatio: false,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            }
        }
    });

    Bridge.define("TMS.API.Models.Ledger", {
        props: {
            Id: 0,
            Debit: null,
            Credit: null,
            OriginDebit: null,
            OriginCredit: null,
            CurrencyId: null,
            ExchangeRate: null,
            AccountTypeId: 0,
            InvoiceNo: null,
            InvoiceDate: null,
            InvoiceFormId: null,
            TypeId: null,
            EntityId: null,
            RecordId: null,
            FieldId: null,
            Note: null,
            Lock: false,
            CostCenterId: null,
            ParentId: null,
            Attachments: null,
            ObjectId: null,
            ObjectTypeId: null,
            DebitAccId: null,
            DebitAccNo: null,
            CreditAccId: null,
            CreditAccNo: null,
            OriginPriceBeforeTax: null,
            PriceBeforeTax: null,
            OriginPriceAfterTax: null,
            PriceAfterTax: null,
            SerialNo: null,
            Quantity: null,
            OriginUnitPrice: null,
            UnitPrice: null,
            Vat: null,
            OriginVatAmount: null,
            VatAmount: null,
            Taxcode: null,
            ItemsId: null,
            TaxExpenseItemsId: null,
            RouteId: null,
            DebitAccVatId: null,
            DebitAccVatNo: null,
            CreditAccVatId: null,
            CreditAccVatNo: null,
            Items: null,
            TaxVendor: null,
            BrandShipId: null,
            ShipId: null,
            ContainerTypeId: null,
            Trip: null,
            BillNo: null,
            BillDate: null,
            DepartmentId: null,
            IsMakeUp: false,
            OriginMakeUpPrice: null,
            MakeUpPrice: null,
            VatMakeUp: null,
            StartDate: null,
            EndDate: null,
            Address: null,
            VendorId: null,
            IsAllPaid: false,
            CaseId: null,
            BankNo: null,
            BankUserName: null,
            BankId: null,
            OriginTotalPrice: null,
            OriginRealTotalPrice: null,
            OriginReturnTotalPrice: null,
            BankName: null,
            Attach: null,
            UserId: null,
            BetDeadline: null,
            ObjectHasId: null,
            ContainerNo: null,
            SealNo: null,
            FixedAssetsId: null,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null,
            LedgerServiceInvoice: null,
            LedgerServiceTargetInvoice: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            },
            ctor: function () {
                this.$initialize();
                this.LedgerServiceInvoice = new (System.Collections.Generic.HashSet$1(TMS.API.Models.LedgerService)).ctor();
                this.LedgerServiceTargetInvoice = new (System.Collections.Generic.HashSet$1(TMS.API.Models.LedgerService)).ctor();
            }
        }
    });

    Bridge.define("TMS.API.Models.LedgerService", {
        props: {
            Id: 0,
            InvoiceId: null,
            TargetInvoiceId: null,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null,
            Invoice: null,
            TargetInvoice: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            }
        }
    });

    Bridge.define("TMS.API.Models.Location", {
        props: {
            Id: 0,
            BranchId: null,
            RegionId: null,
            ProvinceId: null,
            DistrictId: null,
            Name: null,
            Description: null,
            DescriptionEn: null,
            Lat: 0,
            Long: 0,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null,
            Click: null,
            Length: null,
            Description1: null,
            Description2: null,
            Description3: null,
            Description4: null,
            Description5: null,
            IsUse: null,
            ParentLocationId: null,
            LocationService: null,
            Quotation: null,
            VendorContact: null,
            VendorLocation: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            },
            ctor: function () {
                this.$initialize();
                this.LocationService = new (System.Collections.Generic.HashSet$1(TMS.API.Models.LocationService)).ctor();
                this.Quotation = new (System.Collections.Generic.HashSet$1(TMS.API.Models.Quotation)).ctor();
                this.VendorContact = new (System.Collections.Generic.HashSet$1(TMS.API.Models.VendorContact)).ctor();
                this.VendorLocation = new (System.Collections.Generic.HashSet$1(TMS.API.Models.VendorLocation)).ctor();
            }
        }
    });

    Bridge.define("TMS.API.Models.LocationService", {
        props: {
            Id: 0,
            LocationId: null,
            ServiceId: null,
            Description: null,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null,
            Location: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            }
        }
    });

    Bridge.define("TMS.API.Models.MasterData", {
        props: {
            Id: 0,
            Name: null,
            Description: null,
            ParentId: null,
            Path: null,
            Additional: null,
            Order: null,
            Enum: null,
            Level: 0,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null,
            InterDesc: null,
            CostCenterId: null,
            Code: null,
            Click: null,
            Length: null,
            Additional2: null,
            ActId: null,
            Parent: null,
            InverseParent: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            },
            ctor: function () {
                this.$initialize();
                this.InverseParent = new (System.Collections.Generic.HashSet$1(TMS.API.Models.MasterData)).ctor();
            }
        }
    });

    Bridge.define("TMS.API.Models.Odata", {
        props: {
            count: null
        }
    });

    Bridge.define("TMS.API.Models.OdataResult$1", function (T) { return {
        props: {
            odata: null,
            value: null,
            Value: {
                get: function () {
                    return Bridge.as(this.value, System.Collections.Generic.List$1(T)) || new (System.Collections.Generic.List$1(T)).ctor();
                }
            },
            Query: null,
            Sql: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                this.odata = new TMS.API.Models.Odata();
                this.value = new (System.Collections.Generic.List$1(T)).ctor();
            }
        }
    }; });

    Bridge.define("TMS.API.Models.Quotation", {
        props: {
            Id: 0,
            BranchId: null,
            TypeId: null,
            RouteId: null,
            ContainerTypeId: null,
            PackingId: null,
            BossId: null,
            LocationId: null,
            PolicyTypeId: null,
            UnitPrice: System.Decimal(0.0),
            UnitPrice1: System.Decimal(0.0),
            UnitPrice2: System.Decimal(0.0),
            StartDate: null,
            EndDate: null,
            Note: null,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null,
            QuotationUpdateId: null,
            UnitPrice3: System.Decimal(0.0),
            ParentId: null,
            IsParent: false,
            RegionId: null,
            DistrictId: null,
            ProvinceId: null,
            ExportListId: null,
            Parent: null,
            Location: null,
            QuotationUpdate: null,
            InverseParent: null,
            QuotationExpense: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            },
            ctor: function () {
                this.$initialize();
                this.QuotationExpense = new (System.Collections.Generic.HashSet$1(TMS.API.Models.QuotationExpense)).ctor();
                this.InverseParent = new (System.Collections.Generic.HashSet$1(TMS.API.Models.Quotation)).ctor();
            }
        }
    });

    Bridge.define("TMS.API.Models.QuotationExpense", {
        props: {
            Id: 0,
            BranchId: null,
            QuotationId: null,
            BrandShipId: null,
            ExpenseTypeId: null,
            VSC: null,
            ContainerTypeId: null,
            VS20UnitPrice: System.Decimal(0.0),
            VS40UnitPrice: System.Decimal(0.0),
            DOUnitPrice: System.Decimal(0.0),
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null,
            StartDate: null,
            RouteId: null,
            Quotation: null,
            QuotationExpenseRoute: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            },
            ctor: function () {
                this.$initialize();
                this.QuotationExpenseRoute = new (System.Collections.Generic.HashSet$1(TMS.API.Models.QuotationExpenseRoute)).ctor();
            }
        }
    });

    Bridge.define("TMS.API.Models.QuotationExpenseRoute", {
        props: {
            Id: 0,
            QuotationExpenseId: null,
            Route: null,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null,
            QuotationExpense: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            }
        }
    });

    Bridge.define("TMS.API.Models.QuotationService", {
        props: {
            Id: 0,
            QuotationId: null,
            ServiceId: null,
            Description: null,
            Active: false,
            InsertDate: null,
            InsertBy: 0,
            UpdateDate: null,
            UpdateBy: null
        },
        ctors: {
            init: function () {
                this.InsertDate = System.DateTime.getDefaultValue();
            }
        }
    });

    Bridge.define("TMS.API.Models.QuotationUpdate", {
        props: {
            PackingIds: null,
            Packing1Ids: null,
            BossIds: null,
            Boss1Ids: null,
            RegionIds: null,
            Region1Ids: null,
            Id: 0,
            IsAdd: false,
            ContainerId: null,
            StartDate: null,
            RegionId: null,
            UnitPrice: System.Decimal(0.0),
            TypeId: null,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null,
            Quotation: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            },
            ctor: function () {
                this.$initialize();
                this.Quotation = new (System.Collections.Generic.HashSet$1(TMS.API.Models.Quotation)).ctor();
            }
        }
    });

    Bridge.define("TMS.API.Models.ReturnPlan", {
        props: {
            Id: 0,
            StartDate: null,
            ShipDate: null,
            ReturnDate: null,
            ExpiredDate: null,
            NotifiNo: null,
            ShipId: null,
            Trip: null,
            ContNo: null,
            SealNo: null,
            BossId: null,
            SaleId: null,
            CommodityId: null,
            ContainerTypeId: null,
            Cont20: System.Decimal(0.0),
            Cont40: System.Decimal(0.0),
            LocationReturnId: null,
            Notes: null,
            BrandShipId: null,
            ReturnSupplierId: null,
            ReturnUserId: null,
            ReturnDriverId: null,
            ReturnTruckId: null,
            Dem: System.Decimal(0.0),
            IsKt: false,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            }
        }
    });

    Bridge.define("TMS.API.Models.Revenue", {
        props: {
            IsLotNo: false,
            IsLotDate: false,
            IsInvoinceNo: false,
            IsInvoinceDate: false,
            IsUnitPriceBeforeTax: false,
            IsUnitPriceAfterTax: false,
            IsReceivedPrice: false,
            IsCollectOnBehaftPrice: false,
            IsVat: false,
            IsTotalPriceBeforTax: false,
            IsVatPrice: false,
            IsTotalPrice: false,
            IsNotePayment: false,
            IsVendorVatId: false,
            IsAll: false,
            Id: 0,
            TransportationId: null,
            LotNo: null,
            LotDate: null,
            InvoinceNo: null,
            InvoinceDate: null,
            Vat: null,
            UnitPriceBeforeTax: null,
            UnitPriceAfterTax: null,
            ReceivedPrice: null,
            CollectOnBehaftPrice: null,
            TotalPriceBeforTax: null,
            VatPrice: null,
            TotalPrice: null,
            RevenueAdjustment: null,
            VendorVatId: null,
            NotePayment: null,
            Note: null,
            Name: null,
            BossId: null,
            ContainerNo: null,
            SealNo: null,
            ContainerTypeId: null,
            ClosingDate: null,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null,
            UserUpdate1: null,
            UserUpdate2: null,
            Transportation: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            }
        }
    });

    Bridge.define("TMS.API.Models.Role", {
        props: {
            Id: 0,
            VendorId: null,
            RoleName: null,
            Description: null,
            ParentRoleId: null,
            CostCenterId: null,
            Level: 0,
            Path: null,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null,
            AccRoleId: null,
            Length: null,
            ParentRole: null,
            FeaturePolicy: null,
            InverseParentRole: null,
            TaskNotification: null,
            UserRole: null,
            UserSetting: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            },
            ctor: function () {
                this.$initialize();
                this.FeaturePolicy = new (System.Collections.Generic.HashSet$1(TMS.API.Models.FeaturePolicy)).ctor();
                this.InverseParentRole = new (System.Collections.Generic.HashSet$1(TMS.API.Models.Role)).ctor();
                this.TaskNotification = new (System.Collections.Generic.HashSet$1(TMS.API.Models.TaskNotification)).ctor();
                this.UserRole = new (System.Collections.Generic.HashSet$1(TMS.API.Models.UserRole)).ctor();
                this.UserSetting = new (System.Collections.Generic.HashSet$1(TMS.API.Models.UserSetting)).ctor();
            }
        }
    });

    Bridge.define("TMS.API.Models.Route", {
        props: {
            Id: 0,
            ParentId: null,
            Code: null,
            Name: null,
            Used: System.Decimal(0.0),
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null,
            Click: null,
            Length: null,
            BranchId: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            }
        }
    });

    Bridge.define("TMS.API.Models.RouteUser", {
        props: {
            Id: 0,
            RouteId: null,
            UserId: null,
            Used: null,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            }
        }
    });

    Bridge.define("TMS.API.Models.SettingPolicy", {
        props: {
            Id: 0,
            BrandShipId: null,
            StartDate: null,
            EndDate: null,
            PolicyId: null,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null,
            UnitPrice: null,
            TypeId: null,
            TransportationTypeId: null,
            Name: null,
            ExportListId: null,
            CheckAll: false,
            SettingPolicyDetail: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            },
            ctor: function () {
                this.$initialize();
                this.SettingPolicyDetail = new (System.Collections.Generic.HashSet$1(TMS.API.Models.SettingPolicyDetail)).ctor();
            }
        }
    });

    Bridge.define("TMS.API.Models.SettingPolicyDetail", {
        props: {
            Id: 0,
            SettingPolicyId: null,
            ComponentId: null,
            OperatorId: null,
            Value: null,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null,
            SettingPolicy: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            }
        }
    });

    Bridge.define("TMS.API.Models.SettingTransportation", {
        props: {
            Id: 0,
            RouteId: null,
            BranchShipId: null,
            Day: null,
            StartDate: null,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            }
        }
    });

    Bridge.define("TMS.API.Models.Ship", {
        props: {
            Id: 0,
            BrandId: null,
            Code: null,
            OldCode: null,
            BrandShipId: null,
            Name: null,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null,
            Click: null,
            Length: null,
            ParentShipId: null,
            Booking: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            },
            ctor: function () {
                this.$initialize();
                this.Booking = new (System.Collections.Generic.HashSet$1(TMS.API.Models.Booking)).ctor();
            }
        }
    });

    Bridge.define("TMS.API.Models.TaskNotification", {
        props: {
            Id: 0,
            Title: null,
            Description: null,
            EntityId: null,
            RecordId: null,
            Deadline: null,
            StatusId: null,
            Attachment: null,
            AssignedId: null,
            RoleId: null,
            TimeConsumed: System.Decimal(0.0),
            TimeRemained: System.Decimal(0.0),
            Progress: System.Decimal(0.0),
            RemindBefore: null,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null,
            Badge: null,
            Entity: null,
            Role: null
        },
        ctors: {
            init: function () {
                this.Deadline = System.DateTime.getDefaultValue();
                this.InsertedDate = System.DateTime.getDefaultValue();
            }
        }
    });

    Bridge.define("TMS.API.Models.Teus", {
        props: {
            Id: 0,
            BrandShipId: null,
            ShipId: null,
            Trip: null,
            StartShip: null,
            Teus20: System.Decimal(0.0),
            Teus40: System.Decimal(0.0),
            Teus20Using: System.Decimal(0.0),
            Teus40Using: System.Decimal(0.0),
            Teus20Remain: System.Decimal(0.0),
            Teus40Remain: System.Decimal(0.0),
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null,
            Note: null,
            Note1: null,
            Note2: null,
            Note3: null,
            Note4: null,
            BranchId: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            }
        }
    });

    Bridge.define("TMS.API.Models.Transportation", {
        props: {
            FromDate: null,
            ToDate: null,
            RouteIds: null,
            ShipDateNew: null,
            PortLiftNewId: null,
            Id: 0,
            QuotationClosingId: null,
            QuotationReturnId: null,
            QuotationEmptyLiftId: null,
            QuotationLandingId: null,
            IsLocation: false,
            ExportListId: null,
            ExportListReturnId: null,
            RouteId: null,
            BookingId: null,
            TransportationPlanId: null,
            BrandShipId: null,
            LineId: null,
            ShipId: null,
            Trip: null,
            BillNo: null,
            ClosingDate: null,
            StartShip: null,
            ClosingId: null,
            SocId: null,
            SplitBill: null,
            IsEmptyCombination: false,
            EmptyCombinationId: null,
            EmptyId: null,
            IsClosingCustomer: false,
            ContainerTypeId: null,
            ContainerNo: null,
            SealNo: null,
            BossId: null,
            UserId: null,
            CommodityId: null,
            Cont20: System.Decimal(0.0),
            Cont40: System.Decimal(0.0),
            Weight: null,
            ReceivedId: null,
            ClosingNotes: null,
            ClosingUserId: null,
            ClosingDriverId: null,
            ClosingTruckId: null,
            PickupEmptyId: null,
            PortLoadingId: null,
            IsClampingFee: false,
            IsClampingReturnFee: false,
            ClosingUnitPrice: null,
            ClosingPercent: null,
            ClosingCombinationUnitPrice: null,
            IsEmptyLift: false,
            IsLanding: false,
            LiftFee: null,
            LandingFee: null,
            ClosingFee: null,
            CheckFee: null,
            CombinationFee: null,
            OrtherFee: null,
            OrtherFeeInvoinceNo: null,
            CollectOnBehaftFee: null,
            CollectOnBehaftInvoinceNoFee: null,
            InsuranceFee: null,
            TotalFee: null,
            ShipUnitPrice: null,
            ShipPolicyPrice: null,
            PolicyId: null,
            ShipPrice: null,
            ShipRoses: null,
            ShipNotes: null,
            LockShip: false,
            ShipDate: null,
            Dem: null,
            DemDate: null,
            LeftDate: null,
            ReturnDate: null,
            ClosingCont: null,
            ShellDate: null,
            ReturnId: null,
            ReturnNotes1: null,
            ReturnNotes: null,
            ReturnUserId: null,
            ReturnVendorId: null,
            ReturnDriverId: null,
            ReturnTruckId: null,
            NotificationCount: null,
            Bet: null,
            PortLiftId: null,
            ReturnEmptyId: null,
            ReturnUnitPrice: null,
            IsLiftFee: false,
            IsClosingEmptyFee: false,
            ReturnLiftFee: null,
            ReturnClosingFee: null,
            ReturnDo: null,
            ReturnVs: null,
            ReturnCheckFee: null,
            ReturnOrtherFee: null,
            ReturnOrtherInvoinceFee: null,
            ReturnCollectOnBehaftFee: null,
            ReturnCollectOnBehaftInvoinceFee: null,
            ReturnPlusFee: null,
            ReturnTotalFee: null,
            IsKt: false,
            IsSubmit: false,
            LotNo: null,
            LotDate: null,
            NoteLotDate: null,
            InvoinceNo: null,
            InvoinceDate: null,
            NoteInvoinceDate: null,
            Vat: null,
            NoteVat: null,
            UnitPriceBeforeTax: null,
            UnitPriceAfterTax: null,
            ReceivedPrice: null,
            CollectOnBehaftPrice: null,
            TotalPriceBeforTax: null,
            VatPrice: null,
            TotalPrice: null,
            TotalPriceAfterTax: null,
            VendorVatId: null,
            NoteVendorVatId: null,
            NotePayment: null,
            RevenueAdjustment: null,
            Note: null,
            Cp1: System.Decimal(0.0),
            Cp2: System.Decimal(0.0),
            IsPayment: false,
            Notes: null,
            PaymentNote: null,
            PaymentReturnNote: null,
            IsBet: false,
            IsReturn: false,
            TransportationTypeId: null,
            IsWet: false,
            InsuranceFeesRate: null,
            CommodityValue: null,
            InsuranceFeeNoVAT: null,
            Name: null,
            CommodityId2: null,
            InsuranceFeesRateVAT: null,
            InsuranceFeeVAT: null,
            CompanyId: null,
            StaffId: null,
            NoteReturnReport: null,
            TotalWeightReport: null,
            Active: false,
            MovingTypeId: null,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null,
            IsBought: false,
            InsuranceFeeNotes: null,
            BetFee: null,
            ISIncluded: false,
            CustomerReturnFee: null,
            BetAmount: null,
            DateBetReturnAccountant: null,
            DateBetReturnBrandShip: null,
            DateBetRefunded: null,
            DeliveryBetNotes: null,
            LevelId: null,
            TotalBet: null,
            Note1: null,
            Note2: null,
            Note3: null,
            Note4: null,
            ReturnLiftFeeReport: null,
            ReturnClosingFeeReport: null,
            CommodityValueNotes: null,
            JourneyId: null,
            CustomerTypeId: null,
            WareHouseUnitPrice: null,
            IsPurchasedInsurance: false,
            DatePurchasedInsurance: null,
            ReturnId2: null,
            NoteReturnReport2: null,
            TotalPriceTaxClosing: null,
            TotalPriceNoTaxClosing: null,
            TotalCOBNoTaxClosing: null,
            TotalCOBTaxClosing: null,
            TotalPriceTaxReturn: null,
            TotalPriceNoTaxReturn: null,
            TotalCOBNoTaxReturn: null,
            TotalCOBTaxReturn: null,
            IsQuotation: false,
            IsQuotationReturn: false,
            DoVsLiftUnitPrice: null,
            IsHost: false,
            IsBooking: false,
            IsSplitBill: false,
            ReturnNotes2: null,
            FreeText: null,
            FreeText1: null,
            FreeText2: null,
            FreeText3: null,
            FreeText4: null,
            FreeText5: null,
            FreeText6: null,
            FreeText7: null,
            FreeText8: null,
            FreeText9: null,
            IsNote: false,
            ContactId: null,
            Contact2Id: null,
            MonthText: null,
            YearText: null,
            BookingListId: null,
            UserReturnId: null,
            CollectOnSupPrice: null,
            IsSeftPayment: false,
            IsSeftPaymentReturn: false,
            ClosingDateCheck: null,
            ReceivedCheck: null,
            SealCheck: null,
            BossCheck: null,
            Cont20Check: null,
            Cont40Check: null,
            PickupEmptyCheck: null,
            PortLoadingCheck: null,
            LiftFeeCheck: null,
            LandingFeeCheck: null,
            CollectOnBehaftInvoinceNoFeeCheck: null,
            CollectOnBehaftFeeCheck: null,
            CollectOnSupPriceCheck: null,
            ClosingCombinationUnitPriceCheck: null,
            ClosingPercentCheck: null,
            TotalPriceAfterTaxCheck: null,
            ContainerNoCheck: null,
            IsSeftPaymentLand: false,
            IsSeftPaymentLandReturn: false,
            ClosingDateReturnCheck: null,
            ReceivedReturnCheck: null,
            SealReturnCheck: null,
            BossReturnCheck: null,
            Cont20ReturnCheck: null,
            Cont40ReturnCheck: null,
            PickupEmptyReturnCheck: null,
            PortLoadingReturnCheck: null,
            LiftFeeReturnCheck: null,
            LandingFeeReturnCheck: null,
            CollectOnBehaftInvoinceNoFeeReturnCheck: null,
            CollectOnBehaftFeeReturnCheck: null,
            CollectOnSupPriceReturnCheck: null,
            ClosingCombinationUnitPriceReturnCheck: null,
            ClosingPercentReturnCheck: null,
            TotalPriceAfterTaxReturnCheck: null,
            ContainerNoReturnCheck: null,
            RequestClosing: null,
            ClosingDateUpload: null,
            ReceivedCheckUpload: null,
            SealCheckUpload: null,
            BossCheckUpload: null,
            Cont20CheckUpload: null,
            Cont40CheckUpload: null,
            PickupEmptyUpload: null,
            PortLoadingUpload: null,
            LiftFeeCheckUpload: null,
            LandingFeeUpload: null,
            CollectOnBehaftInvoinceNoFeeUpload: null,
            CollectOnBehaftFeeUpload: null,
            CollectOnSupPriceUpload: null,
            ClosingCombinationUnitPriceUpload: null,
            ClosingPercentUpload: null,
            TotalPriceAfterTaxUpload: null,
            ContainerNoUpload: null,
            IsLocked: false,
            IsRequestUnLockAll: false,
            IsRequestUnLockExploit: false,
            IsRequestUnLockAccountant: false,
            IsRequestUnLockShip: false,
            ReasonUnLockAll: null,
            ReasonUnLockExploit: null,
            ReasonUnLockAccountant: null,
            ReasonUnLockShip: null,
            CheckFeeHistoryId: null,
            ClosingUser: null,
            ReturnUser: null,
            SaleId: null,
            FeeVat1: null,
            FeeVat2: null,
            FeeVat3: null,
            Fee1: null,
            Fee2: null,
            Fee3: null,
            Fee4: null,
            Fee5: null,
            Fee6: null,
            Fee1Upload: null,
            Fee2Upload: null,
            Fee3Upload: null,
            Fee4Upload: null,
            Fee5Upload: null,
            Fee6Upload: null,
            FeeVat1Upload: null,
            FeeVat2Upload: null,
            FeeVat3Upload: null,
            OrderExcel: null,
            ShipUnitPriceQuotation: null,
            IsLockedRevenue: false,
            IsRequestUnLockRevenue: false,
            ReasonUnLockRevenue: null,
            UnlockRequestId: null,
            CheckFeeHistoryReturnId: null,
            ClosingDateReturnUpload: null,
            ReceivedCheckReturnUpload: null,
            SealCheckReturnUpload: null,
            BossCheckReturnUpload: null,
            Cont20CheckReturnUpload: null,
            Cont40CheckReturnUpload: null,
            PickupEmptyReturnUpload: null,
            PortLoadingReturnUpload: null,
            LiftFeeCheckReturnUpload: null,
            LandingFeeReturnUpload: null,
            CollectOnBehaftInvoinceNoFeeReturnUpload: null,
            CollectOnBehaftFeeReturnUpload: null,
            CollectOnSupPriceReturnUpload: null,
            ClosingCombinationUnitPriceReturnUpload: null,
            ClosingPercentReturnUpload: null,
            TotalPriceAfterTaxReturnUpload: null,
            ContainerNoReturnUpload: null,
            FeeVatReturn: null,
            FeeVatReturn2: null,
            FeeVatReturn3: null,
            FeeReturn1: null,
            FeeReturn2: null,
            FeeReturn3: null,
            FeeReturn4: null,
            FeeReturn5: null,
            FeeReturn6: null,
            Fee1UploadReturn: null,
            Fee2UploadReturn: null,
            Fee3UploadReturn: null,
            Fee4UploadReturn: null,
            Fee5UploadReturn: null,
            Fee6UploadReturn: null,
            FeeVat1UploadReturn: null,
            FeeVat2UploadReturn: null,
            FeeVat3UploadReturn: null,
            OrderExcelReturn: null,
            Expense: null,
            Revenue: null,
            TransportationRequest: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            },
            ctor: function () {
                this.$initialize();
                this.Expense = new (System.Collections.Generic.HashSet$1(TMS.API.Models.Expense)).ctor();
                this.Revenue = new (System.Collections.Generic.HashSet$1(TMS.API.Models.Revenue)).ctor();
            }
        }
    });

    Bridge.define("TMS.API.Models.TransportationContract", {
        props: {
            CountDate: {
                get: function () {
                    return Bridge.equals(this.EndDate, null) ? 0 : System.Convert.toInt32(Bridge.box((System.DateTime.subdd(System.DateTime.getDate(System.Nullable.getValue(this.EndDate)), System.DateTime.getDate(System.DateTime.getNow()))).getTotalDays(), System.Double, System.Double.format, System.Double.getHashCode));
                }
            },
            Id: 0,
            Code: null,
            ContractName: null,
            ContractNo: null,
            BossId: null,
            CompanyName: null,
            UserId: null,
            StartDate: null,
            EndDate: null,
            SignDate: null,
            TotalPrice: System.Decimal(0.0),
            SystemNotes: null,
            Notes: null,
            Files: null,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            }
        }
    });

    Bridge.define("TMS.API.Models.TransportationPlan", {
        props: {
            Id: 0,
            IsLocation: false,
            IsTransportation: false,
            ExportListId: null,
            BranchId: null,
            PlanDate: null,
            UserId: null,
            RouteId: null,
            BossId: null,
            CommodityId: null,
            ContainerTypeId: null,
            IsContract: false,
            ClosingDate: null,
            ReceivedId: null,
            TotalContainer: null,
            TotalContainerUsing: null,
            TotalContainerRemain: null,
            Notes: null,
            NotesContract: null,
            Files: null,
            Name: null,
            CommodityValue: null,
            IsWet: false,
            IsBought: false,
            CustomerTypeId: null,
            TransportationTypeId: null,
            IsCompany: false,
            JourneyId: null,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null,
            RequestChangeId: null,
            RequestChangeNote: null,
            StatusId: null,
            CountContract: null,
            IsSettingsInsurance: false,
            ListId: null,
            Contact2Id: null,
            ReturnId: null,
            ReturnDate: null,
            ReturnNotes: null,
            IsQuotation: false,
            SteamingTerms: false,
            BreakTerms: false,
            Cont20Text: null,
            Cont40Text: null,
            ReasonChange: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            }
        }
    });

    Bridge.define("TMS.API.Models.TransportationRequest", {
        props: {
            Id: 0,
            TransportationId: null,
            IsRequestUnLockAll: false,
            IsRequestUnLockExploit: false,
            IsRequestUnLockAccountant: false,
            IsRequestUnLockShip: false,
            IsRequestUnLockRevenue: false,
            ReasonUnLockAll: null,
            ReasonUnLockExploit: null,
            ReasonUnLockAccountant: null,
            ReasonUnLockShip: null,
            ReasonUnLockRevenue: null,
            StatusId: null,
            ReasonReject: null,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null,
            Transportation: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            }
        }
    });

    Bridge.define("TMS.API.Models.User", {
        props: {
            Id: 0,
            BranchId: null,
            VendorId: 0,
            FirstName: null,
            LastName: null,
            MiddleName: null,
            FullName: null,
            DoB: null,
            Ssn: null,
            Address: null,
            PhoneNumber: null,
            NationalityId: null,
            Avatar: null,
            Password: null,
            UserName: null,
            Salt: null,
            LoginFailedCount: null,
            LastLogin: null,
            LastFailedLogin: null,
            Email: null,
            GenderId: 0,
            Recover: null,
            HasVerifiedEmail: false,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null,
            CreatedRoleId: null,
            RouteId: null,
            ContactId: null,
            Length: null,
            ActUserId: null,
            StateId: null,
            Vendor: null,
            ErrorLog: null,
            UserRole: null,
            UserRoute: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            },
            ctor: function () {
                this.$initialize();
                this.ErrorLog = new (System.Collections.Generic.HashSet$1(TMS.API.Models.ErrorLog)).ctor();
                this.UserRole = new (System.Collections.Generic.HashSet$1(TMS.API.Models.UserRole)).ctor();
                this.UserRoute = new (System.Collections.Generic.HashSet$1(TMS.API.Models.UserRoute)).ctor();
            }
        }
    });

    Bridge.define("TMS.API.Models.UserRole", {
        props: {
            Id: 0,
            UserId: 0,
            RoleId: 0,
            Active: false,
            EffectiveDate: null,
            ExpiredDate: null,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null,
            Role: null,
            User: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            }
        }
    });

    Bridge.define("TMS.API.Models.UserRoute", {
        props: {
            Id: 0,
            UserId: null,
            RouteId: null,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null,
            TypeId: null,
            User: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            }
        }
    });

    Bridge.define("TMS.API.Models.UserSeq", {
        props: {
            Id: 0,
            EntityId: 0,
            IsMonthlyRecycle: false,
            LastKey: 0,
            Active: false,
            InsertedBy: 0,
            InsertedDate: null,
            UpdatedBy: null,
            UpdatedDate: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            }
        }
    });

    Bridge.define("TMS.API.Models.UserSetting", {
        props: {
            Id: 0,
            RoleId: null,
            UserId: null,
            Name: null,
            Value: null,
            ParentId: null,
            Path: null,
            Description: null,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null,
            Role: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            }
        }
    });

    Bridge.define("TMS.API.Models.Vendor", {
        props: {
            Id: 0,
            IsContract: false,
            BranchId: null,
            UserId: null,
            RegionId: null,
            CommodityId: null,
            Code: null,
            Name: null,
            DisplayName: null,
            TaxCode: null,
            PhoneNumber: null,
            Email: null,
            CompanyName: null,
            Address: null,
            Description: null,
            TotalFollow: null,
            Logo: null,
            TypeId: null,
            TotalStar: null,
            TotalCountStar: null,
            TotalProduct: null,
            ReturnRate: System.Decimal(0.0),
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null,
            NameReport: null,
            AddressReport: null,
            PhoneNumberReport: null,
            IsBought: false,
            CustomerTypeId: null,
            ParentId: null,
            RouteId: null,
            Length: null,
            StaffName: null,
            ParentVendorId: null,
            PositionName: null,
            ClassifyName: null,
            BankNo: null,
            BankName: null,
            CityName: null,
            DepartmentId: null,
            SaleId: null,
            NameSys: null,
            StateId: null,
            LastOrderState: null,
            IsSeft: false,
            ErrorLog: null,
            User: null,
            VendorContact: null,
            VendorLocation: null,
            VendorService: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            },
            ctor: function () {
                this.$initialize();
                this.ErrorLog = new (System.Collections.Generic.HashSet$1(TMS.API.Models.ErrorLog)).ctor();
                this.User = new (System.Collections.Generic.HashSet$1(TMS.API.Models.User)).ctor();
                this.VendorContact = new (System.Collections.Generic.HashSet$1(TMS.API.Models.VendorContact)).ctor();
                this.VendorLocation = new (System.Collections.Generic.HashSet$1(TMS.API.Models.VendorLocation)).ctor();
                this.VendorService = new (System.Collections.Generic.HashSet$1(TMS.API.Models.VendorService)).ctor();
            }
        }
    });

    Bridge.define("TMS.API.Models.VendorContact", {
        props: {
            Id: 0,
            LocationId: null,
            BossId: null,
            ContactName: null,
            ContactPhoneNumber: null,
            ContactUser: null,
            Note: null,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null,
            Boss: null,
            Location: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            }
        }
    });

    Bridge.define("TMS.API.Models.VendorLocation", {
        props: {
            Id: 0,
            VendorId: null,
            LocationId: null,
            TypeId: null,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null,
            ContactName: null,
            ContactName1: null,
            ExportListId: null,
            Location: null,
            Vendor: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            }
        }
    });

    Bridge.define("TMS.API.Models.VendorService", {
        props: {
            Id: 0,
            VendorId: null,
            ServiceId: null,
            Description: null,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null,
            Vendor: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            }
        }
    });

    Bridge.define("TMS.API.Models.Webhook", {
        props: {
            Id: 0,
            EntityId: null,
            SubName: null,
            SubUrl: null,
            SubUsername: null,
            SubPassword: null,
            AuthVersionId: 0,
            Active: false,
            InsertedDate: null,
            InsertedBy: 0,
            UpdatedDate: null,
            UpdatedBy: null,
            EventTypeId: 0,
            Method: null,
            ApiKey: null,
            ApiKeyHeader: null,
            LoginUrl: null,
            UsernameKey: null,
            PasswordKey: null,
            AccessTokenField: null,
            TokenPrefix: null,
            SavedToken: null
        },
        ctors: {
            init: function () {
                this.InsertedDate = System.DateTime.getDefaultValue();
            }
        }
    });

    Bridge.define("TMS.API.Models.WebSocketResponse$1", function (T) { return {
        props: {
            EntityId: 0,
            Data: Bridge.getDefaultValue(T),
            DataList: null
        }
    }; });

    Bridge.define("TMS.API.ViewModels.CheckCompineTransportationVM", {
        props: {
            No: null,
            Vendor: null,
            Id: null,
            ClosingDate: null,
            Boss: null,
            ContainerNo: null,
            SealNo: null,
            Cont20: null,
            Cont40: null,
            Received: null,
            PickupEmpty: null,
            PortLoading: null,
            LiftFee: null,
            LiftFeeDB: null,
            LandingFee: null,
            LandingFeeDB: null,
            FeeVat1: null,
            FeeVat1DB: null,
            FeeVat2: null,
            FeeVat2DB: null,
            FeeVat3: null,
            FeeVat3DB: null,
            Fee1: null,
            Fee1DB: null,
            Fee2: null,
            Fee2DB: null,
            Fee3: null,
            Fee3DB: null,
            Fee4: null,
            Fee4DB: null,
            Fee5: null,
            Fee6: null,
            Fee5DB: null,
            TotalPriceAfterTax: null,
            TotalPriceAfterTaxDB: null,
            CollectOnSupPrice: null,
            ClosingPercentCheck: null
        }
    });

    Bridge.define("TMS.API.ViewModels.CheckTransportationVM", {
        props: {
            No: null,
            ClosingDate: null,
            Boss: null,
            ContainerNo: null,
            SealNo: null,
            Cont20: null,
            Cont40: null,
            Received: null,
            PickupEmpty: null,
            PortLoading: null,
            LiftFee: null,
            LandingFee: null,
            FeeVat1: null,
            FeeVat2: null,
            FeeVat3: null,
            Fee1: null,
            Fee2: null,
            Fee3: null,
            Fee4: null,
            Fee5: null,
            TotalPriceAfterTax: null,
            CollectOnSupPrice: null
        }
    });

    Bridge.define("TMS.API.ViewModels.ImportBooking", {
        props: {
            BrandShipText: null,
            BrandShipTextEn: null,
            LineText: null,
            LineTextEn: null,
            ShipText: null,
            ShipTextEn: null,
            Trip: null,
            BookingNo: null,
            StartShip: null,
            PickupEmptyText: null,
            PickupEmptyTextEn: null,
            PortLoadingText: null,
            PortLoadingTextEn: null,
            Teus20: null,
            Teus40: null,
            Teus20Using: null,
            Teus40Using: null,
            Teus20Remain: null,
            Teus40Remain: null,
            Note1: null,
            PackingMethodText: null,
            PackingMethodTextEn: null,
            Note: null,
            User: null
        }
    });

    Bridge.define("TMS.API.ViewModels.ImportCommodityValue", {
        props: {
            SaleText: null,
            BossText: null,
            BossTextEn: null,
            CommodityText: null,
            CommodityTextEn: null,
            TotalPrice1: null,
            TotalPrice2: null,
            IsWetText: null,
            Notes: null,
            JourneyText: null,
            IsBoughtText: null,
            CustomerTypeText: null,
            SteamingTerms: null,
            BreakTerms: null
        }
    });

    Bridge.define("TMS.API.ViewModels.ImportCommodityVM", {
        props: {
            Type: null,
            Name: null,
            Description: null,
            DescriptionEn: null,
            User: null
        }
    });

    Bridge.define("TMS.API.ViewModels.ImportLocationVM", {
        props: {
            Type: null,
            RegionText: null,
            RegionTextEn: null,
            Name: null,
            Description: null,
            DescriptionEn: null,
            User: null
        }
    });

    Bridge.define("TMS.API.ViewModels.ImportMasterDataVM", {
        props: {
            Level: null,
            Name: null,
            NameEn: null,
            Description: null,
            DescriptionEn: null,
            Enum: null,
            Code: null,
            User: null
        }
    });

    Bridge.define("TMS.API.ViewModels.ImportObjectVM", {
        props: {
            CompanyName: null,
            Code: null,
            TaxCode: null,
            Address: null,
            PhoneNumber: null,
            Email: null,
            StaffName: null,
            PositionName: null,
            ClassifyName: null,
            BankNo: null,
            BankName: null,
            CityName: null,
            DepartmentText: null,
            BranchText: null,
            SaleText: null,
            Description: null
        }
    });

    Bridge.define("TMS.API.ViewModels.ImportQuotationExpenseVM", {
        props: {
            BrandShipText: null,
            BrandShipTextEn: null,
            ExpenseTypeText: null,
            ExpenseTypeTextEn: null,
            VSC: null,
            VS20UnitPrice: null,
            VS40UnitPrice: null,
            DOUnitPrice: null
        }
    });

    Bridge.define("TMS.API.ViewModels.ImportQuotationVM", {
        props: {
            StartDate: null,
            RouteText: null,
            RouteTextEn: null,
            BrandShipText: null,
            BrandShipTextEn: null,
            ContainerTypeText: null,
            ContainerTypeTextEn: null,
            PolicyTypeText: null,
            PolicyTypeTextEn: null,
            UnitPrice: null,
            UnitPrice1: null,
            UnitPrice2: null,
            UnitPrice3: null,
            Note: null,
            VendorLocationText: null,
            VendorLocationTextEn: null,
            VendorText: null,
            VendorTextEn: null,
            LocationText: null,
            LocationTextEn: null,
            User: null
        }
    });

    Bridge.define("TMS.API.ViewModels.ImportRouteVM", {
        props: {
            Type: null,
            Code: null,
            Name: null,
            NameEn: null,
            User: null
        }
    });

    Bridge.define("TMS.API.ViewModels.ImportShip", {
        props: {
            Level: null,
            Code: null,
            Name: null,
            NameEn: null,
            ShipBrandText: null,
            ShipBrandTextEn: null,
            User: null
        }
    });

    Bridge.define("TMS.API.ViewModels.ImportTeus", {
        props: {
            BrandShipText: null,
            BrandShipTextEn: null,
            ShipText: null,
            ShipTextEn: null,
            Trip: null,
            StartShip: null,
            Teus20: null,
            Teus40: null,
            Teus20Using: null,
            Teus40Using: null,
            Teus20Remain: null,
            Teus40Remain: null,
            User: null
        }
    });

    Bridge.define("TMS.API.ViewModels.ImportTransportation", {
        props: {
            ListExport: null,
            ListExportEn: null,
            Route: null,
            RouteEn: null,
            Booking: null,
            BookingEn: null,
            Name: null,
            NameEn: null,
            BrandShip: null,
            BrandShipEn: null,
            Line: null,
            LineEn: null,
            Ship: null,
            ShipEn: null,
            Trip: null,
            Bill: null,
            ClosingDate: null,
            StartDate: null,
            Closing: null,
            ClosingEn: null,
            Soc: null,
            SocEn: null,
            SplitBill: null,
            IsEmptyCombination: null,
            EmptyCombinationId: null,
            EmptyCombinationIdEn: null,
            IsClosingCustomer: null,
            ContainerTypeId: null,
            ContainerTypeIdEn: null,
            ContainerNo: null,
            SealNo: null,
            Boss: null,
            BossEn: null,
            Sale: null,
            SaleEn: null,
            CommodityId: null,
            CommodityIdEn: null,
            Cont20: null,
            Cont40: null,
            Weight: null,
            Received: null,
            ReceivedEn: null,
            ClosingNotes: null,
            ClosingUser: null,
            ClosingDriver: null,
            Closingtruck: null,
            PickupEmptyId: null,
            PickupEmptyIdEn: null,
            PortLoadingId: null,
            PortLoadingIdEn: null,
            IsClampingFee: null,
            ClosingUnitPrice: null,
            IsEmptyLift: null,
            IsLanding: null,
            LiftFee: null,
            LandingFee: null,
            CheckFee: null,
            OrtherFee: null,
            OrtherFeeInvoinceNo: null,
            CollectOnBehaftFee: null,
            CollectOnBehaftInvoinceNoFee: null,
            InsuranceFee: null,
            TotalFee: null,
            ShipPrice: null,
            ShipRoses: null,
            ShipNote: null,
            ShipDate: null,
            Dem: null,
            DemDate: null,
            LeftDate: null,
            ReturnDate: null,
            ClosingCont: null,
            ShellDate: null,
            ReturnId: null,
            ReturnIdEn: null,
            ReturnNotes: null,
            ReturnUserId: null,
            ReturnVendorId: null,
            ReturnVendorIdEn: null,
            ReturnDriverId: null,
            ReturnTruckId: null,
            NotificationCount: null,
            PortLiftId: null,
            PortLiftIdEn: null,
            ReturnEmptyId: null,
            ReturnEmptyIdEn: null,
            ReturnUnitPrice: null,
            IsLiftFee: null,
            IsClosingEmptyFee: null,
            ReturnLiftFee: null,
            ReturnClosingFee: null,
            ReturnDo: null,
            ReturnVs: null,
            ReturnCheckFee: null,
            ReturnOrtherFee: null,
            ReturnOrtherInvoinceFee: null,
            ReturnCollectOnBehaftFee: null,
            ReturnCollectOnBehaftInvoinceFee: null,
            ReturnPlusFee: null,
            ReturnTotalFee: null,
            IsKt: null,
            Notes: null,
            InsertedBy: null,
            Bet: null
        }
    });

    Bridge.define("TMS.API.ViewModels.ImportTransportationContract", {
        props: {
            Code: null,
            ContractName: null,
            ContractNo: null,
            BossText: null,
            BossTextEn: null,
            CompanyName: null,
            UserText: null,
            StartDate: null,
            EndDate: null,
            SignDate: null,
            TotalPrice: null,
            Notes: null,
            User: null
        }
    });

    Bridge.define("TMS.API.ViewModels.ImportTransportationPlan", {
        props: {
            RouteTextEn: null,
            BossTextEn: null,
            CommodityTextEn: null,
            ContainerTextEn: null,
            ReceivedTextEn: null,
            PlanDate: null,
            UserText: null,
            RouteText: null,
            BossText: null,
            CommodityText: null,
            ContainerText: null,
            ContractText: null,
            QuotationText: null,
            ClosingDate: null,
            ReceivedText: null,
            TotalContainer: null,
            TotalContainerUsing: null,
            Notes: null,
            Notes1: null,
            User: null,
            Name: null
        }
    });

    Bridge.define("TMS.API.ViewModels.ImportVendorLocationVM", {
        props: {
            Region: null,
            Code: null,
            Name: null,
            NameEn: null,
            User: null
        }
    });

    Bridge.define("TMS.API.ViewModels.ImportVendorVM", {
        props: {
            Name: null,
            NameEn: null,
            CommodityText: null,
            CommodityTextEn: null,
            UserName: null,
            Code: null,
            CompanyName: null,
            PhoneNumber: null,
            TaxCode: null,
            Address: null,
            User: null
        }
    });

    Bridge.define("TMS.API.ViewModels.ReportGroupVM", {
        props: {
            Boss: false,
            ContainerType: false,
            Combination: false,
            Commodity: false,
            Closing: false,
            Route: false,
            Ship: false,
            ExportList: false,
            StartShip: false,
            BrandShip: false,
            User: false,
            Return: false,
            FromDate: null,
            ToDate: null
        }
    });

    Bridge.define("TMS.API.ViewModels.TranGroupVM", {
        props: {
            Month: null,
            Year: null,
            RouteId: null,
            BrandShipId: null,
            ExportListId: null,
            ShipId: null,
            LineId: null,
            SocId: null,
            Trip: null,
            StartShip: null,
            ContainerTypeId: null,
            PolicyId: null,
            Count: null,
            ShipUnitPrice: System.Decimal(0.0),
            ShipPrice: System.Decimal(0.0),
            ShipPolicyPrice: System.Decimal(0.0)
        }
    });

    Bridge.define("TMS.UI.App", {
        main: function Main () {
            var $step = 0,
                $task1, 
                $task2, 
                $taskResult2, 
                $task3, 
                $taskResult3, 
                $task4, 
                $jumpFromFinally, 
                $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                $returnValue, 
                translateTask, 
                loadEntityTask, 
                tanent, 
                iPhone, 
                className, 
                newToken, 
                $t, 
                $async_e, 
                $asyncBody = Bridge.fn.bind(this, function () {
                    try {
                        for (;;) {
                            $step = System.Array.min([0,1,2,3,4,5,6,7,8,9], $step);
                            switch ($step) {
                                case 0: {
                                    if (Core.Components.LangSelect.Culture == null) {
                                        Core.Components.LangSelect.Culture = "vi";
                                    }
                                    translateTask = Core.Components.LangSelect.Translate();
                                    loadEntityTask = Core.Clients.Client.LoadEntities();
                                    $task1 = System.Threading.Tasks.Task.whenAll(translateTask, loadEntityTask);
                                    $step = 1;
                                    if ($task1.isCompleted()) {
                                        continue;
                                    }
                                    $task1.continue($asyncBody);
                                    return;
                                }
                                case 1: {
                                    $task1.getAwaitedResult();
                                    TMS.UI.App.InitTheme();
                                    Core.Clients.Client.ModelNamespace = (Bridge.Reflection.getTypeNamespace(TMS.API.Models.User) || "") + ".";
                                    Bridge._ = Core.Components.Spinner.Instance;
                                    tanent = Bridge.toString(document.head.getElementsByTagName("meta").tenant.content);
                                    TMS.UI.Business.Authentication.LoginBL.Instance.LoginEntity.CompanyName = tanent;
                                    TMS.UI.Business.Authentication.LoginBL.Instance.Render();
                                    Core.Clients.Client.UnAuthorizedEventHandler = Bridge.fn.combine(Core.Clients.Client.UnAuthorizedEventHandler, function (xhr) {
                                        TMS.UI.Business.Authentication.LoginBL.Instance.Render();
                                    });
                                    iPhone = new RegExp("(iPod|iPhone)").test(window.navigator.userAgent) && new RegExp("AppleWebKit").test(window.navigator.userAgent);
                                    if (iPhone) {
                                        className = "iphone ";
                                        if (window.screen.availHeight === 812 && window.screen.availWidth === 375) {
                                            className = (className || "") + "portrait";
                                        } else {
                                            className = (className || "") + "landscape";
                                        }
                                        document.documentElement.className = className;
                                    }
                                    if (Core.Clients.Client.Token != null) {
                                        $step = 2;
                                        continue;
                                    } 
                                    $step = 9;
                                    continue;
                                }
                                case 2: {
                                    $task2 = Core.Clients.Client.GetToken(Core.Clients.Client.Token);
                                    $step = 3;
                                    if ($task2.isCompleted()) {
                                        continue;
                                    }
                                    $task2.continue($asyncBody);
                                    return;
                                }
                                case 3: {
                                    $taskResult2 = $task2.getAwaitedResult();
                                    newToken = $taskResult2;
                                    if (newToken != null) {
                                        $step = 4;
                                        continue;
                                    } else  {
                                        $step = 5;
                                        continue;
                                    }
                                }
                                case 4: {
                                    Core.Clients.Client.Token = newToken;
                                    $step = 7;
                                    continue;
                                }
                                case 5: {
                                    $task3 = new Core.Clients.Client.$ctor1("User").CreateAsync(System.Boolean, Core.Clients.Client.Token, "SignOut");
                                    $step = 6;
                                    if ($task3.isCompleted()) {
                                        continue;
                                    }
                                    $task3.continue($asyncBody);
                                    return;
                                }
                                case 6: {
                                    $taskResult3 = $task3.getAwaitedResult();
                                    Core.Extensions.Toast.Success("Logout success!");
                                    Core.Clients.Client.Token = null;
                                    Core.Clients.LocalStorage.RemoveItem("UserInfo");
                                    window.location.reload();
                                    $step = 7;
                                    continue;
                                }
                                case 7: {
                                    $task4 = TMS.UI.App.LoadUserSetting(($t = Core.Clients.Client.Token) != null ? $t.UserId : null);
                                    $step = 8;
                                    if ($task4.isCompleted()) {
                                        continue;
                                    }
                                    $task4.continue($asyncBody);
                                    return;
                                }
                                case 8: {
                                    $task4.getAwaitedResult();
                                    $step = 9;
                                    continue;
                                }
                                case 9: {
                                    TMS.UI.Business.Authentication.LoginBL.Instance.InitAppHanlder = Bridge.fn.combine(TMS.UI.Business.Authentication.LoginBL.Instance.InitAppHanlder, TMS.UI.App.LoadSettingWrapper);
                                    window.setTimeout(function () {
                                        Theme1.initBeforeLoad();
                                        Theme1.initCore();
                                    }, 1000);
                                    $tcs.setResult(null);
                                    return;
                                }
                                default: {
                                    $tcs.setResult(null);
                                    return;
                                }
                            }
                        }
                    } catch($async_e1) {
                        $async_e = System.Exception.create($async_e1);
                        $tcs.setException($async_e);
                    }
                }, arguments);

            $asyncBody();
            return $tcs.task;
        },
        statics: {
            methods: {
                InitTheme: function () {
                    var $t, $t1, $t2, $t3;
                    var theme = Core.Clients.LocalStorage.GetItem(System.String, "theme");
                    if (theme != null) {
                        theme = System.String.replaceAll(theme, "\"", "");
                        Core.Extensions.HtmlElementExtension.ReplaceClass(document.body, "theme-1", theme);
                        if (Bridge.referenceEquals(theme, "theme-2")) {
                            ($t = document.querySelector("#navbar-menu-mode")) != null ? Core.Extensions.HtmlElementExtension.ReplaceClass($t, "navbar-light", "navbar-dark") : null;
                            ($t1 = document.querySelector("#breadcrumb-menu-mode")) != null ? Core.Extensions.HtmlElementExtension.ReplaceClass($t1, "breadcrumb-line-light", "breadcrumb-line-dark") : null;
                            Core.Extensions.HtmlElementExtension.ReplaceClass(document.body, "bg-light", "bg-dark");
                        } else {
                            ($t2 = document.querySelector("#navbar-menu-mode")) != null ? Core.Extensions.HtmlElementExtension.ReplaceClass($t2, "navbar-dark", "navbar-light") : null;
                            ($t3 = document.querySelector("#breadcrumb-menu-mode")) != null ? Core.Extensions.HtmlElementExtension.ReplaceClass($t3, "breadcrumb-line-dark", "breadcrumb-line-light") : null;
                            Core.Extensions.HtmlElementExtension.ReplaceClass(document.body, "bg-dark", "bg-light");
                        }
                    }
                },
                LoadSettingWrapper: function (token) {
                    System.Threading.Tasks.Task.run(function () {
                        var $step = 0,
                            $task1, 
                            $jumpFromFinally, 
                            $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                            $returnValue, 
                            $async_e, 
                            $asyncBody = Bridge.fn.bind(this, function () {
                                try {
                                    for (;;) {
                                        $step = System.Array.min([0,1], $step);
                                        switch ($step) {
                                            case 0: {
                                                $task1 = TMS.UI.App.LoadUserSetting(token != null ? token.UserId : null);
                                                $step = 1;
                                                if ($task1.isCompleted()) {
                                                    continue;
                                                }
                                                $task1.continue($asyncBody);
                                                return;
                                            }
                                            case 1: {
                                                $task1.getAwaitedResult();
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            default: {
                                                $tcs.setResult(null);
                                                return;
                                            }
                                        }
                                    }
                                } catch($async_e1) {
                                    $async_e = System.Exception.create($async_e1);
                                    $tcs.setException($async_e);
                                }
                            }, arguments);

                        $asyncBody();
                        return $tcs.task;
                    });
                },
                LoadUserSetting: function (userId) {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        rsUserSetting, 
                        outbool, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            if (userId == null || System.Nullable.eq(userId, 0)) {
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            $task1 = new Core.Clients.Client.$ctor1("UserSetting").FirstOrDefaultAsync(TMS.API.Models.UserSetting, System.String.format("?t={0}&$filter=Active eq true and UserId eq {1} and Name eq 'ShowTabText'", TMS.UI.Business.Authentication.LoginBL.Instance.LoginEntity.CompanyName, Bridge.box(userId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)));
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            rsUserSetting = $taskResult1;
                                            if (rsUserSetting == null) {
                                                Core.Components.Forms.TabEditor.ShowTabText = true;
                                            } else {
                                                outbool = { };
                                                System.Boolean.tryParse(rsUserSetting.Value, outbool);
                                                Core.Components.Forms.TabEditor.ShowTabText = outbool.v;
                                            }
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }
            }
        }
    });

    Bridge.define("TMS.UI.Business.Accountant.AccountEditBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        props: {
            masterDataEntity: {
                get: function () {
                    return Bridge.as(this.Entity, TMS.API.Models.MasterData);
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "MasterData");
                this.Name = "Account Editor";
            }
        },
        methods: {
            CheckParentId: function (masterData) {
                if (System.Nullable.eq(masterData.ParentId, 23991)) {
                    Core.Components.Extensions.ComponentExt.SetDisabled$1(this, true, ["ParentId"]);
                }
            },
            BeforeMasterData: function (masterData) {
                masterData.ParentId = this.masterDataEntity.Id;
                masterData.Path = "\\23991\\" + this.masterDataEntity.Id + "\\";
                masterData.Level = 2;
            }
        }
    });

    Bridge.define("TMS.UI.Business.Accountant.AccountListBL", {
        inherits: [Core.Components.Forms.TabEditor],
        fields: {
            _uploader: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "MasterData");
                this.Name = "Account List";
                this.DOMContentLoaded = Bridge.fn.combine(this.DOMContentLoaded, Bridge.fn.bind(this, function () {
                    Core.MVVM.Html.Take$1("Body").Form.Attr$1("method", "POST").Attr$1("enctype", "multipart/form-data").Display$1(false).Input.Event$1("change", Bridge.fn.bind(this, function (ev) {
                        var $step = 0,
                            $task1, 
                            $jumpFromFinally, 
                            $asyncBody = Bridge.fn.bind(this, function () {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = this.SelectedExcelAccount(ev);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            return;
                                        }
                                        default: {
                                            return;
                                        }
                                    }
                                }
                            }, arguments);

                        $asyncBody();
                    })).Type$1("file").Id(System.String.format("id_{0}", [Bridge.box(Bridge.getHashCode(this), System.Int32)])).Attr$1("name", "fileImport").Attr$1("accept", ".xlsx");
                    this._uploader = Bridge.as(Core.MVVM.Html.Context, HTMLInputElement);
                }));
            }
        },
        methods: {
            AddAccount: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    gridView, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5], $step);
                                switch ($step) {
                                    case 0: {
                                        gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(null, null);
                                        if (System.String.contains(gridView.Name,"AccountLevel2")) {
                                            $step = 1;
                                            continue;
                                        } else  {
                                            $step = 3;
                                            continue;
                                        }
                                    }
                                    case 1: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Account Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Accountant.AccountEditBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Th\u00eam m\u1edbi t\u00e0i kho\u1ea3n";
                                            instance.Entity = new TMS.API.Models.MasterData();
                                            return instance;
                                        }, false, false);
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $step = 5;
                                        continue;
                                    }
                                    case 3: {
                                        $task2 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Account Editor", function () {
                                            var $t;
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Accountant.AccountEditBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Th\u00eam m\u1edbi t\u00e0i kho\u1ea3n";
                                            instance.Entity = ($t = new TMS.API.Models.MasterData(), $t.ParentId = 23991, $t);
                                            return instance;
                                        }, false, false);
                                        $step = 4;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        $step = 5;
                                        continue;
                                    }
                                    case 5: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            EditAccount: function (masterData) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Account Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Accountant.AccountEditBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Ch\u1ec9nh s\u1eeda t\u00e0i kho\u1ea3n ng\u00e2n h\u00e0ng";
                                            instance.Entity = masterData;
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            BeforeMasterData: function (masterData) {
                masterData.ParentId = 23991;
                masterData.Path = "\\23991\\";
                masterData.Level = 1;
            },
            SelectedExcelAccount: function (e) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    files, 
                    uploadForm, 
                    formData, 
                    response, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        files = Bridge.as(e.target.files, FileList);
                                        if (Core.Extensions.IEnumerableExtensions.Nothing(File, files)) {
                                            $tcs.setResult(null);
                                            return;
                                        }

                                        uploadForm = Bridge.as(this._uploader.parentElement, HTMLFormElement);
                                        formData = new FormData(uploadForm);
                                        $task1 = this.Client.SubmitAsync(System.Collections.Generic.List$1(TMS.API.Models.MasterData), ($t = new Core.Clients.XHRWrapper(), $t.FormData = formData, $t.Url = "ImportExcelAccount", $t.Method = Core.Enums.HttpMethod.POST, $t.ResponseMimeType = Core.Extensions.Utils.GetMimeType("xlsx"), $t));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        response = $taskResult1;
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ImportExcelAccount: function () {
                this._uploader.click();
            }
        }
    });

    Bridge.define("TMS.UI.Business.Accountant.BankAccountEditBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "BankAccount");
                this.Name = "BankAccount Edit";
            }
        }
    });

    Bridge.define("TMS.UI.Business.Accountant.BankAccountListBL", {
        inherits: [Core.Components.Forms.TabEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "BankAccount");
                this.Name = "BankAccount List";
            }
        },
        methods: {
            AddBankAccount: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "BankAccount Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Accountant.BankAccountEditBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Th\u00eam m\u1edbi t\u00e0i kho\u1ea3n ng\u00e2n h\u00e0ng";
                                            instance.Entity = new TMS.API.Models.BankAccount();
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            EditBankAccount: function (bankAccount) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "BankAccount Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Accountant.BankAccountEditBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Ch\u1ec9nh s\u1eeda t\u00e0i kho\u1ea3n ng\u00e2n h\u00e0ng";
                                            instance.Entity = bankAccount;
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("TMS.UI.Business.Accountant.BusinessFreightRateBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        fields: {
            awaiter$1: 0
        },
        props: {
            freightRateEntity: {
                get: function () {
                    return Bridge.as(this.Entity, TMS.API.Models.FreightRate);
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "FreightRate");
                this.Name = "Business Freight Rate";
                this.DOMContentLoaded = Bridge.fn.combine(this.DOMContentLoaded, Bridge.fn.bind(this, function () {
                    if (this.freightRateEntity.IsEmptyCombination) {
                        Core.Components.Extensions.ComponentExt.SetShow(this, false, ["wrapper1"]);
                    } else {
                        Core.Components.Extensions.ComponentExt.SetShow(this, false, ["wrapper2"]);
                    }
                }));
            }
        },
        methods: {
            ChangeEmptyCombination: function () {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        for (;;) {
                            $step = System.Array.min([0,1], $step);
                            switch ($step) {
                                case 0: {
                                    if (this.freightRateEntity.IsEmptyCombination) {
                                        Core.Components.Extensions.ComponentExt.SetShow(this, false, ["wrapper1"]);
                                        Core.Components.Extensions.ComponentExt.SetShow(this, true, ["wrapper2"]);
                                    } else {
                                        Core.Components.Extensions.ComponentExt.SetShow(this, true, ["wrapper1"]);
                                        Core.Components.Extensions.ComponentExt.SetShow(this, false, ["wrapper2"]);
                                    }
                                    $task1 = this.CalcUnitPriceAsync();
                                    $step = 1;
                                    if ($task1.isCompleted()) {
                                        continue;
                                    }
                                    $task1.continue($asyncBody);
                                    return;
                                }
                                case 1: {
                                    $task1.getAwaitedResult();
                                    return;
                                }
                                default: {
                                    return;
                                }
                            }
                        }
                    }, arguments);

                $asyncBody();
            },
            CalcUnitPrice: function () {
                window.clearTimeout(this.awaiter$1);
                this.awaiter$1 = window.setTimeout(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.CalcUnitPriceAsync();
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }), 500);
            },
            CalcUnitPriceAsync: function () {
                var $step = 0,
                    $task1, 
                    $task2, 
                    $task3, 
                    $task4, 
                    $task5, 
                    $task6, 
                    $task7, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,10], $step);
                                switch ($step) {
                                    case 0: {
                                        if (this.freightRateEntity.ReceivedId == null || this.freightRateEntity.ReturnId == null || this.freightRateEntity.RegionReceivedId == null || this.freightRateEntity.RegionReturnId == null || this.freightRateEntity.ContainerTypeId == null) {
                                            Core.Extensions.Toast.Warning("Ch\u01b0a nh\u1eadp \u0111\u1ee7 d\u1eef li\u1ec7u !!!");
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        $task1 = this.GetReceivedCVCUnitPrice(this.freightRateEntity);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $task2 = this.GetReturnCVCUnitPrice(this.freightRateEntity);
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $task2.getAwaitedResult();
                                        $task3 = this.GetInsuranceFee(this.freightRateEntity);
                                        $step = 3;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $task3.getAwaitedResult();
                                        $task4 = this.GetShipUnitPrice(this.freightRateEntity);
                                        $step = 4;
                                        if ($task4.isCompleted()) {
                                            continue;
                                        }
                                        $task4.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $task4.getAwaitedResult();
                                        this.freightRateEntity.TotalPriceMax = System.Nullable.lift2("add", System.Nullable.lift2("add", System.Nullable.lift2("add", System.Nullable.lift2("add", this.freightRateEntity.ReceivedCVCUnitPrice, this.freightRateEntity.ReturnCVCUnitPrice), this.freightRateEntity.InsuranceFee), this.freightRateEntity.OrtherUnitPrice), this.freightRateEntity.ProfitUnitPrice);
                                        this.freightRateEntity.TotalPriceAVG = System.Nullable.lift2("add", System.Nullable.lift2("add", System.Nullable.lift2("add", System.Nullable.lift2("add", this.freightRateEntity.ReceivedCVCUnitPrice, this.freightRateEntity.ReturnCVCUnitPrice), this.freightRateEntity.InsuranceFee), this.freightRateEntity.OrtherUnitPrice), this.freightRateEntity.ProfitUnitPrice);
                                        if (this.freightRateEntity.IsEmptyCombination) {
                                            $step = 5;
                                            continue;
                                        } else  {
                                            $step = 7;
                                            continue;
                                        }
                                    }
                                    case 5: {
                                        $task5 = this.GetReceivedReturnUnitPrice(this.freightRateEntity);
                                        $step = 6;
                                        if ($task5.isCompleted()) {
                                            continue;
                                        }
                                        $task5.continue($asyncBody);
                                        return;
                                    }
                                    case 6: {
                                        $task5.getAwaitedResult();
                                        this.freightRateEntity.TotalPriceMax = System.Nullable.lift2("add", this.freightRateEntity.TotalPriceMax, System.Nullable.lift2("add", this.freightRateEntity.ReceivedReturnUnitPriceMax, this.freightRateEntity.ShipUnitPriceMax));
                                        this.freightRateEntity.TotalPriceAVG = System.Nullable.lift2("add", this.freightRateEntity.TotalPriceAVG, System.Decimal.round(System.Nullable.getValue(this.freightRateEntity.ReceivedReturnUnitPriceAVG).add(System.Nullable.getValue(this.freightRateEntity.ShipUnitPriceAVG)), 6));
                                        $step = 10;
                                        continue;
                                    }
                                    case 7: {
                                        $task6 = this.GetReceivedUnitPrice(this.freightRateEntity);
                                        $step = 8;
                                        if ($task6.isCompleted()) {
                                            continue;
                                        }
                                        $task6.continue($asyncBody);
                                        return;
                                    }
                                    case 8: {
                                        $task6.getAwaitedResult();
                                        $task7 = this.GetReturnUnitPrice(this.freightRateEntity);
                                        $step = 9;
                                        if ($task7.isCompleted()) {
                                            continue;
                                        }
                                        $task7.continue($asyncBody);
                                        return;
                                    }
                                    case 9: {
                                        $task7.getAwaitedResult();
                                        this.freightRateEntity.TotalPriceMax = System.Nullable.lift2("add", this.freightRateEntity.TotalPriceMax, System.Nullable.lift2("add", System.Nullable.lift2("add", this.freightRateEntity.ReceivedUnitPriceMax, this.freightRateEntity.ReturnUnitPriceMax), this.freightRateEntity.ShipUnitPriceMax));
                                        this.freightRateEntity.TotalPriceAVG = System.Nullable.lift2("add", this.freightRateEntity.TotalPriceAVG, System.Decimal.round(System.Nullable.getValue(this.freightRateEntity.ReceivedUnitPriceAVG).add(System.Nullable.getValue(this.freightRateEntity.ReturnUnitPriceAVG)).add(System.Nullable.getValue(this.freightRateEntity.ShipUnitPriceAVG)), 6));
                                        $step = 10;
                                        continue;
                                    }
                                    case 10: {
                                        this.UpdateView();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            GetReceivedCVCUnitPrice: function (freightRate) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    quotations, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = new Core.Clients.Client.$ctor1("Quotation").GetRawList(TMS.API.Models.Quotation, System.String.format("?$filter=Active eq true and TypeId eq 7592 and LocationId eq {0} and ContainerTypeId eq {1}", Bridge.box(freightRate.ReceivedId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), Bridge.box(freightRate.ContainerTypeId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        quotations = $taskResult1;
                                        if (quotations.Count > 0) {
                                            freightRate.ReceivedCVCUnitPrice = System.Linq.Enumerable.from(quotations, TMS.API.Models.Quotation).where(function (x) {
                                                return x.UnitPrice.gt(System.Decimal(0));
                                            }).max(function (x) {
                                                return x.UnitPrice;
                                            });
                                        } else {
                                            freightRate.ReceivedCVCUnitPrice = System.Decimal(0);
                                        }
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            GetReturnCVCUnitPrice: function (freightRate) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    quotations, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = new Core.Clients.Client.$ctor1("Quotation").GetRawList(TMS.API.Models.Quotation, System.String.format("?$filter=Active eq true and TypeId eq 7593 and LocationId eq {0} and ContainerTypeId eq {1}", Bridge.box(freightRate.ReturnId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), Bridge.box(freightRate.ContainerTypeId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        quotations = $taskResult1;
                                        if (quotations.Count > 0) {
                                            freightRate.ReturnCVCUnitPrice = System.Linq.Enumerable.from(quotations, TMS.API.Models.Quotation).where(function (x) {
                                                return x.UnitPrice.gt(System.Decimal(0));
                                            }).max(function (x) {
                                                return x.UnitPrice;
                                            });
                                        } else {
                                            freightRate.ReturnCVCUnitPrice = System.Decimal(0);
                                        }
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            GetInsuranceFee: function (freightRate) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $task3, 
                    $taskResult3, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    container, 
                    settingPolicys, 
                    $t, 
                    item, 
                    settingPolicyDetails, 
                    check, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,8], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.CheckContainerType(freightRate);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        container = $taskResult1;
                                        $task2 = new Core.Clients.Client.$ctor1("SettingPolicy").GetRawList(TMS.API.Models.SettingPolicy, System.String.format("?$filter=Active eq true and contains(Name, '{0}')", [container.Description]));
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        settingPolicys = $taskResult2;
                                        if (settingPolicys != null) {
                                            $step = 3;
                                            continue;
                                        } 
                                        $step = 8;
                                        continue;
                                    }
                                    case 3: {
                                        $t = Bridge.getEnumerator(settingPolicys);
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        if ($t.moveNext()) {
                                            item = $t.Current;
                                            $step = 5;
                                            continue;
                                        }
                                        $step = 7;
                                        continue;
                                    }
                                    case 5: {
                                        $task3 = new Core.Clients.Client.$ctor1("SettingPolicyDetail").GetRawList(TMS.API.Models.SettingPolicyDetail, System.String.format("?$filter=Active eq true and SettingPolicyId eq {0}", [Bridge.box(item.Id, System.Int32)]));
                                        $step = 6;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 6: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        settingPolicyDetails = $taskResult3;
                                        if (settingPolicyDetails != null && settingPolicyDetails.Count === 1) {
                                            check = System.Linq.Enumerable.from(settingPolicyDetails, TMS.API.Models.SettingPolicyDetail).any(function (x) {
                                                return System.Nullable.eq(x.ComponentId, 17791);
                                            });
                                            freightRate.InsuranceFee = check ? item.UnitPrice : System.Decimal(0);
                                        }
                                        $step = 4;
                                        continue;
                                    }

                                    case 8: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            GetReceivedUnitPrice: function (freightRate) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $task3, 
                    $taskResult3, 
                    $task4, 
                    $taskResult4, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    locations, 
                    $t, 
                    location, 
                    services, 
                    quotationHollows, 
                    quotationGoods, 
                    $t1, 
                    item, 
                    check, 
                    $t2, 
                    item1, 
                    check1, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = new Core.Clients.Client.$ctor1("Location").GetRawList(TMS.API.Models.Location, System.String.format("?$filter=Active eq true and RegionId eq {0}", [Bridge.box(freightRate.RegionReceivedId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        locations = $taskResult1;
                                        if (locations == null) {
                                            freightRate.ReceivedUnitPriceMax = System.Nullable.lift2("add", freightRate.ReceivedUnitPriceMax, System.Decimal(0));
                                            freightRate.ReceivedUnitPriceAVG = System.Nullable.lift2("add", freightRate.ReceivedUnitPriceAVG, System.Decimal(0));
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        $t = Bridge.getEnumerator(locations);
                                        $step = 2;
                                        continue;
                                    }
                                    case 2: {
                                        if ($t.moveNext()) {
                                            location = $t.Current;
                                            $step = 3;
                                            continue;
                                        }
                                        $step = 5;
                                        continue;
                                    }
                                    case 3: {
                                        $task2 = new Core.Clients.Client.$ctor1("LocationService").GetRawList(TMS.API.Models.LocationService, System.String.format("?$filter=Active eq true and LocationId eq {0} and ServiceId in (7583, 7584, 7585, 7586)", [location]));
                                        $step = 4;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        services = $taskResult2;
                                        if (services == null) {
                                            locations.remove(location);
                                        }
                                        $step = 2;
                                        continue;
                                    }
                                    case 5: {
                                        if (locations == null) {
                                            freightRate.ReceivedUnitPriceMax = System.Nullable.lift2("add", freightRate.ReceivedUnitPriceMax, System.Decimal(0));
                                            freightRate.ReceivedUnitPriceAVG = System.Nullable.lift2("add", freightRate.ReceivedUnitPriceAVG, System.Decimal(0));
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        $task3 = new Core.Clients.Client.$ctor1("Quotation").GetRawList(TMS.API.Models.Quotation, System.String.format("?$filter=Active eq true and TypeId eq 7594 and ContainerTypeId eq {0}", [Bridge.box(freightRate.ContainerTypeId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]));
                                        $step = 6;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 6: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        quotationHollows = $taskResult3;
                                        $task4 = new Core.Clients.Client.$ctor1("Quotation").GetRawList(TMS.API.Models.Quotation, System.String.format("?$filter=Active eq true and TypeId eq 7596 and ContainerTypeId eq {0}", [Bridge.box(freightRate.ContainerTypeId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]));
                                        $step = 7;
                                        if ($task4.isCompleted()) {
                                            continue;
                                        }
                                        $task4.continue($asyncBody);
                                        return;
                                    }
                                    case 7: {
                                        $taskResult4 = $task4.getAwaitedResult();
                                        quotationGoods = $taskResult4;
                                        if (quotationHollows.Count > 0 && quotationGoods.Count > 0) {
                                            $t1 = Bridge.getEnumerator(quotationHollows);
                                            try {
                                                while ($t1.moveNext()) {
                                                    item = { v : $t1.Current };
                                                    check = System.Linq.Enumerable.from(locations, TMS.API.Models.Location).any((function ($me, item) {
                                                        return function (x) {
                                                            return System.Nullable.eq(x.Id, item.v.LocationId);
                                                        };
                                                    })(this, item));
                                                    if (check) {
                                                        freightRate.ReceivedUnitPriceMax = System.Linq.Enumerable.from(quotationHollows, TMS.API.Models.Quotation).where(function (x) {
                                                            return x.UnitPrice.gt(System.Decimal(0));
                                                        }).max(function (x) {
                                                            return x.UnitPrice;
                                                        });
                                                        freightRate.ReceivedUnitPriceAVG = System.Linq.Enumerable.from(quotationHollows, TMS.API.Models.Quotation).where(function (x) {
                                                            return x.UnitPrice.gt(System.Decimal(0));
                                                        }).average(function (x) {
                                                            return x.UnitPrice;
                                                        }, System.Decimal.Zero);
                                                    } else {
                                                        freightRate.ReceivedUnitPriceMax = System.Decimal(0);
                                                        freightRate.ReceivedUnitPriceAVG = System.Decimal(0);
                                                    }
                                                }
                                            } finally {
                                                if (Bridge.is($t1, System.IDisposable)) {
                                                    $t1.System$IDisposable$Dispose();
                                                }
                                            }
                                            $t2 = Bridge.getEnumerator(quotationGoods);
                                            try {
                                                while ($t2.moveNext()) {
                                                    item1 = { v : $t2.Current };
                                                    check1 = System.Linq.Enumerable.from(locations, TMS.API.Models.Location).any((function ($me, item1) {
                                                        return function (x) {
                                                            return System.Nullable.eq(x.Id, item1.v.LocationId);
                                                        };
                                                    })(this, item1));
                                                    if (check1) {
                                                        freightRate.ReceivedUnitPriceMax = System.Nullable.lift2("add", freightRate.ReceivedUnitPriceMax, System.Linq.Enumerable.from(quotationGoods, TMS.API.Models.Quotation).where(function (x) {
                                                            return x.UnitPrice.gt(System.Decimal(0));
                                                        }).max(function (x) {
                                                            return x.UnitPrice;
                                                        }));
                                                        freightRate.ReceivedUnitPriceAVG = System.Nullable.lift2("add", freightRate.ReceivedUnitPriceAVG, System.Linq.Enumerable.from(quotationGoods, TMS.API.Models.Quotation).where(function (x) {
                                                            return x.UnitPrice.gt(System.Decimal(0));
                                                        }).average(function (x) {
                                                            return x.UnitPrice;
                                                        }, System.Decimal.Zero));
                                                    } else {
                                                        freightRate.ReceivedUnitPriceMax = System.Nullable.lift2("add", freightRate.ReceivedUnitPriceMax, System.Decimal(0));
                                                        freightRate.ReceivedUnitPriceAVG = System.Nullable.lift2("add", freightRate.ReceivedUnitPriceAVG, System.Decimal(0));
                                                    }
                                                }
                                            } finally {
                                                if (Bridge.is($t2, System.IDisposable)) {
                                                    $t2.System$IDisposable$Dispose();
                                                }
                                            }
                                        }
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            GetReturnUnitPrice: function (freightRate) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $task3, 
                    $taskResult3, 
                    $task4, 
                    $taskResult4, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    locations, 
                    $t, 
                    location, 
                    services, 
                    quotationHollows, 
                    quotationGoods, 
                    $t1, 
                    item, 
                    check, 
                    $t2, 
                    item1, 
                    check1, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = new Core.Clients.Client.$ctor1("Location").GetRawList(TMS.API.Models.Location, System.String.format("?$filter=Active eq true and RegionId eq {0}", [Bridge.box(freightRate.RegionReturnId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        locations = $taskResult1;
                                        if (locations == null) {
                                            freightRate.ReturnUnitPriceMax = System.Decimal(0);
                                            freightRate.ReturnUnitPriceAVG = System.Decimal(0);
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        $t = Bridge.getEnumerator(locations);
                                        $step = 2;
                                        continue;
                                    }
                                    case 2: {
                                        if ($t.moveNext()) {
                                            location = $t.Current;
                                            $step = 3;
                                            continue;
                                        }
                                        $step = 5;
                                        continue;
                                    }
                                    case 3: {
                                        $task2 = new Core.Clients.Client.$ctor1("LocationService").GetRawList(TMS.API.Models.LocationService, System.String.format("?$filter=Active eq true and LocationId eq {0} and ServiceId in (7583, 7584, 7585, 7586)", [location]));
                                        $step = 4;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        services = $taskResult2;
                                        if (services == null) {
                                            locations.remove(location);
                                        }
                                        $step = 2;
                                        continue;
                                    }
                                    case 5: {
                                        if (locations == null) {
                                            freightRate.ReturnUnitPriceMax = System.Decimal(0);
                                            freightRate.ReturnUnitPriceAVG = System.Decimal(0);
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        $task3 = new Core.Clients.Client.$ctor1("Quotation").GetRawList(TMS.API.Models.Quotation, System.String.format("?$filter=Active eq true and TypeId eq 7594 and ContainerTypeId eq {0}", [Bridge.box(freightRate.ContainerTypeId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]));
                                        $step = 6;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 6: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        quotationHollows = $taskResult3;
                                        $task4 = new Core.Clients.Client.$ctor1("Quotation").GetRawList(TMS.API.Models.Quotation, System.String.format("?$filter=Active eq true and TypeId eq 7596 and ContainerTypeId eq {0}", [Bridge.box(freightRate.ContainerTypeId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]));
                                        $step = 7;
                                        if ($task4.isCompleted()) {
                                            continue;
                                        }
                                        $task4.continue($asyncBody);
                                        return;
                                    }
                                    case 7: {
                                        $taskResult4 = $task4.getAwaitedResult();
                                        quotationGoods = $taskResult4;
                                        if (quotationHollows.Count > 0 && quotationGoods.Count > 0) {
                                            $t1 = Bridge.getEnumerator(quotationHollows);
                                            try {
                                                while ($t1.moveNext()) {
                                                    item = { v : $t1.Current };
                                                    check = System.Linq.Enumerable.from(locations, TMS.API.Models.Location).any((function ($me, item) {
                                                        return function (x) {
                                                            return System.Nullable.eq(x.Id, item.v.LocationId);
                                                        };
                                                    })(this, item));
                                                    if (check) {
                                                        freightRate.ReturnUnitPriceMax = System.Linq.Enumerable.from(quotationHollows, TMS.API.Models.Quotation).where(function (x) {
                                                            return x.UnitPrice.gt(System.Decimal(0));
                                                        }).max(function (x) {
                                                            return x.UnitPrice;
                                                        });
                                                        freightRate.ReturnUnitPriceAVG = System.Linq.Enumerable.from(quotationHollows, TMS.API.Models.Quotation).where(function (x) {
                                                            return x.UnitPrice.gt(System.Decimal(0));
                                                        }).average(function (x) {
                                                            return x.UnitPrice;
                                                        }, System.Decimal.Zero);
                                                    } else {
                                                        freightRate.ReturnUnitPriceMax = System.Decimal(0);
                                                        freightRate.ReturnUnitPriceAVG = System.Decimal(0);
                                                    }
                                                }
                                            } finally {
                                                if (Bridge.is($t1, System.IDisposable)) {
                                                    $t1.System$IDisposable$Dispose();
                                                }
                                            }
                                            $t2 = Bridge.getEnumerator(quotationGoods);
                                            try {
                                                while ($t2.moveNext()) {
                                                    item1 = { v : $t2.Current };
                                                    check1 = System.Linq.Enumerable.from(locations, TMS.API.Models.Location).any((function ($me, item1) {
                                                        return function (x) {
                                                            return System.Nullable.eq(x.Id, item1.v.LocationId);
                                                        };
                                                    })(this, item1));
                                                    if (check1) {
                                                        freightRate.ReturnUnitPriceMax = System.Nullable.lift2("add", freightRate.ReturnUnitPriceMax, System.Linq.Enumerable.from(quotationGoods, TMS.API.Models.Quotation).where(function (x) {
                                                            return x.UnitPrice.gt(System.Decimal(0));
                                                        }).max(function (x) {
                                                            return x.UnitPrice;
                                                        }));
                                                        freightRate.ReturnUnitPriceAVG = System.Nullable.lift2("add", freightRate.ReturnUnitPriceAVG, System.Linq.Enumerable.from(quotationGoods, TMS.API.Models.Quotation).where(function (x) {
                                                            return x.UnitPrice.gt(System.Decimal(0));
                                                        }).average(function (x) {
                                                            return x.UnitPrice;
                                                        }, System.Decimal.Zero));
                                                    } else {
                                                        freightRate.ReturnUnitPriceMax = System.Nullable.lift2("add", freightRate.ReturnUnitPriceMax, System.Decimal(0));
                                                        freightRate.ReturnUnitPriceAVG = System.Nullable.lift2("add", freightRate.ReturnUnitPriceAVG, System.Decimal(0));
                                                    }
                                                }
                                            } finally {
                                                if (Bridge.is($t2, System.IDisposable)) {
                                                    $t2.System$IDisposable$Dispose();
                                                }
                                            }
                                        }
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            GetReceivedReturnUnitPrice: function (freightRate) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $task3, 
                    $taskResult3, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    locations, 
                    $t, 
                    location, 
                    services, 
                    quotations, 
                    $t1, 
                    item, 
                    check, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = new Core.Clients.Client.$ctor1("Location").GetRawList(TMS.API.Models.Location, System.String.format("?$filter=Active eq true and RegionId in ({0}, {1})", Bridge.box(freightRate.RegionReceivedId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), Bridge.box(freightRate.RegionReturnId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        locations = $taskResult1;
                                        if (locations == null) {
                                            freightRate.ReceivedReturnUnitPriceMax = System.Decimal(0);
                                            freightRate.ReceivedReturnUnitPriceAVG = System.Decimal(0);
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        $t = Bridge.getEnumerator(locations);
                                        $step = 2;
                                        continue;
                                    }
                                    case 2: {
                                        if ($t.moveNext()) {
                                            location = $t.Current;
                                            $step = 3;
                                            continue;
                                        }
                                        $step = 5;
                                        continue;
                                    }
                                    case 3: {
                                        $task2 = new Core.Clients.Client.$ctor1("LocationService").GetRawList(TMS.API.Models.LocationService, System.String.format("?$filter=Active eq true and LocationId eq {0} and ServiceId in (7583, 7584)", [location]));
                                        $step = 4;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        services = $taskResult2;
                                        if (services == null) {
                                            locations.remove(location);
                                        }
                                        $step = 2;
                                        continue;
                                    }
                                    case 5: {
                                        if (locations == null) {
                                            freightRate.ReceivedReturnUnitPriceMax = System.Decimal(0);
                                            freightRate.ReceivedReturnUnitPriceAVG = System.Decimal(0);
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        $task3 = new Core.Clients.Client.$ctor1("Quotation").GetRawList(TMS.API.Models.Quotation, System.String.format("?$filter=Active eq true and TypeId eq 7596 and ContainerTypeId eq {0}", [Bridge.box(freightRate.ContainerTypeId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]));
                                        $step = 6;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 6: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        quotations = $taskResult3;
                                        if (quotations.Count > 0) {
                                            $t1 = Bridge.getEnumerator(quotations);
                                            try {
                                                while ($t1.moveNext()) {
                                                    item = { v : $t1.Current };
                                                    check = System.Linq.Enumerable.from(locations, TMS.API.Models.Location).any((function ($me, item) {
                                                        return function (x) {
                                                            return System.Nullable.eq(x.Id, item.v.LocationId);
                                                        };
                                                    })(this, item));
                                                    if (check) {
                                                        freightRate.ReceivedReturnUnitPriceMax = System.Linq.Enumerable.from(quotations, TMS.API.Models.Quotation).where(function (x) {
                                                            return x.UnitPrice.gt(System.Decimal(0));
                                                        }).max(function (x) {
                                                            return x.UnitPrice;
                                                        });
                                                        freightRate.ReceivedReturnUnitPriceAVG = System.Linq.Enumerable.from(quotations, TMS.API.Models.Quotation).where(function (x) {
                                                            return x.UnitPrice.gt(System.Decimal(0));
                                                        }).average(function (x) {
                                                            return x.UnitPrice;
                                                        }, System.Decimal.Zero);
                                                    } else {
                                                        freightRate.ReceivedReturnUnitPriceMax = System.Decimal(0);
                                                        freightRate.ReceivedReturnUnitPriceAVG = System.Decimal(0);
                                                    }
                                                }
                                            } finally {
                                                if (Bridge.is($t1, System.IDisposable)) {
                                                    $t1.System$IDisposable$Dispose();
                                                }
                                            }

                                        }
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            GetShipUnitPrice: function (freightRate) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    quotations, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = new Core.Clients.Client.$ctor1("Quotation").GetRawList(TMS.API.Models.Quotation, System.String.format("?$filter=Active eq true and TypeId eq 7598 and ContainerTypeId eq {0}", [Bridge.box(freightRate.ContainerTypeId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        quotations = $taskResult1;
                                        if (quotations.Count > 0) {
                                            freightRate.ShipUnitPriceMax = System.Linq.Enumerable.from(quotations, TMS.API.Models.Quotation).where(function (x) {
                                                return x.UnitPrice.gt(System.Decimal(0));
                                            }).max(function (x) {
                                                return x.UnitPrice;
                                            });
                                            freightRate.ShipUnitPriceAVG = System.Linq.Enumerable.from(quotations, TMS.API.Models.Quotation).where(function (x) {
                                                return x.UnitPrice.gt(System.Decimal(0));
                                            }).average(function (x) {
                                                return x.UnitPrice;
                                            }, System.Decimal.Zero);
                                        } else {
                                            freightRate.ShipUnitPriceMax = System.Decimal(0);
                                            freightRate.ShipUnitPriceAVG = System.Decimal(0);
                                        }
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CheckContainerType: function (freightRate) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    container, 
                    containerTypes, 
                    containerTypeCodes, 
                    $t, 
                    containerTypeName, 
                    containers, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2], $step);
                                switch ($step) {
                                    case 0: {
                                        container = null;
                                        $task1 = new Core.Clients.Client.$ctor1("MasterData").GetRawList(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and ParentId eq 7565", null));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        containerTypes = $taskResult1;
                                        containerTypeCodes = ($t = TMS.API.Models.MasterData, System.Linq.Enumerable.from(containerTypes, $t).toDictionary(function (x) {
                                            return x.Id;
                                        }, null, System.Int32, $t));
                                        containerTypeName = System.Collections.Generic.CollectionExtensions.GetValueOrDefault(System.Int32, TMS.API.Models.MasterData, containerTypeCodes, System.Nullable.getValue(freightRate.ContainerTypeId));
                                        $task2 = new Core.Clients.Client.$ctor1("MasterData").GetRawList(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and (contains(Name, '40HC') or contains(Name, '20DC'))", null));
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        containers = $taskResult2;
                                        if (System.String.contains(containerTypeName.Description,"Cont 20")) {
                                            container = containers.Find(function (x) {
                                                return System.String.contains(x.Name,"20DC");
                                            });
                                        } else if (System.String.contains(containerTypeName.Description,"Cont 40")) {
                                            container = containers.Find(function (x) {
                                                return System.String.contains(x.Name,"40HC");
                                            });
                                        }
                                        $tcs.setResult(container);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ConfirmBusinessFreightRate: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (this.freightRateEntity.Id <= 0) {
                                            Core.Extensions.Toast.Warning("B\u1ea1n ph\u1ea3i l\u01b0u tr\u01b0\u1edbc khi th\u1ef1c hi\u1ec7n thao t\u00e1c n\u00e0y !!!");
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Confirm Business Freight Rate", Bridge.fn.bind(this, function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Accountant.ConfirmBusinessFreightRateBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "L\u1ea5y d\u1eef li\u1ec7u sang bi\u1ec3u gi\u00e1 CVC";
                                            instance.Entity = this.freightRateEntity;
                                            return instance;
                                        }), false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("TMS.UI.Business.Accountant.CaseEditBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "MasterData");
                this.Name = "Case Editor";
            }
        }
    });

    Bridge.define("TMS.UI.Business.Accountant.CaseListBL", {
        inherits: [Core.Components.Forms.TabEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "MasterData");
                this.Name = "Case List";
            }
        },
        methods: {
            AddCase: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Case Editor", function () {
                                            var $t;
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Accountant.CaseEditBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Th\u00eam m\u1edbi v\u1ee5 vi\u1ec7c";
                                            instance.Entity = ($t = new TMS.API.Models.MasterData(), $t.ParentId = 24945, $t);
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            EditCase: function (masterData) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Case Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Accountant.CaseEditBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Ch\u1ec9nh s\u1eeda v\u1ee5 vi\u1ec7c";
                                            instance.Entity = masterData;
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            BeforeCreatedMasterData: function (masterData) {
                masterData.ParentId = 24945;
            }
        }
    });

    Bridge.define("TMS.UI.Business.Accountant.ConfirmBusinessFreightRateBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        props: {
            freightRateEntity: {
                get: function () {
                    return Bridge.as(this.Entity, TMS.API.Models.FreightRate);
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "FreightRate");
                this.Name = "Confirm Business Freight Rate";
            }
        },
        methods: {
            Cancel: function () {
                this.Dispose();
                Core.Components.Forms.PopupEditor.prototype.Cancel.call(this);
            },
            CancelWithoutAsk: function () {
                this.Dispose();
                Core.Components.Forms.PopupEditor.prototype.CancelWithoutAsk.call(this);
            },
            SetInfo: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    vendor, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = new Core.Clients.Client.$ctor1("Vendor").FirstOrDefaultAsync(TMS.API.Models.Vendor, System.String.format("?$filter=Active eq true and TypeId eq 7551 and Id eq {0}", [Bridge.box(this.freightRateEntity.BossId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        vendor = $taskResult1;
                                        this.freightRateEntity.UserId = vendor == null ? null : vendor.UserId;
                                        this.UpdateView$1(false, ["UserId"]);
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CreateBusinessFreightRate: function () {
                var $t;
                var confirm = ($t = new Core.Components.Forms.ConfirmDialog(), $t.Content = "B\u1ea1n c\u00f3 ch\u1eafc ch\u1eafn mu\u1ed1n l\u1ea5y gi\u00e1 tham kh\u1ea3o sang bi\u1ec3u gi\u00e1 CVC kh\u00f4ng ?", $t);
                confirm.Render();
                confirm.YesConfirmed = Bridge.fn.combine(confirm.YesConfirmed, Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        this.freightRateEntity.TypeId = 25156;
                                        $task1 = this.Save(this.freightRateEntity);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        this.Parent.Parent.UpdateView$1(true);
                                        this.Parent.Dispose();
                                        this.Dispose();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }));
            }
        }
    });

    Bridge.define("TMS.UI.Business.Accountant.CreditNoteEditBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        fields: {
            gridView: null,
            ledgerParentList: null,
            payment: 0
        },
        props: {
            ledgerEntity: {
                get: function () {
                    return Bridge.as(this.Entity, TMS.API.Models.Ledger);
                }
            }
        },
        ctors: {
            init: function () {
                this.ledgerParentList = new (System.Collections.Generic.List$1(TMS.API.Models.Ledger)).ctor();
            },
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "Ledger");
                this.Name = "CreditNote Editor";
            }
        },
        methods: {
            ToggleApprovalBtn: function (entity) {
                if (entity === void 0) { entity = null; }
                if (this.ledgerEntity.Id > 0) {
                    Core.Components.Extensions.ComponentExt.SetShow(this, false, ["btnCreateInvoice"]);
                    Core.Components.Extensions.ComponentExt.SetShow(this, true, ["btnSave"]);
                    Core.Components.Extensions.ComponentExt.SetShow(this, true, ["btnPayment"]);
                } else {
                    Core.Components.Extensions.ComponentExt.SetShow(this, true, ["btnCreateInvoice"]);
                    Core.Components.Extensions.ComponentExt.SetShow(this, false, ["btnSave"]);
                    Core.Components.Extensions.ComponentExt.SetShow(this, false, ["btnPayment"]);
                }
                Core.Components.Forms.PopupEditor.prototype.ToggleApprovalBtn.call(this, entity);
            },
            LoadInvoice: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    gridView, 
                    gridViewSelected, 
                    ledger, 
                    newLedger, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3], $step);
                                switch ($step) {
                                    case 0: {
                                        gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                                            return System.String.contains(x.Name,"Ledger");
                                        }, null);
                                        if (gridView.RowData.Data.Count <= 0) {
                                            $step = 1;
                                            continue;
                                        } 
                                        $step = 3;
                                        continue;
                                    }
                                    case 1: {
                                        gridViewSelected = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this.Parent), Core.Components.GridView).firstOrDefault(function (x) {
                                            return System.String.contains(x.Name,"Ledger");
                                        }, null);
                                        this.ledgerParentList = System.Linq.Enumerable.from(gridViewSelected.GetSelectedRows()).select(function (x) { return Bridge.cast(x, TMS.API.Models.Ledger); }).toList(TMS.API.Models.Ledger);
                                        ledger = System.Linq.Enumerable.from(this.ledgerParentList, TMS.API.Models.Ledger).firstOrDefault(null, null);
                                        newLedger = ($t = new TMS.API.Models.Ledger(), $t.InvoiceFormId = this.ledgerEntity.InvoiceFormId, $t.VendorId = ledger.VendorId, $t.ObjectId = ledger.ObjectId, $t.Taxcode = ledger.Taxcode, $t);
                                        $task1 = gridView.AddRow(newLedger);
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        gridView.UpdateView$1(true);
                                        $step = 3;
                                        continue;
                                    }
                                    case 3: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            Save: function (entity) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    gridView, 
                    ledger, 
                    rs, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2], $step);
                                switch ($step) {
                                    case 0: {
                                        if (entity === void 0) { entity = null; }
                                        if (this.ledgerEntity.Id <= 0) {
                                            Core.Extensions.Toast.Warning("Ch\u01b0a t\u1ea1o phi\u1ebfu");
                                            $tcs.setResult(false);
                                            return;
                                        }
                                        gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(null, null);
                                        ledger = Bridge.cast(System.Linq.Enumerable.from(gridView.RowData.Data, System.Object).firstOrDefault(null, null), TMS.API.Models.Ledger);
                                        $task1 = new Core.Clients.Client.$ctor1("Ledger").UpdateAsync(TMS.API.Models.Ledger, ledger);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        rs = $taskResult1;
                                        if (rs == null) {
                                            Core.Extensions.Toast.Warning("\u0110\u00e3 c\u00f3 l\u1ed7i x\u1ea3y ra");
                                            $tcs.setResult(false);
                                            return;
                                        }
                                        $task2 = Core.Components.Forms.PopupEditor.prototype.Save.call(this, entity);
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        $tcs.setResult($taskResult2);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CreateInvoice: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $task3, 
                    $taskResult3, 
                    $task4, 
                    $taskResult4, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    rs, 
                    gridView, 
                    ledger, 
                    ledgerServices, 
                    $t, 
                    item, 
                    ledgerService, 
                    $t1, 
                    res, 
                    resService, 
                    ids, 
                    freightTrans, 
                    credit, 
                    item1, 
                    confirm, 
                    $t2, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,10,11,12], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = new Core.Clients.Client.$ctor1("Ledger").CreateAsync(TMS.API.Models.Ledger, this.ledgerEntity);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        rs = $taskResult1;
                                        if (rs != null) {
                                            $step = 2;
                                            continue;
                                        } else  {
                                            $step = 11;
                                            continue;
                                        }
                                    }
                                    case 2: {
                                        Core.Extensions.ReflectionExt.CopyPropFrom$1(this.ledgerEntity, rs);
                                        gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(null, null);
                                        ledger = Bridge.cast(System.Linq.Enumerable.from(gridView.RowData.Data, System.Object).firstOrDefault(null, null), TMS.API.Models.Ledger);
                                        ledger.ParentId = rs.Id;
                                        ledgerServices = new (System.Collections.Generic.List$1(TMS.API.Models.LedgerService)).ctor();
                                        $t = Bridge.getEnumerator(this.ledgerParentList);
                                        try {
                                            while ($t.moveNext()) {
                                                item = $t.Current;
                                                ledgerService = ($t1 = new TMS.API.Models.LedgerService(), $t1.InvoiceId = item.Id, $t1.TargetInvoiceId = rs.Id, $t1);
                                                ledgerServices.add(ledgerService);
                                            }
                                        } finally {
                                            if (Bridge.is($t, System.IDisposable)) {
                                                $t.System$IDisposable$Dispose();
                                            }
                                        }
                                        $task2 = new Core.Clients.Client.$ctor1("Ledger").CreateAsync(TMS.API.Models.Ledger, ledger);
                                        $step = 3;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        res = $taskResult2;
                                        $task3 = new Core.Clients.Client.$ctor1("LedgerService").BulkUpdateAsync(TMS.API.Models.LedgerService, ledgerServices);
                                        $step = 4;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        resService = $taskResult3;
                                        if (res != null && resService != null) {
                                            $step = 5;
                                            continue;
                                        } else  {
                                            $step = 9;
                                            continue;
                                        }
                                    }
                                    case 5: {
                                        if (System.Nullable.liftcmp("gt", res.OriginPriceBeforeTax, System.Decimal(0))) {
                                            $step = 6;
                                            continue;
                                        } 
                                        $step = 8;
                                        continue;
                                    }
                                    case 6: {
                                        ids = System.Linq.Enumerable.from(resService, TMS.API.Models.LedgerService).select(function (x) {
                                            return x.InvoiceId;
                                        });
                                        $task4 = new Core.Clients.Client.$ctor1("Ledger").GetRawList(TMS.API.Models.Ledger, System.String.format("?$filter=Active eq true and Id in ({0})", [Core.Extensions.IEnumerableExtensions.Combine(System.Nullable$1(System.Int32), ids)]));
                                        $step = 7;
                                        if ($task4.isCompleted()) {
                                            continue;
                                        }
                                        $task4.continue($asyncBody);
                                        return;
                                    }
                                    case 7: {
                                        $taskResult4 = $task4.getAwaitedResult();
                                        freightTrans = $taskResult4;
                                        credit = res.OriginPriceBeforeTax;
                                        $t1 = Bridge.getEnumerator(System.Linq.Enumerable.from(freightTrans, TMS.API.Models.Ledger).orderBy(function (x) {
                                            return x.InsertedDate;
                                        }));
                                        try {
                                            while ($t1.moveNext()) {
                                                item1 = $t1.Current;
                                                if (System.Nullable.liftcmp("lte", credit, System.Decimal(0))) {
                                                    break;
                                                }
                                                if (System.Nullable.lifteq("equals", item1.OriginDebit, System.Decimal(0))) {
                                                    continue;
                                                }
                                                if (System.Nullable.liftcmp("gte", credit, item1.OriginDebit)) {
                                                    credit = System.Nullable.lift2("sub", credit, item1.OriginDebit);
                                                    item1.OriginCredit = item1.OriginTotalPrice;
                                                    item1.OriginDebit = System.Decimal(0);
                                                    item1.IsAllPaid = true;
                                                } else {
                                                    if (System.Nullable.lifteq("equals", item1.OriginCredit, System.Decimal.lift(null))) {
                                                        item1.OriginCredit = System.Decimal(0);
                                                    }
                                                    item1.OriginCredit = System.Nullable.lift2("add", item1.OriginCredit, credit);
                                                    item1.OriginDebit = System.Nullable.lift2("sub", item1.OriginDebit, credit);
                                                    credit = System.Decimal(0);
                                                }
                                            }
                                        } finally {
                                            if (Bridge.is($t1, System.IDisposable)) {
                                                $t1.System$IDisposable$Dispose();
                                            }
                                        }
                                        confirm = ($t2 = new Core.Components.Forms.ConfirmDialog(), $t2.Content = System.String.format("B\u1ea1n c\u00f3 ch\u1eafc ch\u1eafn mu\u1ed1n chi {0:N0} cho {1} phi\u1ebfu c\u01b0\u1edbc v\u1eadn chuy\u1ec7n?", ledger.OriginPriceBeforeTax, Bridge.box(freightTrans.Count, System.Int32)), $t2);
                                        confirm.Render();
                                        confirm.YesConfirmed = Bridge.fn.combine(confirm.YesConfirmed, Bridge.fn.bind(this, function () {
                                            var $step = 0,
                                                $task1, 
                                                $taskResult1, 
                                                $jumpFromFinally, 
                                                resupdate, 
                                                $asyncBody = Bridge.fn.bind(this, function () {
                                                    for (;;) {
                                                        $step = System.Array.min([0,1], $step);
                                                        switch ($step) {
                                                            case 0: {
                                                                $task1 = new Core.Clients.Client.$ctor1("Ledger").BulkUpdateAsync(TMS.API.Models.Ledger, freightTrans);
                                                                $step = 1;
                                                                if ($task1.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task1.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 1: {
                                                                $taskResult1 = $task1.getAwaitedResult();
                                                                resupdate = $taskResult1;
                                                                if (resupdate != null) {
                                                                    Core.Extensions.Toast.Success("C\u1eadp nh\u1eadt th\u00e0nh c\u00f4ng");
                                                                } else {
                                                                    Core.Extensions.Toast.Warning("\u0110\u00e3 c\u00f3 l\u1ed7i x\u1ea3y ra");
                                                                }
                                                                return;
                                                            }
                                                            default: {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }, arguments);

                                            $asyncBody();
                                        }));
                                        confirm.NoConfirmed = Bridge.fn.combine(confirm.NoConfirmed, Bridge.fn.bind(this, function () {
                                            var $step = 0,
                                                $task1, 
                                                $taskResult1, 
                                                $jumpFromFinally, 
                                                $asyncBody = Bridge.fn.bind(this, function () {
                                                    for (;;) {
                                                        $step = System.Array.min([0,1], $step);
                                                        switch ($step) {
                                                            case 0: {
                                                                res.OriginPriceBeforeTax = System.Decimal(0);
                                                                $task1 = new Core.Clients.Client.$ctor1("Ledger").UpdateAsync(TMS.API.Models.Ledger, res);
                                                                $step = 1;
                                                                if ($task1.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task1.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 1: {
                                                                $taskResult1 = $task1.getAwaitedResult();
                                                                gridView.ClearRowData();
                                                                gridView.UpdateView$1(true);
                                                                return;
                                                            }
                                                            default: {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }, arguments);

                                            $asyncBody();
                                        }));
                                        $step = 8;
                                        continue;
                                    }
                                    case 8: {
                                        Core.Extensions.Toast.Success("T\u1ea1o phi\u1ebfu th\u00e0nh c\u00f4ng");
                                        Core.Components.Extensions.ComponentExt.SetShow(this, false, ["btnCreateInvoice"]);
                                        Core.Components.Extensions.ComponentExt.SetShow(this, true, ["btnSave"]);
                                        gridView.ClearRowData();
                                        this.UpdateView$1(true);
                                        $step = 10;
                                        continue;
                                    }
                                    case 9: {
                                        Core.Extensions.Toast.Warning("\u0110\u00e3 c\u00f3 l\u1ed7i x\u1ea3y ra");
                                        $step = 10;
                                        continue;
                                    }
                                    case 10: {
                                        $step = 12;
                                        continue;
                                    }
                                    case 11: {
                                        Core.Extensions.Toast.Warning("\u0110\u00e3 c\u00f3 l\u1ed7i x\u1ea3y ra");
                                        $step = 12;
                                        continue;
                                    }
                                    case 12: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            PaymentFreightTransportation: function (ledger) {
                window.clearTimeout(this.payment);
                this.payment = window.setTimeout(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.PaymentFreightTransportationAsync(ledger);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }), 500);
            },
            PaymentFreightTransportationAsync: function (ledger) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $task3, 
                    $taskResult3, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    gridView, 
                    ledgerDB, 
                    freightTransportations, 
                    ids, 
                    freightTrans, 
                    credit, 
                    $t, 
                    item, 
                    debit, 
                    $t1, 
                    item1, 
                    confirm, 
                    $t2, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3], $step);
                                switch ($step) {
                                    case 0: {
                                        if (this.ledgerEntity.Id <= 0) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(null, null);
                                        $task1 = new Core.Clients.Client.$ctor1("Ledger").FirstOrDefaultAsync(TMS.API.Models.Ledger, System.String.format("?$filter=Active eq true and Id eq {0}", [Bridge.box(ledger.Id, System.Int32)]));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        ledgerDB = $taskResult1;
                                        if (System.Nullable.lifteq("equals", ledger.OriginPriceBeforeTax, ledgerDB.OriginPriceBeforeTax)) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        $task2 = new Core.Clients.Client.$ctor1("LedgerService").GetRawList(TMS.API.Models.LedgerService, System.String.format("?$filter=Active eq true and TargetInvoiceId eq {0}", [Bridge.box(this.ledgerEntity.Id, System.Int32)]));
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        freightTransportations = $taskResult2;
                                        if (freightTransportations == null) {
                                            Core.Extensions.Toast.Warning("Kh\u00f4ng c\u00f3 phi\u1ebfu \u0111\u1ec3 chi");
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        ids = System.Linq.Enumerable.from(freightTransportations, TMS.API.Models.LedgerService).select(function (x) {
                                            return x.InvoiceId;
                                        });
                                        $task3 = new Core.Clients.Client.$ctor1("Ledger").GetRawList(TMS.API.Models.Ledger, System.String.format("?$filter=Active eq true and Id in ({0})", [Core.Extensions.IEnumerableExtensions.Combine(System.Nullable$1(System.Int32), ids)]));
                                        $step = 3;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        freightTrans = $taskResult3;
                                        if (System.Nullable.liftcmp("gt", ledger.OriginPriceBeforeTax, ledgerDB.OriginPriceBeforeTax)) {
                                            credit = System.Nullable.lift2("sub", ledger.OriginPriceBeforeTax, ledgerDB.OriginPriceBeforeTax);
                                            $t = Bridge.getEnumerator(System.Linq.Enumerable.from(freightTrans, TMS.API.Models.Ledger).orderBy(function (x) {
                                                return x.InsertedDate;
                                            }));
                                            try {
                                                while ($t.moveNext()) {
                                                    item = $t.Current;
                                                    if (System.Nullable.liftcmp("lte", credit, System.Decimal(0))) {
                                                        break;
                                                    }
                                                    if (System.Nullable.lifteq("equals", item.OriginDebit, System.Decimal(0))) {
                                                        continue;
                                                    }
                                                    if (System.Nullable.liftcmp("gte", credit, item.OriginDebit)) {
                                                        credit = System.Nullable.lift2("sub", credit, item.OriginDebit);
                                                        item.OriginCredit = item.OriginTotalPrice;
                                                        item.OriginDebit = System.Decimal(0);
                                                        item.IsAllPaid = true;
                                                    } else {
                                                        if (System.Nullable.lifteq("equals", item.OriginCredit, System.Decimal.lift(null))) {
                                                            item.OriginCredit = System.Decimal(0);
                                                        }
                                                        item.OriginCredit = System.Nullable.lift2("add", item.OriginCredit, credit);
                                                        item.OriginDebit = System.Nullable.lift2("sub", item.OriginDebit, credit);
                                                        credit = System.Decimal(0);
                                                    }
                                                }
                                            } finally {
                                                if (Bridge.is($t, System.IDisposable)) {
                                                    $t.System$IDisposable$Dispose();
                                                }
                                            }
                                        } else {
                                            debit = System.Nullable.lift2("sub", ledgerDB.OriginPriceBeforeTax, ledger.OriginPriceBeforeTax);
                                            $t1 = Bridge.getEnumerator(System.Linq.Enumerable.from(freightTrans, TMS.API.Models.Ledger).orderByDescending(function (x) {
                                                return x.InsertedDate;
                                            }));
                                            try {
                                                while ($t1.moveNext()) {
                                                    item1 = $t1.Current;
                                                    if (System.Nullable.liftcmp("lte", debit, System.Decimal(0))) {
                                                        break;
                                                    }
                                                    if (System.Nullable.lifteq("equals", item1.OriginCredit, System.Decimal(0))) {
                                                        continue;
                                                    }
                                                    if (System.Nullable.liftcmp("gte", debit, item1.OriginCredit)) {
                                                        debit = System.Nullable.lift2("sub", debit, item1.OriginCredit);
                                                        item1.OriginCredit = System.Decimal(0);
                                                        item1.OriginDebit = item1.OriginTotalPrice;
                                                        item1.IsAllPaid = false;
                                                    } else {
                                                        item1.OriginCredit = System.Nullable.lift2("sub", item1.OriginCredit, debit);
                                                        item1.OriginDebit = System.Nullable.lift2("add", item1.OriginDebit, debit);
                                                        debit = System.Decimal(0);
                                                        item1.IsAllPaid = false;
                                                    }
                                                }
                                            } finally {
                                                if (Bridge.is($t1, System.IDisposable)) {
                                                    $t1.System$IDisposable$Dispose();
                                                }
                                            }
                                        }
                                        confirm = ($t2 = new Core.Components.Forms.ConfirmDialog(), $t2.Content = System.String.format("B\u1ea1n c\u00f3 ch\u1eafc ch\u1eafn mu\u1ed1n chi {0:N0} cho {1} phi\u1ebfu c\u01b0\u1edbc v\u1eadn chuy\u1ec7n?", ledger.OriginPriceBeforeTax, Bridge.box(freightTrans.Count, System.Int32)), $t2);
                                        confirm.Render();
                                        confirm.YesConfirmed = Bridge.fn.combine(confirm.YesConfirmed, Bridge.fn.bind(this, function () {
                                            var $step = 0,
                                                $task1, 
                                                $taskResult1, 
                                                $task2, 
                                                $taskResult2, 
                                                $jumpFromFinally, 
                                                res, 
                                                $asyncBody = Bridge.fn.bind(this, function () {
                                                    for (;;) {
                                                        $step = System.Array.min([0,1,2,3,4,5], $step);
                                                        switch ($step) {
                                                            case 0: {
                                                                $task1 = new Core.Clients.Client.$ctor1("Ledger").BulkUpdateAsync(TMS.API.Models.Ledger, freightTrans);
                                                                $step = 1;
                                                                if ($task1.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task1.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 1: {
                                                                $taskResult1 = $task1.getAwaitedResult();
                                                                res = $taskResult1;
                                                                if (res != null) {
                                                                    $step = 2;
                                                                    continue;
                                                                } else  {
                                                                    $step = 4;
                                                                    continue;
                                                                }
                                                            }
                                                            case 2: {
                                                                $task2 = new Core.Clients.Client.$ctor1("Ledger").UpdateAsync(TMS.API.Models.Ledger, ledger);
                                                                $step = 3;
                                                                if ($task2.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task2.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 3: {
                                                                $taskResult2 = $task2.getAwaitedResult();
                                                                Core.Extensions.Toast.Success("C\u1eadp nh\u1eadt th\u00e0nh c\u00f4ng");
                                                                $step = 5;
                                                                continue;
                                                            }
                                                            case 4: {
                                                                Core.Extensions.Toast.Warning("\u0110\u00e3 c\u00f3 l\u1ed7i x\u1ea3y ra");
                                                                $step = 5;
                                                                continue;
                                                            }
                                                            case 5: {
                                                                return;
                                                            }
                                                            default: {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }, arguments);

                                            $asyncBody();
                                        }));
                                        confirm.NoConfirmed = Bridge.fn.combine(confirm.NoConfirmed, function () {
                                            gridView.UpdateView$1(true);
                                        });
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            GetPatchLedger: function (ledger) {
                var $t;
                var details = new (System.Collections.Generic.List$1(Core.ViewModels.PatchUpdateDetail)).ctor();
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = Core.Extensions.Utils.IdField, $t.Value = Bridge.toString(ledger.Id), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "OriginCredit", $t.Value = ledger.OriginCredit.toString(), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "OriginDebit", $t.Value = ledger.OriginDebit.toString(), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "IsAllPaid", $t.Value = System.Boolean.toString(ledger.IsAllPaid), $t));
                return ($t = new Core.ViewModels.PatchUpdate(), $t.Changes = details, $t);
            }
        }
    });

    Bridge.define("TMS.UI.Business.Accountant.CreditNoteListBL", {
        inherits: [Core.Components.Forms.TabEditor],
        fields: {
            gridView: null
        },
        props: {
            selectedLedger: null,
            ledgerEntity: {
                get: function () {
                    return Bridge.as(this.Entity, TMS.API.Models.Ledger);
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "Ledger");
                this.Name = "CreditNote List";
            }
        },
        methods: {
            AddCreditNote: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "CreditNote Editor", function () {
                                            var $t;
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Accountant.CreditNoteEditBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Th\u00eam m\u1edbi phi\u1ebfu UNC";
                                            instance.Entity = ($t = new TMS.API.Models.Ledger(), $t.InvoiceFormId = 16054, $t.BillDate = System.DateTime.getNow(), $t.InvoiceDate = System.DateTime.getNow(), $t);
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            EditCreditNote: function (ledger) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "CreditNote Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Accountant.CreditNoteEditBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Ch\u1ec9nh s\u1eeda phi\u1ebfu UNC";
                                            instance.Entity = ledger;
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            SelectedLedger: function (ledger) {
                this.selectedLedger = ledger;
            },
            SetInvoiceNoWhenDel: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    ledgers, 
                    no, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = new Core.Clients.Client.$ctor1("Ledger").GetRawList(TMS.API.Models.Ledger, System.String.format("?$filter=Active eq true and InvoiceFormId eq 16054 and ParentId eq null and Id ge {0} and TypeId eq null", [this.selectedLedger]));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        ledgers = $taskResult1;
                                        no = System.Int32.parse(System.Linq.Enumerable.from(ledgers, TMS.API.Models.Ledger).firstOrDefault(null, null).InvoiceNo.substr(10));
                                        ledgers.ForEach(function (x) {
                                            x.InvoiceNo = no < 10000 ? "GBC" + (System.DateTime.format(System.Nullable.getValue(x.InvoiceDate), "yy") || "") + "/" + (System.DateTime.format(System.Nullable.getValue(x.InvoiceDate), "MM") || "") + "-" + (System.String.format("{0:0000}", [Bridge.box(no, System.Int32)]) || "") : Bridge.toString(no);
                                            no = (no + 1) | 0;
                                        });
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("TMS.UI.Business.Accountant.DepartmentEditBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "MasterData");
                this.Name = "Department Editor";
            }
        }
    });

    Bridge.define("TMS.UI.Business.Accountant.DepartmentListBL", {
        inherits: [Core.Components.Forms.TabEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "MasterData");
                this.Name = "Department List";
            }
        },
        methods: {
            AddDepartment: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Department Editor", function () {
                                            var $t;
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Accountant.DepartmentEditBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Th\u00eam m\u1edbi b\u1ed9 ph\u1eadn";
                                            instance.Entity = ($t = new TMS.API.Models.MasterData(), $t.ParentId = 24944, $t);
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            EditDepartment: function (masterData) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Department Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Accountant.DepartmentEditBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Ch\u1ec9nh s\u1eeda b\u1ed9 ph\u1eadn";
                                            instance.Entity = masterData;
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            BeforeCreatedMasterData: function (masterData) {
                masterData.ParentId = 24944;
            }
        }
    });

    Bridge.define("TMS.UI.Business.Accountant.FilterDataBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        props: {
            ledgerEntity: {
                get: function () {
                    return Bridge.as(this.Entity, TMS.API.Models.Ledger);
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "Ledger");
                this.Name = "Filter Data";
            }
        },
        methods: {
            CreateLedger: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $task3, 
                    $taskResult3, 
                    $task4, 
                    $taskResult4, 
                    $task5, 
                    $taskResult5, 
                    $task6, 
                    $taskResult6, 
                    $task7, 
                    $taskResult7, 
                    $task8, 
                    $taskResult8, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    startDate, 
                    endDate, 
                    transportations, 
                    routes, 
                    getVendor, 
                    getObject, 
                    realTotalPrice, 
                    $t, 
                    route, 
                    transportationsGroup, 
                    newLedgerCVC, 
                    newLedgerLiftingLowering, 
                    newLedgerPayOnBehalf, 
                    $t1, 
                    transportation, 
                    date, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,20,21], $step);
                                switch ($step) {
                                    case 0: {
                                        if (Bridge.equals(this.ledgerEntity.StartDate, null) || Bridge.equals(this.ledgerEntity.EndDate, null) || this.ledgerEntity.VendorId == null) {
                                            Core.Extensions.Toast.Warning("Ch\u01b0a ch\u1ecdn \u0111\u1ee7 d\u1eef li\u1ec7u");
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        $task1 = this.Save(this.ledgerEntity);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        startDate = System.DateTime.format(System.DateTime.getDate(System.Nullable.getValue(this.ledgerEntity.StartDate)), "yyyy-MM-dd");
                                        endDate = System.DateTime.format(System.DateTime.getDate(System.Nullable.getValue(this.ledgerEntity.EndDate)), "yyyy-MM-dd");
                                        $task2 = new Core.Clients.Client.$ctor1("Transportation").GetRawList(TMS.API.Models.Transportation, System.String.format("?$filter=Active eq true and ClosingDate ge {0} and ReturnDate le {1} and (ReturnVendorId eq {2} or ClosingId eq {3})", startDate, endDate, Bridge.box(this.ledgerEntity.VendorId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), Bridge.box(this.ledgerEntity.VendorId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)));
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        transportations = $taskResult2;
                                        routes = System.Linq.Enumerable.from(transportations, TMS.API.Models.Transportation).select(function (x) {
                                            return x.RouteId;
                                        }).distinct().toList(System.Int32);
                                        $task3 = new Core.Clients.Client.$ctor1("Ledger").FirstOrDefaultAsync(TMS.API.Models.Ledger, System.String.format("?$filter=Active eq true and VendorId eq {0} and TypeId eq 2 and InvoiceFormId eq 16047", [Bridge.box(this.ledgerEntity.VendorId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]));
                                        $step = 3;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        getVendor = $taskResult3;
                                        getObject = null;
                                        if (getVendor != null) {
                                            $step = 4;
                                            continue;
                                        } 
                                        $step = 6;
                                        continue;
                                    }
                                    case 4: {
                                        $task4 = new Core.Clients.Client.$ctor1("Vendor").FirstOrDefaultAsync(TMS.API.Models.Vendor, System.String.format("?$filter=Active eq true and TypeId eq 23741 and Id eq {0}", [Bridge.box(getVendor.ObjectId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]));
                                        $step = 5;
                                        if ($task4.isCompleted()) {
                                            continue;
                                        }
                                        $task4.continue($asyncBody);
                                        return;
                                    }
                                    case 5: {
                                        $taskResult4 = $task4.getAwaitedResult();
                                        getObject = $taskResult4;
                                        $step = 6;
                                        continue;
                                    }
                                    case 6: {
                                        realTotalPrice = System.Decimal(0);
                                        if (routes.Count > 0) {
                                            $step = 7;
                                            continue;
                                        } 
                                        $step = 20;
                                        continue;
                                    }
                                    case 7: {
                                        $t = Bridge.getEnumerator(routes);
                                        $step = 8;
                                        continue;
                                    }
                                    case 8: {
                                        if ($t.moveNext()) {
                                            route = { v : $t.Current };
                                            $step = 9;
                                            continue;
                                        }
                                        $step = 19;
                                        continue;
                                    }
                                    case 9: {
                                        transportationsGroup = System.Linq.Enumerable.from(transportations, TMS.API.Models.Transportation).where((function ($me, route) {
                                            return function (x) {
                                                return System.Nullable.eq(x.RouteId, route.v);
                                            };
                                        })(this, route)).toList(TMS.API.Models.Transportation);
                                        newLedgerCVC = new TMS.API.Models.Ledger();
                                        this.CreateLedger$1(newLedgerCVC, System.Nullable.getValue(route.v), getVendor, getObject, System.Decimal(10));
                                        newLedgerLiftingLowering = new TMS.API.Models.Ledger();
                                        this.CreateLedger$1(newLedgerLiftingLowering, System.Nullable.getValue(route.v), getVendor, getObject, System.Decimal(8));
                                        newLedgerPayOnBehalf = new TMS.API.Models.Ledger();
                                        this.CreateLedger$1(newLedgerPayOnBehalf, System.Nullable.getValue(route.v), getVendor, getObject, System.Decimal(8));
                                        //var newLedgerOrther = new Ledger();
                                        //CreateLedger(newLedgerOrther, (int)route, getVendor, getObject, 8);
                                        $t1 = Bridge.getEnumerator(transportationsGroup);
                                        try {
                                            while ($t1.moveNext()) {
                                                transportation = $t1.Current;
                                                newLedgerCVC.OriginPriceAfterTax = System.Nullable.lift2("add", newLedgerCVC.OriginPriceAfterTax, System.Nullable.lifteq("equals", transportation.ClosingUnitPrice, System.Decimal.lift(null)) ? System.Decimal(0) : transportation.ClosingUnitPrice);
                                                newLedgerCVC.OriginPriceAfterTax = System.Nullable.lift2("add", newLedgerCVC.OriginPriceAfterTax, System.Nullable.lifteq("equals", transportation.ReturnUnitPrice, System.Decimal.lift(null)) ? System.Decimal(0) : transportation.ReturnUnitPrice);
                                                newLedgerCVC.OriginPriceAfterTax = System.Nullable.lift2("add", newLedgerCVC.OriginPriceAfterTax, System.Nullable.lifteq("equals", transportation.ClosingCombinationUnitPrice, System.Decimal.lift(null)) ? System.Decimal(0) : transportation.ClosingCombinationUnitPrice);
                                                newLedgerCVC.OriginPriceAfterTax = System.Nullable.lift2("mul", newLedgerCVC.OriginPriceAfterTax, newLedgerCVC.ExchangeRate);

                                                newLedgerLiftingLowering.OriginPriceAfterTax = System.Nullable.lift2("add", newLedgerLiftingLowering.OriginPriceAfterTax, System.Nullable.lifteq("equals", transportation.LiftFee, System.Decimal.lift(null)) ? System.Decimal(0) : transportation.LiftFee);
                                                newLedgerLiftingLowering.OriginPriceAfterTax = System.Nullable.lift2("add", newLedgerLiftingLowering.OriginPriceAfterTax, System.Nullable.lifteq("equals", transportation.LandingFee, System.Decimal.lift(null)) ? System.Decimal(0) : transportation.LandingFee);
                                                newLedgerLiftingLowering.OriginPriceAfterTax = System.Nullable.lift2("add", newLedgerLiftingLowering.OriginPriceAfterTax, System.Nullable.lifteq("equals", transportation.ReturnLiftFee, System.Decimal.lift(null)) ? System.Decimal(0) : transportation.ReturnLiftFee);
                                                newLedgerLiftingLowering.OriginPriceAfterTax = System.Nullable.lift2("add", newLedgerLiftingLowering.OriginPriceAfterTax, System.Nullable.lifteq("equals", transportation.ReturnClosingFee, System.Decimal.lift(null)) ? System.Decimal(0) : transportation.ReturnClosingFee);
                                                newLedgerLiftingLowering.OriginPriceAfterTax = System.Nullable.lift2("mul", newLedgerLiftingLowering.OriginPriceAfterTax, newLedgerCVC.ExchangeRate);

                                                newLedgerPayOnBehalf.OriginPriceAfterTax = System.Nullable.lift2("add", newLedgerPayOnBehalf.OriginPriceAfterTax, System.Nullable.lifteq("equals", transportation.CollectOnBehaftInvoinceNoFee, System.Decimal.lift(null)) ? System.Decimal(0) : transportation.CollectOnBehaftInvoinceNoFee);
                                                newLedgerPayOnBehalf.OriginPriceAfterTax = System.Nullable.lift2("add", newLedgerPayOnBehalf.OriginPriceAfterTax, System.Nullable.lifteq("equals", transportation.CollectOnBehaftFee, System.Decimal.lift(null)) ? System.Decimal(0) : transportation.CollectOnBehaftFee);
                                                newLedgerPayOnBehalf.OriginPriceAfterTax = System.Nullable.lift2("mul", newLedgerPayOnBehalf.OriginPriceAfterTax, newLedgerCVC.ExchangeRate);

                                                //newLedgerOrther.OriginPriceAfterTax += transportation.OrtherFeeInvoinceNo is null ? 0 : transportation.OrtherFeeInvoinceNo;
                                                //newLedgerOrther.OriginPriceAfterTax += transportation.OrtherFee is null ? 0 : transportation.OrtherFee;
                                                //newLedgerOrther.OriginPriceAfterTax *= newLedgerCVC.ExchangeRate;
                                            }
                                        } finally {
                                            if (Bridge.is($t1, System.IDisposable)) {
                                                $t1.System$IDisposable$Dispose();
                                            }
                                        }
                                        if (System.Nullable.liftcmp("gt", newLedgerCVC.OriginPriceAfterTax, System.Decimal(0))) {
                                            $step = 10;
                                            continue;
                                        } 
                                        $step = 12;
                                        continue;
                                    }
                                    case 10: {
                                        this.CalcLedger(newLedgerCVC);
                                        newLedgerCVC.Note = "CVC";
                                        this.CalcSumLedgerParent(this.ledgerEntity, newLedgerCVC);
                                        $task5 = new Core.Clients.Client.$ctor1("Ledger").CreateAsync(TMS.API.Models.Ledger, newLedgerCVC);
                                        $step = 11;
                                        if ($task5.isCompleted()) {
                                            continue;
                                        }
                                        $task5.continue($asyncBody);
                                        return;
                                    }
                                    case 11: {
                                        $taskResult5 = $task5.getAwaitedResult();
                                        $step = 12;
                                        continue;
                                    }
                                    case 12: {
                                        if (System.Nullable.liftcmp("gt", newLedgerLiftingLowering.OriginPriceAfterTax, System.Decimal(0))) {
                                            $step = 13;
                                            continue;
                                        } 
                                        $step = 15;
                                        continue;
                                    }
                                    case 13: {
                                        this.CalcLedger(newLedgerLiftingLowering);
                                        newLedgerLiftingLowering.Note = "N\u00e2ng h\u1ea1";
                                        this.CalcSumLedgerParent(this.ledgerEntity, newLedgerLiftingLowering);
                                        $task6 = new Core.Clients.Client.$ctor1("Ledger").CreateAsync(TMS.API.Models.Ledger, newLedgerLiftingLowering);
                                        $step = 14;
                                        if ($task6.isCompleted()) {
                                            continue;
                                        }
                                        $task6.continue($asyncBody);
                                        return;
                                    }
                                    case 14: {
                                        $taskResult6 = $task6.getAwaitedResult();
                                        $step = 15;
                                        continue;
                                    }
                                    case 15: {
                                        if (System.Nullable.liftcmp("gt", newLedgerPayOnBehalf.OriginPriceAfterTax, System.Decimal(0))) {
                                            $step = 16;
                                            continue;
                                        } 
                                        $step = 18;
                                        continue;
                                    }
                                    case 16: {
                                        this.CalcLedger(newLedgerPayOnBehalf);
                                        newLedgerPayOnBehalf.Note = "Chi h\u1ed9";
                                        this.CalcSumLedgerParent(this.ledgerEntity, newLedgerPayOnBehalf);
                                        $task7 = new Core.Clients.Client.$ctor1("Ledger").CreateAsync(TMS.API.Models.Ledger, newLedgerPayOnBehalf);
                                        $step = 17;
                                        if ($task7.isCompleted()) {
                                            continue;
                                        }
                                        $task7.continue($asyncBody);
                                        return;
                                    }
                                    case 17: {
                                        $taskResult7 = $task7.getAwaitedResult();
                                        $step = 18;
                                        continue;
                                    }
                                    case 18: {
                                        realTotalPrice = realTotalPrice.add(System.Nullable.getValue(newLedgerCVC.OriginPriceAfterTax).add(System.Nullable.getValue(newLedgerLiftingLowering.OriginPriceAfterTax)).add(System.Nullable.getValue(newLedgerPayOnBehalf.OriginPriceAfterTax)));
                                        //if (newLedgerOrther.OriginPriceAfterTax > 0)
                                        //{
                                        //    CalcLedger(newLedgerOrther);
                                        //    newLedgerOrther.Note = "CP khÃ¡c";
                                        //    await new Client(nameof(Ledger)).CreateAsync<Ledger>(newLedgerOrther);
                                        //    CalcLedgerParent(ledgerEntity, newLedgerOrther);
                                        //}
                                        $step = 8;
                                        continue;
                                    }

                                    case 20: {
                                        this.ledgerEntity.ObjectId = getVendor == null ? null : getVendor.ObjectId;
                                        this.ledgerEntity.Taxcode = getObject == null ? null : getObject.TaxCode;
                                        this.ledgerEntity.DebitAccId = getVendor == null ? null : getVendor.DebitAccId;
                                        this.ledgerEntity.CreditAccId = getVendor == null ? null : getVendor.CreditAccId;
                                        this.ledgerEntity.DebitAccVatId = getVendor == null ? null : getVendor.DebitAccVatId;
                                        this.ledgerEntity.CreditAccVatId = getVendor == null ? null : getVendor.CreditAccVatId;
                                        this.ledgerEntity.ItemsId = getVendor == null ? null : getVendor.ItemsId;
                                        date = "T\u1eeb " + (System.DateTime.format(System.DateTime.getDate(System.Nullable.getValue(this.ledgerEntity.StartDate)), "dd/MM/yyyy") || "") + " \u0111\u1ebfn " + (System.DateTime.format(System.DateTime.getDate(System.Nullable.getValue(this.ledgerEntity.EndDate)), "dd/MM/yyyy") || "");
                                        this.ledgerEntity.Note = date;
                                        this.CalcLedgerParent(this.ledgerEntity, realTotalPrice);
                                        $task8 = this.Save(this.ledgerEntity);
                                        $step = 21;
                                        if ($task8.isCompleted()) {
                                            continue;
                                        }
                                        $task8.continue($asyncBody);
                                        return;
                                    }
                                    case 21: {
                                        $taskResult8 = $task8.getAwaitedResult();
                                        this.Parent.UpdateView$1(true);
                                        this.Dispose();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CreateLedger$1: function (ledger, route, getVendor, getObject, vat) {
                ledger.ParentId = this.ledgerEntity.Id;
                ledger.RouteId = route;
                ledger.Vat = vat;
                ledger.OriginPriceAfterTax = System.Decimal(0);
                ledger.InvoiceFormId = this.ledgerEntity.InvoiceFormId;
                ledger.ExchangeRate = this.ledgerEntity.ExchangeRate;
                ledger.CurrencyId = this.ledgerEntity.CurrencyId;
                ledger.VendorId = this.ledgerEntity.VendorId;
                ledger.ObjectId = getVendor == null ? null : getVendor.ObjectId;
                ledger.Taxcode = getObject == null ? null : getObject.TaxCode;
                ledger.DebitAccId = getVendor == null ? null : getVendor.DebitAccId;
                ledger.CreditAccId = getVendor == null ? null : getVendor.CreditAccId;
                ledger.DebitAccVatId = getVendor == null ? null : getVendor.DebitAccVatId;
                ledger.CreditAccVatId = getVendor == null ? null : getVendor.CreditAccVatId;
                ledger.ItemsId = getVendor == null ? null : getVendor.ItemsId;
            },
            CalcLedger: function (ledger) {
                ledger.OriginVatAmount = System.Decimal.round((System.Nullable.lifteq("equals", ledger.OriginPriceAfterTax, System.Decimal.lift(null)) ? System.Decimal(0) : System.Nullable.getValue(ledger.OriginPriceAfterTax)).mul((System.Nullable.lifteq("equals", ledger.Vat, System.Decimal.lift(null)) ? System.Decimal(0) : System.Nullable.getValue(ledger.Vat))).div(System.Decimal(100)), 6);
                ledger.OriginPriceBeforeTax = System.Nullable.lift2("sub", (System.Nullable.lifteq("equals", ledger.OriginPriceAfterTax, System.Decimal.lift(null)) ? System.Decimal(0) : ledger.OriginPriceAfterTax), (System.Nullable.lifteq("equals", ledger.OriginVatAmount, System.Decimal.lift(null)) ? System.Decimal(0) : ledger.OriginVatAmount));
            },
            CalcSumLedgerParent: function (ledgerParent, ledger) {
                ledgerParent.OriginPriceBeforeTax = System.Nullable.lift2("add", ledgerParent.OriginPriceBeforeTax, ledger.OriginPriceBeforeTax);
                ledgerParent.OriginVatAmount = System.Nullable.lift2("add", ledgerParent.OriginVatAmount, ledger.OriginVatAmount);
                ledgerParent.OriginPriceAfterTax = System.Nullable.lift2("add", ledgerParent.OriginPriceAfterTax, ledger.OriginPriceAfterTax);
            },
            CalcLedgerParent: function (ledgerParent, realTotalPrice) {
                if (System.Nullable.lifteq("equals", ledgerParent.OriginRealTotalPrice, System.Decimal(0))) {
                    ledgerParent.OriginRealTotalPrice = System.Nullable.lift2("add", ledgerParent.OriginPriceAfterTax, System.Decimal.round(System.Nullable.getValue(ledgerParent.OriginPriceAfterTax).mul(System.Nullable.getValue(ledgerParent.Vat)).div(System.Decimal(100)), 6));
                } else {
                    ledgerParent.OriginRealTotalPrice = System.Nullable.lift2("add", ledgerParent.OriginRealTotalPrice, realTotalPrice.add(System.Decimal.round(realTotalPrice.mul(System.Nullable.getValue(ledgerParent.Vat)).div(System.Decimal(100)), 6)));
                }
                ledgerParent.OriginTotalPrice = System.Nullable.lift2("add", ledgerParent.OriginPriceAfterTax, System.Decimal.round(System.Nullable.getValue(ledgerParent.OriginPriceAfterTax).mul(System.Nullable.getValue(ledgerParent.Vat)).div(System.Decimal(100)), 6));
                ledgerParent.OriginReturnTotalPrice = System.Nullable.lift2("sub", ledgerParent.OriginTotalPrice, ledgerParent.OriginRealTotalPrice);
                ledgerParent.OriginRealTotalPrice = System.Nullable.lift2("mul", ledgerParent.OriginRealTotalPrice, ledgerParent.ExchangeRate);
                ledgerParent.OriginTotalPrice = System.Nullable.lift2("mul", ledgerParent.OriginTotalPrice, ledgerParent.ExchangeRate);
                ledgerParent.OriginReturnTotalPrice = System.Nullable.lift2("mul", ledgerParent.OriginReturnTotalPrice, ledgerParent.ExchangeRate);
                ledgerParent.OriginDebit = ledgerParent.OriginTotalPrice;
            }
        }
    });

    Bridge.define("TMS.UI.Business.Accountant.FreightRateChangeBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        props: {
            freightRateEntity: {
                get: function () {
                    return Bridge.as(this.Entity, TMS.API.Models.FreightRate);
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "FreightRate");
                this.Name = "FreightRate Change";
            }
        },
        methods: {
            SelectedCompare: function (freightRate) {
                this.CompareChanges(freightRate, this.freightRateEntity);
            },
            CompareChanges: function (change, cutting) {
                var $t, $t1, $t2;
                if (change != null) {
                    var listItem = Bridge.Reflection.getMembers(Bridge.getType(change), 16, 28);
                    var content = Core.Components.Extensions.ComponentExt.FindComponentByName(Core.Components.Section, this, "Wrapper1");
                    var gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(null, null);
                    var listViewItem = System.Linq.Enumerable.from(gridView.GetListViewItems(change), Core.Components.ListViewItem).firstOrDefault(null, null);
                    Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, content.FilterChildren$1(function (x) {
                        return true;
                    }), function (x) {
                        Core.Extensions.HtmlElementExtension.RemoveClass(x.ParentElement, "bg-warning");
                    });
                    Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, listViewItem.FilterChildren$1(function (x) {
                        return true;
                    }), function (x) {
                        Core.Extensions.HtmlElementExtension.RemoveClass(x.Element, "text-warning");
                    });
                    $t = Bridge.getEnumerator(listItem);
                    try {
                        while ($t.moveNext()) {
                            var item = { v : $t.Current };
                            var a1 = change[item.v.n];
                            var a2 = cutting[item.v.n];
                            if (a1 == null && a2 == null) {
                                continue;
                            }

                            if (a1 != null && a2 == null || a1 == null && a2 != null || a1 != null && a2 != null && !Bridge.referenceEquals(Bridge.toString(a1), Bridge.toString(a2))) {
                                Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, content.FilterChildren$1((function ($me, item) {
                                    return function (x) {
                                        return Bridge.referenceEquals(x.Name, item.v.n);
                                    };
                                })(this, item)), function (x) {
                                    Core.Extensions.HtmlElementExtension.AddClass(x.ParentElement, "bg-warning");
                                });
                                ($t1 = System.Linq.Enumerable.from(listViewItem.FilterChildren$1((function ($me, item) {
                                        return function (x) {
                                            return Bridge.referenceEquals(x.Name, item.v.n);
                                        };
                                    })(this, item)), Core.Components.EditableComponent).firstOrDefault(null, null)) != null && ($t2 = $t1.Element) != null ? Core.Extensions.HtmlElementExtension.AddClass($t2, "text-warning") : null;
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                }
            }
        }
    });

    Bridge.define("TMS.UI.Business.Accountant.FreightRateEditBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        props: {
            freightRateEntity: {
                get: function () {
                    return Bridge.as(this.Entity, TMS.API.Models.FreightRate);
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "FreightRate");
                this.Name = "FreightRate Editor";
            }
        },
        methods: {
            SetInfo: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    vendor, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = new Core.Clients.Client.$ctor1("Vendor").FirstOrDefaultAsync(TMS.API.Models.Vendor, System.String.format("?$filter=Active eq true and TypeId eq 7551 and Id eq {0}", [Bridge.box(this.freightRateEntity.BossId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        vendor = $taskResult1;
                                        this.freightRateEntity.UserId = vendor == null ? null : vendor.UserId;
                                        this.UpdateView$1(false, ["UserId"]);
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("TMS.UI.Business.Accountant.FreightRateListBL", {
        inherits: [Core.Components.Forms.TabEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "FreightRate");
                this.Name = "FreightRate List";
            }
        },
        methods: {
            SetClosing: function () {
                var gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(null, null);
                var listViewItems = System.Linq.Enumerable.from(gridView.RowData.Data).select(function (x) { return Bridge.cast(x, TMS.API.Models.FreightRate); }).toList(TMS.API.Models.FreightRate);
                listViewItems.ForEach(function (x) {
                    var listViewItem = System.Linq.Enumerable.from(gridView.GetListViewItems(x), Core.Components.ListViewItem).firstOrDefault(null, null);
                    if (listViewItem == null) {
                        return;
                    }
                    if (!Core.Clients.Client.Token.AllRoleIds.contains(34) && !Core.Clients.Client.Token.AllRoleIds.contains(8)) {
                        Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, listViewItem.FilterChildren$1(function (y) {
                            return Bridge.referenceEquals(y.GuiInfo.FieldName, "IsClosing") && !y.GuiInfo.Disabled;
                        }), function (y) {
                            y.Disabled = true;
                        });
                        if (x.IsClosing) {
                            Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, listViewItem.FilterChildren$1(function (y) {
                                return !y.GuiInfo.Disabled;
                            }), function (y) {
                                y.Disabled = false;
                            });
                            Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, listViewItem.FilterChildren$1(function (y) {
                                return !Bridge.referenceEquals(y.GuiInfo.FieldName, "btnRequestChange") && !y.GuiInfo.Disabled;
                            }), function (y) {
                                y.Disabled = true;
                            });
                        } else {
                            Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, listViewItem.FilterChildren$1(function (y) {
                                return Bridge.referenceEquals(y.GuiInfo.FieldName, "btnRequestChange") && !y.GuiInfo.Disabled;
                            }), function (y) {
                                y.Disabled = true;
                            });
                        }
                    } else {
                        if (x.IsClosing) {
                            if (x.IsApproveClosing) {
                                Core.Extensions.HtmlElementExtension.AddClass(listViewItem.Element, "bg-red1");
                                Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, listViewItem.FilterChildren$1(function (y) {
                                    return !Bridge.referenceEquals(y.GuiInfo.FieldName, "btnRequestChange") && !y.GuiInfo.Disabled;
                                }), function (y) {
                                    y.Disabled = true;
                                });
                            } else {
                                Core.Extensions.HtmlElementExtension.RemoveClass(listViewItem.Element, "bg-red1");
                                Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, listViewItem.FilterChildren$1(function (y) {
                                    return !Bridge.referenceEquals(y.GuiInfo.FieldName, "IsClosing") && !y.GuiInfo.Disabled;
                                }), function (y) {
                                    y.Disabled = true;
                                });
                            }
                        } else {
                            Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, listViewItem.FilterChildren$1(function (y) {
                                return Bridge.referenceEquals(y.GuiInfo.FieldName, "btnRequestChange") && !y.GuiInfo.Disabled;
                            }), function (y) {
                                y.Disabled = true;
                            });
                        }
                    }
                    if (x.IsChange && x.IsApproveClosing === false) {
                        Core.Extensions.HtmlElementExtension.AddClass(listViewItem.Element, "bg-red");
                    } else if (x.IsChange === false && x.IsApproveClosing === false) {
                        Core.Extensions.HtmlElementExtension.RemoveClass(listViewItem.Element, "bg-red");
                    }
                });
                gridView.BodyContextMenuShow = Bridge.fn.combine(gridView.BodyContextMenuShow, Bridge.fn.bind(this, function () {
                    Core.Components.Forms.ContextMenu.Instance.MenuItems = Bridge.fn.bind(this, function (_o1) {
                            var $t;
                            _o1.add(($t = new Core.Components.Forms.ContextMenuItem(), $t.Icon = "fas fa-exchange-alt mr-1", $t.Text = "Xem thay \u0111\u1ed5i", $t.Click = Bridge.fn.cacheBind(this, this.ChangeFreightRate), $t));
                            return _o1;
                        })(new (System.Collections.Generic.List$1(Core.Components.Forms.ContextMenuItem)).ctor());
                }));
            },
            AddFreightRate: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "FreightRate Editor", function () {
                                            var $t;
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Accountant.FreightRateEditBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Th\u00eam m\u1edbi bi\u1ec3u gi\u00e1 CVC";
                                            instance.Entity = ($t = new TMS.API.Models.FreightRate(), $t.TypeId = 25156, $t);
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            EditFreightRate: function (freightRate) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "FreightRate Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Accountant.FreightRateEditBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Ch\u1ec9nh s\u1eeda bi\u1ec3u gi\u00e1 CVC";
                                            instance.Entity = freightRate;
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ChangeFreightRate: function (arg) {
                var gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(null, null);
                var freightRate = Bridge.cast(System.Linq.Enumerable.from(gridView.GetSelectedRows(), System.Object).firstOrDefault(null, null), TMS.API.Models.FreightRate);
                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "FreightRate Change", function () {
                                                var type = Bridge.Reflection.getType("TMS.UI.Business.Accountant.FreightRateChangeBL");
                                                var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                                instance.Title = "Th\u00f4ng tin ch\u1ec9nh s\u1eeda";
                                                instance.Entity = freightRate;
                                                return instance;
                                            }, false, false);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            BusinessFreightRate: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Business Freight Rate", function () {
                                            var $t;
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Accountant.BusinessFreightRateBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "B\u1ea3ng gi\u00e1 tham kh\u1ea3o";
                                            instance.Entity = ($t = new TMS.API.Models.FreightRate(), $t.TypeId = 25157, $t);
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            EditBusinessFreightRate: function (freightRate) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Business Freight Rate", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Accountant.BusinessFreightRateBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Ch\u1ec9nh s\u1eeda b\u1ea3ng gi\u00e1 tham kh\u1ea3o";
                                            instance.Entity = freightRate;
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            RequestUnClosing: function (freightRate) {
                var $t;
                var gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(null, null);
                if (freightRate == null) {
                    return;
                }
                if (freightRate.IsApproveClosing && (Core.Clients.Client.Token.AllRoleIds.contains(34) || Core.Clients.Client.Token.AllRoleIds.contains(8))) {
                    var confirm = ($t = new Core.Components.Forms.ConfirmDialog(), $t.Content = (System.String.format("B\u1ea1n c\u00f3 ch\u1eafc ch\u1eafn mu\u1ed1n duy\u1ec7t m\u1edf kh\u00f3a<br />", null) || "") + (System.String.format("V\u1edbi l\u00fd do: {0}", [freightRate.Reason]) || ""), $t);
                    confirm.Render();
                    confirm.YesConfirmed = Bridge.fn.combine(confirm.YesConfirmed, Bridge.fn.bind(this, function () {
                        var $step = 0,
                            $task1, 
                            $taskResult1, 
                            $jumpFromFinally, 
                            listViewItem, 
                            $asyncBody = Bridge.fn.bind(this, function () {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            freightRate.IsApproveClosing = false;
                                            freightRate.IsClosing = false;
                                            freightRate.IsChange = true;
                                            $task1 = new Core.Clients.Client.$ctor1("FreightRate").PatchAsync(TMS.API.Models.FreightRate, this.GetPatchEntity(freightRate));
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            listViewItem = System.Linq.Enumerable.from(gridView.GetListViewItems(freightRate), Core.Components.ListViewItem).firstOrDefault(null, null);
                                            Core.Extensions.HtmlElementExtension.RemoveClass(listViewItem.Element, "bg-red1");
                                            Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, listViewItem.FilterChildren$1(function (y) {
                                                return !y.GuiInfo.Disabled;
                                            }), function (y) {
                                                y.Disabled = false;
                                            });
                                            Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, listViewItem.FilterChildren$1(function (y) {
                                                return Bridge.referenceEquals(y.GuiInfo.FieldName, "btnRequestChange") && !y.GuiInfo.Disabled;
                                            }), function (y) {
                                                y.Disabled = true;
                                            });
                                            return;
                                        }
                                        default: {
                                            return;
                                        }
                                    }
                                }
                            }, arguments);

                        $asyncBody();
                    }));
                } else if (!freightRate.IsApproveClosing && !Core.Clients.Client.Token.AllRoleIds.contains(34) && !Core.Clients.Client.Token.AllRoleIds.contains(8)) {
                    var confirm1 = ($t = new Core.Components.Forms.ConfirmDialog(), $t.NeedAnswer = true, $t.ComType = "Textbox", $t.Content = (System.String.format("B\u1ea1n c\u00f3 ch\u1eafc ch\u1eafn mu\u1ed1n g\u1eedi y\u00eau c\u1ea7u m\u1edf kh\u00f3a?<br />", null) || "") + "H\u00e3y nh\u1eadp l\u00fd do", $t);
                    confirm1.Render();
                    confirm1.YesConfirmed = Bridge.fn.combine(confirm1.YesConfirmed, Bridge.fn.bind(this, function () {
                        var $step = 0,
                            $task1, 
                            $taskResult1, 
                            $task2, 
                            $taskResult2, 
                            $jumpFromFinally, 
                            $t1, 
                            res, 
                            $asyncBody = Bridge.fn.bind(this, function () {
                                for (;;) {
                                    $step = System.Array.min([0,1,2,3,4], $step);
                                    switch ($step) {
                                        case 0: {
                                            freightRate.IsApproveClosing = true;
                                            freightRate.Reason = ($t1 = confirm1.Textbox) != null ? $t1.Text : null;
                                            $task1 = new Core.Clients.Client.$ctor1("FreightRate").PatchAsync(TMS.API.Models.FreightRate, this.GetPatchEntity(freightRate));
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            res = $taskResult1;
                                            if (res != null) {
                                                $step = 2;
                                                continue;
                                            } 
                                            $step = 4;
                                            continue;
                                        }
                                        case 2: {
                                            $task2 = new Core.Clients.Client.$ctor1("FreightRate").PostAsync(TMS.API.Models.FreightRate, freightRate, "RequestUnLock");
                                            $step = 3;
                                            if ($task2.isCompleted()) {
                                                continue;
                                            }
                                            $task2.continue($asyncBody);
                                            return;
                                        }
                                        case 3: {
                                            $taskResult2 = $task2.getAwaitedResult();
                                            $step = 4;
                                            continue;
                                        }
                                        case 4: {
                                            return;
                                        }
                                        default: {
                                            return;
                                        }
                                    }
                                }
                            }, arguments);

                        $asyncBody();
                    }));
                }
            },
            LockAllFreightRate: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    gridView, 
                    listViewItems, 
                    confirm, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                                            return Bridge.referenceEquals(x.GuiInfo.FieldName, "FreightRate");
                                        }, null);
                                        if (gridView == null) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        $task1 = gridView.GetRealTimeSelectedRows();
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        listViewItems = System.Linq.Enumerable.from(($taskResult1)).select(function (x) { return Bridge.cast(x, TMS.API.Models.FreightRate); }).where(function (x) {
                                            return x.IsClosing === false;
                                        }).toList(TMS.API.Models.FreightRate);
                                        if (System.Linq.Enumerable.from(listViewItems, TMS.API.Models.FreightRate).count() <= 0) {
                                            listViewItems = System.Linq.Enumerable.from(gridView.RowData.Data).select(function (x) { return Bridge.cast(x, TMS.API.Models.FreightRate); }).where(function (x) {
                                                return x.IsClosing === false;
                                            }).toList(TMS.API.Models.FreightRate);
                                        }
                                        if (listViewItems.Count <= 0) {
                                            Core.Extensions.Toast.Warning("Kh\u00f4ng c\u00f3 bi\u1ec3u gi\u00e1 cvc c\u1ea7n kh\u00f3a");
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        confirm = ($t = new Core.Components.Forms.ConfirmDialog(), $t.Content = "B\u1ea1n c\u00f3 ch\u1eafc ch\u1eafn mu\u1ed1n kh\u00f3a " + System.Linq.Enumerable.from(listViewItems, TMS.API.Models.FreightRate).count() + " bi\u1ec3u gi\u00e1 CVC ?", $t);
                                        confirm.Render();
                                        confirm.YesConfirmed = Bridge.fn.combine(confirm.YesConfirmed, Bridge.fn.bind(this, function () {
                                            var $step = 0,
                                                $task1, 
                                                $taskResult1, 
                                                $jumpFromFinally, 
                                                $t1, 
                                                item, 
                                                listViewItem, 
                                                $asyncBody = Bridge.fn.bind(this, function () {
                                                    for (;;) {
                                                        $step = System.Array.min([0,1,2,3,4], $step);
                                                        switch ($step) {
                                                            case 0: {
                                                                $t1 = Bridge.getEnumerator(listViewItems);
                                                                $step = 1;
                                                                continue;
                                                            }
                                                            case 1: {
                                                                if ($t1.moveNext()) {
                                                                    item = $t1.Current;
                                                                    $step = 2;
                                                                    continue;
                                                                }
                                                                $step = 4;
                                                                continue;
                                                            }
                                                            case 2: {
                                                                item.IsClosing = true;
                                                                listViewItem = System.Linq.Enumerable.from(gridView.GetListViewItems(item), Core.Components.ListViewItem).firstOrDefault(null, null);
                                                                $task1 = new Core.Clients.Client.$ctor1("FreightRate").PatchAsync(TMS.API.Models.FreightRate, this.GetPatchEntity(item));
                                                                $step = 3;
                                                                if ($task1.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task1.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 3: {
                                                                $taskResult1 = $task1.getAwaitedResult();
                                                                Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, listViewItem.FilterChildren$1(function (y) {
                                                                    return Bridge.referenceEquals(y.GuiInfo.FieldName, "btnRequestChange") && !y.GuiInfo.Disabled;
                                                                }), function (y) {
                                                                    y.Disabled = true;
                                                                });
                                                                $step = 1;
                                                                continue;
                                                            }
                                                            case 4: {
                                                                return;
                                                            }
                                                            default: {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }, arguments);

                                            $asyncBody();
                                        }));
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            UnLockAllFreightRate: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    gridView, 
                    listViewItems, 
                    confirm, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                                            return Bridge.referenceEquals(x.GuiInfo.FieldName, "FreightRate");
                                        }, null);
                                        if (gridView == null) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        $task1 = gridView.GetRealTimeSelectedRows();
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        listViewItems = System.Linq.Enumerable.from(($taskResult1)).select(function (x) { return Bridge.cast(x, TMS.API.Models.FreightRate); }).where(function (x) {
                                            return x.IsClosing;
                                        }).toList(TMS.API.Models.FreightRate);
                                        if (System.Linq.Enumerable.from(listViewItems, TMS.API.Models.FreightRate).count() <= 0) {
                                            listViewItems = System.Linq.Enumerable.from(gridView.RowData.Data).select(function (x) { return Bridge.cast(x, TMS.API.Models.FreightRate); }).where(function (x) {
                                                return x.IsClosing;
                                            }).toList(TMS.API.Models.FreightRate);
                                        }
                                        if (listViewItems.Count <= 0) {
                                            Core.Extensions.Toast.Warning("Kh\u00f4ng c\u00f3 bi\u1ec3u gi\u00e1 cvc c\u1ea7n m\u1edf kh\u00f3a");
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        confirm = ($t = new Core.Components.Forms.ConfirmDialog(), $t.Content = "B\u1ea1n c\u00f3 ch\u1eafc ch\u1eafn mu\u1ed1n m\u1edf kh\u00f3a " + System.Linq.Enumerable.from(listViewItems, TMS.API.Models.FreightRate).count() + " bi\u1ec3u gi\u00e1 CVC ?", $t);
                                        confirm.Render();
                                        confirm.YesConfirmed = Bridge.fn.combine(confirm.YesConfirmed, Bridge.fn.bind(this, function () {
                                            var $step = 0,
                                                $task1, 
                                                $taskResult1, 
                                                $task2, 
                                                $taskResult2, 
                                                $jumpFromFinally, 
                                                requests, 
                                                confirmRequest, 
                                                $t1, 
                                                item, 
                                                listViewItem, 
                                                $t2, 
                                                item1, 
                                                listViewItem1, 
                                                $asyncBody = Bridge.fn.bind(this, function () {
                                                    for (;;) {
                                                        $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,10,13], $step);
                                                        switch ($step) {
                                                            case 0: {
                                                                requests = System.Linq.Enumerable.from(listViewItems, TMS.API.Models.FreightRate).where(function (x) {
                                                                    return x.IsApproveClosing;
                                                                }).toList(TMS.API.Models.FreightRate);
                                                                if (requests.Count > 0) {
                                                                    $step = 1;
                                                                    continue;
                                                                } else  {
                                                                    $step = 6;
                                                                    continue;
                                                                }
                                                            }
                                                            case 1: {
                                                                confirmRequest = ($t1 = new Core.Components.Forms.ConfirmDialog(), $t1.Content = System.String.format("C\u00f3 {0} bi\u1ec3u gi\u00e1 CVC c\u1ea7n duy\u1ec7t b\u1ea1n c\u00f3 mu\u1ed1n duy\u1ec7t m\u1edf kh\u00f3a to\u00e0n b\u1ed9 kh\u00f4ng ?", [Bridge.box(System.Linq.Enumerable.from(listViewItems, TMS.API.Models.FreightRate).count(), System.Int32)]), $t1);
                                                                confirmRequest.Render();
                                                                confirmRequest.YesConfirmed = Bridge.fn.combine(confirmRequest.YesConfirmed, Bridge.fn.bind(this, function () {
                                                                    var $step = 0,
                                                                        $task1, 
                                                                        $taskResult1, 
                                                                        $jumpFromFinally, 
                                                                        $t2, 
                                                                        item, 
                                                                        listViewItem, 
                                                                        $asyncBody = Bridge.fn.bind(this, function () {
                                                                            for (;;) {
                                                                                $step = System.Array.min([0,1,2,3,4], $step);
                                                                                switch ($step) {
                                                                                    case 0: {
                                                                                        $t2 = Bridge.getEnumerator(requests);
                                                                                        $step = 1;
                                                                                        continue;
                                                                                    }
                                                                                    case 1: {
                                                                                        if ($t2.moveNext()) {
                                                                                            item = $t2.Current;
                                                                                            $step = 2;
                                                                                            continue;
                                                                                        }
                                                                                        $step = 4;
                                                                                        continue;
                                                                                    }
                                                                                    case 2: {
                                                                                        item.IsApproveClosing = false;
                                                                                        item.IsClosing = false;
                                                                                        item.IsChange = true;
                                                                                        $task1 = new Core.Clients.Client.$ctor1("FreightRate").PatchAsync(TMS.API.Models.FreightRate, this.GetPatchEntity(item));
                                                                                        $step = 3;
                                                                                        if ($task1.isCompleted()) {
                                                                                            continue;
                                                                                        }
                                                                                        $task1.continue($asyncBody);
                                                                                        return;
                                                                                    }
                                                                                    case 3: {
                                                                                        $taskResult1 = $task1.getAwaitedResult();
                                                                                        listViewItem = System.Linq.Enumerable.from(gridView.GetListViewItems(item), Core.Components.ListViewItem).firstOrDefault(null, null);
                                                                                        listViewItem.UpdateView();
                                                                                        Core.Extensions.HtmlElementExtension.RemoveClass(listViewItem.Element, "bg-red1");
                                                                                        Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, listViewItem.FilterChildren$1(function (y) {
                                                                                            return !y.GuiInfo.Disabled;
                                                                                        }), function (y) {
                                                                                            y.Disabled = false;
                                                                                        });
                                                                                        Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, listViewItem.FilterChildren$1(function (y) {
                                                                                            return Bridge.referenceEquals(y.GuiInfo.FieldName, "btnRequestChange") && !y.GuiInfo.Disabled;
                                                                                        }), function (y) {
                                                                                            y.Disabled = true;
                                                                                        });
                                                                                        $step = 1;
                                                                                        continue;
                                                                                    }
                                                                                    case 4: {
                                                                                        return;
                                                                                    }
                                                                                    default: {
                                                                                        return;
                                                                                    }
                                                                                }
                                                                            }
                                                                        }, arguments);

                                                                    $asyncBody();
                                                                }));
                                                                $t1 = Bridge.getEnumerator(System.Linq.Enumerable.from(listViewItems, TMS.API.Models.FreightRate).where(function (x) {
                                                                    return x.IsApproveClosing === false;
                                                                }));
                                                                $step = 2;
                                                                continue;
                                                            }
                                                            case 2: {
                                                                if ($t1.moveNext()) {
                                                                    item = $t1.Current;
                                                                    $step = 3;
                                                                    continue;
                                                                }
                                                                $step = 5;
                                                                continue;
                                                            }
                                                            case 3: {
                                                                item.IsClosing = false;
                                                                listViewItem = System.Linq.Enumerable.from(gridView.GetListViewItems(item), Core.Components.ListViewItem).firstOrDefault(null, null);
                                                                $task1 = new Core.Clients.Client.$ctor1("FreightRate").PatchAsync(TMS.API.Models.FreightRate, this.GetPatchEntity(item));
                                                                $step = 4;
                                                                if ($task1.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task1.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 4: {
                                                                $taskResult1 = $task1.getAwaitedResult();
                                                                Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, listViewItem.FilterChildren$1(function (y) {
                                                                    return Bridge.referenceEquals(y.GuiInfo.FieldName, "btnRequestChange") && !y.GuiInfo.Disabled;
                                                                }), function (y) {
                                                                    y.Disabled = true;
                                                                });
                                                                $step = 2;
                                                                continue;
                                                            }
                                                            case 5: {
                                                                $step = 13;
                                                                continue;
                                                            }
                                                            case 6: {
                                                                if (requests.Count <= 0) {
                                                                    $step = 7;
                                                                    continue;
                                                                } 
                                                                $step = 12;
                                                                continue;
                                                            }
                                                            case 7: {
                                                                $t2 = Bridge.getEnumerator(listViewItems);
                                                                $step = 8;
                                                                continue;
                                                            }
                                                            case 8: {
                                                                if ($t2.moveNext()) {
                                                                    item1 = $t2.Current;
                                                                    $step = 9;
                                                                    continue;
                                                                }
                                                                $step = 11;
                                                                continue;
                                                            }
                                                            case 9: {
                                                                item1.IsClosing = false;
                                                                listViewItem1 = System.Linq.Enumerable.from(gridView.GetListViewItems(item1), Core.Components.ListViewItem).firstOrDefault(null, null);
                                                                $task2 = new Core.Clients.Client.$ctor1("FreightRate").PatchAsync(TMS.API.Models.FreightRate, this.GetPatchEntity(item1));
                                                                $step = 10;
                                                                if ($task2.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task2.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 10: {
                                                                $taskResult2 = $task2.getAwaitedResult();
                                                                Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, listViewItem1.FilterChildren$1(function (y) {
                                                                    return Bridge.referenceEquals(y.GuiInfo.FieldName, "btnRequestChange") && !y.GuiInfo.Disabled;
                                                                }), function (y) {
                                                                    y.Disabled = true;
                                                                });
                                                                $step = 8;
                                                                continue;
                                                            }


                                                            case 13: {
                                                                return;
                                                            }
                                                            default: {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }, arguments);

                                            $asyncBody();
                                        }));
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            BeforeCreated: function (freightRate) {
                freightRate.TypeId = 25156;
            },
            BeforePatchUpdate: function (entity, patch) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    oldEntity, 
                    newFreightRate, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,6], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = new Core.Clients.Client.$ctor1("FreightRate").FirstOrDefaultAsync(TMS.API.Models.FreightRate, System.String.format("?$filter=Active eq true and Id eq {0}", [Bridge.box(entity.Id, System.Int32)]));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        oldEntity = $taskResult1;
                                        if (oldEntity.IsClosing && entity.IsClosing) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        if (System.Linq.Enumerable.from(patch.Changes, Core.ViewModels.PatchUpdateDetail).any(function (x) {
                                            return Bridge.referenceEquals(x.Field, "BossId") || Bridge.referenceEquals(x.Field, "UserId") || Bridge.referenceEquals(x.Field, "TransportationTypeId") || Bridge.referenceEquals(x.Field, "RouteId") || Bridge.referenceEquals(x.Field, "ReceivedId") || Bridge.referenceEquals(x.Field, "ReturnId") || Bridge.referenceEquals(x.Field, "UnitPriceCont20") || Bridge.referenceEquals(x.Field, "UnitPriceCont40") || Bridge.referenceEquals(x.Field, "UnitPriceNoVatCont20") || Bridge.referenceEquals(x.Field, "UnitPriceNoVatCont40") || Bridge.referenceEquals(x.Field, "UnitPriceNoVatTon") || Bridge.referenceEquals(x.Field, "UnitPriceTon") || Bridge.referenceEquals(x.Field, "StartDate") || Bridge.referenceEquals(x.Field, "EndDate") || Bridge.referenceEquals(x.Field, "Notes");
                                        }) && (System.Nullable.neq(oldEntity.BossId, entity.BossId)) || (System.Nullable.neq(oldEntity.UserId, entity.UserId)) || (System.Nullable.neq(oldEntity.TransportationTypeId, entity.TransportationTypeId)) || (System.Nullable.neq(oldEntity.RouteId, entity.RouteId)) || (System.Nullable.neq(oldEntity.ReceivedId, entity.ReceivedId)) || (System.Nullable.neq(oldEntity.ReturnId, entity.ReturnId)) || (System.Nullable.liftne("ne", oldEntity.UnitPriceCont20, entity.UnitPriceCont20)) || (System.Nullable.liftne("ne", oldEntity.UnitPriceCont40, entity.UnitPriceCont40)) || (System.Nullable.liftne("ne", oldEntity.UnitPriceNoVatCont20, entity.UnitPriceNoVatCont20)) || (System.Nullable.liftne("ne", oldEntity.UnitPriceNoVatCont40, entity.UnitPriceNoVatCont40)) || (System.Nullable.liftne("ne", oldEntity.UnitPriceNoVatTon, entity.UnitPriceNoVatTon)) || (System.Nullable.liftne("ne", oldEntity.UnitPriceTon, entity.UnitPriceTon)) || (!Bridge.equals(oldEntity.StartDate, entity.StartDate)) || (!Bridge.equals(oldEntity.EndDate, entity.EndDate)) || (!Bridge.referenceEquals(oldEntity.Notes, entity.Notes))) {
                                            $step = 2;
                                            continue;
                                        } 
                                        $step = 6;
                                        continue;
                                    }
                                    case 2: {
                                        if (entity.IsChange) {
                                            $step = 3;
                                            continue;
                                        } 
                                        $step = 5;
                                        continue;
                                    }
                                    case 3: {
                                        newFreightRate = new TMS.API.Models.FreightRate();
                                        Core.Extensions.ReflectionExt.CopyPropFrom$1(newFreightRate, oldEntity);
                                        newFreightRate.Id = 0;
                                        newFreightRate.RequestChangeId = entity.Id;
                                        $task2 = new Core.Clients.Client.$ctor1("FreightRate").CreateAsync(TMS.API.Models.FreightRate, newFreightRate);
                                        $step = 4;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        $step = 5;
                                        continue;
                                    }

                                    case 6: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            GetPatchEntity: function (freightRate) {
                var $t;
                var details = new (System.Collections.Generic.List$1(Core.ViewModels.PatchUpdateDetail)).ctor();
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = Core.Extensions.Utils.IdField, $t.Value = Bridge.toString(freightRate.Id), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "IsApproveClosing", $t.Value = System.Boolean.toString(freightRate.IsApproveClosing), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "IsClosing", $t.Value = System.Boolean.toString(freightRate.IsClosing), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "IsChange", $t.Value = System.Boolean.toString(freightRate.IsChange), $t));
                return ($t = new Core.ViewModels.PatchUpdate(), $t.Changes = details, $t);
            }
        }
    });

    Bridge.define("TMS.UI.Business.Accountant.FreightShipEditBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        fields: {
            calcTotalPrice: 0
        },
        props: {
            ledgerEntity: {
                get: function () {
                    return Bridge.as(this.Entity, TMS.API.Models.Ledger);
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "Ledger");
                this.Name = "FreightShip Editor";
            }
        },
        methods: {
            Save: function (entity) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    gridView, 
                    ledgers, 
                    res, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4], $step);
                                switch ($step) {
                                    case 0: {
                                        if (entity === void 0) { entity = null; }
                                        gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(null, null);
                                        ledgers = System.Linq.Enumerable.from(gridView.RowData.Data).select(function (x) { return Bridge.cast(x, TMS.API.Models.Ledger); }).toList(TMS.API.Models.Ledger);
                                        this.ledgerEntity.OriginTotalPrice = System.Decimal(0);
                                        ledgers.ForEach(Bridge.fn.bind(this, function (x) {
                                            this.ledgerEntity.OriginTotalPrice = System.Nullable.lift2("add", this.ledgerEntity.OriginTotalPrice, x.OriginPriceAfterTax);
                                        }));
                                        this.ledgerEntity.OriginDebit = System.Nullable.lift2("sub", this.ledgerEntity.OriginTotalPrice, (System.Nullable.lifteq("equals", this.ledgerEntity.OriginCredit, System.Decimal.lift(null)) ? System.Decimal(0) : this.ledgerEntity.OriginCredit));
                                        $task1 = Core.Components.Forms.PopupEditor.prototype.Save.call(this, this.ledgerEntity);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        res = $taskResult1;
                                        if (res) {
                                            $step = 2;
                                            continue;
                                        } 
                                        $step = 4;
                                        continue;
                                    }
                                    case 2: {
                                        ledgers.ForEach(Bridge.fn.bind(this, function (x) {
                                            x.ParentId = this.ledgerEntity.Id;
                                            x.InvoiceFormId = this.ledgerEntity.InvoiceFormId;
                                        }));
                                        $task2 = new Core.Clients.Client.$ctor1("Ledger").BulkUpdateAsync(TMS.API.Models.Ledger, ledgers);
                                        $step = 3;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        $tcs.setResult(res);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CalcTotalPrice: function (ledger) {
                window.clearTimeout(this.calcTotalPrice);
                this.calcTotalPrice = window.setTimeout(Bridge.fn.bind(this, function () {
                    this.CalcTotalPriceAsync(ledger);
                }), 500);
            },
            CalcTotalPriceAsync: function (ledger) {
                if (ledger.Quantity != null && System.Nullable.gte(ledger.Quantity, 0) && System.Nullable.liftne("ne", ledger.OriginUnitPrice, System.Decimal.lift(null)) && System.Nullable.liftcmp("gte", ledger.OriginUnitPrice, System.Decimal(0))) {
                    ledger.OriginPriceBeforeTax = System.Nullable.lift2("mul", System.Decimal.lift(ledger.Quantity), ledger.OriginUnitPrice);
                } else {
                    ledger.OriginPriceBeforeTax = System.Decimal(0);
                }
                if (System.Nullable.liftne("ne", ledger.OriginPriceBeforeTax, System.Decimal.lift(null)) && System.Nullable.liftcmp("gte", ledger.OriginPriceBeforeTax, System.Decimal(0)) && System.Nullable.liftne("ne", ledger.Vat, System.Decimal.lift(null)) && System.Nullable.liftcmp("gte", ledger.Vat, System.Decimal(0))) {
                    ledger.OriginVatAmount = System.Decimal.round(System.Nullable.getValue(ledger.OriginPriceBeforeTax).mul(System.Nullable.getValue(ledger.Vat)).div(System.Decimal(100)), 6);
                } else {
                    ledger.OriginVatAmount = System.Decimal(0);
                }
                if (System.Nullable.liftne("ne", ledger.OriginPriceBeforeTax, System.Decimal.lift(null)) && System.Nullable.liftne("ne", ledger.OriginVatAmount, System.Decimal.lift(null))) {
                    ledger.OriginPriceAfterTax = System.Nullable.lift2("add", ledger.OriginPriceBeforeTax, ledger.OriginVatAmount);
                } else {
                    ledger.OriginPriceAfterTax = System.Decimal(0);
                }
                var gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(null, null);
                var listViewItem = System.Linq.Enumerable.from(gridView.GetListViewItems(ledger), Core.Components.ListViewItem).firstOrDefault(null, null);
                listViewItem.UpdateView$1(false, ["OriginPriceBeforeTax", "OriginVatAmount", "OriginPriceAfterTax"]);
            }
        }
    });

    Bridge.define("TMS.UI.Business.Accountant.FreightShipListBL", {
        inherits: [Core.Components.Forms.TabEditor],
        props: {
            selectedLedger: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "Ledger");
                this.Name = "FreightShip List";
            }
        },
        methods: {
            CheckAllPaid: function () {
                var gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                        return Bridge.referenceEquals(x.GuiInfo.FieldName, "Ledger");
                    }, null);
                if (gridView == null) {
                    return;
                }
                gridView.BodyContextMenuShow = Bridge.fn.combine(gridView.BodyContextMenuShow, Bridge.fn.bind(this, function () {
                    Core.Components.Forms.ContextMenu.Instance.MenuItems = Bridge.fn.bind(this, function (_o1) {
                            var $t;
                            _o1.add(($t = new Core.Components.Forms.ContextMenuItem(), $t.Icon = "fas fa-money-check-alt mr-1", $t.Text = "Phi\u1ebfu chi", $t.Click = Bridge.fn.cacheBind(this, this.OpenPaymentVoucher), $t));
                            _o1.add(($t = new Core.Components.Forms.ContextMenuItem(), $t.Icon = "fas fa-money-check-alt mr-1", $t.Text = "Phi\u1ebfu UNC", $t.Click = Bridge.fn.cacheBind(this, this.OpenCreditNote), $t));
                            return _o1;
                        })(new (System.Collections.Generic.List$1(Core.Components.Forms.ContextMenuItem)).ctor());
                }));
            },
            AddFreightShip: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "FreightShip Editor", function () {
                                            var $t;
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Accountant.FreightShipEditBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Th\u00eam m\u1edbi phi\u1ebfu c\u01b0\u1edbc t\u00e0u";
                                            instance.Entity = ($t = new TMS.API.Models.Ledger(), $t.InvoiceFormId = 16048, $t.BillDate = System.DateTime.getNow(), $t.InvoiceDate = System.DateTime.getNow(), $t);
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            EditFreightShip: function (ledger) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "FreightShip Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Accountant.FreightShipEditBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Ch\u1ec9nh s\u1eeda phi\u1ebfu c\u01b0\u1edbc t\u00e0u";
                                            instance.Entity = ledger;
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            OpenCreditNote: function (arg) {
                var gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(null, null);
                var ledgers = System.Linq.Enumerable.from(gridView.GetSelectedRows()).select(function (x) { return Bridge.cast(x, TMS.API.Models.Ledger); }).toList(TMS.API.Models.Ledger);
                if (ledgers.Count <= 0) {
                    Core.Extensions.Toast.Warning("Vui l\u00f2ng ch\u1ecdn phi\u1ebfu mu\u1ed1n chi");
                    return;
                }
                if (System.Linq.Enumerable.from(ledgers, TMS.API.Models.Ledger).where(function (x) {
                        return x.ObjectId == null;
                    }).count() > 0) {
                    Core.Extensions.Toast.Warning("Vui l\u00f2ng ch\u1ec9 ch\u1ecdn nh\u1eefng phi\u1ebfu c\u00f3 \u0111\u1ed1i t\u01b0\u1ee3ng c\u00f4ng n\u1ee3");
                    return;
                }
                if (System.Linq.Enumerable.from(ledgers, TMS.API.Models.Ledger).select(function (x) {
                        return x.ObjectId;
                    }).distinct().count() > 1) {
                    Core.Extensions.Toast.Warning("Vui l\u00f2ng ch\u1ec9 ch\u1ecdn nh\u1eefng phi\u1ebfu c\u00f3 c\u00f9ng \u0111\u1ed1i t\u01b0\u1ee3ng c\u00f4ng n\u1ee3");
                    return;
                }
                if (System.Linq.Enumerable.from(ledgers, TMS.API.Models.Ledger).where(function (x) {
                        return System.Nullable.liftcmp("lte", x.OriginDebit, System.Decimal(0));
                    }).count() > 0) {
                    Core.Extensions.Toast.Warning("Vui l\u00f2ng ch\u1ec9 ch\u1ecdn nh\u1eefng phi\u1ebfu c\u00f2n n\u1ee3");
                    return;
                }
                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "CreditNote Editor", function () {
                                                var $t;
                                                var type = Bridge.Reflection.getType("TMS.UI.Business.Accountant.CreditNoteEditBL");
                                                var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                                var ledger = System.Linq.Enumerable.from(ledgers, TMS.API.Models.Ledger).firstOrDefault(null, null);
                                                instance.Title = "Phi\u1ebfu UNC";
                                                instance.Entity = ($t = new TMS.API.Models.Ledger(), $t.InvoiceFormId = 16054, $t.InvoiceDate = System.DateTime.getNow(), $t.VendorId = ledger.VendorId, $t.ObjectId = ledger.ObjectId, $t.Taxcode = ledger.Taxcode, $t);
                                                return instance;
                                            }, false, false);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            OpenPaymentVoucher: function (arg) {
                var gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(null, null);
                var ledgers = System.Linq.Enumerable.from(gridView.GetSelectedRows()).select(function (x) { return Bridge.cast(x, TMS.API.Models.Ledger); }).toList(TMS.API.Models.Ledger);
                if (ledgers.Count <= 0) {
                    Core.Extensions.Toast.Warning("Vui l\u00f2ng ch\u1ecdn phi\u1ebfu mu\u1ed1n chi");
                    return;
                }
                if (System.Linq.Enumerable.from(ledgers, TMS.API.Models.Ledger).where(function (x) {
                        return x.ObjectId == null;
                    }).count() > 0) {
                    Core.Extensions.Toast.Warning("Vui l\u00f2ng ch\u1ec9 ch\u1ecdn nh\u1eefng phi\u1ebfu c\u00f3 \u0111\u1ed1i t\u01b0\u1ee3ng c\u00f4ng n\u1ee3");
                    return;
                }
                if (System.Linq.Enumerable.from(ledgers, TMS.API.Models.Ledger).select(function (x) {
                        return x.ObjectId;
                    }).distinct().count() > 1) {
                    Core.Extensions.Toast.Warning("Vui l\u00f2ng ch\u1ec9 ch\u1ecdn nh\u1eefng phi\u1ebfu c\u00f3 c\u00f9ng \u0111\u1ed1i t\u01b0\u1ee3ng c\u00f4ng n\u1ee3");
                    return;
                }
                if (System.Linq.Enumerable.from(ledgers, TMS.API.Models.Ledger).where(function (x) {
                        return System.Nullable.liftcmp("lte", x.OriginDebit, System.Decimal(0));
                    }).count() > 0) {
                    Core.Extensions.Toast.Warning("Vui l\u00f2ng ch\u1ec9 ch\u1ecdn nh\u1eefng phi\u1ebfu c\u00f2n n\u1ee3");
                    return;
                }
                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "PaymentVoucher Editor", function () {
                                                var $t;
                                                var type = Bridge.Reflection.getType("TMS.UI.Business.Accountant.PaymentVoucherEditBL");
                                                var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                                var ledger = System.Linq.Enumerable.from(ledgers, TMS.API.Models.Ledger).firstOrDefault(null, null);
                                                instance.Title = "Phi\u1ebfu chi";
                                                instance.Entity = ($t = new TMS.API.Models.Ledger(), $t.InvoiceFormId = 16049, $t.InvoiceDate = System.DateTime.getNow(), $t.VendorId = ledger.VendorId, $t.ObjectId = ledger.ObjectId, $t.Taxcode = ledger.Taxcode, $t);
                                                return instance;
                                            }, false, false);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            SelectedLedger: function (ledger) {
                this.selectedLedger = ledger;
            },
            SetInvoiceNoWhenDel: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    ledgers, 
                    no, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = new Core.Clients.Client.$ctor1("Ledger").GetRawList(TMS.API.Models.Ledger, System.String.format("?$filter=Active eq true and InvoiceFormId eq 16048 and ParentId eq null and Id ge {0} and TypeId eq null", [this.selectedLedger]));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        ledgers = $taskResult1;
                                        no = System.Int32.parse(System.Linq.Enumerable.from(ledgers, TMS.API.Models.Ledger).firstOrDefault(null, null).InvoiceNo.substr(10));
                                        ledgers.ForEach(function (x) {
                                            x.InvoiceNo = no < 10000 ? "CT" + (System.DateTime.format(System.Nullable.getValue(x.InvoiceDate), "yy") || "") + "/" + (System.DateTime.format(System.Nullable.getValue(x.InvoiceDate), "MM") || "") + "-" + (System.String.format("{0:0000}", [Bridge.box(no, System.Int32)]) || "") : Bridge.toString(no);
                                            no = (no + 1) | 0;
                                        });
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("TMS.UI.Business.Accountant.FreightTransportationEditBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        fields: {
            gridView: null,
            costCalcLedger: 0,
            costCalcLedgerPriceBeforeTax: 0,
            costCalcLedgerChangeVatAmount: 0,
            costCalcLedgerParent: 0
        },
        props: {
            ledgerEntity: {
                get: function () {
                    return Bridge.as(this.Entity, TMS.API.Models.Ledger);
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "Ledger");
                this.Name = "Freight Transportation Editor";
            }
        },
        methods: {
            ToggleApprovalBtn: function (entity) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    ledgers, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        for (;;) {
                            $step = System.Array.min([0,1], $step);
                            switch ($step) {
                                case 0: {
                                    if (entity === void 0) { entity = null; }
                                    if (!Core.Clients.Client.Token.AllRoleIds.contains(31) && !Core.Clients.Client.Token.AllRoleIds.contains(8)) {
                                        Core.Components.Extensions.ComponentExt.SetShow(this, false, ["btnMakeUp", "wrapper-makeup"]);
                                        Core.Components.Extensions.ComponentExt.SetDisabled$1(this, true, ["Vat", "CurrencyId", "ExchangeRate"]);
                                    }
                                    $task1 = new Core.Clients.Client.$ctor1("Ledger").GetRawList(TMS.API.Models.Ledger, System.String.format("?$filter=Active eq true and ParentId eq {0} and InvoiceFormId eq {1} and TypeId eq null", Bridge.box(this.ledgerEntity.Id, System.Int32), Bridge.box(this.ledgerEntity.InvoiceFormId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)));
                                    $step = 1;
                                    if ($task1.isCompleted()) {
                                        continue;
                                    }
                                    $task1.continue($asyncBody);
                                    return;
                                }
                                case 1: {
                                    $taskResult1 = $task1.getAwaitedResult();
                                    ledgers = $taskResult1;
                                    if (ledgers.Count > 0) {
                                        Core.Components.Extensions.ComponentExt.SetShow(this, false, ["btnFilter"]);
                                        if (System.Linq.Enumerable.from(ledgers, TMS.API.Models.Ledger).where(function (x) {
                                            return x.IsMakeUp;
                                        }).any()) {
                                            Core.Components.Extensions.ComponentExt.SetShow(this, false, ["btnMakeUp"]);
                                        }
                                    }
                                    Core.Components.Forms.PopupEditor.prototype.ToggleApprovalBtn.call(this, entity);
                                    return;
                                }
                                default: {
                                    return;
                                }
                            }
                        }
                    }, arguments);

                $asyncBody();
            },
            SetGridView: function () {
                this.gridView = this.gridView || System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                        return Bridge.referenceEquals(x.Name, "Ledger");
                    }, null);
                var listViewItems = System.Linq.Enumerable.from(this.gridView.RowData.Data).select(function (x) { return Bridge.cast(x, TMS.API.Models.Ledger); }).toList(TMS.API.Models.Ledger);
                var makeup = System.Linq.Enumerable.from(listViewItems, TMS.API.Models.Ledger).where(function (x) {
                        return x.IsMakeUp;
                    }).firstOrDefault(null, null);
                listViewItems.ForEach(Bridge.fn.bind(this, function (x) {
                    var listViewItem = System.Linq.Enumerable.from(this.gridView.GetListViewItems(x), Core.Components.ListViewItem).firstOrDefault(null, null);
                    if (listViewItem == null) {
                        return;
                    }
                    if (x.IsMakeUp === false) {
                        Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, listViewItem.FilterChildren$1(function (y) {
                            return Bridge.referenceEquals(y.GuiInfo.FieldName, "OriginPriceAfterTax");
                        }), function (y) {
                            y.Disabled = true;
                        });
                        if (!Core.Clients.Client.Token.AllRoleIds.contains(31) && !Core.Clients.Client.Token.AllRoleIds.contains(8)) {
                            Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, listViewItem.FilterChildren$1(function (y) {
                                return Bridge.referenceEquals(y.GuiInfo.FieldName, "OriginVatAmount");
                            }), function (y) {
                                y.Disabled = true;
                            });
                            Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, listViewItem.FilterChildren$1(function (y) {
                                return Bridge.referenceEquals(y.GuiInfo.FieldName, "Vat");
                            }), function (y) {
                                y.Disabled = true;
                            });
                            Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, listViewItem.FilterChildren$1(function (y) {
                                return Bridge.referenceEquals(y.GuiInfo.FieldName, "OriginPriceBeforeTax");
                            }), function (y) {
                                y.Disabled = true;
                            });
                        }
                    } else {
                        if (!Core.Clients.Client.Token.AllRoleIds.contains(31) && !Core.Clients.Client.Token.AllRoleIds.contains(8)) {
                            this.gridView.RemoveRowById(x.Id);
                            this.gridView.UpdateView();
                        }
                    }
                }));
                if (makeup != null) {
                    var ledger = System.Linq.Enumerable.from(listViewItems, TMS.API.Models.Ledger).where(function (x) {
                            return System.Nullable.lifteq("equals", x.Vat, makeup.Vat);
                        }).firstOrDefault(null, null);
                    var listviewitem = System.Linq.Enumerable.from(this.gridView.GetListViewItems(ledger), Core.Components.ListViewItem).firstOrDefault(null, null);
                    if (ledger != null && makeup != null && !Core.Clients.Client.Token.AllRoleIds.contains(31) && !Core.Clients.Client.Token.AllRoleIds.contains(8)) {
                        ledger.OriginPriceAfterTax = System.Nullable.lift2("add", ledger.OriginPriceAfterTax, makeup.OriginPriceAfterTax);
                        ledger.OriginPriceBeforeTax = System.Nullable.lift2("add", ledger.OriginPriceBeforeTax, makeup.OriginPriceBeforeTax);
                        ledger.OriginVatAmount = System.Nullable.lift2("add", ledger.OriginVatAmount, makeup.OriginVatAmount);
                        listviewitem.UpdateView();
                    }
                }
            },
            SetExchangeRate: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    masterData, 
                    ledgers, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = new Core.Clients.Client.$ctor1("MasterData").FirstOrDefaultAsync(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and Id eq {0}", [Bridge.box(this.ledgerEntity.CurrencyId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        masterData = $taskResult1;
                                        this.ledgerEntity.ExchangeRate = System.Decimal.lift(masterData.Enum);
                                        this.UpdateView$1(false, ["ExchangeRate"]);
                                        if (this.ledgerEntity.Id <= 0) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        this.gridView = this.gridView || System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                                            return Bridge.referenceEquals(x.Name, "Ledger");
                                        }, null);
                                        ledgers = System.Linq.Enumerable.from(this.gridView.RowData.Data).select(function (x) { return Bridge.cast(x, TMS.API.Models.Ledger); }).toList(TMS.API.Models.Ledger);
                                        ledgers.ForEach(Bridge.fn.bind(this, function (x) {
                                            var $step = 0,
                                                $task1, 
                                                $jumpFromFinally, 
                                                $asyncBody = Bridge.fn.bind(this, function () {
                                                    for (;;) {
                                                        $step = System.Array.min([0,1], $step);
                                                        switch ($step) {
                                                            case 0: {
                                                                $task1 = this.CostCalcLedgerAsync(x);
                                                                $step = 1;
                                                                if ($task1.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task1.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 1: {
                                                                $task1.getAwaitedResult();
                                                                return;
                                                            }
                                                            default: {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }, arguments);

                                            $asyncBody();
                                        }));
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CostCalcLedgerAsync: function (ledger) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2], $step);
                                switch ($step) {
                                    case 0: {
                                        if (ledger.Id <= 0) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        if (System.Nullable.liftcmp("lt", ledger.Vat, System.Decimal(0)) || System.Nullable.liftcmp("gt", ledger.Vat, System.Decimal(100)) || System.Nullable.lifteq("equals", ledger.Vat, System.Decimal.lift(null))) {
                                            Core.Extensions.Toast.Warning("Thu\u1ebf ch\u1ec9 t\u1eeb 0% -> 100%");
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        ledger.OriginPriceAfterTax = System.Nullable.liftcmp("gt", ledger.ExchangeRate, System.Decimal(1)) ? System.Decimal.round(System.Nullable.getValue(ledger.OriginPriceAfterTax).div(System.Nullable.getValue(ledger.ExchangeRate)), 6) : ledger.OriginPriceAfterTax;
                                        if (ledger.IsMakeUp) {
                                            this.ledgerEntity.OriginMakeUpPrice = ledger.OriginPriceAfterTax;
                                            this.ledgerEntity.VatMakeUp = ledger.Vat;
                                        }
                                        ledger.CurrencyId = this.ledgerEntity.CurrencyId;
                                        ledger.ExchangeRate = this.ledgerEntity.ExchangeRate;
                                        ledger.OriginPriceAfterTax = System.Nullable.lift2("mul", ledger.OriginPriceAfterTax, (System.Nullable.lifteq("equals", ledger.ExchangeRate, System.Decimal.lift(null)) ? System.Decimal(0) : System.Nullable.getValue(ledger.ExchangeRate)));
                                        if (System.Nullable.lifteq("equals", ledger.Vat, System.Decimal(0))) {
                                            ledger.OriginVatAmount = System.Decimal(0);
                                            ledger.OriginPriceBeforeTax = ledger.OriginPriceAfterTax;
                                        } else {
                                            ledger.OriginVatAmount = System.Decimal.round((System.Nullable.lifteq("equals", ledger.OriginPriceAfterTax, System.Decimal.lift(null)) ? System.Decimal(0) : System.Nullable.getValue(ledger.OriginPriceAfterTax)).mul((System.Nullable.lifteq("equals", ledger.Vat, System.Decimal.lift(null)) ? System.Decimal(0) : System.Nullable.getValue(ledger.Vat))).div(System.Decimal(100)), 6);
                                            ledger.OriginPriceBeforeTax = System.Nullable.lift2("sub", (System.Nullable.lifteq("equals", ledger.OriginPriceAfterTax, System.Decimal.lift(null)) ? System.Decimal(0) : ledger.OriginPriceAfterTax), (System.Nullable.lifteq("equals", ledger.OriginVatAmount, System.Decimal.lift(null)) ? System.Decimal(0) : ledger.OriginVatAmount));
                                        }
                                        $task1 = new Core.Clients.Client.$ctor1("Ledger").UpdateAsync(TMS.API.Models.Ledger, ledger);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $task2 = this.CostCalcLedgerParentAsync(null);
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $task2.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CostCalcLedger: function (ledger) {
                window.clearTimeout(this.costCalcLedger);
                this.costCalcLedger = window.setTimeout(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.CostCalcLedgerAsync(ledger);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }), 500);
            },
            CostCalcLedgerPriceBeforeTax: function (ledger) {
                window.clearTimeout(this.costCalcLedgerPriceBeforeTax);
                this.costCalcLedgerPriceBeforeTax = window.setTimeout(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.CostCalcLedgerPriceBeforeTaxAsync(ledger);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }), 500);
            },
            CostCalcLedgerChangeVatAmount: function (ledger) {
                window.clearTimeout(this.costCalcLedgerChangeVatAmount);
                this.costCalcLedgerChangeVatAmount = window.setTimeout(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.CostCalcLedgerChangeVatAmountAsync(ledger);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }), 500);
            },
            CostCalcLedgerParent: function () {
                window.clearTimeout(this.costCalcLedgerParent);
                this.costCalcLedgerParent = window.setTimeout(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.CostCalcLedgerParentAsync(null);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }), 100);
            },
            CostCalcLedgerPriceBeforeTaxAsync: function (ledger) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2], $step);
                                switch ($step) {
                                    case 0: {
                                        if (System.Nullable.liftcmp("lt", ledger.OriginPriceAfterTax, System.Decimal(0))) {
                                            Core.Extensions.Toast.Warning("S\u1ed1 ti\u1ec1n kh\u00f4ng th\u1ec3 \u00e2m");
                                        }
                                        if (System.Nullable.liftcmp("gt", System.Nullable.lift2("add", ledger.OriginPriceBeforeTax, ledger.OriginVatAmount), ledger.OriginPriceAfterTax)) {
                                            ledger.OriginPriceAfterTax = System.Nullable.lift2("add", ledger.OriginPriceAfterTax, (System.Nullable.lift2("sub", System.Nullable.lift2("add", ledger.OriginPriceBeforeTax, ledger.OriginVatAmount), ledger.OriginPriceAfterTax)));
                                        } else {
                                            ledger.OriginVatAmount = System.Decimal.round((System.Nullable.lifteq("equals", ledger.OriginPriceAfterTax, System.Decimal.lift(null)) ? System.Decimal(0) : System.Nullable.getValue(ledger.OriginPriceAfterTax)).sub((System.Nullable.lifteq("equals", ledger.OriginPriceBeforeTax, System.Decimal.lift(null)) ? System.Decimal(0) : System.Nullable.getValue(ledger.OriginPriceBeforeTax))), 6);
                                        }
                                        $task1 = new Core.Clients.Client.$ctor1("Ledger").PatchAsync(TMS.API.Models.Ledger, this.GetPatchLedger(ledger));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $task2 = this.CostCalcLedgerParentAsync(null);
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $task2.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CostCalcLedgerChangeVatAmountAsync: function (ledger) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2], $step);
                                switch ($step) {
                                    case 0: {
                                        if (System.Nullable.liftcmp("lt", ledger.OriginVatAmount, System.Decimal(0))) {
                                            Core.Extensions.Toast.Warning("Thu\u1ebf VAT kh\u00f4ng th\u1ec3 \u00e2m");
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        if (System.Nullable.liftcmp("gt", ledger.OriginVatAmount, ledger.OriginPriceAfterTax)) {
                                            Core.Extensions.Toast.Warning("Thu\u1ebf VAT kh\u00f4ng th\u1ec3 l\u1edbn h\u01a1n t\u1ed5ng ti\u1ec1n");
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        ledger.OriginPriceBeforeTax = System.Decimal.round((System.Nullable.lifteq("equals", ledger.OriginPriceAfterTax, System.Decimal.lift(null)) ? System.Decimal(0) : System.Nullable.getValue(ledger.OriginPriceAfterTax)).sub((System.Nullable.lifteq("equals", ledger.OriginVatAmount, System.Decimal.lift(null)) ? System.Decimal(0) : System.Nullable.getValue(ledger.OriginVatAmount))), 6);
                                        $task1 = new Core.Clients.Client.$ctor1("Ledger").PatchAsync(TMS.API.Models.Ledger, this.GetPatchLedger(ledger));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $task2 = this.CostCalcLedgerParentAsync(null);
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $task2.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CalcVAT: function (PriceAfterTax, VatAmount) {
                return System.Decimal.toDecimalPlaces((System.Nullable.lifteq("equals", VatAmount, System.Decimal.lift(null)) ? System.Decimal(0) : System.Nullable.getValue(VatAmount)).div(System.Decimal(100)).mul((System.Nullable.lifteq("equals", PriceAfterTax, System.Decimal.lift(null)) ? System.Decimal(0) : System.Nullable.getValue(PriceAfterTax))), 5, 6);
            },
            CostCalcLedgerParentAsync: function (ledgers) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    makeUp, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (this.ledgerEntity.Id <= 0) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        if (ledgers == null) {
                                            this.gridView = this.gridView || System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                                                return Bridge.referenceEquals(x.Name, "Ledger");
                                            }, null);
                                            ledgers = System.Linq.Enumerable.from(this.gridView.RowData.Data).select(function (x) { return Bridge.cast(x, TMS.API.Models.Ledger); }).toList(TMS.API.Models.Ledger);
                                        }
                                        this.ledgerEntity.OriginPriceBeforeTax = System.Decimal(0);
                                        this.ledgerEntity.OriginVatAmount = System.Decimal(0);
                                        this.ledgerEntity.OriginPriceAfterTax = System.Decimal(0);
                                        this.ledgerEntity.OriginRealTotalPrice = System.Decimal(0);
                                        this.ledgerEntity.OriginTotalPrice = System.Decimal(0);
                                        makeUp = System.Decimal(0);
                                        ledgers.ForEach(Bridge.fn.bind(this, function (x) {
                                            this.ledgerEntity.OriginPriceBeforeTax = System.Nullable.lift2("add", this.ledgerEntity.OriginPriceBeforeTax, x.OriginPriceBeforeTax);
                                            this.ledgerEntity.OriginVatAmount = System.Nullable.lift2("add", this.ledgerEntity.OriginVatAmount, x.OriginVatAmount);
                                            this.ledgerEntity.OriginPriceAfterTax = System.Nullable.lift2("add", this.ledgerEntity.OriginPriceAfterTax, x.OriginPriceAfterTax);
                                            this.ledgerEntity.OriginRealTotalPrice = System.Nullable.lift2("add", this.ledgerEntity.OriginRealTotalPrice, x.IsMakeUp ? System.Decimal(0) : x.OriginPriceAfterTax);
                                            if (x.IsMakeUp) {
                                                makeUp = System.Nullable.getValue(x.OriginPriceAfterTax);
                                            }
                                        }));
                                        this.ledgerEntity.OriginRealTotalPrice = System.Nullable.lift2("add", this.ledgerEntity.OriginRealTotalPrice, System.Decimal.round(System.Nullable.getValue(this.ledgerEntity.OriginRealTotalPrice).mul(System.Nullable.getValue(this.ledgerEntity.Vat)).div(System.Decimal(100)), 6).add(System.Decimal.round(makeUp.mul(System.Nullable.getValue(this.ledgerEntity.Vat)).div(System.Decimal(100)), 6)));
                                        this.ledgerEntity.OriginTotalPrice = System.Nullable.lift2("add", this.ledgerEntity.OriginPriceAfterTax, System.Decimal.round(System.Nullable.getValue(this.ledgerEntity.OriginPriceAfterTax).mul(System.Nullable.getValue(this.ledgerEntity.Vat)).div(System.Decimal(100)), 6));
                                        this.ledgerEntity.OriginReturnTotalPrice = System.Nullable.lift2("sub", this.ledgerEntity.OriginTotalPrice, this.ledgerEntity.OriginRealTotalPrice);
                                        this.ledgerEntity.OriginRealTotalPrice = System.Nullable.lift2("mul", this.ledgerEntity.OriginRealTotalPrice, this.ledgerEntity.ExchangeRate);
                                        this.ledgerEntity.OriginTotalPrice = System.Nullable.lift2("mul", this.ledgerEntity.OriginTotalPrice, this.ledgerEntity.ExchangeRate);
                                        this.ledgerEntity.OriginReturnTotalPrice = System.Nullable.lift2("mul", this.ledgerEntity.OriginReturnTotalPrice, this.ledgerEntity.ExchangeRate);
                                        this.ledgerEntity.OriginDebit = System.Nullable.lift2("sub", this.ledgerEntity.OriginTotalPrice, (System.Nullable.lifteq("equals", this.ledgerEntity.OriginCredit, System.Decimal.lift(null)) ? System.Decimal(0) : this.ledgerEntity.OriginCredit));
                                        $task1 = this.Save(this.ledgerEntity);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        this.UpdateView();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            FilterData: function (ledger) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (System.Nullable.liftcmp("gt", ledger.Vat, System.Decimal(100))) {
                                            Core.Extensions.Toast.Warning("Thu\u1ebf ph\u1ea3i nh\u1ecf h\u01a1n 100%");
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        if (Bridge.equals(ledger.InvoiceDate, null)) {
                                            Core.Extensions.Toast.Warning("Ng\u00e0y is required");
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        Core.Components.Extensions.ComponentExt.SetShow(this, false, ["btnFilter"]);
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Filter Data", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Accountant.FilterDataBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "T\u1ea1o d\u1eef li\u1ec7u";
                                            instance.Entity = ledger;
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ImportMakeUpFee: function (ledger) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        Core.Components.Extensions.ComponentExt.SetShow(this, false, ["btnMakeUp"]);
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "MakeUp Fee", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Accountant.MakeUpFeeBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Nh\u1eadp chi ph\u00ed";
                                            instance.Entity = ledger;
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            SetObjectLedgers: function () {
                var $t;
                if (this.ledgerEntity.Id <= 0) {
                    return;
                }
                if (this.ledgerEntity.VendorId == null) {
                    return;
                }
                var confirm = ($t = new Core.Components.Forms.ConfirmDialog(), $t.Content = "B\u1ea1n c\u00f3 ch\u1eafc ch\u1eafn mu\u1ed1n \u0111\u1ed5i \u0111\u1ed1i t\u01b0\u1ee3ng c\u00f4ng n\u1ee3", $t);
                confirm.Render();
                confirm.YesConfirmed = Bridge.fn.combine(confirm.YesConfirmed, Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $task2, 
                        $taskResult2, 
                        $task3, 
                        $taskResult3, 
                        $task4, 
                        $taskResult4, 
                        $jumpFromFinally, 
                        ledgers, 
                        getVendor, 
                        getObject, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7,8], $step);
                                switch ($step) {
                                    case 0: {
                                        this.gridView = this.gridView || System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                                            return Bridge.referenceEquals(x.Name, "Ledger");
                                        }, null);
                                        ledgers = System.Linq.Enumerable.from(this.gridView.RowData.Data).select(function (x) { return Bridge.cast(x, TMS.API.Models.Ledger); }).toList(TMS.API.Models.Ledger);
                                        $task1 = new Core.Clients.Client.$ctor1("Ledger").FirstOrDefaultAsync(TMS.API.Models.Ledger, System.String.format("?$filter=Active eq true and VendorId eq {0} and TypeId eq 2 and InvoiceFormId eq 16047", [Bridge.box(this.ledgerEntity.VendorId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        getVendor = $taskResult1;
                                        getObject = null;
                                        if (getVendor != null) {
                                            $step = 2;
                                            continue;
                                        } 
                                        $step = 4;
                                        continue;
                                    }
                                    case 2: {
                                        $task2 = new Core.Clients.Client.$ctor1("Vendor").FirstOrDefaultAsync(TMS.API.Models.Vendor, System.String.format("?$filter=Active eq true and TypeId eq 23741 and Id eq {0}", [Bridge.box(getVendor.ObjectId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]));
                                        $step = 3;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        getObject = $taskResult2;
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        if (ledgers.Count > 0) {
                                            $step = 5;
                                            continue;
                                        } 
                                        $step = 7;
                                        continue;
                                    }
                                    case 5: {
                                        ledgers.ForEach(function (x) {
                                            x.ObjectId = getVendor == null ? null : getVendor.ObjectId;
                                            x.Taxcode = getObject == null ? null : getObject.TaxCode;
                                            x.DebitAccId = getVendor == null ? null : getVendor.DebitAccId;
                                            x.CreditAccId = getVendor == null ? null : getVendor.CreditAccId;
                                            x.DebitAccVatId = getVendor == null ? null : getVendor.DebitAccVatId;
                                            x.CreditAccVatId = getVendor == null ? null : getVendor.CreditAccVatId;
                                            x.ItemsId = getVendor == null ? null : getVendor.ItemsId;
                                        });
                                        $task3 = new Core.Clients.Client.$ctor1("Ledger").BulkUpdateAsync(TMS.API.Models.Ledger, ledgers);
                                        $step = 6;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 6: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        $step = 7;
                                        continue;
                                    }
                                    case 7: {
                                        this.ledgerEntity.Address = getObject.Address;
                                        $task4 = new Core.Clients.Client.$ctor1("Ledger").PatchAsync(TMS.API.Models.Ledger, this.GetPatchObjectLedger(this.ledgerEntity));
                                        $step = 8;
                                        if ($task4.isCompleted()) {
                                            continue;
                                        }
                                        $task4.continue($asyncBody);
                                        return;
                                    }
                                    case 8: {
                                        $taskResult4 = $task4.getAwaitedResult();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }));
            },
            GetPatchLedger: function (ledger) {
                var $t;
                var details = new (System.Collections.Generic.List$1(Core.ViewModels.PatchUpdateDetail)).ctor();
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = Core.Extensions.Utils.IdField, $t.Value = Bridge.toString(ledger.Id), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "OriginVatAmount", $t.Value = ledger.OriginVatAmount.toString(), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "OriginPriceBeforeTax", $t.Value = ledger.OriginPriceBeforeTax.toString(), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "OriginPriceAfterTax", $t.Value = ledger.OriginPriceAfterTax.toString(), $t));
                return ($t = new Core.ViewModels.PatchUpdate(), $t.Changes = details, $t);
            },
            GetPatchObjectLedger: function (ledger) {
                var $t;
                var details = new (System.Collections.Generic.List$1(Core.ViewModels.PatchUpdateDetail)).ctor();
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = Core.Extensions.Utils.IdField, $t.Value = Bridge.toString(ledger.Id), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "ObjectId", $t.Value = System.Nullable.toString(ledger.ObjectId, null), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "Address", $t.Value = Bridge.toString(ledger.Address), $t));
                return ($t = new Core.ViewModels.PatchUpdate(), $t.Changes = details, $t);
            }
        }
    });

    Bridge.define("TMS.UI.Business.Accountant.FreightTransportationListBL", {
        inherits: [Core.Components.Forms.TabEditor],
        props: {
            selectedLedger: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "Ledger");
                this.Name = "Freight Transportation";
            }
        },
        methods: {
            CheckAllPaid: function () {
                var gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                        return Bridge.referenceEquals(x.GuiInfo.FieldName, "Ledger");
                    }, null);
                if (gridView == null) {
                    return;
                }
                gridView.BodyContextMenuShow = Bridge.fn.combine(gridView.BodyContextMenuShow, Bridge.fn.bind(this, function () {
                    Core.Components.Forms.ContextMenu.Instance.MenuItems = Bridge.fn.bind(this, function (_o1) {
                            var $t;
                            _o1.add(($t = new Core.Components.Forms.ContextMenuItem(), $t.Icon = "fas fa-money-check-alt mr-1", $t.Text = "Phi\u1ebfu chi", $t.Click = Bridge.fn.cacheBind(this, this.OpenPaymentVoucher), $t));
                            _o1.add(($t = new Core.Components.Forms.ContextMenuItem(), $t.Icon = "fas fa-money-check-alt mr-1", $t.Text = "Phi\u1ebfu UNC", $t.Click = Bridge.fn.cacheBind(this, this.OpenCreditNote), $t));
                            return _o1;
                        })(new (System.Collections.Generic.List$1(Core.Components.Forms.ContextMenuItem)).ctor());
                }));
            },
            AddFreightTransportation: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Freight Transportation Editor", function () {
                                            var $t;
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Accountant.FreightTransportationEditBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Th\u00eam m\u1edbi phi\u1ebfu c\u01b0\u1edbc v\u1eadn chuy\u1ec3n";
                                            instance.Entity = ($t = new TMS.API.Models.Ledger(), $t.ExchangeRate = System.Decimal(1), $t.CurrencyId = 16083, $t.Vat = System.Decimal(0), $t.InvoiceFormId = 16047, $t.BillDate = System.DateTime.getNow(), $t.InvoiceDate = System.DateTime.getNow(), $t);
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            EditFreightTransportation: function (ledger) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Freight Transportation Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Accountant.FreightTransportationEditBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Ch\u1ec9nh s\u1eeda phi\u1ebfu c\u01b0\u1edbc v\u1eadn chuy\u1ec3n";
                                            instance.Entity = ledger;
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            OpenCreditNote: function (arg) {
                var gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(null, null);
                var ledgers = System.Linq.Enumerable.from(gridView.GetSelectedRows()).select(function (x) { return Bridge.cast(x, TMS.API.Models.Ledger); }).toList(TMS.API.Models.Ledger);
                if (ledgers.Count <= 0) {
                    Core.Extensions.Toast.Warning("Vui l\u00f2ng ch\u1ecdn phi\u1ebfu mu\u1ed1n chi");
                    return;
                }
                if (System.Linq.Enumerable.from(ledgers, TMS.API.Models.Ledger).where(function (x) {
                        return x.ObjectId == null;
                    }).count() > 0) {
                    Core.Extensions.Toast.Warning("Vui l\u00f2ng ch\u1ec9 ch\u1ecdn nh\u1eefng phi\u1ebfu c\u00f3 \u0111\u1ed1i t\u01b0\u1ee3ng c\u00f4ng n\u1ee3");
                    return;
                }
                if (System.Linq.Enumerable.from(ledgers, TMS.API.Models.Ledger).select(function (x) {
                        return x.ObjectId;
                    }).distinct().count() > 1) {
                    Core.Extensions.Toast.Warning("Vui l\u00f2ng ch\u1ec9 ch\u1ecdn nh\u1eefng phi\u1ebfu c\u00f3 c\u00f9ng \u0111\u1ed1i t\u01b0\u1ee3ng c\u00f4ng n\u1ee3");
                    return;
                }
                if (System.Linq.Enumerable.from(ledgers, TMS.API.Models.Ledger).where(function (x) {
                        return System.Nullable.liftcmp("lte", x.OriginDebit, System.Decimal(0));
                    }).count() > 0) {
                    Core.Extensions.Toast.Warning("Vui l\u00f2ng ch\u1ec9 ch\u1ecdn nh\u1eefng phi\u1ebfu c\u00f2n n\u1ee3");
                    return;
                }
                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "CreditNote Editor", function () {
                                                var $t;
                                                var type = Bridge.Reflection.getType("TMS.UI.Business.Accountant.CreditNoteEditBL");
                                                var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                                var ledger = System.Linq.Enumerable.from(ledgers, TMS.API.Models.Ledger).firstOrDefault(null, null);
                                                instance.Title = "Phi\u1ebfu UNC";
                                                instance.Entity = ($t = new TMS.API.Models.Ledger(), $t.InvoiceFormId = 16054, $t.InvoiceDate = System.DateTime.getNow(), $t.VendorId = ledger.VendorId, $t.ObjectId = ledger.ObjectId, $t.Taxcode = ledger.Taxcode, $t);
                                                return instance;
                                            }, false, false);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            OpenPaymentVoucher: function (arg) {
                var gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(null, null);
                var ledgers = System.Linq.Enumerable.from(gridView.GetSelectedRows()).select(function (x) { return Bridge.cast(x, TMS.API.Models.Ledger); }).toList(TMS.API.Models.Ledger);
                if (ledgers.Count <= 0) {
                    Core.Extensions.Toast.Warning("Vui l\u00f2ng ch\u1ecdn phi\u1ebfu mu\u1ed1n chi");
                    return;
                }
                if (System.Linq.Enumerable.from(ledgers, TMS.API.Models.Ledger).where(function (x) {
                        return x.ObjectId == null;
                    }).count() > 0) {
                    Core.Extensions.Toast.Warning("Vui l\u00f2ng ch\u1ec9 ch\u1ecdn nh\u1eefng phi\u1ebfu c\u00f3 \u0111\u1ed1i t\u01b0\u1ee3ng c\u00f4ng n\u1ee3");
                    return;
                }
                if (System.Linq.Enumerable.from(ledgers, TMS.API.Models.Ledger).select(function (x) {
                        return x.ObjectId;
                    }).distinct().count() > 1) {
                    Core.Extensions.Toast.Warning("Vui l\u00f2ng ch\u1ec9 ch\u1ecdn nh\u1eefng phi\u1ebfu c\u00f3 c\u00f9ng \u0111\u1ed1i t\u01b0\u1ee3ng c\u00f4ng n\u1ee3");
                    return;
                }
                if (System.Linq.Enumerable.from(ledgers, TMS.API.Models.Ledger).where(function (x) {
                        return System.Nullable.liftcmp("lte", x.OriginDebit, System.Decimal(0));
                    }).count() > 0) {
                    Core.Extensions.Toast.Warning("Vui l\u00f2ng ch\u1ec9 ch\u1ecdn nh\u1eefng phi\u1ebfu c\u00f2n n\u1ee3");
                    return;
                }
                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "PaymentVoucher Editor", function () {
                                                var $t;
                                                var type = Bridge.Reflection.getType("TMS.UI.Business.Accountant.PaymentVoucherEditBL");
                                                var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                                var ledger = System.Linq.Enumerable.from(ledgers, TMS.API.Models.Ledger).firstOrDefault(null, null);
                                                instance.Title = "Phi\u1ebfu chi";
                                                instance.Entity = ($t = new TMS.API.Models.Ledger(), $t.InvoiceFormId = 16049, $t.InvoiceDate = System.DateTime.getNow(), $t.VendorId = ledger.VendorId, $t.ObjectId = ledger.ObjectId, $t.Taxcode = ledger.Taxcode, $t);
                                                return instance;
                                            }, false, false);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            SelectedLedger: function (ledger) {
                this.selectedLedger = ledger;
            },
            SetInvoiceNoWhenDel: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    ledgers, 
                    no, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = new Core.Clients.Client.$ctor1("Ledger").GetRawList(TMS.API.Models.Ledger, System.String.format("?$filter=Active eq true and InvoiceFormId eq 16047 and ParentId eq null and Id ge {0} and TypeId eq null", [this.selectedLedger]));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        ledgers = $taskResult1;
                                        no = System.Int32.parse(System.Linq.Enumerable.from(ledgers, TMS.API.Models.Ledger).firstOrDefault(null, null).InvoiceNo.substr(10));
                                        ledgers.ForEach(function (x) {
                                            x.InvoiceNo = no < 10000 ? "CVC" + (System.DateTime.format(System.Nullable.getValue(x.InvoiceDate), "yy") || "") + "/" + (System.DateTime.format(System.Nullable.getValue(x.InvoiceDate), "MM") || "") + "-" + (System.String.format("{0:0000}", [Bridge.box(no, System.Int32)]) || "") : Bridge.toString(no);
                                            no = (no + 1) | 0;
                                        });
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("TMS.UI.Business.Accountant.ImportRevenueSimultaneousBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        props: {
            revenueEntity: {
                get: function () {
                    return Bridge.as(this.Entity, TMS.API.Models.Revenue);
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "Revenue");
                this.Name = "Import Revenue Simultaneous";
            }
        },
        methods: {
            TickAll: function () {
                if (this.revenueEntity.IsAll) {
                    this.revenueEntity.IsLotNo = true;
                    this.revenueEntity.IsLotDate = true;
                    this.revenueEntity.IsInvoinceNo = true;
                    this.revenueEntity.IsInvoinceDate = true;
                    this.revenueEntity.IsUnitPriceBeforeTax = true;
                    this.revenueEntity.IsUnitPriceAfterTax = true;
                    this.revenueEntity.IsReceivedPrice = true;
                    this.revenueEntity.IsCollectOnBehaftPrice = true;
                    this.revenueEntity.IsVat = true;
                    this.revenueEntity.IsTotalPriceBeforTax = true;
                    this.revenueEntity.IsVatPrice = true;
                    this.revenueEntity.IsTotalPrice = true;
                    this.revenueEntity.IsNotePayment = true;
                    this.revenueEntity.IsVendorVatId = true;
                    this.UpdateView$1(false, ["IsLotNo", "IsLotDate", "IsInvoinceNo", "IsInvoinceDate", "IsUnitPriceBeforeTax", "IsUnitPriceAfterTax", "IsReceivedPrice", "IsCollectOnBehaftPrice", "IsVat", "IsTotalPriceBeforTax", "IsVatPrice", "IsTotalPrice", "IsNotePayment", "IsVendorVatId"]);
                } else {
                    this.revenueEntity.IsLotNo = false;
                    this.revenueEntity.IsLotDate = false;
                    this.revenueEntity.IsInvoinceNo = false;
                    this.revenueEntity.IsInvoinceDate = false;
                    this.revenueEntity.IsUnitPriceBeforeTax = false;
                    this.revenueEntity.IsUnitPriceAfterTax = false;
                    this.revenueEntity.IsReceivedPrice = false;
                    this.revenueEntity.IsCollectOnBehaftPrice = false;
                    this.revenueEntity.IsVat = false;
                    this.revenueEntity.IsTotalPriceBeforTax = false;
                    this.revenueEntity.IsVatPrice = false;
                    this.revenueEntity.IsTotalPrice = false;
                    this.revenueEntity.IsNotePayment = false;
                    this.revenueEntity.IsVendorVatId = false;
                    this.UpdateView$1(false, ["IsLotNo", "IsLotDate", "IsInvoinceNo", "IsInvoinceDate", "IsUnitPriceBeforeTax", "IsUnitPriceAfterTax", "IsReceivedPrice", "IsCollectOnBehaftPrice", "IsVat", "IsTotalPriceBeforTax", "IsVatPrice", "IsTotalPrice", "IsNotePayment", "IsVendorVatId"]);
                }
            },
            UpdateRevenueSimultaneous: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    gridView, 
                    ids, 
                    $t, 
                    transportations, 
                    listViewItems, 
                    listViewItemsIsSubmit, 
                    listViewItemsIsLockedRevenue, 
                    idTrans, 
                    idTransIsSubmit, 
                    idTransIsLockedRevenue, 
                    confirm, 
                    $t1, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this.Parent), Core.Components.GridView).firstOrDefault(function (x) {
                                            return Bridge.referenceEquals(x.GuiInfo.FieldName, "TransportationAccountant");
                                        }, null);
                                        if (gridView == null) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        ids = ($t = System.Int32, System.Linq.Enumerable.from(gridView.SelectedIds, $t).toList($t));
                                        $task1 = new Core.Clients.Client.$ctor1("Transportation").GetRawList(TMS.API.Models.Transportation, System.String.format("?$filter=Active eq true and Id in ({0})", [Core.Extensions.IEnumerableExtensions.Combine(System.Int32, ids)]));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        transportations = $taskResult1;
                                        listViewItems = System.Linq.Enumerable.from(transportations, TMS.API.Models.Transportation).where(function (x) {
                                            return x.IsLocked === false;
                                        }).toList(TMS.API.Models.Transportation);
                                        if (listViewItems.Count <= 0) {
                                            Core.Extensions.Toast.Warning("Kh\u00f4ng c\u00f3 DSVC n\u00e0o c\u00f3 th\u1ec3 nh\u1eadp");
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        listViewItemsIsSubmit = System.Linq.Enumerable.from(listViewItems, TMS.API.Models.Transportation).where(function (x) {
                                            return x.IsSubmit === true;
                                        }).toList(TMS.API.Models.Transportation);
                                        listViewItemsIsLockedRevenue = System.Linq.Enumerable.from(listViewItems, TMS.API.Models.Transportation).where(function (x) {
                                            return x.IsLockedRevenue === true;
                                        }).toList(TMS.API.Models.Transportation);
                                        idTrans = System.Linq.Enumerable.from(listViewItems, TMS.API.Models.Transportation).select(function (x) {
                                            return x.Id;
                                        }).toList(System.Int32);
                                        idTransIsSubmit = System.Linq.Enumerable.from(listViewItemsIsSubmit, TMS.API.Models.Transportation).select(function (x) {
                                            return x.Id;
                                        }).toList(System.Int32);
                                        idTransIsLockedRevenue = System.Linq.Enumerable.from(listViewItemsIsLockedRevenue, TMS.API.Models.Transportation).select(function (x) {
                                            return x.Id;
                                        }).toList(System.Int32);
                                        if (listViewItemsIsSubmit.Count > 0 || listViewItemsIsLockedRevenue.Count > 0) {
                                            if ((this.revenueEntity.IsLotNo || this.revenueEntity.IsLotDate || this.revenueEntity.IsUnitPriceAfterTax || this.revenueEntity.IsUnitPriceBeforeTax || this.revenueEntity.IsReceivedPrice || this.revenueEntity.IsCollectOnBehaftPrice || this.revenueEntity.IsNotePayment) && listViewItemsIsSubmit.Count > 0) {
                                                listViewItems = System.Linq.Enumerable.from(listViewItems, TMS.API.Models.Transportation).where(function (x) {
                                                    return System.Linq.Enumerable.from(idTransIsSubmit, System.Int32).all(function (y) {
                                                        return y !== x.Id;
                                                    });
                                                }).toList(TMS.API.Models.Transportation);
                                            }
                                            if ((this.revenueEntity.IsVat || this.revenueEntity.IsVatPrice || this.revenueEntity.IsTotalPriceBeforTax || this.revenueEntity.IsTotalPrice || this.revenueEntity.IsVendorVatId || this.revenueEntity.IsInvoinceNo || this.revenueEntity.IsInvoinceDate) && listViewItemsIsLockedRevenue.Count > 0) {
                                                listViewItems = System.Linq.Enumerable.from(listViewItems, TMS.API.Models.Transportation).where(function (x) {
                                                    return System.Linq.Enumerable.from(idTransIsLockedRevenue, System.Int32).all(function (y) {
                                                        return y !== x.Id;
                                                    });
                                                }).toList(TMS.API.Models.Transportation);
                                            }
                                            if (listViewItems.Count <= 0) {
                                                Core.Extensions.Toast.Warning("Kh\u00f4ng c\u00f3 DSVC n\u00e0o c\u00f3 th\u1ec3 nh\u1eadp");
                                                $tcs.setResult(null);
                                                return;
                                            }
                                        }
                                        confirm = ($t1 = new Core.Components.Forms.ConfirmDialog(), $t1.Content = "B\u1ea1n c\u00f3 ch\u1eafc ch\u1eafn mu\u1ed1n nh\u1eadp doanh thu cho " + listViewItems.Count + " DSVC ?", $t1);
                                        confirm.Render();
                                        confirm.YesConfirmed = Bridge.fn.combine(confirm.YesConfirmed, Bridge.fn.bind(this, function () {
                                            var $step = 0,
                                                $task1, 
                                                $taskResult1, 
                                                $task2, 
                                                $taskResult2, 
                                                $task3, 
                                                $taskResult3, 
                                                $task4, 
                                                $jumpFromFinally, 
                                                resCreateRevenues, 
                                                idtrans, 
                                                revenues, 
                                                res, 
                                                $asyncBody = Bridge.fn.bind(this, function () {
                                                    for (;;) {
                                                        $step = System.Array.min([0,1,2,3,4,5,6,7], $step);
                                                        switch ($step) {
                                                            case 0: {
                                                                $task1 = new Core.Clients.Client.$ctor1("Revenue").PostAsync(System.Boolean, listViewItems, "CreateRevenues");
                                                                $step = 1;
                                                                if ($task1.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task1.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 1: {
                                                                $taskResult1 = $task1.getAwaitedResult();
                                                                resCreateRevenues = $taskResult1;
                                                                idtrans = System.Linq.Enumerable.from(listViewItems, TMS.API.Models.Transportation).select(function (x) {
                                                                    return x.Id;
                                                                }).toList(System.Int32);
                                                                $task2 = new Core.Clients.Client.$ctor1("Revenue").GetRawList(TMS.API.Models.Revenue, System.String.format("?$filter=Active eq true and TransportationId in ({0})", [Core.Extensions.IEnumerableExtensions.Combine(System.Int32, idtrans)]));
                                                                $step = 2;
                                                                if ($task2.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task2.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 2: {
                                                                $taskResult2 = $task2.getAwaitedResult();
                                                                revenues = $taskResult2;
                                                                if (this.revenueEntity.IsLotNo || this.revenueEntity.IsLotDate || this.revenueEntity.IsUnitPriceAfterTax || this.revenueEntity.IsUnitPriceBeforeTax || this.revenueEntity.IsReceivedPrice || this.revenueEntity.IsCollectOnBehaftPrice || this.revenueEntity.IsNotePayment) {
                                                                    revenues = System.Linq.Enumerable.from(revenues, TMS.API.Models.Revenue).where(function (x) {
                                                                        return x.UserUpdate1 == null || System.Nullable.eq(x.UserUpdate1, 0) || System.Nullable.eq(x.UserUpdate1, Core.Clients.Client.Token.UserId);
                                                                    }).toList(TMS.API.Models.Revenue);
                                                                }
                                                                if ((this.revenueEntity.IsVat || this.revenueEntity.IsVatPrice || this.revenueEntity.IsTotalPriceBeforTax || this.revenueEntity.IsTotalPrice || this.revenueEntity.IsInvoinceNo || this.revenueEntity.IsInvoinceDate) && System.Linq.Enumerable.from(Core.Clients.Client.Token.RoleIds, System.Int32).where(function (x) {
                                                                    return x === 46;
                                                                }).any()) {
                                                                    revenues = System.Linq.Enumerable.from(revenues, TMS.API.Models.Revenue).where(function (x) {
                                                                        return x.UserUpdate2 == null || System.Nullable.eq(x.UserUpdate2, 0) || System.Nullable.eq(x.UserUpdate2, Core.Clients.Client.Token.UserId);
                                                                    }).toList(TMS.API.Models.Revenue);
                                                                }
                                                                if (revenues.Count <= 0) {
                                                                    Core.Extensions.Toast.Warning("Kh\u00f4ng c\u00f3 doanh thu n\u00e0o c\u00f3 th\u1ec3 nh\u1eadp");
                                                                    return;
                                                                }
                                                                revenues.add(this.revenueEntity);
                                                                $task3 = new Core.Clients.Client.$ctor1("Revenue").PostAsync(System.Boolean, revenues, "UpdateRevenueSimultaneous");
                                                                $step = 3;
                                                                if ($task3.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task3.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 3: {
                                                                $taskResult3 = $task3.getAwaitedResult();
                                                                res = $taskResult3;
                                                                if (res) {
                                                                    $step = 4;
                                                                    continue;
                                                                } else  {
                                                                    $step = 6;
                                                                    continue;
                                                                }
                                                            }
                                                            case 4: {
                                                                $task4 = gridView.ApplyFilter(true);
                                                                $step = 5;
                                                                if ($task4.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task4.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 5: {
                                                                $task4.getAwaitedResult();
                                                                this.Dispose();
                                                                Core.Extensions.Toast.Success("\u0110\u00e3 nh\u1eadp th\u00e0nh c\u00f4ng");
                                                                $step = 7;
                                                                continue;
                                                            }
                                                            case 6: {
                                                                Core.Extensions.Toast.Success("\u0110\u00e3 c\u00f3 l\u1ed7i trong qu\u00e1 tr\u00ecnh x\u1eed l\u00fd");
                                                                $step = 7;
                                                                continue;
                                                            }
                                                            case 7: {
                                                                return;
                                                            }
                                                            default: {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }, arguments);

                                            $asyncBody();
                                        }));
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            UpdateRevenueSimultaneousByRevenue: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    gridView, 
                    ids, 
                    $t, 
                    revenueSelecteds, 
                    transportations, 
                    listViewItems, 
                    listViewItemsIsSubmit, 
                    listViewItemsIsLockedRevenue, 
                    idTrans, 
                    idTransIsSubmit, 
                    idTransIsLockedRevenue, 
                    revenues, 
                    confirm, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2], $step);
                                switch ($step) {
                                    case 0: {
                                        gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this.Parent), Core.Components.GridView).firstOrDefault(function (x) {
                                            return Bridge.referenceEquals(x.GuiInfo.FieldName, "Revenue");
                                        }, null);
                                        if (gridView == null) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        ids = ($t = System.Int32, System.Linq.Enumerable.from(gridView.SelectedIds, $t).toList($t));
                                        $task1 = new Core.Clients.Client.$ctor1("Revenue").GetRawList(TMS.API.Models.Revenue, System.String.format("?$filter=Active eq true and Id in ({0})", [Core.Extensions.IEnumerableExtensions.Combine(System.Int32, ids)]));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        revenueSelecteds = $taskResult1;
                                        $task2 = new Core.Clients.Client.$ctor1("Transportation").GetRawList(TMS.API.Models.Transportation, System.String.format("?$filter=Active eq true and Id in ({0})", [Core.Extensions.IEnumerableExtensions.Combine(System.Nullable$1(System.Int32), System.Linq.Enumerable.from(revenueSelecteds, TMS.API.Models.Revenue).select(function (x) {
                                            return x.TransportationId;
                                        }))]));
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        transportations = $taskResult2;
                                        listViewItems = System.Linq.Enumerable.from(transportations, TMS.API.Models.Transportation).where(function (x) {
                                            return x.IsLocked === false;
                                        }).toList(TMS.API.Models.Transportation);
                                        listViewItemsIsSubmit = System.Linq.Enumerable.from(listViewItems, TMS.API.Models.Transportation).where(function (x) {
                                            return x.IsSubmit === true;
                                        }).toList(TMS.API.Models.Transportation);
                                        listViewItemsIsLockedRevenue = System.Linq.Enumerable.from(listViewItems, TMS.API.Models.Transportation).where(function (x) {
                                            return x.IsLockedRevenue === true;
                                        }).toList(TMS.API.Models.Transportation);
                                        idTrans = System.Linq.Enumerable.from(listViewItems, TMS.API.Models.Transportation).select(function (x) {
                                            return x.Id;
                                        }).toList(System.Int32);
                                        idTransIsSubmit = System.Linq.Enumerable.from(listViewItemsIsSubmit, TMS.API.Models.Transportation).select(function (x) {
                                            return x.Id;
                                        }).toList(System.Int32);
                                        idTransIsLockedRevenue = System.Linq.Enumerable.from(listViewItemsIsLockedRevenue, TMS.API.Models.Transportation).select(function (x) {
                                            return x.Id;
                                        }).toList(System.Int32);
                                        revenues = new (System.Collections.Generic.List$1(TMS.API.Models.Revenue)).ctor();
                                        if (listViewItems.Count <= 0) {
                                            Core.Extensions.Toast.Warning("Kh\u00f4ng c\u00f3 doanh thu n\u00e0o c\u00f3 th\u1ec3 nh\u1eadp");
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        confirm = new Core.Components.Forms.ConfirmDialog();
                                        revenues = System.Linq.Enumerable.from(revenueSelecteds, TMS.API.Models.Revenue).where(function (x) {
                                            return idTrans.contains(System.Nullable.getValue(x.TransportationId));
                                        }).toList(TMS.API.Models.Revenue);
                                        if (listViewItemsIsSubmit.Count > 0 && listViewItemsIsLockedRevenue.Count > 0) {
                                            if ((this.revenueEntity.IsLotNo || this.revenueEntity.IsLotDate || this.revenueEntity.IsUnitPriceAfterTax || this.revenueEntity.IsUnitPriceBeforeTax || this.revenueEntity.IsReceivedPrice || this.revenueEntity.IsCollectOnBehaftPrice || this.revenueEntity.IsNotePayment) && listViewItemsIsSubmit.Count > 0) {
                                                revenues = System.Linq.Enumerable.from(revenues, TMS.API.Models.Revenue).where(function (x) {
                                                    return idTrans.contains(System.Nullable.getValue(x.TransportationId)) && System.Linq.Enumerable.from(idTransIsSubmit, System.Int32).all(function (y) {
                                                        return System.Nullable.neq(y, x.TransportationId);
                                                    });
                                                }).toList(TMS.API.Models.Revenue);
                                            }
                                            if ((this.revenueEntity.IsVat || this.revenueEntity.IsVatPrice || this.revenueEntity.IsTotalPriceBeforTax || this.revenueEntity.IsTotalPrice || this.revenueEntity.IsVendorVatId || this.revenueEntity.IsInvoinceNo || this.revenueEntity.IsInvoinceDate) && listViewItemsIsLockedRevenue.Count > 0) {
                                                revenues = System.Linq.Enumerable.from(revenues, TMS.API.Models.Revenue).where(function (x) {
                                                    return idTrans.contains(System.Nullable.getValue(x.TransportationId)) && System.Linq.Enumerable.from(idTransIsLockedRevenue, System.Int32).all(function (y) {
                                                        return System.Nullable.neq(y, x.TransportationId);
                                                    });
                                                }).toList(TMS.API.Models.Revenue);
                                            }
                                            if (revenues.Count <= 0) {
                                                Core.Extensions.Toast.Warning("Kh\u00f4ng c\u00f3 doanh thu n\u00e0o c\u00f3 th\u1ec3 nh\u1eadp");
                                                $tcs.setResult(null);
                                                return;
                                            }
                                        }
                                        if (this.revenueEntity.IsLotNo || this.revenueEntity.IsLotDate || this.revenueEntity.IsUnitPriceAfterTax || this.revenueEntity.IsUnitPriceBeforeTax || this.revenueEntity.IsReceivedPrice || this.revenueEntity.IsCollectOnBehaftPrice || this.revenueEntity.IsNotePayment) {
                                            revenues = System.Linq.Enumerable.from(revenues, TMS.API.Models.Revenue).where(function (x) {
                                                return x.UserUpdate1 == null || System.Nullable.eq(x.UserUpdate1, 0) || System.Nullable.eq(x.UserUpdate1, Core.Clients.Client.Token.UserId);
                                            }).toList(TMS.API.Models.Revenue);
                                        }
                                        if ((this.revenueEntity.IsVat || this.revenueEntity.IsVatPrice || this.revenueEntity.IsTotalPriceBeforTax || this.revenueEntity.IsTotalPrice || this.revenueEntity.IsInvoinceNo || this.revenueEntity.IsInvoinceDate) && System.Linq.Enumerable.from(Core.Clients.Client.Token.RoleIds, System.Int32).where(function (x) {
                                            return x === 46;
                                        }).any()) {
                                            revenues = System.Linq.Enumerable.from(revenues, TMS.API.Models.Revenue).where(function (x) {
                                                return x.UserUpdate2 == null || System.Nullable.eq(x.UserUpdate2, 0) || System.Nullable.eq(x.UserUpdate2, Core.Clients.Client.Token.UserId);
                                            }).toList(TMS.API.Models.Revenue);
                                        }
                                        confirm.Content = "B\u1ea1n c\u00f3 ch\u1eafc ch\u1eafn mu\u1ed1n nh\u1eadp doanh thu cho " + revenues.Count + " d\u00f2ng doanh thu ?";
                                        confirm.Render();
                                        confirm.YesConfirmed = Bridge.fn.combine(confirm.YesConfirmed, Bridge.fn.bind(this, function () {
                                            var $step = 0,
                                                $task1, 
                                                $taskResult1, 
                                                $task2, 
                                                $jumpFromFinally, 
                                                res, 
                                                $asyncBody = Bridge.fn.bind(this, function () {
                                                    for (;;) {
                                                        $step = System.Array.min([0,1,2,3,4,5], $step);
                                                        switch ($step) {
                                                            case 0: {
                                                                revenues.add(this.revenueEntity);
                                                                $task1 = new Core.Clients.Client.$ctor1("Revenue").PostAsync(System.Boolean, revenues, "UpdateRevenueSimultaneous");
                                                                $step = 1;
                                                                if ($task1.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task1.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 1: {
                                                                $taskResult1 = $task1.getAwaitedResult();
                                                                res = $taskResult1;
                                                                if (res) {
                                                                    $step = 2;
                                                                    continue;
                                                                } else  {
                                                                    $step = 4;
                                                                    continue;
                                                                }
                                                            }
                                                            case 2: {
                                                                $task2 = gridView.ApplyFilter(true);
                                                                $step = 3;
                                                                if ($task2.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task2.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 3: {
                                                                $task2.getAwaitedResult();
                                                                this.Dispose();
                                                                Core.Extensions.Toast.Success("\u0110\u00e3 nh\u1eadp th\u00e0nh c\u00f4ng");
                                                                $step = 5;
                                                                continue;
                                                            }
                                                            case 4: {
                                                                Core.Extensions.Toast.Success("\u0110\u00e3 c\u00f3 l\u1ed7i trong qu\u00e1 tr\u00ecnh x\u1eed l\u00fd");
                                                                $step = 5;
                                                                continue;
                                                            }
                                                            case 5: {
                                                                return;
                                                            }
                                                            default: {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }, arguments);

                                            $asyncBody();
                                        }));
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            Cancel: function () {
                this.Dispose();
                Core.Components.Forms.PopupEditor.prototype.Cancel.call(this);
            },
            CancelWithoutAsk: function () {
                this.Dispose();
                Core.Components.Forms.PopupEditor.prototype.CancelWithoutAsk.call(this);
            },
            CalcRevenue: function () {
                this.revenueEntity.Vat = System.Nullable.lifteq("equals", this.revenueEntity.Vat, System.Decimal.lift(null)) ? System.Decimal(10) : this.revenueEntity.Vat;
                this.revenueEntity.VatPrice = System.Decimal.toDecimalPlaces(((System.Nullable.lifteq("equals", this.revenueEntity.TotalPrice, System.Decimal.lift(null)) ? System.Decimal(0) : System.Nullable.getValue(this.revenueEntity.TotalPrice)).div((System.Decimal(1).add((System.Nullable.getValue(this.revenueEntity.Vat).div(System.Decimal(100))))))).mul((System.Nullable.getValue(this.revenueEntity.Vat).div(System.Decimal(100)))), 0, 6);
                this.revenueEntity.TotalPriceBeforTax = (System.Nullable.lifteq("equals", this.revenueEntity.TotalPrice, System.Decimal.lift(null)) ? System.Decimal(0) : System.Nullable.getValue(this.revenueEntity.TotalPrice)).sub((System.Nullable.lifteq("equals", this.revenueEntity.VatPrice, System.Decimal.lift(null)) ? System.Decimal(0) : System.Nullable.getValue(this.revenueEntity.VatPrice)));
                this.UpdateView$1(false, ["Vat", "TotalPriceBeforTax", "VatPrice"]);
            },
            CalcRevenueTotalPrice: function () {
                this.revenueEntity.UnitPriceAfterTax = System.Nullable.lifteq("equals", this.revenueEntity.UnitPriceAfterTax, System.Decimal.lift(null)) ? System.Decimal(0) : this.revenueEntity.UnitPriceAfterTax;
                this.revenueEntity.ReceivedPrice = System.Nullable.lifteq("equals", this.revenueEntity.ReceivedPrice, System.Decimal.lift(null)) ? System.Decimal(0) : this.revenueEntity.ReceivedPrice;
                this.revenueEntity.TotalPrice = System.Nullable.lift2("add", this.revenueEntity.UnitPriceAfterTax, this.revenueEntity.ReceivedPrice);
                this.UpdateView$1(false, ["TotalPrice"]);
                this.CalcRevenue();
            },
            GetPatchEntity: function (revenue) {
                var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13, $t14;
                var details = new (System.Collections.Generic.List$1(Core.ViewModels.PatchUpdateDetail)).ctor();
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = Core.Extensions.Utils.IdField, $t.Value = Bridge.toString(revenue.Id), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "LotNo", $t.Value = ($t1 = revenue.LotNo) != null ? Bridge.toString($t1) : null, $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "LotDate", $t.Value = !Bridge.equals(($t2 = revenue.LotDate), null) ? System.DateTime.format($t2) : null, $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "InvoinceNo", $t.Value = System.Nullable.liftne("ne", ($t3 = revenue.InvoinceNo), System.Decimal.lift(null)) ? $t3.toString() : null, $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "InvoinceDate", $t.Value = !Bridge.equals(($t4 = revenue.InvoinceDate), null) ? System.DateTime.format($t4) : null, $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "UnitPriceBeforeTax", $t.Value = System.Nullable.liftne("ne", ($t5 = revenue.UnitPriceBeforeTax), System.Decimal.lift(null)) ? $t5.toString() : null, $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "UnitPriceAfterTax", $t.Value = System.Nullable.liftne("ne", ($t6 = revenue.UnitPriceAfterTax), System.Decimal.lift(null)) ? $t6.toString() : null, $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "ReceivedPrice", $t.Value = System.Nullable.liftne("ne", ($t7 = revenue.ReceivedPrice), System.Decimal.lift(null)) ? $t7.toString() : null, $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "CollectOnBehaftPrice", $t.Value = System.Nullable.liftne("ne", ($t8 = revenue.CollectOnBehaftPrice), System.Decimal.lift(null)) ? $t8.toString() : null, $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "Vat", $t.Value = System.Nullable.liftne("ne", ($t9 = revenue.Vat), System.Decimal.lift(null)) ? $t9.toString() : null, $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "TotalPriceBeforTax", $t.Value = System.Nullable.liftne("ne", ($t10 = revenue.TotalPriceBeforTax), System.Decimal.lift(null)) ? $t10.toString() : null, $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "VatPrice", $t.Value = System.Nullable.liftne("ne", ($t11 = revenue.VatPrice), System.Decimal.lift(null)) ? $t11.toString() : null, $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "TotalPrice", $t.Value = System.Nullable.liftne("ne", ($t12 = revenue.TotalPrice), System.Decimal.lift(null)) ? $t12.toString() : null, $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "NotePayment", $t.Value = ($t13 = revenue.NotePayment) != null ? Bridge.toString($t13) : null, $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "VendorVatId", $t.Value = ($t14 = revenue.VendorVatId) != null ? Bridge.toString($t14) : null, $t));
                return ($t = new Core.ViewModels.PatchUpdate(), $t.Changes = details, $t);
            }
        }
    });

    Bridge.define("TMS.UI.Business.Accountant.ItemsEditBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "MasterData");
                this.Name = "Item Editor";
            }
        }
    });

    Bridge.define("TMS.UI.Business.Accountant.ItemsListBL", {
        inherits: [Core.Components.Forms.TabEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "MasterData");
                this.Name = "Items List";
            }
        },
        methods: {
            AddItem: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Item Editor", function () {
                                            var $t;
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Accountant.ItemsEditBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Th\u00eam m\u1edbi kho\u1ea3n m\u1ee5c";
                                            instance.Entity = ($t = new TMS.API.Models.MasterData(), $t.ParentId = 23767, $t);
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            EditItem: function (masterData) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Item Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Accountant.ItemsEditBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Ch\u1ec9nh s\u1eeda kho\u1ea3n m\u1ee5c";
                                            instance.Entity = masterData;
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            BeforeCreatedMasterData: function (masterData) {
                masterData.ParentId = 23767;
            }
        }
    });

    Bridge.define("TMS.UI.Business.Accountant.MakeUpFeeBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        props: {
            ledgerEntity: {
                get: function () {
                    return Bridge.as(this.Entity, TMS.API.Models.Ledger);
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "Ledger");
                this.Name = "MakeUp Fee";
            }
        },
        methods: {
            CreateMakeUpFee: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $task3, 
                    $taskResult3, 
                    $task4, 
                    $taskResult4, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    getVendor, 
                    getObject, 
                    newLedger, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = new Core.Clients.Client.$ctor1("Ledger").FirstOrDefaultAsync(TMS.API.Models.Ledger, System.String.format("?$filter=Active eq true and VendorId eq {0} and TypeId eq 2 and InvoiceFormId eq 16047", [Bridge.box(this.ledgerEntity.VendorId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        getVendor = $taskResult1;
                                        getObject = null;
                                        if (getVendor != null) {
                                            $step = 2;
                                            continue;
                                        } 
                                        $step = 4;
                                        continue;
                                    }
                                    case 2: {
                                        $task2 = new Core.Clients.Client.$ctor1("Vendor").FirstOrDefaultAsync(TMS.API.Models.Vendor, System.String.format("?$filter=Active eq true and TypeId eq 23741 and Id eq {0}", [Bridge.box(getVendor.ObjectId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]));
                                        $step = 3;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        getObject = $taskResult2;
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        newLedger = new TMS.API.Models.Ledger();
                                        this.CreateLedger(newLedger, null, getVendor, getObject);
                                        this.CalcLedger(newLedger);
                                        newLedger.Note = "Make Up";
                                        $task3 = new Core.Clients.Client.$ctor1("Ledger").CreateAsync(TMS.API.Models.Ledger, newLedger);
                                        $step = 5;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 5: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        this.CalcSumLedgerParent(this.ledgerEntity, newLedger);
                                        this.CalcLedgerParent(this.ledgerEntity, newLedger);
                                        $task4 = this.Save(this.ledgerEntity);
                                        $step = 6;
                                        if ($task4.isCompleted()) {
                                            continue;
                                        }
                                        $task4.continue($asyncBody);
                                        return;
                                    }
                                    case 6: {
                                        $taskResult4 = $task4.getAwaitedResult();
                                        this.Parent.UpdateView$1(true);
                                        this.Dispose();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CreateLedger: function (ledger, route, getVendor, getObject) {
                ledger.ParentId = this.ledgerEntity.Id;
                ledger.RouteId = route;
                ledger.IsMakeUp = true;
                ledger.Vat = this.ledgerEntity.VatMakeUp;
                ledger.OriginPriceAfterTax = this.ledgerEntity.OriginMakeUpPrice;
                ledger.InvoiceFormId = this.ledgerEntity.InvoiceFormId;
                ledger.ExchangeRate = this.ledgerEntity.ExchangeRate;
                ledger.CurrencyId = this.ledgerEntity.CurrencyId;
                ledger.VendorId = this.ledgerEntity.VendorId;
                ledger.ObjectId = getVendor == null ? null : getVendor.ObjectId;
                ledger.Taxcode = getObject == null ? null : getObject.TaxCode;
                ledger.DebitAccId = getVendor == null ? null : getVendor.DebitAccId;
                ledger.CreditAccId = getVendor == null ? null : getVendor.CreditAccId;
                ledger.DebitAccVatId = getVendor == null ? null : getVendor.DebitAccVatId;
                ledger.CreditAccVatId = getVendor == null ? null : getVendor.CreditAccVatId;
                ledger.ItemsId = getVendor == null ? null : getVendor.ItemsId;
            },
            CalcLedger: function (ledger) {
                ledger.OriginVatAmount = System.Decimal.round((System.Nullable.lifteq("equals", ledger.OriginPriceAfterTax, System.Decimal.lift(null)) ? System.Decimal(0) : System.Nullable.getValue(ledger.OriginPriceAfterTax)).mul((System.Nullable.lifteq("equals", ledger.Vat, System.Decimal.lift(null)) ? System.Decimal(0) : System.Nullable.getValue(ledger.Vat))).div(System.Decimal(100)), 6);
                ledger.OriginPriceBeforeTax = System.Nullable.lift2("sub", (System.Nullable.lifteq("equals", ledger.OriginPriceAfterTax, System.Decimal.lift(null)) ? System.Decimal(0) : ledger.OriginPriceAfterTax), (System.Nullable.lifteq("equals", ledger.OriginVatAmount, System.Decimal.lift(null)) ? System.Decimal(0) : ledger.OriginVatAmount));
            },
            CalcSumLedgerParent: function (ledgerParent, ledger) {
                ledgerParent.OriginPriceBeforeTax = System.Nullable.lift2("add", ledgerParent.OriginPriceBeforeTax, ledger.OriginPriceBeforeTax);
                ledgerParent.OriginVatAmount = System.Nullable.lift2("add", ledgerParent.OriginVatAmount, ledger.OriginVatAmount);
                ledgerParent.OriginPriceAfterTax = System.Nullable.lift2("add", ledgerParent.OriginPriceAfterTax, ledger.OriginPriceAfterTax);
            },
            CalcLedgerParent: function (ledgerParent, makeUp) {
                ledgerParent.OriginRealTotalPrice = System.Nullable.lift2("add", ledgerParent.OriginRealTotalPrice, System.Decimal.round(System.Nullable.getValue(makeUp.OriginPriceAfterTax).mul(System.Nullable.getValue(ledgerParent.Vat)).div(System.Decimal(100)), 6));
                ledgerParent.OriginTotalPrice = System.Nullable.lift2("add", ledgerParent.OriginPriceAfterTax, System.Decimal.round(System.Nullable.getValue(ledgerParent.OriginPriceAfterTax).mul(System.Nullable.getValue(ledgerParent.Vat)).div(System.Decimal(100)), 6));
                ledgerParent.OriginReturnTotalPrice = System.Nullable.lift2("sub", ledgerParent.OriginTotalPrice, ledgerParent.OriginRealTotalPrice);
                ledgerParent.OriginRealTotalPrice = System.Nullable.lift2("mul", ledgerParent.OriginRealTotalPrice, ledgerParent.ExchangeRate);
                ledgerParent.OriginTotalPrice = System.Nullable.lift2("mul", ledgerParent.OriginTotalPrice, ledgerParent.ExchangeRate);
                ledgerParent.OriginReturnTotalPrice = System.Nullable.lift2("mul", ledgerParent.OriginReturnTotalPrice, ledgerParent.ExchangeRate);
                ledgerParent.OriginDebit = ledgerParent.OriginTotalPrice;
            }
        }
    });

    Bridge.define("TMS.UI.Business.Accountant.ObjectEditBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "Vendor");
                this.Name = "Object Editor";
            }
        }
    });

    Bridge.define("TMS.UI.Business.Accountant.ObjectListBL", {
        inherits: [Core.Components.Forms.TabEditor],
        fields: {
            _uploader: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "Vendor");
                this.Name = "Object List";
                this.DOMContentLoaded = Bridge.fn.combine(this.DOMContentLoaded, Bridge.fn.bind(this, function () {
                    Core.MVVM.Html.Take$1("Body").Form.Attr$1("method", "POST").Attr$1("enctype", "multipart/form-data").Display$1(false).Input.Event$1("change", Bridge.fn.bind(this, function (ev) {
                        var $step = 0,
                            $task1, 
                            $jumpFromFinally, 
                            $asyncBody = Bridge.fn.bind(this, function () {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = this.SelectedExcel(ev);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            return;
                                        }
                                        default: {
                                            return;
                                        }
                                    }
                                }
                            }, arguments);

                        $asyncBody();
                    })).Type$1("file").Id(System.String.format("id_{0}", [Bridge.box(Bridge.getHashCode(this), System.Int32)])).Attr$1("name", "fileImport").Attr$1("accept", ".xlsx");
                    this._uploader = Bridge.as(Core.MVVM.Html.Context, HTMLInputElement);
                }));
            }
        },
        methods: {
            AddObject: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Object Editor", function () {
                                            var $t;
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Accountant.ObjectEditBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Th\u00eam m\u1edbi \u0111\u1ed1i t\u01b0\u1ee3ng c\u00f4ng n\u1ee3";
                                            instance.Entity = ($t = new TMS.API.Models.Vendor(), $t.TypeId = 23741, $t);
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            EditObject: function (vendor) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Object Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Accountant.ObjectEditBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Ch\u1ec9nh s\u1eeda \u0111\u1ed1i t\u01b0\u1ee3ng c\u00f4ng n\u1ee3";
                                            instance.Entity = vendor;
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            BeforeCreatedObject: function (vendor) {
                vendor.TypeId = 23741;
            },
            SelectedExcel: function (e) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    files, 
                    uploadForm, 
                    formData, 
                    response, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        files = Bridge.as(e.target.files, FileList);
                                        if (Core.Extensions.IEnumerableExtensions.Nothing(File, files)) {
                                            $tcs.setResult(null);
                                            return;
                                        }

                                        uploadForm = Bridge.as(this._uploader.parentElement, HTMLFormElement);
                                        formData = new FormData(uploadForm);
                                        $task1 = this.Client.SubmitAsync(System.Collections.Generic.List$1(TMS.API.Models.Vendor), ($t = new Core.Clients.XHRWrapper(), $t.FormData = formData, $t.Url = "ImportObject", $t.Method = Core.Enums.HttpMethod.POST, $t.ResponseMimeType = Core.Extensions.Utils.GetMimeType("xlsx"), $t));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        response = $taskResult1;
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ImportObject: function () {
                this._uploader.click();
            }
        }
    });

    Bridge.define("TMS.UI.Business.Accountant.PaymentAdvanceVoucherEditBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        fields: {
            gridView: null,
            ledgerParentList: null
        },
        props: {
            ledgerEntity: {
                get: function () {
                    return Bridge.as(this.Entity, TMS.API.Models.Ledger);
                }
            }
        },
        ctors: {
            init: function () {
                this.ledgerParentList = new (System.Collections.Generic.List$1(TMS.API.Models.Ledger)).ctor();
            },
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "Ledger");
                this.Name = "PaymentAdvanceVoucher Editor";
            }
        }
    });

    Bridge.define("TMS.UI.Business.Accountant.PaymentAdvanceVoucherListBL", {
        inherits: [Core.Components.Forms.TabEditor],
        fields: {
            gridView: null
        },
        props: {
            selectedLedger: null,
            ledgerEntity: {
                get: function () {
                    return Bridge.as(this.Entity, TMS.API.Models.Ledger);
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "Ledger");
                this.Name = "PaymentAdvanceVoucher List";
            }
        },
        methods: {
            AddPaymentAdvanceVoucher: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "PaymentAdvanceVoucher Editor", function () {
                                            var $t;
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Accountant.PaymentAdvanceVoucherEditBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Th\u00eam m\u1edbi phi\u1ebfu chi t\u1ea1m \u1ee9ng";
                                            instance.Entity = ($t = new TMS.API.Models.Ledger(), $t.InvoiceFormId = 16051, $t.BillDate = System.DateTime.getNow(), $t.InvoiceDate = System.DateTime.getNow(), $t);
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            EditPaymentAdvanceVoucher: function (ledger) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "PaymentAdvanceVoucher Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Accountant.PaymentAdvanceVoucherEditBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Ch\u1ec9nh s\u1eeda phi\u1ebfu chi t\u1ea1m \u1ee9ng";
                                            instance.Entity = ledger;
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            SelectedLedger: function (ledger) {
                this.selectedLedger = ledger;
            },
            SetInvoiceNoWhenDel: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    ledgers, 
                    no, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = new Core.Clients.Client.$ctor1("Ledger").GetRawList(TMS.API.Models.Ledger, System.String.format("?$filter=Active eq true and InvoiceFormId eq 16051 and ParentId eq null and Id ge {0} and TypeId eq null", [this.selectedLedger]));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        ledgers = $taskResult1;
                                        no = System.Int32.parse(System.Linq.Enumerable.from(ledgers, TMS.API.Models.Ledger).firstOrDefault(null, null).InvoiceNo.substr(10));
                                        ledgers.ForEach(function (x) {
                                            x.InvoiceNo = no < 10000 ? "PCTU" + (System.DateTime.format(System.Nullable.getValue(x.InvoiceDate), "yy") || "") + "/" + (System.DateTime.format(System.Nullable.getValue(x.InvoiceDate), "MM") || "") + "-" + (System.String.format("{0:0000}", [Bridge.box(no, System.Int32)]) || "") : Bridge.toString(no);
                                            no = (no + 1) | 0;
                                        });
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("TMS.UI.Business.Accountant.PaymentVoucherEditBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        fields: {
            gridView: null,
            ledgerParentList: null,
            payment: 0,
            calcTotalPrice: 0
        },
        props: {
            ledgerEntity: {
                get: function () {
                    return Bridge.as(this.Entity, TMS.API.Models.Ledger);
                }
            }
        },
        ctors: {
            init: function () {
                this.ledgerParentList = new (System.Collections.Generic.List$1(TMS.API.Models.Ledger)).ctor();
            },
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "Ledger");
                this.Name = "PaymentVoucher Editor";
            }
        },
        methods: {
            ToggleApprovalBtn: function (entity) {
                if (entity === void 0) { entity = null; }
                if (this.ledgerEntity.Id > 0) {
                    Core.Components.Extensions.ComponentExt.SetShow(this, false, ["btnCreateInvoice"]);
                    Core.Components.Extensions.ComponentExt.SetShow(this, true, ["btnSave"]);
                    Core.Components.Extensions.ComponentExt.SetShow(this, true, ["btnPayment"]);
                } else {
                    Core.Components.Extensions.ComponentExt.SetShow(this, true, ["btnCreateInvoice"]);
                    Core.Components.Extensions.ComponentExt.SetShow(this, false, ["btnSave"]);
                    Core.Components.Extensions.ComponentExt.SetShow(this, false, ["btnPayment"]);
                }
                Core.Components.Forms.PopupEditor.prototype.ToggleApprovalBtn.call(this, entity);
            },
            LoadInvoice: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    gridView, 
                    gridViewSelected, 
                    ledger, 
                    newLedger, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3], $step);
                                switch ($step) {
                                    case 0: {
                                        gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                                            return System.String.contains(x.Name,"Ledger");
                                        }, null);
                                        if (gridView.RowData.Data.Count <= 0) {
                                            $step = 1;
                                            continue;
                                        } 
                                        $step = 3;
                                        continue;
                                    }
                                    case 1: {
                                        gridViewSelected = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this.Parent), Core.Components.GridView).firstOrDefault(function (x) {
                                            return System.String.contains(x.Name,"Ledger");
                                        }, null);
                                        this.ledgerParentList = System.Linq.Enumerable.from(gridViewSelected.GetSelectedRows()).select(function (x) { return Bridge.cast(x, TMS.API.Models.Ledger); }).toList(TMS.API.Models.Ledger);
                                        ledger = System.Linq.Enumerable.from(this.ledgerParentList, TMS.API.Models.Ledger).firstOrDefault(null, null);
                                        newLedger = ($t = new TMS.API.Models.Ledger(), $t.InvoiceFormId = this.ledgerEntity.InvoiceFormId, $t.VendorId = ledger.VendorId, $t.ObjectId = ledger.ObjectId, $t.Taxcode = ledger.Taxcode, $t);
                                        $task1 = gridView.AddRow(newLedger);
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        gridView.UpdateView$1(true);
                                        $step = 3;
                                        continue;
                                    }
                                    case 3: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            Save: function (entity) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    gridView, 
                    ledger, 
                    rs, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2], $step);
                                switch ($step) {
                                    case 0: {
                                        if (entity === void 0) { entity = null; }
                                        if (this.ledgerEntity.Id <= 0) {
                                            Core.Extensions.Toast.Warning("Ch\u01b0a t\u1ea1o phi\u1ebfu");
                                            $tcs.setResult(false);
                                            return;
                                        }
                                        gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(null, null);
                                        ledger = Bridge.cast(System.Linq.Enumerable.from(gridView.RowData.Data, System.Object).firstOrDefault(null, null), TMS.API.Models.Ledger);
                                        $task1 = new Core.Clients.Client.$ctor1("Ledger").UpdateAsync(TMS.API.Models.Ledger, ledger);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        rs = $taskResult1;
                                        if (rs == null) {
                                            Core.Extensions.Toast.Warning("\u0110\u00e3 c\u00f3 l\u1ed7i x\u1ea3y ra");
                                            $tcs.setResult(false);
                                            return;
                                        }
                                        $task2 = Core.Components.Forms.PopupEditor.prototype.Save.call(this, entity);
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        $tcs.setResult($taskResult2);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CreateInvoice: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $task3, 
                    $taskResult3, 
                    $task4, 
                    $taskResult4, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    rs, 
                    gridView, 
                    ledger, 
                    ledgerServices, 
                    $t, 
                    item, 
                    ledgerService, 
                    $t1, 
                    res, 
                    resService, 
                    ids, 
                    freightTrans, 
                    credit, 
                    item1, 
                    confirm, 
                    $t2, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,10,11,12], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = new Core.Clients.Client.$ctor1("Ledger").CreateAsync(TMS.API.Models.Ledger, this.ledgerEntity);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        rs = $taskResult1;
                                        if (rs != null) {
                                            $step = 2;
                                            continue;
                                        } else  {
                                            $step = 11;
                                            continue;
                                        }
                                    }
                                    case 2: {
                                        Core.Extensions.ReflectionExt.CopyPropFrom$1(this.ledgerEntity, rs);
                                        gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(null, null);
                                        ledger = Bridge.cast(System.Linq.Enumerable.from(gridView.RowData.Data, System.Object).firstOrDefault(null, null), TMS.API.Models.Ledger);
                                        ledger.ParentId = rs.Id;
                                        ledgerServices = new (System.Collections.Generic.List$1(TMS.API.Models.LedgerService)).ctor();
                                        $t = Bridge.getEnumerator(this.ledgerParentList);
                                        try {
                                            while ($t.moveNext()) {
                                                item = $t.Current;
                                                ledgerService = ($t1 = new TMS.API.Models.LedgerService(), $t1.InvoiceId = item.Id, $t1.TargetInvoiceId = rs.Id, $t1);
                                                ledgerServices.add(ledgerService);
                                            }
                                        } finally {
                                            if (Bridge.is($t, System.IDisposable)) {
                                                $t.System$IDisposable$Dispose();
                                            }
                                        }
                                        $task2 = new Core.Clients.Client.$ctor1("Ledger").CreateAsync(TMS.API.Models.Ledger, ledger);
                                        $step = 3;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        res = $taskResult2;
                                        $task3 = new Core.Clients.Client.$ctor1("LedgerService").BulkUpdateAsync(TMS.API.Models.LedgerService, ledgerServices);
                                        $step = 4;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        resService = $taskResult3;
                                        if (res != null && resService != null) {
                                            $step = 5;
                                            continue;
                                        } else  {
                                            $step = 9;
                                            continue;
                                        }
                                    }
                                    case 5: {
                                        if (System.Nullable.liftcmp("gt", res.OriginPriceAfterTax, System.Decimal(0))) {
                                            $step = 6;
                                            continue;
                                        } 
                                        $step = 8;
                                        continue;
                                    }
                                    case 6: {
                                        ids = System.Linq.Enumerable.from(resService, TMS.API.Models.LedgerService).select(function (x) {
                                            return x.InvoiceId;
                                        });
                                        $task4 = new Core.Clients.Client.$ctor1("Ledger").GetRawList(TMS.API.Models.Ledger, System.String.format("?$filter=Active eq true and Id in ({0})", [Core.Extensions.IEnumerableExtensions.Combine(System.Nullable$1(System.Int32), ids)]));
                                        $step = 7;
                                        if ($task4.isCompleted()) {
                                            continue;
                                        }
                                        $task4.continue($asyncBody);
                                        return;
                                    }
                                    case 7: {
                                        $taskResult4 = $task4.getAwaitedResult();
                                        freightTrans = $taskResult4;
                                        credit = res.OriginPriceAfterTax;
                                        $t1 = Bridge.getEnumerator(System.Linq.Enumerable.from(freightTrans, TMS.API.Models.Ledger).orderBy(function (x) {
                                            return x.InsertedDate;
                                        }));
                                        try {
                                            while ($t1.moveNext()) {
                                                item1 = $t1.Current;
                                                if (System.Nullable.liftcmp("lte", credit, System.Decimal(0))) {
                                                    break;
                                                }
                                                if (System.Nullable.lifteq("equals", item1.OriginDebit, System.Decimal(0))) {
                                                    continue;
                                                }
                                                if (System.Nullable.liftcmp("gte", credit, item1.OriginDebit)) {
                                                    credit = System.Nullable.lift2("sub", credit, item1.OriginDebit);
                                                    item1.OriginCredit = item1.OriginTotalPrice;
                                                    item1.OriginDebit = System.Decimal(0);
                                                    item1.IsAllPaid = true;
                                                } else {
                                                    if (System.Nullable.lifteq("equals", item1.OriginCredit, System.Decimal.lift(null))) {
                                                        item1.OriginCredit = System.Decimal(0);
                                                    }
                                                    item1.OriginCredit = System.Nullable.lift2("add", item1.OriginCredit, credit);
                                                    item1.OriginDebit = System.Nullable.lift2("sub", item1.OriginDebit, credit);
                                                    credit = System.Decimal(0);
                                                }
                                            }
                                        } finally {
                                            if (Bridge.is($t1, System.IDisposable)) {
                                                $t1.System$IDisposable$Dispose();
                                            }
                                        }
                                        confirm = ($t2 = new Core.Components.Forms.ConfirmDialog(), $t2.Content = System.String.format("B\u1ea1n c\u00f3 ch\u1eafc ch\u1eafn mu\u1ed1n chi {0:N0} cho {1} phi\u1ebfu c\u01b0\u1edbc v\u1eadn chuy\u1ec7n?", ledger.OriginPriceAfterTax, Bridge.box(freightTrans.Count, System.Int32)), $t2);
                                        confirm.Render();
                                        confirm.YesConfirmed = Bridge.fn.combine(confirm.YesConfirmed, Bridge.fn.bind(this, function () {
                                            var $step = 0,
                                                $task1, 
                                                $taskResult1, 
                                                $jumpFromFinally, 
                                                resupdate, 
                                                $asyncBody = Bridge.fn.bind(this, function () {
                                                    for (;;) {
                                                        $step = System.Array.min([0,1], $step);
                                                        switch ($step) {
                                                            case 0: {
                                                                $task1 = new Core.Clients.Client.$ctor1("Ledger").BulkUpdateAsync(TMS.API.Models.Ledger, freightTrans);
                                                                $step = 1;
                                                                if ($task1.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task1.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 1: {
                                                                $taskResult1 = $task1.getAwaitedResult();
                                                                resupdate = $taskResult1;
                                                                if (resupdate != null) {
                                                                    Core.Extensions.Toast.Success("C\u1eadp nh\u1eadt th\u00e0nh c\u00f4ng");
                                                                } else {
                                                                    Core.Extensions.Toast.Warning("\u0110\u00e3 c\u00f3 l\u1ed7i x\u1ea3y ra");
                                                                }
                                                                return;
                                                            }
                                                            default: {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }, arguments);

                                            $asyncBody();
                                        }));
                                        confirm.NoConfirmed = Bridge.fn.combine(confirm.NoConfirmed, Bridge.fn.bind(this, function () {
                                            var $step = 0,
                                                $task1, 
                                                $taskResult1, 
                                                $jumpFromFinally, 
                                                $asyncBody = Bridge.fn.bind(this, function () {
                                                    for (;;) {
                                                        $step = System.Array.min([0,1], $step);
                                                        switch ($step) {
                                                            case 0: {
                                                                res.OriginPriceAfterTax = System.Decimal(0);
                                                                $task1 = new Core.Clients.Client.$ctor1("Ledger").UpdateAsync(TMS.API.Models.Ledger, res);
                                                                $step = 1;
                                                                if ($task1.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task1.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 1: {
                                                                $taskResult1 = $task1.getAwaitedResult();
                                                                gridView.ClearRowData();
                                                                gridView.UpdateView$1(true);
                                                                return;
                                                            }
                                                            default: {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }, arguments);

                                            $asyncBody();
                                        }));
                                        $step = 8;
                                        continue;
                                    }
                                    case 8: {
                                        Core.Extensions.Toast.Success("T\u1ea1o phi\u1ebfu th\u00e0nh c\u00f4ng");
                                        Core.Components.Extensions.ComponentExt.SetShow(this, false, ["btnCreateInvoice"]);
                                        Core.Components.Extensions.ComponentExt.SetShow(this, true, ["btnSave"]);
                                        gridView.ClearRowData();
                                        this.UpdateView$1(true);
                                        $step = 10;
                                        continue;
                                    }
                                    case 9: {
                                        Core.Extensions.Toast.Warning("\u0110\u00e3 c\u00f3 l\u1ed7i x\u1ea3y ra");
                                        $step = 10;
                                        continue;
                                    }
                                    case 10: {
                                        $step = 12;
                                        continue;
                                    }
                                    case 11: {
                                        Core.Extensions.Toast.Warning("\u0110\u00e3 c\u00f3 l\u1ed7i x\u1ea3y ra");
                                        $step = 12;
                                        continue;
                                    }
                                    case 12: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            PaymentFreightTransportation: function (ledger) {
                window.clearTimeout(this.payment);
                this.payment = window.setTimeout(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.PaymentFreightTransportationAsync(ledger);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }), 500);
            },
            PaymentFreightTransportationAsync: function (ledger) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $task3, 
                    $taskResult3, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    gridView, 
                    ledgerDB, 
                    freightTransportations, 
                    ids, 
                    freightTrans, 
                    credit, 
                    $t, 
                    item, 
                    debit, 
                    $t1, 
                    item1, 
                    confirm, 
                    $t2, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3], $step);
                                switch ($step) {
                                    case 0: {
                                        if (this.ledgerEntity.Id <= 0) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(null, null);
                                        $task1 = new Core.Clients.Client.$ctor1("Ledger").FirstOrDefaultAsync(TMS.API.Models.Ledger, System.String.format("?$filter=Active eq true and Id eq {0}", [Bridge.box(ledger.Id, System.Int32)]));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        ledgerDB = $taskResult1;
                                        if (System.Nullable.lifteq("equals", ledger.OriginPriceAfterTax, ledgerDB.OriginPriceAfterTax)) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        $task2 = new Core.Clients.Client.$ctor1("LedgerService").GetRawList(TMS.API.Models.LedgerService, System.String.format("?$filter=Active eq true and TargetInvoiceId eq {0}", [Bridge.box(this.ledgerEntity.Id, System.Int32)]));
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        freightTransportations = $taskResult2;
                                        if (freightTransportations == null) {
                                            Core.Extensions.Toast.Warning("Kh\u00f4ng c\u00f3 phi\u1ebfu \u0111\u1ec3 chi");
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        ids = System.Linq.Enumerable.from(freightTransportations, TMS.API.Models.LedgerService).select(function (x) {
                                            return x.InvoiceId;
                                        });
                                        $task3 = new Core.Clients.Client.$ctor1("Ledger").GetRawList(TMS.API.Models.Ledger, System.String.format("?$filter=Active eq true and Id in ({0})", [Core.Extensions.IEnumerableExtensions.Combine(System.Nullable$1(System.Int32), ids)]));
                                        $step = 3;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        freightTrans = $taskResult3;
                                        if (System.Nullable.liftcmp("gt", ledger.OriginPriceAfterTax, ledgerDB.OriginPriceAfterTax)) {
                                            credit = System.Nullable.lift2("sub", ledger.OriginPriceAfterTax, ledgerDB.OriginPriceAfterTax);
                                            $t = Bridge.getEnumerator(System.Linq.Enumerable.from(freightTrans, TMS.API.Models.Ledger).orderBy(function (x) {
                                                return x.InsertedDate;
                                            }));
                                            try {
                                                while ($t.moveNext()) {
                                                    item = $t.Current;
                                                    if (System.Nullable.liftcmp("lte", credit, System.Decimal(0))) {
                                                        break;
                                                    }
                                                    if (System.Nullable.lifteq("equals", item.OriginDebit, System.Decimal(0))) {
                                                        continue;
                                                    }
                                                    if (System.Nullable.liftcmp("gte", credit, item.OriginDebit)) {
                                                        credit = System.Nullable.lift2("sub", credit, item.OriginDebit);
                                                        item.OriginCredit = item.OriginTotalPrice;
                                                        item.OriginDebit = System.Decimal(0);
                                                        item.IsAllPaid = true;
                                                    } else {
                                                        if (System.Nullable.lifteq("equals", item.OriginCredit, System.Decimal.lift(null))) {
                                                            item.OriginCredit = System.Decimal(0);
                                                        }
                                                        item.OriginCredit = System.Nullable.lift2("add", item.OriginCredit, credit);
                                                        item.OriginDebit = System.Nullable.lift2("sub", item.OriginDebit, credit);
                                                        credit = System.Decimal(0);
                                                    }
                                                }
                                            } finally {
                                                if (Bridge.is($t, System.IDisposable)) {
                                                    $t.System$IDisposable$Dispose();
                                                }
                                            }
                                        } else {
                                            debit = System.Nullable.lift2("sub", ledgerDB.OriginPriceAfterTax, ledger.OriginPriceAfterTax);
                                            $t1 = Bridge.getEnumerator(System.Linq.Enumerable.from(freightTrans, TMS.API.Models.Ledger).orderByDescending(function (x) {
                                                return x.InsertedDate;
                                            }));
                                            try {
                                                while ($t1.moveNext()) {
                                                    item1 = $t1.Current;
                                                    if (System.Nullable.liftcmp("lte", debit, System.Decimal(0))) {
                                                        break;
                                                    }
                                                    if (System.Nullable.lifteq("equals", item1.OriginCredit, System.Decimal(0))) {
                                                        continue;
                                                    }
                                                    if (System.Nullable.liftcmp("gte", debit, item1.OriginCredit)) {
                                                        debit = System.Nullable.lift2("sub", debit, item1.OriginCredit);
                                                        item1.OriginCredit = System.Decimal(0);
                                                        item1.OriginDebit = item1.OriginTotalPrice;
                                                        item1.IsAllPaid = false;
                                                    } else {
                                                        item1.OriginCredit = System.Nullable.lift2("sub", item1.OriginCredit, debit);
                                                        item1.OriginDebit = System.Nullable.lift2("add", item1.OriginDebit, debit);
                                                        debit = System.Decimal(0);
                                                        item1.IsAllPaid = false;
                                                    }
                                                }
                                            } finally {
                                                if (Bridge.is($t1, System.IDisposable)) {
                                                    $t1.System$IDisposable$Dispose();
                                                }
                                            }
                                        }
                                        confirm = ($t2 = new Core.Components.Forms.ConfirmDialog(), $t2.Content = System.String.format("B\u1ea1n c\u00f3 ch\u1eafc ch\u1eafn mu\u1ed1n chi {0:N0} cho {1} phi\u1ebfu c\u01b0\u1edbc v\u1eadn chuy\u1ec7n?", ledger.OriginPriceAfterTax, Bridge.box(freightTrans.Count, System.Int32)), $t2);
                                        confirm.Render();
                                        confirm.YesConfirmed = Bridge.fn.combine(confirm.YesConfirmed, Bridge.fn.bind(this, function () {
                                            var $step = 0,
                                                $task1, 
                                                $taskResult1, 
                                                $task2, 
                                                $taskResult2, 
                                                $jumpFromFinally, 
                                                res, 
                                                $asyncBody = Bridge.fn.bind(this, function () {
                                                    for (;;) {
                                                        $step = System.Array.min([0,1,2,3,4,5], $step);
                                                        switch ($step) {
                                                            case 0: {
                                                                $task1 = new Core.Clients.Client.$ctor1("Ledger").BulkUpdateAsync(TMS.API.Models.Ledger, freightTrans);
                                                                $step = 1;
                                                                if ($task1.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task1.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 1: {
                                                                $taskResult1 = $task1.getAwaitedResult();
                                                                res = $taskResult1;
                                                                if (res != null) {
                                                                    $step = 2;
                                                                    continue;
                                                                } else  {
                                                                    $step = 4;
                                                                    continue;
                                                                }
                                                            }
                                                            case 2: {
                                                                $task2 = new Core.Clients.Client.$ctor1("Ledger").UpdateAsync(TMS.API.Models.Ledger, ledger);
                                                                $step = 3;
                                                                if ($task2.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task2.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 3: {
                                                                $taskResult2 = $task2.getAwaitedResult();
                                                                Core.Extensions.Toast.Success("C\u1eadp nh\u1eadt th\u00e0nh c\u00f4ng");
                                                                $step = 5;
                                                                continue;
                                                            }
                                                            case 4: {
                                                                Core.Extensions.Toast.Warning("\u0110\u00e3 c\u00f3 l\u1ed7i x\u1ea3y ra");
                                                                $step = 5;
                                                                continue;
                                                            }
                                                            case 5: {
                                                                return;
                                                            }
                                                            default: {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }, arguments);

                                            $asyncBody();
                                        }));
                                        confirm.NoConfirmed = Bridge.fn.combine(confirm.NoConfirmed, function () {
                                            gridView.UpdateView$1(true);
                                        });
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CalcTotalPrice: function (ledger) {
                window.clearTimeout(this.calcTotalPrice);
                this.calcTotalPrice = window.setTimeout(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.CalcTotalPriceAsync(ledger);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }), 500);
            },
            CalcTotalPriceAsync: function (ledger) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    gridView, 
                    listViewItem, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (ledger.Quantity != null && System.Nullable.gte(ledger.Quantity, 0) && System.Nullable.liftne("ne", ledger.OriginUnitPrice, System.Decimal.lift(null)) && System.Nullable.liftcmp("gte", ledger.OriginUnitPrice, System.Decimal(0))) {
                                            ledger.OriginPriceBeforeTax = System.Nullable.lift2("mul", System.Decimal.lift(ledger.Quantity), ledger.OriginUnitPrice);
                                        } else {
                                            ledger.OriginPriceBeforeTax = System.Decimal(0);
                                        }
                                        if (System.Nullable.liftne("ne", ledger.OriginPriceBeforeTax, System.Decimal.lift(null)) && System.Nullable.liftcmp("gte", ledger.OriginPriceBeforeTax, System.Decimal(0)) && System.Nullable.liftne("ne", ledger.Vat, System.Decimal.lift(null)) && System.Nullable.liftcmp("gte", ledger.Vat, System.Decimal(0))) {
                                            ledger.OriginVatAmount = System.Decimal.round(System.Nullable.getValue(ledger.OriginPriceBeforeTax).mul(System.Nullable.getValue(ledger.Vat)).div(System.Decimal(100)), 6);
                                        } else {
                                            ledger.OriginVatAmount = System.Decimal(0);
                                        }
                                        if (System.Nullable.liftne("ne", ledger.OriginPriceBeforeTax, System.Decimal.lift(null)) && System.Nullable.liftne("ne", ledger.OriginVatAmount, System.Decimal.lift(null))) {
                                            ledger.OriginPriceAfterTax = System.Nullable.lift2("add", ledger.OriginPriceBeforeTax, ledger.OriginVatAmount);
                                        } else {
                                            ledger.OriginPriceAfterTax = System.Decimal(0);
                                        }
                                        gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(null, null);
                                        listViewItem = System.Linq.Enumerable.from(gridView.GetListViewItems(ledger), Core.Components.ListViewItem).firstOrDefault(null, null);
                                        listViewItem.UpdateView$1(false, ["OriginPriceBeforeTax", "OriginVatAmount", "OriginPriceAfterTax"]);
                                        $task1 = this.PaymentFreightTransportationAsync(ledger);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            GetPatchLedger: function (ledger) {
                var $t;
                var details = new (System.Collections.Generic.List$1(Core.ViewModels.PatchUpdateDetail)).ctor();
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = Core.Extensions.Utils.IdField, $t.Value = Bridge.toString(ledger.Id), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "OriginCredit", $t.Value = ledger.OriginCredit.toString(), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "OriginDebit", $t.Value = ledger.OriginDebit.toString(), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "IsAllPaid", $t.Value = System.Boolean.toString(ledger.IsAllPaid), $t));
                return ($t = new Core.ViewModels.PatchUpdate(), $t.Changes = details, $t);
            }
        }
    });

    Bridge.define("TMS.UI.Business.Accountant.PaymentVoucherListBL", {
        inherits: [Core.Components.Forms.TabEditor],
        fields: {
            gridView: null
        },
        props: {
            selectedLedger: null,
            ledgerEntity: {
                get: function () {
                    return Bridge.as(this.Entity, TMS.API.Models.Ledger);
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "Ledger");
                this.Name = "PaymentVoucher List";
            }
        },
        methods: {
            AddPaymentVoucher: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "PaymentVoucher Editor", function () {
                                            var $t;
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Accountant.PaymentVoucherEditBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Th\u00eam m\u1edbi phi\u1ebfu chi";
                                            instance.Entity = ($t = new TMS.API.Models.Ledger(), $t.InvoiceFormId = 16049, $t.BillDate = System.DateTime.getNow(), $t.InvoiceDate = System.DateTime.getNow(), $t);
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            EditPaymentVoucher: function (ledger) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "PaymentVoucher Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Accountant.PaymentVoucherEditBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Ch\u1ec9nh s\u1eeda phi\u1ebfu chi";
                                            instance.Entity = ledger;
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            SelectedLedger: function (ledger) {
                this.selectedLedger = ledger;
            },
            SetInvoiceNoWhenDel: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    ledgers, 
                    no, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = new Core.Clients.Client.$ctor1("Ledger").GetRawList(TMS.API.Models.Ledger, System.String.format("?$filter=Active eq true and InvoiceFormId eq 16049 and ParentId eq null and Id ge {0} and TypeId eq null", [this.selectedLedger]));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        ledgers = $taskResult1;
                                        no = System.Int32.parse(System.Linq.Enumerable.from(ledgers, TMS.API.Models.Ledger).firstOrDefault(null, null).InvoiceNo.substr(10));
                                        ledgers.ForEach(function (x) {
                                            x.InvoiceNo = no < 10000 ? "PC" + (System.DateTime.format(System.Nullable.getValue(x.InvoiceDate), "yy") || "") + "/" + (System.DateTime.format(System.Nullable.getValue(x.InvoiceDate), "MM") || "") + "-" + (System.String.format("{0:0000}", [Bridge.box(no, System.Int32)]) || "") : Bridge.toString(no);
                                            no = (no + 1) | 0;
                                        });
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("TMS.UI.Business.Accountant.ReceiptVoucherEditBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        fields: {
            gridView: null,
            ledgerParentList: null
        },
        props: {
            ledgerEntity: {
                get: function () {
                    return Bridge.as(this.Entity, TMS.API.Models.Ledger);
                }
            }
        },
        ctors: {
            init: function () {
                this.ledgerParentList = new (System.Collections.Generic.List$1(TMS.API.Models.Ledger)).ctor();
            },
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "Ledger");
                this.Name = "ReceiptVoucher Editor";
            }
        },
        methods: {
            ToggleApprovalBtn: function (entity) {
                if (entity === void 0) { entity = null; }
                if (this.ledgerEntity.Id > 0) {
                    Core.Components.Extensions.ComponentExt.SetShow(this, false, ["btnCreateInvoice"]);
                    Core.Components.Extensions.ComponentExt.SetShow(this, true, ["btnSave"]);
                } else {
                    Core.Components.Extensions.ComponentExt.SetShow(this, true, ["btnCreateInvoice"]);
                    Core.Components.Extensions.ComponentExt.SetShow(this, false, ["btnSave"]);
                }
                Core.Components.Forms.PopupEditor.prototype.ToggleApprovalBtn.call(this, entity);
            },
            Save: function (entity) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    gridView, 
                    ledger, 
                    rs, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2], $step);
                                switch ($step) {
                                    case 0: {
                                        if (entity === void 0) { entity = null; }
                                        if (this.ledgerEntity.Id <= 0) {
                                            Core.Extensions.Toast.Warning("Ch\u01b0a t\u1ea1o phi\u1ebfu");
                                            $tcs.setResult(false);
                                            return;
                                        }
                                        gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(null, null);
                                        ledger = Bridge.cast(System.Linq.Enumerable.from(gridView.RowData.Data, System.Object).firstOrDefault(null, null), TMS.API.Models.Ledger);
                                        $task1 = new Core.Clients.Client.$ctor1("Ledger").UpdateAsync(TMS.API.Models.Ledger, ledger);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        rs = $taskResult1;
                                        if (rs == null) {
                                            Core.Extensions.Toast.Warning("\u0110\u00e3 c\u00f3 l\u1ed7i x\u1ea3y ra");
                                            $tcs.setResult(false);
                                            return;
                                        }
                                        $task2 = Core.Components.Forms.PopupEditor.prototype.Save.call(this, entity);
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        $tcs.setResult($taskResult2);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            SetExchangeRate: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    masterData, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = new Core.Clients.Client.$ctor1("MasterData").FirstOrDefaultAsync(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and Id eq {0}", [Bridge.box(this.ledgerEntity.CurrencyId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        masterData = $taskResult1;
                                        this.ledgerEntity.ExchangeRate = System.Decimal.lift(masterData.Enum);
                                        this.UpdateView$1(false, ["ExchangeRate"]);
                                        this.CostCalcLedgers();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CostCalcLedgers: function () {
                this.gridView = this.gridView || System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                        return Bridge.referenceEquals(x.Name, "Ledger");
                    }, null);
                var ledgers = System.Linq.Enumerable.from(this.gridView.RowData.Data).select(function (x) { return Bridge.cast(x, TMS.API.Models.Ledger); }).toList(TMS.API.Models.Ledger);
                ledgers.ForEach(Bridge.fn.bind(this, function (x) {
                    var listViewItem = System.Linq.Enumerable.from(this.gridView.GetListViewItems(x), Core.Components.ListViewItem).firstOrDefault(null, null);
                    if (listViewItem == null) {
                        return;
                    }
                    x.OriginPriceAfterTax = System.Nullable.liftcmp("gt", x.ExchangeRate, System.Decimal(1)) ? System.Decimal.round(System.Nullable.getValue(x.OriginPriceAfterTax).div(System.Nullable.getValue(x.ExchangeRate)), 6) : x.OriginPriceAfterTax;
                    x.CurrencyId = this.ledgerEntity.CurrencyId;
                    x.ExchangeRate = this.ledgerEntity.ExchangeRate;
                    x.OriginPriceAfterTax = System.Nullable.lift2("mul", x.OriginPriceAfterTax, (System.Nullable.lifteq("equals", x.ExchangeRate, System.Decimal.lift(null)) ? System.Decimal(0) : System.Nullable.getValue(x.ExchangeRate)));
                    listViewItem.UpdateView$1(false, ["OriginPriceAfterTax"]);
                }));
            },
            CreateInvoice: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $task3, 
                    $taskResult3, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    rs, 
                    gridView, 
                    ledger, 
                    ledgerServices, 
                    $t, 
                    item, 
                    ledgerService, 
                    $t1, 
                    res, 
                    resService, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = new Core.Clients.Client.$ctor1("Ledger").CreateAsync(TMS.API.Models.Ledger, this.ledgerEntity);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        rs = $taskResult1;
                                        if (rs != null) {
                                            $step = 2;
                                            continue;
                                        } else  {
                                            $step = 5;
                                            continue;
                                        }
                                    }
                                    case 2: {
                                        Core.Extensions.ReflectionExt.CopyPropFrom$1(this.ledgerEntity, rs);
                                        gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(null, null);
                                        ledger = Bridge.cast(System.Linq.Enumerable.from(gridView.RowData.Data, System.Object).firstOrDefault(null, null), TMS.API.Models.Ledger);
                                        ledger.ParentId = rs.Id;
                                        ledgerServices = new (System.Collections.Generic.List$1(TMS.API.Models.LedgerService)).ctor();
                                        $t = Bridge.getEnumerator(this.ledgerParentList);
                                        try {
                                            while ($t.moveNext()) {
                                                item = $t.Current;
                                                ledgerService = ($t1 = new TMS.API.Models.LedgerService(), $t1.InvoiceId = item.Id, $t1.TargetInvoiceId = rs.Id, $t1);
                                                ledgerServices.add(ledgerService);
                                            }
                                        } finally {
                                            if (Bridge.is($t, System.IDisposable)) {
                                                $t.System$IDisposable$Dispose();
                                            }
                                        }
                                        $task2 = new Core.Clients.Client.$ctor1("Ledger").CreateAsync(TMS.API.Models.Ledger, ledger);
                                        $step = 3;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        res = $taskResult2;
                                        $task3 = new Core.Clients.Client.$ctor1("LedgerService").BulkUpdateAsync(TMS.API.Models.LedgerService, ledgerServices);
                                        $step = 4;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        resService = $taskResult3;
                                        if (res != null && resService != null) {
                                            Core.Extensions.Toast.Success("T\u1ea1o phi\u1ebfu th\u00e0nh c\u00f4ng");
                                            Core.Components.Extensions.ComponentExt.SetShow(this, false, ["btnCreateInvoice"]);
                                            Core.Components.Extensions.ComponentExt.SetShow(this, true, ["btnSave"]);
                                            gridView.ClearRowData();
                                            this.UpdateView$1(true);
                                        } else {
                                            Core.Extensions.Toast.Warning("\u0110\u00e3 c\u00f3 l\u1ed7i x\u1ea3y ra");
                                        }
                                        $step = 6;
                                        continue;
                                    }
                                    case 5: {
                                        Core.Extensions.Toast.Warning("\u0110\u00e3 c\u00f3 l\u1ed7i x\u1ea3y ra");
                                        $step = 6;
                                        continue;
                                    }
                                    case 6: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("TMS.UI.Business.Accountant.ReceiptVoucherListBL", {
        inherits: [Core.Components.Forms.TabEditor],
        fields: {
            gridView: null
        },
        props: {
            selectedLedger: null,
            ledgerEntity: {
                get: function () {
                    return Bridge.as(this.Entity, TMS.API.Models.Ledger);
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "Ledger");
                this.Name = "ReceiptVoucher List";
            }
        },
        methods: {
            AddReceiptVoucher: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "ReceiptVoucher Editor", function () {
                                            var $t;
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Accountant.ReceiptVoucherEditBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Th\u00eam m\u1edbi phi\u1ebfu thu";
                                            instance.Entity = ($t = new TMS.API.Models.Ledger(), $t.ExchangeRate = System.Decimal(1), $t.CurrencyId = 16083, $t.InvoiceFormId = 16050, $t.BillDate = System.DateTime.getNow(), $t.InvoiceDate = System.DateTime.getNow(), $t);
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            EditReceiptVoucher: function (ledger) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "ReceiptVoucher Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Accountant.ReceiptVoucherEditBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Ch\u1ec9nh s\u1eeda phi\u1ebfu thu";
                                            instance.Entity = ledger;
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            SelectedLedger: function (ledger) {
                this.selectedLedger = ledger;
            },
            SetInvoiceNoWhenDel: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    ledgers, 
                    no, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = new Core.Clients.Client.$ctor1("Ledger").GetRawList(TMS.API.Models.Ledger, System.String.format("?$filter=Active eq true and InvoiceFormId eq 16050 and ParentId eq null and Id ge {0} and TypeId eq null", [this.selectedLedger]));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        ledgers = $taskResult1;
                                        no = System.Int32.parse(System.Linq.Enumerable.from(ledgers, TMS.API.Models.Ledger).firstOrDefault(null, null).InvoiceNo.substr(10));
                                        ledgers.ForEach(function (x) {
                                            x.InvoiceNo = no < 10000 ? "PT" + (System.DateTime.format(System.Nullable.getValue(x.InvoiceDate), "yy") || "") + "/" + (System.DateTime.format(System.Nullable.getValue(x.InvoiceDate), "MM") || "") + "-" + (System.String.format("{0:0000}", [Bridge.box(no, System.Int32)]) || "") : Bridge.toString(no);
                                            no = (no + 1) | 0;
                                        });
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("TMS.UI.Business.Accountant.SettingsInvoiceVendorListBL", {
        inherits: [Core.Components.Forms.TabEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "Ledger");
                this.Name = "SettingsInvoiceVendor List";
            }
        },
        methods: {
            BeforeCreateLedger: function (ledger) {
                ledger.TypeId = 2;
            }
        }
    });

    Bridge.define("TMS.UI.Business.Accountant.TaxExpenseItemsEditBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "MasterData");
                this.Name = "TaxExpenseItem Editor";
            }
        }
    });

    Bridge.define("TMS.UI.Business.Accountant.TaxExpenseItemsListBL", {
        inherits: [Core.Components.Forms.TabEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "MasterData");
                this.Name = "TaxExpenseItems List";
            }
        },
        methods: {
            AddTaxExpenseItem: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "TaxExpenseItem Editor", function () {
                                            var $t;
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Accountant.TaxExpenseItemsEditBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Th\u00eam m\u1edbi K.M\u1ee5c CP thu\u1ebf";
                                            instance.Entity = ($t = new TMS.API.Models.MasterData(), $t.ParentId = 23776, $t);
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            EditTaxExpenseItem: function (masterData) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "TaxExpenseItem Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Accountant.TaxExpenseItemsEditBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Ch\u1ec9nh s\u1eeda K.M\u1ee5c CP thu\u1ebf";
                                            instance.Entity = masterData;
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            BeforeCreatedMasterData: function (masterData) {
                masterData.ParentId = 23776;
            }
        }
    });

    /** @namespace System */

    /**
     * @memberof System
     * @callback System.Action
     * @param   {Core.ViewModels.Token}    arg
     * @return  {void}
     */

    Bridge.define("TMS.UI.Business.Authentication.LoginBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        statics: {
            fields: {
                _instance: null,
                _initApp: false
            },
            props: {
                MenuComponent: null,
                TaskList: null,
                Instance: {
                    get: function () {
                        if (TMS.UI.Business.Authentication.LoginBL._instance == null) {
                            TMS.UI.Business.Authentication.LoginBL._instance = new TMS.UI.Business.Authentication.LoginBL();
                        }

                        return TMS.UI.Business.Authentication.LoginBL._instance;
                    }
                }
            },
            methods: {
                InitFCM: function (signout) {
                    if (signout === void 0) { signout = false; }
                    System.Console.WriteLine("Init fcm");
                    var tanentCode = "HIEPTHUONG";
                    var strUserId = System.String.format("U{0:0000000}", [Bridge.box(Core.Clients.Client.Token.UserId, System.Int32)]);
                    if (typeof(PushNotification) === 'undefined') return;
                    var topics = ['/topics/' + tanentCode + strUserId];
                    const push = PushNotification.init({
                        android: {
                            senderID: '9681598079',
                            topics: topics
                        },
                        ios: {
                            alert: "true",
                            badge: "true",
                            sound: "true",
                            topics: topics
                        },
                    });
                    if (signout && push.unsubscribe) {
                        push.unsubscribe(topics[0]);
                        return;
                    }
                    push.on('registration', (data) => {
                    });
                    push.on('notification', (data) => {
                        if (typeof(cordova) !== 'undefined' &&
                            typeof(cordova.plugins) !== 'undefined' &&
                            typeof(cordova.plugins.notification) !== 'undefined') {
                            cordova.plugins.notification.local.schedule({
                                title: data.title,
                                text: data.message,
                                foreground: true,
                            });
                        }
                        // data.message,
                        // data.title,
                        // data.count,
                        // data.sound,
                        // data.image,
                        // data.additionalData
                    });

                    push.on('error', (e) => {
                        // e.message
                    });
                },
                DiposeAll: function () {
                    var $t;
                    while (Core.Components.Forms.TabEditor.Tabs.Count > 0) {
                        ($t = Core.Components.Forms.TabEditor.Tabs.getItem(0)) != null ? $t.Dispose() : null;
                    }
                    if (TMS.UI.Business.Authentication.LoginBL.MenuComponent != null) {
                        TMS.UI.Business.Authentication.LoginBL.MenuComponent.Dispose();
                    }

                    if (TMS.UI.Business.Authentication.LoginBL.TaskList != null) {
                        TMS.UI.Business.Authentication.LoginBL.TaskList.Dispose();
                    }

                    TMS.UI.Business.Authentication.LoginBL.MenuComponent = null;
                    TMS.UI.Business.Authentication.LoginBL.TaskList = null;
                }
            }
        },
        fields: {
            _renderAwaiter: 0
        },
        props: {
            LoginEntity: {
                get: function () {
                    return Bridge.as(this.Entity, Core.ViewModels.LoginVM);
                }
            },
            /**
             * This action is invoke after the user get signed in
             *
             * @instance
             * @public
             * @memberof TMS.UI.Business.Authentication.LoginBL
             * @function SignedInHandler
             * @type System.Action
             */
            SignedInHandler: null,
            /**
             * This action is invoked when the app is initial
             *
             * @instance
             * @public
             * @memberof TMS.UI.Business.Authentication.LoginBL
             * @function InitAppHanlder
             * @type System.Action
             */
            InitAppHanlder: null,
            /**
             * This action is invoked after user signed in or the token is refreshed
             *
             * @instance
             * @public
             * @memberof TMS.UI.Business.Authentication.LoginBL
             * @function TokenRefreshedHandler
             * @type System.Action
             */
            TokenRefreshedHandler: null
        },
        ctors: {
            ctor: function () {
                var $t;
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "User");
                this.Entity = ($t = new Core.ViewModels.LoginVM(), $t.AutoSignIn = true, $t);
                this.Name = "Login";
                this.Title = "\u0110\u0103ng nh\u1eadp";
                window.addEventListener("beforeunload", function () {
                    Core.Components.Forms.EditForm.NotificationClient != null ? Core.Components.Forms.EditForm.NotificationClient.Close() : null;
                });
                this.Public = true;
            }
        },
        methods: {
            Render: function () {
                var oldToken = Core.Clients.Client.Token;
                if (oldToken == null || System.DateTime.lte(oldToken.RefreshTokenExp, Core.Clients.Client.EpsilonNow)) {
                    this.RenderLoginForm();
                } else if (System.DateTime.gt(oldToken.AccessTokenExp, Core.Clients.Client.EpsilonNow)) {
                    this.InitAppIfEmpty();
                } else if (System.DateTime.gt(oldToken.RefreshTokenExp, Core.Clients.Client.EpsilonNow)) {
                    System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                        var $step = 0,
                            $task1, 
                            $taskResult1, 
                            $jumpFromFinally, 
                            $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                            $returnValue, 
                            $async_e, 
                            $asyncBody = Bridge.fn.bind(this, function () {
                                try {
                                    for (;;) {
                                        $step = System.Array.min([0,1], $step);
                                        switch ($step) {
                                            case 0: {
                                                $task1 = Core.Clients.Client.RefreshToken(Bridge.fn.bind(this, function (newToken) {
                                                        this.InitAppIfEmpty();
                                                    }));
                                                    $step = 1;
                                                    if ($task1.isCompleted()) {
                                                        continue;
                                                    }
                                                    $task1.continue($asyncBody);
                                                    return;
                                            }
                                            case 1: {
                                                $taskResult1 = $task1.getAwaitedResult();
                                                $tcs.setResult($taskResult1);
                                                    return;
                                            }
                                            default: {
                                                $tcs.setResult(null);
                                                return;
                                            }
                                        }
                                    }
                                } catch($async_e1) {
                                    $async_e = System.Exception.create($async_e1);
                                    $tcs.setException($async_e);
                                }
                            }, arguments);

                        $asyncBody();
                        return $tcs.task;
                    }));
                }
            },
            RenderLoginForm: function () {
                window.clearTimeout(this._renderAwaiter);
                this._renderAwaiter = window.setTimeout(Bridge.fn.bind(this, function () {
                    if (this._backdrop != null) {
                        document.body.appendChild(this._backdrop);
                        Core.Extensions.HtmlElementExtension.Show(this._backdrop);
                        return;
                    }
                    Core.Components.Renderer.ClassName(Core.MVVM.Html.Take$1("#tab-content").Div, "modal is-open").Event$1("keypress", Bridge.fn.cacheBind(this, this.KeyCodeEnter));
                    this._backdrop = Core.MVVM.Html.Context;
                    Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.MVVM.Html.Instance.Div, "modal-container").Div, "modal-left").H1, "modal-title").Text("XIN CH\u00c0O").End.P, "modal-desc").Text("\u0110\u00d4NG \u00c1").End.Div, "input-block").Label, "input-label").Text("T\u00ean t\u00e0i kho\u1ea3n").End.Input.Event$1("input", Bridge.fn.bind(this, function (e) {
                        this.LoginEntity.UserName = Bridge.cast(e.target, HTMLInputElement).value;
                    })).Attr$1("name", "UserName").Value(this.LoginEntity.UserName).Type$1("text").End.End.Div, "input-block").Label, "input-label").Text("M\u1eadt kh\u1ea9u").End.Input.Event$1("input", Bridge.fn.bind(this, function (e) {
                        this.LoginEntity.Password = Bridge.cast(e.target, HTMLInputElement).value;
                    })).Attr$1("name", "Password").Value(this.LoginEntity.Password).Type$1("password").End.End.Div, "input-block").Label, "input-label").Text("Ghi nh\u1edb").End.Label, "checkbox input-small transition-on style2").Checkbox(this.LoginEntity.AutoSignIn).Event$1("input", Bridge.fn.bind(this, function (e) {
                        this.LoginEntity.AutoSignIn = Bridge.cast(e.target, HTMLInputElement).checked;
                    })).Attr$1("name", "AutoSignIn").Attr$1("name", "AutoSignIn").End.Span, "check myCheckbox").End.End.End.Div, "modal-buttons").A.Href("").Text("Qu\u00ean m\u1eadt kh\u1ea9u?").End.Button.Id("btnLogin").Event("click", Bridge.fn.bind(this, function () {
                        var $step = 0,
                            $task1, 
                            $taskResult1, 
                            $jumpFromFinally, 
                            $asyncBody = Bridge.fn.bind(this, function () {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = this.Login(this.LoginEntity);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            return;
                                        }
                                        default: {
                                            return;
                                        }
                                    }
                                }
                            }, arguments);

                        $asyncBody();
                    })), "input-button").Text("\u0110\u0103ng nh\u1eadp").End.End.End.Div, "modal-right").Img.Src("../image/bg-launch.jpg").End.Render();
                    this.Element = Core.MVVM.Html.Context;
                }), 100);
            },
            KeyCodeEnter: function (e) {
                if (Core.Extensions.EventExt.KeyCode(e) !== Core.Enums.KeyCodeEnum.Enter) {
                    return;
                }
                e.preventDefault();
                document.getElementById("btnLogin").click();
            },
            Login: function (login) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    isValid, 
                    res, 
                    $async_e, 
                    $t, 
                    $async_e1, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.IsFormValid();
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        isValid = $taskResult1;
                                        if (!isValid) {
                                            $tcs.setResult(false);
                                            return;
                                        }
                                        login.RecoveryToken = Core.Extensions.Utils.GetUrlParam("recovery");
                                        res = null;
                                        $step = 2;
                                        continue;
                                    }
                                    case 2: {
                                        $task2 = this.Client.CreateAsync(Core.ViewModels.Token, login, "SignIn?t=" + (login.CompanyName || ""));
                                        $step = 3;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        res = $taskResult2;
                                        $step = 5;
                                        continue;
                                    }
                                    case 4: {
                                        $async_e = null;
                                        $step = 5;
                                        continue;
                                    }
                                    case 5: {
                                        if (!login.AutoSignIn) {
                                            login.Password = "";
                                        }
                                        if (res != null) {
                                            Core.Extensions.Toast.Success(System.String.format("Xin ch\u00e0o {0}!", [res.FullName]));
                                            Core.Clients.Client.Token = res;
                                            login.UserName = "";
                                            this.InitAppIfEmpty();
                                            TMS.UI.Business.Authentication.LoginBL.InitFCM();
                                            !Bridge.staticEquals(($t = this.SignedInHandler), null) ? $t(Core.Clients.Client.Token) : null;
                                            this.Dispose();
                                        }
                                        $tcs.setResult(true);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            if ( $step >= 2 && $step <= 3 ) {
                                $step = 4;
                                $asyncBody();
                                return;
                            }
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ForgotPassword: function (login) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    res, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.Client.PostAsync(System.Nullable$1(System.Boolean), login, "ForgotPassword");
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        res = $taskResult1;
                                        if (res == null || !System.Nullable.getValue(res)) {
                                            Core.Extensions.Toast.Warning("An error occurs. Please contact the administrator to get your password!");
                                        } else {
                                            Core.Extensions.Toast.Success(System.String.format("A recovery email has been sent to your email address. Please check and follow the steps in the email!", null));
                                        }
                                        $tcs.setResult(true);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            InitAppIfEmpty: function () {
                var $t;
                Core.Clients.Client.SystemRole = Core.Clients.Client.Token.RoleIds.contains(Core.Enums.RoleEnum.System);
                if (TMS.UI.Business.Authentication.LoginBL._initApp) {
                    return;
                }
                TMS.UI.Business.Authentication.LoginBL._initApp = true;
                !Bridge.staticEquals(($t = this.InitAppHanlder), null) ? $t(Core.Clients.Client.Token) : null;
                var userId = Core.Clients.Client.Token.UserId;
                if (Core.Components.Forms.EditForm.NotificationClient == null) {
                    Core.Components.Forms.EditForm.NotificationClient = new Core.Clients.WebSocketClient("task");
                }

                if (TMS.UI.Business.Authentication.LoginBL.MenuComponent == null) {
                    TMS.UI.Business.MenuComponent.Instance.Render();
                }
                if (TMS.UI.Business.Authentication.LoginBL.TaskList == null) {
                    TMS.UI.Business.Authentication.LoginBL.TaskList = TMS.UI.Notifications.NotificationBL.Instance;
                    TMS.UI.Business.Authentication.LoginBL.TaskList.Render();
                    TMS.UI.Business.Authentication.LoginBL.TaskList.DOMContentLoaded = Bridge.fn.combine(TMS.UI.Business.Authentication.LoginBL.TaskList.DOMContentLoaded, function () {
                        document.getElementById("name-user").textContent = Core.Clients.Client.Token.UserName;
                        document.getElementById("Username-text").textContent = Core.Clients.Client.Token.FullName;
                        document.getElementById("text-address").textContent = Core.Clients.Client.Token.Address;
                        Core.MVVM.Html.Take$1("#user-image").Src("./image/" + (Core.Clients.Client.Token.Avatar || ""));
                        Core.MVVM.Html.Take$1("#img-detail").Src("./image/" + (Core.Clients.Client.Token.Avatar || ""));
                    });
                }
            },
            Dispose: function () {
                Core.Extensions.HtmlElementExtension.Hide(this._backdrop);
                Core.MVVM.Html.Take$1(".is-open").Clear();
            }
        }
    });

    Bridge.define("TMS.UI.Business.Authentication.PolicyEditorBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "FeaturePolicy");
                this.Name = "PolicyEditor";
                this.Title = "Policy detail";
            }
        }
    });

    Bridge.define("TMS.UI.Business.Authentication.PolicyManagementBL", {
        inherits: [Core.Components.Forms.TabEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "Role");
                this.Name = "Policy";
                this.Title = this.Name;
            }
        },
        methods: {
            CopyRole: function (originRole, copied) {
                copied.ForEach(function (x) {
                    x.InverseParentRole = null;
                });
            },
            EditRole: function (role) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Role Detail", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Setting.RoleDetailBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Entity = role || new TMS.API.Models.Role();
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("TMS.UI.Business.Manage.AllotmentEditorBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        fields: {
            gridView: null
        },
        props: {
            AEntity: {
                get: function () {
                    return Bridge.as(this.Entity, TMS.API.Models.Allotment);
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "Allotment");
                this.Name = "Allotment Editor";
            }
        },
        methods: {
            UpdateExpenses: function () {
                var $t;
                if (System.Nullable.lifteq("equals", this.AEntity.UnitPrice, System.Decimal.lift(null))) {
                    this.AEntity.UnitPrice = System.Decimal(0);
                }
                var list = ($t = TMS.API.Models.Expense, System.Linq.Enumerable.from(this.AEntity.Expense, $t).toList($t));
                var count = list.Count;
                list.ForEach(Bridge.fn.bind(this, function (x) {
                    x.ExpenseTypeId = this.AEntity.ExpenseTypeId;
                    x.IsCollectOnBehaft = this.AEntity.IsCollectOnBehaft;
                    x.IsVat = this.AEntity.IsVat;
                    x.Notes = this.AEntity.Notes;
                    if (this.AEntity.IsFull) {
                        x.UnitPrice = this.AEntity.UnitPrice;
                    } else {
                        var unitprice = this.AEntity.UnitPrice.div(System.Decimal(count));
                        x.UnitPrice = unitprice;
                    }
                    x.TotalPriceBeforeTax = x.UnitPrice.mul(x.Quantity);
                    x.TotalPriceAfterTax = x.TotalPriceBeforeTax;
                }));
                this.gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(null, null);
                Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.ListViewItem, this.gridView.AllListViewItem, function (item) {
                    var ent = System.Linq.Enumerable.from(list, TMS.API.Models.Expense).firstOrDefault(function (x) {
                            return System.Nullable.eq(x.TransportationId, System.Nullable.getValue(Bridge.cast(Bridge.unbox(item.Entity.TransportationId, System.Int32), System.Int32)));
                        }, null);
                    Core.Extensions.ReflectionExt.CopyPropFrom$1(item.Entity, ent);
                    item.UpdateView$1(true);
                });
            },
            Save: function (entity) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $task3, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    rs, 
                    grid, 
                    gridTran, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3], $step);
                                switch ($step) {
                                    case 0: {
                                        if (entity === void 0) { entity = null; }
                                        $task1 = Core.Components.Forms.PopupEditor.prototype.Save.call(this, entity);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        rs = $taskResult1;
                                        window.setTimeout(Bridge.fn.bind(this, function () {
                                            var $step = 0,
                                                $task1, 
                                                $jumpFromFinally, 
                                                $asyncBody = Bridge.fn.bind(this, function () {
                                                    for (;;) {
                                                        $step = System.Array.min([0,1], $step);
                                                        switch ($step) {
                                                            case 0: {
                                                                $task1 = this.UpdateTotalFee();
                                                                $step = 1;
                                                                if ($task1.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task1.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 1: {
                                                                $task1.getAwaitedResult();
                                                                return;
                                                            }
                                                            default: {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }, arguments);

                                            $asyncBody();
                                        }), 500);
                                        grid = Core.Components.Extensions.ComponentExt.FindComponentByName(Core.Components.GridView, this.ParentForm, "Expense");
                                        $task2 = (grid != null ? grid.ApplyFilter(true) : null);
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $task2.getAwaitedResult();
                                        gridTran = Core.Components.Extensions.ComponentExt.FindComponentByName(Core.Components.GridView, this.ParentForm, "Transportation");
                                        $task3 = (gridTran != null ? gridTran.ApplyFilter(true) : null);
                                        $step = 3;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $task3.getAwaitedResult();
                                        gridTran != null ? gridTran.ClearSelected() : null;
                                        this.Dirty = false;
                                        this.Dispose();
                                        $tcs.setResult(rs);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            UpdateTotalFee: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $task3, 
                    $taskResult3, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    tranIds, 
                    transportations, 
                    expenseTypeIds, 
                    expenseTypes, 
                    notTotal, 
                    $t, 
                    item, 
                    details, 
                    expenses, 
                    $t1, 
                    itemDetail, 
                    expenseTypeThisIds, 
                    totalThisValue, 
                    $t2, 
                    path, 
                    $t3, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6], $step);
                                switch ($step) {
                                    case 0: {
                                        tranIds = System.Linq.Enumerable.from(this.AEntity.Expense, TMS.API.Models.Expense).select(function (x) {
                                            return System.Nullable.getValue(x.TransportationId);
                                        }).toList(System.Int32);
                                        $task1 = new Core.Clients.Client.$ctor1("Transportation").GetRawList(TMS.API.Models.Transportation, System.String.format("?$expand=Expense&$filter=Active eq true and Id in ({0})", [Bridge.toArray(tranIds).join(",")]));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        transportations = $taskResult1;
                                        expenseTypeIds = System.Linq.Enumerable.from(transportations, TMS.API.Models.Transportation).selectMany(function (x) {
                                            return x.Expense;
                                        }).where(function (x) {
                                            return x.ExpenseTypeId != null;
                                        }).select(function (x) {
                                            return System.Nullable.getValue(x.ExpenseTypeId);
                                        }).distinct().toList(System.Int32);
                                        $task2 = new Core.Clients.Client.$ctor1("MasterData").GetRawListById(TMS.API.Models.MasterData, expenseTypeIds);
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        expenseTypes = $taskResult2;
                                        notTotal = System.Linq.Enumerable.from(expenseTypes, TMS.API.Models.MasterData).where(function (x) {
                                            return Core.Extensions.StringExt.IsNullOrWhiteSpace(x.Additional);
                                        }).select(function (x) {
                                            return x.Id;
                                        }).toList(System.Int32);
                                        $t = Bridge.getEnumerator(transportations);
                                        $step = 3;
                                        continue;
                                    }
                                    case 3: {
                                        if ($t.moveNext()) {
                                            item = { v : $t.Current };
                                            $step = 4;
                                            continue;
                                        }
                                        $step = 6;
                                        continue;
                                    }
                                    case 4: {
                                        details = (function ($me, item) {
                                            return function (_o1) {
                                                var $t1;
                                                _o1.add(($t1 = new Core.ViewModels.PatchUpdateDetail(), $t1.Field = Core.Extensions.Utils.IdField, $t1.Value = Bridge.toString(item.v.Id), $t1));
                                                return _o1;
                                            };
                                        })(this, item)(new (System.Collections.Generic.List$1(Core.ViewModels.PatchUpdateDetail)).ctor());
                                        expenses = item.v.Expense;
                                        $t1 = Bridge.getEnumerator(System.Linq.Enumerable.from(expenseTypes, TMS.API.Models.MasterData).select(function (x) {
                                            return x.Additional;
                                        }).distinct().toList(System.String));
                                        try {
                                            while ($t1.moveNext()) {
                                                itemDetail = { v : $t1.Current };
                                                expenseTypeThisIds = { v : System.Linq.Enumerable.from(expenseTypes, TMS.API.Models.MasterData).where((function ($me, itemDetail) {
                                                    return function (x) {
                                                        return Bridge.referenceEquals(x.Additional, itemDetail.v);
                                                    };
                                                })(this, itemDetail)).select(function (x) {
                                                    return x.Id;
                                                }).distinct().toList(System.Int32) };
                                                totalThisValue = System.Linq.Enumerable.from(expenses, TMS.API.Models.Expense).where((function ($me, expenseTypeThisIds) {
                                                    return function (x) {
                                                        return expenseTypeThisIds.v.contains(System.Nullable.getValue(x.ExpenseTypeId));
                                                    };
                                                })(this, expenseTypeThisIds)).sum(function (x) {
                                                    return x.TotalPriceAfterTax;
                                                }, System.Decimal.Zero);
                                                details.add(($t2 = new Core.ViewModels.PatchUpdateDetail(), $t2.Field = itemDetail.v, $t2.Value = totalThisValue.toString(), $t2));
                                            }
                                        } finally {
                                            if (Bridge.is($t1, System.IDisposable)) {
                                                $t1.System$IDisposable$Dispose();
                                            }
                                        }
                                        path = ($t2 = new Core.ViewModels.PatchUpdate(), $t2.Changes = ($t3 = Core.ViewModels.PatchUpdateDetail, System.Linq.Enumerable.from(Core.Extensions.BridgeExt.DistinctBy(Core.ViewModels.PatchUpdateDetail, System.String, System.Linq.Enumerable.from(details, Core.ViewModels.PatchUpdateDetail).where(function (x) {
                                            return x.Field != null && !Bridge.referenceEquals(x.Field, "null") && !Bridge.referenceEquals(x.Field, "");
                                        }), function (x) {
                                            return x.Field;
                                        }), $t3).toList($t3)), $t2);
                                        $task3 = new Core.Clients.Client.$ctor1("Transportation").PatchAsync(TMS.API.Models.Transportation, path, "", "true", false, false);
                                        $step = 5;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 5: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        $step = 3;
                                        continue;
                                    }
                                    case 6: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("TMS.UI.Business.Manage.BookingEditorBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        props: {
            booking: {
                get: function () {
                    return Bridge.as(this.Entity, TMS.API.Models.Booking);
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "Booking");
                this.Name = "Booking Editor";
            }
        },
        methods: {
            CalcTeusEditor: function () {
                if (this.booking.Teus20Using.gt(this.booking.Teus20)) {
                    Core.Extensions.Toast.Warning("S\u1ed1 teus20 \u0111\u00f3ng kh\u00f4ng \u0111\u01b0\u1ee3c l\u1edbn h\u01a1n s\u1ed1 teus c\u1ea5p");
                    this.booking.Teus20Using = this.booking.Teus20;
                }
                if (System.Convert.toDecimal(this.booking.Teus40Using).gt(System.Convert.toDecimal(this.booking.Teus40))) {
                    Core.Extensions.Toast.Warning("S\u1ed1 teus40 \u0111\u00f3ng kh\u00f4ng \u0111\u01b0\u1ee3c l\u1edbn h\u01a1n s\u1ed1 teus c\u1ea5p");
                    this.booking.Teus40Using = this.booking.Teus40;
                }
                this.booking.Teus20Remain = this.booking.Teus20.sub(this.booking.Teus20Using);
                this.booking.Teus40Remain = this.booking.Teus40.sub(this.booking.Teus40Using);
                this.UpdateView();
            }
        }
    });

    Bridge.define("TMS.UI.Business.Manage.BookingListBL", {
        inherits: [Core.Components.Forms.TabEditor],
        fields: {
            _uploader: null,
            _uploaderTeus: null,
            gridView: null
        },
        props: {
            _isLoadTransportation: false
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "Booking");
                this.Name = "Booking List";
                this.DOMContentLoaded = Bridge.fn.combine(this.DOMContentLoaded, Bridge.fn.bind(this, function () {
                    Core.MVVM.Html.Take$1("Body").Form.Attr$1("method", "POST").Attr$1("enctype", "multipart/form-data").Display$1(false).Input.Event$1("change", Bridge.fn.bind(this, function (ev) {
                        var $step = 0,
                            $task1, 
                            $jumpFromFinally, 
                            $asyncBody = Bridge.fn.bind(this, function () {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = this.SelectedExcel(ev);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            return;
                                        }
                                        default: {
                                            return;
                                        }
                                    }
                                }
                            }, arguments);

                        $asyncBody();
                    })).Type$1("file").Id(System.String.format("id_{0}", [Bridge.box(Bridge.getHashCode(this), System.Int32)])).Attr$1("name", "fileImport").Attr$1("accept", ".xlsx");
                    this._uploader = Bridge.as(Core.MVVM.Html.Context, HTMLInputElement);
                    Core.MVVM.Html.Take$1("Body").Form.Attr$1("method", "POST").Attr$1("enctype", "multipart/form-data").Display$1(false).Input.Event$1("change", Bridge.fn.bind(this, function (ev) {
                        var $step = 0,
                            $task1, 
                            $jumpFromFinally, 
                            $asyncBody = Bridge.fn.bind(this, function () {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = this.SelectedExcelTeus(ev);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            return;
                                        }
                                        default: {
                                            return;
                                        }
                                    }
                                }
                            }, arguments);

                        $asyncBody();
                    })).Type$1("file").Id(System.String.format("id_{0}", [Bridge.box(Bridge.getHashCode(this), System.Int32)])).Attr$1("name", "fileImport").Attr$1("accept", ".xlsx");
                    this._uploaderTeus = Bridge.as(Core.MVVM.Html.Context, HTMLInputElement);
                }));
            }
        },
        methods: {
            LockBooking: function () {
                this.gridView = Core.Components.Extensions.ComponentExt.FindComponentByName(Core.Components.GridView, this, "Booking");
                var lockUpdate = System.Linq.Enumerable.from(this.gridView.RowData.Data).select(function (x) { return Bridge.cast(x, TMS.API.Models.Booking); }).where(function (x) {
                    return !Bridge.equals(x.BookingExpired, null) && System.DateTime.lt(x.BookingExpired, System.DateTime.getNow());
                }).toList(TMS.API.Models.Booking);
                Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, this.gridView.FilterChildren$1(function (x) {
                    return x.Entity != null && System.Linq.Enumerable.from(lockUpdate, System.Object).contains(x.Entity);
                }), function (x) {
                    Core.Components.Extensions.ComponentExt.SetDisabled(x, true);
                });
                this.gridView.BodyContextMenuShow = Bridge.fn.combine(this.gridView.BodyContextMenuShow, Bridge.fn.bind(this, function () {
                    Core.Components.Forms.ContextMenu.Instance.MenuItems = Bridge.fn.bind(this, function (_o1) {
                            var $t;
                            _o1.add(($t = new Core.Components.Forms.ContextMenuItem(), $t.Icon = "fal fa-street-view", $t.Text = "Xem danh s\u00e1ch v\u1eadn chuy\u1ec3n", $t.Click = Bridge.fn.cacheBind(this, this.ViewTransportation), $t));
                            _o1.add(($t = new Core.Components.Forms.ContextMenuItem(), $t.Icon = "fal fa-binoculars", $t.Text = "Ch\u1ecdn booking", $t.Click = Bridge.fn.cacheBind(this, this.ChooseBooking), $t));
                            return _o1;
                        })(new (System.Collections.Generic.List$1(Core.Components.Forms.ContextMenuItem)).ctor());
                }));
            },
            ChooseBooking: function (arg) {
                var gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                        return Bridge.referenceEquals(x.GuiInfo.FieldName, "Booking");
                    }, null);
                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $task2, 
                        $taskResult2, 
                        $task3, 
                        $task4, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        selected, 
                        coords, 
                        fe, 
                        gridView1, 
                        rowData, 
                        items, 
                        $t, 
                        updated, 
                        dropdown, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1,2,3,4,5,6,7], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = gridView.GetRealTimeSelectedRows();
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            selected = $taskResult1;
                                            if (Core.Extensions.IEnumerableExtensions.Nothing(System.Object, selected)) {
                                                selected = gridView.RowData.Data;
                                            }
                                            coords = System.Linq.Enumerable.from(selected).select(function (x) { return Bridge.cast(x, TMS.API.Models.Booking); }).firstOrDefault(null, null);
                                            fe = System.Linq.Enumerable.from(Core.Components.Forms.TabEditor.Tabs, Core.Components.Forms.TabEditor).where(function (x) {
                                                return Bridge.referenceEquals(x.Name, "Transportation List");
                                            }).firstOrDefault(null, null);
                                            if (fe == null) {
                                                Core.Extensions.Toast.Warning("Vui l\u00f2ng m\u1edf m\u00e0n h\u00ecnh danh s\u00e1ch v\u1eadn chuy\u1ec3n");
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            gridView1 = System.Linq.Enumerable.from(fe.FilterChildren(Core.Components.GridView), Core.Components.GridView).firstOrDefault(function (x) {
                                                return x.GuiInfo.Id === 16016;
                                            }, null);
                                            if (gridView1 == null) {
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            fe.Focus();
                                            $task2 = gridView1.GetRealTimeSelectedRows();
                                            $step = 2;
                                            if ($task2.isCompleted()) {
                                                continue;
                                            }
                                            $task2.continue($asyncBody);
                                            return;
                                        }
                                        case 2: {
                                            $taskResult2 = $task2.getAwaitedResult();
                                            rowData = System.Linq.Enumerable.from(($taskResult2)).select(function (x) { return Bridge.cast(x, TMS.API.Models.Transportation); }).toList(TMS.API.Models.Transportation);
                                            if (Core.Extensions.IEnumerableExtensions.Nothing(TMS.API.Models.Transportation, rowData)) {
                                                Core.Extensions.Toast.Warning("Vui l\u00f2ng ch\u1ecdn danh s\u00e1ch v\u1eadn chuy\u1ec3n");
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            items = gridView1.GetListViewItems(rowData);
                                            $t = Bridge.getEnumerator(items, Core.Components.ListViewItem);
                                            $step = 3;
                                            continue;
                                        }
                                        case 3: {
                                            if ($t.moveNext()) {
                                                updated = $t.Current;
                                                $step = 4;
                                                continue;
                                            }
                                            $step = 7;
                                            continue;
                                        }
                                        case 4: {
                                            Core.Extensions.BridgeExt.SetComplexPropValue(updated.Entity, "BookingId", Bridge.box(coords.Id, System.Int32));
                                            updated.UpdateView();
                                            dropdown = System.Linq.Enumerable.from(updated.FilterChildren(Core.Components.SearchEntry, function (x) {
                                                return Bridge.referenceEquals(x.GuiInfo.FieldName, "BookingId");
                                            }), Core.Components.SearchEntry).firstOrDefault(null, null);
                                            updated.PopulateFields(dropdown.Matched);
                                            $task3 = Core.Components.Extensions.ComponentExt.DispatchEventToHandlerAsync(updated, updated.GuiInfo.Events, "change", [updated.Entity, dropdown.Matched]);
                                            $step = 5;
                                            if ($task3.isCompleted()) {
                                                continue;
                                            }
                                            $task3.continue($asyncBody);
                                            return;
                                        }
                                        case 5: {
                                            $task3.getAwaitedResult();
                                            $task4 = updated.PatchUpdate();
                                            $step = 6;
                                            if ($task4.isCompleted()) {
                                                continue;
                                            }
                                            $task4.continue($asyncBody);
                                            return;
                                        }
                                        case 6: {
                                            $task4.getAwaitedResult();
                                            $step = 3;
                                            continue;
                                        }
                                        case 7: {
                                            Core.Extensions.Toast.Success("Ch\u1ecdn booking th\u00e0nh c\u00f4ng");
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            ViewTransportation: function (arg) {
                var gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                        return Bridge.referenceEquals(x.GuiInfo.FieldName, "Booking");
                    }, null);

                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $task2, 
                        $taskResult2, 
                        $task3, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        selected, 
                        coords, 
                        fe, 
                        currentFeature, 
                        id, 
                        type, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1,2,3,4,5,6], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = gridView.GetRealTimeSelectedRows();
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            selected = $taskResult1;
                                            if (Core.Extensions.IEnumerableExtensions.Nothing(System.Object, selected)) {
                                                selected = gridView.RowData.Data;
                                            }
                                            coords = System.Linq.Enumerable.from(System.Linq.Enumerable.from(selected).select(function (x) { return Bridge.cast(x, TMS.API.Models.Booking); }).toList(TMS.API.Models.Booking), TMS.API.Models.Booking).select(function (x) {
                                                return x.Id;
                                            }).distinct().toList(System.Int32);
                                            fe = System.Linq.Enumerable.from(Core.Components.Forms.TabEditor.Tabs, Core.Components.Forms.TabEditor).where(function (x) {
                                                return Bridge.referenceEquals(x.Name, "Transportation List");
                                            }).firstOrDefault(null, null);
                                            if (fe == null) {
                                                $step = 2;
                                                continue;
                                            } else  {
                                                $step = 4;
                                                continue;
                                            }
                                        }
                                        case 2: {
                                            $task2 = Core.Components.Extensions.ComponentExt.LoadFeatureByName("Transportation List");
                                            $step = 3;
                                            if ($task2.isCompleted()) {
                                                continue;
                                            }
                                            $task2.continue($asyncBody);
                                            return;
                                        }
                                        case 3: {
                                            $taskResult2 = $task2.getAwaitedResult();
                                            currentFeature = $taskResult2;
                                            id = (currentFeature.Name || "") + currentFeature.Id;
                                            if (currentFeature.ViewClass != null) {
                                                type = Bridge.Reflection.getType(currentFeature.ViewClass);
                                            } else {
                                                type = Core.Components.Forms.TabEditor;
                                            }
                                            fe = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.TabEditor);
                                            fe.Name = currentFeature.Name;
                                            fe.Id = id;
                                            fe.Icon = currentFeature.Icon;
                                            fe.Feature = currentFeature;
                                            fe.Render();
                                            fe.DOMContentLoaded = Bridge.fn.combine(fe.DOMContentLoaded, Bridge.fn.bind(this, function () {
                                                var gridView1 = System.Linq.Enumerable.from(fe.FilterChildren(Core.Components.GridView), Core.Components.GridView).firstOrDefault(function (x) {
                                                    return x.GuiInfo.Id === 16016;
                                                }, null);
                                                gridView1.DOMContentLoaded = Bridge.fn.combine(gridView1.DOMContentLoaded, Bridge.fn.bind(this, function () {
                                                    var $step = 0,
                                                        $task1, 
                                                        $jumpFromFinally, 
                                                        $asyncBody = Bridge.fn.bind(this, function () {
                                                            for (;;) {
                                                                $step = System.Array.min([0,1], $step);
                                                                switch ($step) {
                                                                    case 0: {
                                                                        if (this._isLoadTransportation) {
                                                                            return;
                                                                        }
                                                                        $task1 = this.FilterTransportation(coords, fe);
                                                                        $step = 1;
                                                                        if ($task1.isCompleted()) {
                                                                            continue;
                                                                        }
                                                                        $task1.continue($asyncBody);
                                                                        return;
                                                                    }
                                                                    case 1: {
                                                                        $task1.getAwaitedResult();
                                                                        this._isLoadTransportation = true;
                                                                        return;
                                                                    }
                                                                    default: {
                                                                        return;
                                                                    }
                                                                }
                                                            }
                                                        }, arguments);

                                                    $asyncBody();
                                                }));
                                            }));
                                            $step = 6;
                                            continue;
                                        }
                                        case 4: {
                                            $task3 = this.FilterTransportation(coords, fe);
                                            $step = 5;
                                            if ($task3.isCompleted()) {
                                                continue;
                                            }
                                            $task3.continue($asyncBody);
                                            return;
                                        }
                                        case 5: {
                                            $task3.getAwaitedResult();
                                            fe.Focus();
                                            $step = 6;
                                            continue;
                                        }
                                        case 6: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            FilterTransportation: function (coords, fe) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    gridView1, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        gridView1 = System.Linq.Enumerable.from(fe.FilterChildren(Core.Components.GridView), Core.Components.GridView).firstOrDefault(function (x) {
                                            return x.GuiInfo.Id === 16016;
                                        }, null);
                                        if (gridView1 == null) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        gridView1.CellSelected.clear();
                                        gridView1.AdvSearchVM.Conditions.clear();
                                        coords.ForEach(function (x) {
                                            var $t;
                                            gridView1.CellSelected.add(($t = new Core.Models.CellSelected(), $t.FieldName = "BookingId", $t.FieldText = "Booking", $t.ComponentType = "Dropdown", $t.Value = Bridge.toString(x), $t.ValueText = Bridge.toString(x), $t.Operator = "in", $t.OperatorText = "Ch\u1ee9a", $t.IsSearch = true, $t.Logic = Core.Enums.LogicOperation.Or, $t));
                                        });
                                        $task1 = gridView1.ActionFilter();
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CalcTeusBooking: function (booking) {
                var $t;
                this.gridView = Core.Components.Extensions.ComponentExt.FindComponentByName(Core.Components.GridView, this, "Booking");
                var listViewItem = System.Linq.Enumerable.from(this.gridView.GetListViewItems(booking), Core.Components.ListViewItem).firstOrDefault(null, null);
                if (booking.Teus20Using.gt(booking.Teus20)) {
                    Core.Extensions.Toast.Warning("S\u1ed1 teus20 \u0111\u00f3ng kh\u00f4ng \u0111\u01b0\u1ee3c l\u1edbn h\u01a1n s\u1ed1 teus c\u1ea5p");
                    booking.Teus20Using = booking.Teus20;
                }
                if (System.Convert.toDecimal(booking.Teus40Using).gt(System.Convert.toDecimal(booking.Teus40))) {
                    Core.Extensions.Toast.Warning("S\u1ed1 teus40 \u0111\u00f3ng kh\u00f4ng \u0111\u01b0\u1ee3c l\u1edbn h\u01a1n s\u1ed1 teus c\u1ea5p");
                    booking.Teus40Using = booking.Teus40;
                }
                booking.Teus20Remain = booking.Teus20.sub(booking.Teus20Using);
                booking.Teus40Remain = booking.Teus40.sub(booking.Teus40Using);
                listViewItem.UpdateView();
                var updated = ($t = Core.Components.CellText, System.Linq.Enumerable.from(listViewItem.FilterChildren(Core.Components.CellText, function (x) {
                        return Bridge.referenceEquals(x.GuiInfo.FieldName, "Teus20Remain") || Bridge.referenceEquals(x.GuiInfo.FieldName, "Teus40Remain");
                    }), $t).toList($t));
                updated.ForEach(function (x) {
                    x.Dirty = true;
                });
            },
            CalcTeusSlot: function (teus) {
                var $t;
                this.gridView = Core.Components.Extensions.ComponentExt.FindComponentByName(Core.Components.GridView, this, "Teus");
                if (teus.Teus20Using.gt(teus.Teus20)) {
                    Core.Extensions.Toast.Warning("S\u1ed1 teus20 \u0111\u00f3ng kh\u00f4ng \u0111\u01b0\u1ee3c l\u1edbn h\u01a1n s\u1ed1 teus c\u1ea5p");
                    teus.Teus20Using = teus.Teus20;
                }
                if (System.Convert.toDecimal(teus.Teus40Using).gt(System.Convert.toDecimal(teus.Teus40))) {
                    Core.Extensions.Toast.Warning("S\u1ed1 teus40 \u0111\u00f3ng kh\u00f4ng \u0111\u01b0\u1ee3c l\u1edbn h\u01a1n s\u1ed1 teus c\u1ea5p");
                    teus.Teus40Using = teus.Teus40;
                }
                var listViewItem = System.Linq.Enumerable.from(this.gridView.GetListViewItems(teus), Core.Components.ListViewItem).firstOrDefault(null, null);
                teus.Teus20Remain = teus.Teus20.sub(teus.Teus20Using);
                teus.Teus40Remain = teus.Teus40.sub(teus.Teus40Using);
                listViewItem.UpdateView();
                var updated = ($t = Core.Components.CellText, System.Linq.Enumerable.from(listViewItem.FilterChildren(Core.Components.CellText, function (x) {
                        return Bridge.referenceEquals(x.GuiInfo.FieldName, "Teus20Remain") || Bridge.referenceEquals(x.GuiInfo.FieldName, "Teus40Remain");
                    }), $t).toList($t));
                updated.ForEach(function (x) {
                    x.Dirty = true;
                });
            },
            CheckUnique: function (booking) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    check, 
                    check1, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5], $step);
                                switch ($step) {
                                    case 0: {
                                        this.gridView = Core.Components.Extensions.ComponentExt.FindComponentByName(Core.Components.GridView, this, "Booking");
                                        if (booking.Id > 0) {
                                            $step = 1;
                                            continue;
                                        } else  {
                                            $step = 3;
                                            continue;
                                        }
                                    }
                                    case 1: {
                                        $task1 = new Core.Clients.Client.$ctor1("Booking").FirstOrDefaultAsync(TMS.API.Models.Booking, System.String.format("?$filter=Active eq true and ShipId eq {0} and Trip eq '{1}' and StartShip eq {2} and Id ne {3} and BookingNo eq '{4}'", Bridge.box(booking.ShipId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), booking.Trip, Core.Extensions.DateTimeExt.ToOdataFormat(System.Nullable.getValue(booking.StartShip)), Bridge.box(booking.Id, System.Int32), booking.BookingNo));
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        check = $taskResult1;
                                        if (check != null) {
                                            Core.Extensions.Toast.Warning("\u0110\u00e3 t\u1ed3n t\u1ea1i booking trong h\u1ec7 th\u1ed1ng");
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        $step = 5;
                                        continue;
                                    }
                                    case 3: {
                                        $task2 = new Core.Clients.Client.$ctor1("Booking").FirstOrDefaultAsync(TMS.API.Models.Booking, System.String.format("?$filter=Active eq true and ShipId eq {0} and Trip eq '{1}' and StartShip eq {2} and BookingNo eq '{3}'", Bridge.box(booking.ShipId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), booking.Trip, Core.Extensions.DateTimeExt.ToOdataFormat(System.Nullable.getValue(booking.StartShip)), booking.BookingNo));
                                        $step = 4;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        check1 = $taskResult2;
                                        if (check1 != null) {
                                            Core.Extensions.Toast.Warning("\u0110\u00e3 t\u1ed3n t\u1ea1i booking trong h\u1ec7 th\u1ed1ng");
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        $step = 5;
                                        continue;
                                    }
                                    case 5: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            EditBooking: function (entity) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Booking Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Manage.BookingEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Ch\u1ec9nh s\u1eeda booking";
                                            instance.Entity = entity;
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            AddBooking: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Booking Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Manage.BookingEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Th\u00eam m\u1edbi booking";
                                            instance.Entity = new TMS.API.Models.Booking();
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            BulkUpdate: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    rs, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Forms.TabEditor.prototype.BulkUpdate.call(this);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        rs = $taskResult1;
                                        this.LockBooking();
                                        $tcs.setResult(rs);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ViewBooking: function () {
                var $t;
                var gridView = Core.Components.Extensions.ComponentExt.FindComponentByName(Core.Components.GridView, this, "Teus");
                ($t = Core.Components.ListViewItem, System.Linq.Enumerable.from(gridView.AllListViewItem, $t).toList($t)).ForEach(function (x) {
                    var teus = Bridge.cast(x.Entity, TMS.API.Models.Teus);
                    Core.Extensions.HtmlElementExtension.RemoveClass(x.Element, "bg-host");
                    if (teus.Teus20Remain.lt(System.Decimal(0)) || teus.Teus40Remain.lt(System.Decimal(0))) {
                        Core.Extensions.HtmlElementExtension.AddClass(x.Element, "bg-host");
                    }
                });
            },
            SelectedExcel: function (e) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    files, 
                    uploadForm, 
                    formData, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        files = Bridge.as(e.target.files, FileList);
                                        if (Core.Extensions.IEnumerableExtensions.Nothing(File, files)) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        uploadForm = Bridge.as(this._uploader.parentElement, HTMLFormElement);
                                        formData = new FormData(uploadForm);
                                        $task1 = this.Client.SubmitAsync(System.Collections.Generic.List$1(TMS.API.Models.Booking), ($t = new Core.Clients.XHRWrapper(), $t.FormData = formData, $t.Url = "ImportExcel", $t.Method = Core.Enums.HttpMethod.POST, $t.ResponseMimeType = Core.Extensions.Utils.GetMimeType("xlsx"), $t));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ImportExcel: function () {
                this._uploader.click();
            },
            SelectedExcelTeus: function (e) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    files, 
                    uploadForm, 
                    formData, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        files = Bridge.as(e.target.files, FileList);
                                        if (Core.Extensions.IEnumerableExtensions.Nothing(File, files)) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        uploadForm = Bridge.as(this._uploaderTeus.parentElement, HTMLFormElement);
                                        formData = new FormData(uploadForm);
                                        $task1 = this.Client.SubmitAsync(System.Collections.Generic.List$1(TMS.API.Models.Teus), ($t = new Core.Clients.XHRWrapper(), $t.FormData = formData, $t.Url = "ImportExcelTeus", $t.Method = Core.Enums.HttpMethod.POST, $t.ResponseMimeType = Core.Extensions.Utils.GetMimeType("xlsx"), $t));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ImportExcelTeus: function () {
                this._uploaderTeus.click();
            }
        }
    });

    Bridge.define("TMS.UI.Business.Manage.BookingListEditorBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        props: {
            BookingListEntity: {
                get: function () {
                    return Bridge.as(this.Entity, TMS.API.Models.BookingList);
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "BookingList");
                this.Name = "Ship Book Editor";
            }
        },
        methods: {
            CreateBookingList: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    res, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (Bridge.equals(this.BookingListEntity.FromDate, null)) {
                                            Core.Extensions.Toast.Warning("Vui l\u00f2ng nh\u1eadp t\u1eeb ng\u00e0y");
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        if (Bridge.equals(this.BookingListEntity.ToDate, null)) {
                                            Core.Extensions.Toast.Warning("Vui l\u00f2ng nh\u1eadp \u0111\u1ebfn ng\u00e0y");
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        $task1 = new Core.Clients.Client.$ctor1("BookingList").PostAsync(System.Boolean, this.Entity, "UpdateBookingList");
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        res = $taskResult1;
                                        if (res) {
                                            Core.Extensions.Toast.Success("\u0110\u00e3 c\u1eadp nh\u1eadt th\u00e0nh c\u00f4ng.");
                                        } else {
                                            Core.Extensions.Toast.Warning("\u0110\u00e3 c\u00f3 l\u1ed7i x\u1ea3y ra trong qu\u00e1 tr\u00ecnh x\u1eed l\u00fd.");
                                        }
                                        this.Dirty = false;
                                        this.Dispose();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            Cancel: function () {
                this.Dispose();
                Core.Components.Forms.PopupEditor.prototype.Cancel.call(this);
            },
            CancelWithoutAsk: function () {
                this.Dispose();
                Core.Components.Forms.PopupEditor.prototype.CancelWithoutAsk.call(this);
            }
        }
    });

    Bridge.define("TMS.UI.Business.Manage.BookingListListBL", {
        inherits: [Core.Components.Forms.TabEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "BookingList");
                this.Name = "List Ship Book";
            }
        },
        methods: {
            SetLock: function () {
                var gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(null, null);
                var listViewItems = System.Linq.Enumerable.from(gridView.RowData.Data).select(function (x) { return Bridge.cast(x, TMS.API.Models.BookingList); }).toList(TMS.API.Models.BookingList);
                listViewItems.ForEach(function (x) {
                    var listViewItem = System.Linq.Enumerable.from(gridView.GetListViewItems(x), Core.Components.ListViewItem).firstOrDefault(null, null);
                    if (listViewItem == null) {
                        return;
                    }
                    if (x.Submit) {
                        Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, listViewItem.FilterChildren$1(function (y) {
                            return !Bridge.referenceEquals(y.GuiInfo.FieldName, "Submit") && !y.GuiInfo.Disabled;
                        }), function (y) {
                            y.Disabled = true;
                        });
                    } else {
                        Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, listViewItem.FilterChildren$1(function (y) {
                            return !y.GuiInfo.Disabled;
                        }), function (y) {
                            y.Disabled = false;
                        });
                    }
                });
            },
            ChangeSubmit: function (bookingList) {
                var gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(null, null);
                var listViewItem = System.Linq.Enumerable.from(gridView.GetListViewItems(bookingList), Core.Components.ListViewItem).firstOrDefault(null, null);
                if (listViewItem == null) {
                    return;
                }
                if (bookingList.Submit) {
                    Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, listViewItem.FilterChildren$1(function (y) {
                        return !Bridge.referenceEquals(y.GuiInfo.FieldName, "Submit") && !y.GuiInfo.Disabled;
                    }), function (y) {
                        y.Disabled = true;
                    });
                } else {
                    Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, listViewItem.FilterChildren$1(function (y) {
                        return !y.GuiInfo.Disabled;
                    }), function (y) {
                        y.Disabled = false;
                    });
                }
            },
            AddOrUpdateBookingList: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Ship Book Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Manage.BookingListEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "C\u1eadp nh\u1eadt l\u1ecbch book t\u00e0u";
                                            instance.Entity = new TMS.API.Models.BookingList();
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CreateAllBookingList: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = new Core.Clients.Client.$ctor1("BookingList").PostAsync(TMS.API.Models.BookingList, null, "CreateAllBookingList");
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            LockAllBookingList: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    gridView, 
                    listViewItems, 
                    confirm, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                                            return Bridge.referenceEquals(x.GuiInfo.FieldName, "BookingList");
                                        }, null);
                                        if (gridView == null) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        $task1 = gridView.GetRealTimeSelectedRows();
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        listViewItems = System.Linq.Enumerable.from(($taskResult1)).select(function (x) { return Bridge.cast(x, TMS.API.Models.BookingList); }).where(function (x) {
                                            return x.Submit === false;
                                        }).toList(TMS.API.Models.BookingList);
                                        if (System.Linq.Enumerable.from(listViewItems, TMS.API.Models.BookingList).count() <= 0) {
                                            listViewItems = System.Linq.Enumerable.from(gridView.RowData.Data).select(function (x) { return Bridge.cast(x, TMS.API.Models.BookingList); }).where(function (x) {
                                                return x.Submit === false;
                                            }).toList(TMS.API.Models.BookingList);
                                        }
                                        if (listViewItems.Count <= 0) {
                                            Core.Extensions.Toast.Warning("Kh\u00f4ng c\u00f3 danh s\u00e1ch book t\u00e0u n\u00e0o c\u1ea7n kh\u00f3a");
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        confirm = ($t = new Core.Components.Forms.ConfirmDialog(), $t.Content = "B\u1ea1n c\u00f3 ch\u1eafc ch\u1eafn mu\u1ed1n kh\u00f3a " + System.Linq.Enumerable.from(listViewItems, TMS.API.Models.BookingList).count() + " danh s\u00e1ch book t\u00e0u kh\u00f4ng ?", $t);
                                        confirm.Render();
                                        confirm.YesConfirmed = Bridge.fn.combine(confirm.YesConfirmed, Bridge.fn.bind(this, function () {
                                            var $step = 0,
                                                $task1, 
                                                $taskResult1, 
                                                $task2, 
                                                $jumpFromFinally, 
                                                $t1, 
                                                item, 
                                                listViewItem, 
                                                $asyncBody = Bridge.fn.bind(this, function () {
                                                    for (;;) {
                                                        $step = System.Array.min([0,1,2,3,4,5], $step);
                                                        switch ($step) {
                                                            case 0: {
                                                                $t1 = Bridge.getEnumerator(listViewItems);
                                                                $step = 1;
                                                                continue;
                                                            }
                                                            case 1: {
                                                                if ($t1.moveNext()) {
                                                                    item = $t1.Current;
                                                                    $step = 2;
                                                                    continue;
                                                                }
                                                                $step = 4;
                                                                continue;
                                                            }
                                                            case 2: {
                                                                item.Submit = true;
                                                                listViewItem = System.Linq.Enumerable.from(gridView.GetListViewItems(item), Core.Components.ListViewItem).firstOrDefault(null, null);
                                                                $task1 = new Core.Clients.Client.$ctor1("BookingList").PatchAsync(TMS.API.Models.BookingList, this.GetPatchSubmit(item));
                                                                $step = 3;
                                                                if ($task1.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task1.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 3: {
                                                                $taskResult1 = $task1.getAwaitedResult();
                                                                Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, listViewItem.FilterChildren$1(function (y) {
                                                                    return !Bridge.referenceEquals(y.GuiInfo.FieldName, "Submit") && !y.GuiInfo.Disabled;
                                                                }), function (y) {
                                                                    y.Disabled = true;
                                                                });
                                                                $step = 1;
                                                                continue;
                                                            }
                                                            case 4: {
                                                                $task2 = gridView.ApplyFilter(true);
                                                                $step = 5;
                                                                if ($task2.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task2.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 5: {
                                                                $task2.getAwaitedResult();
                                                                gridView.Dirty = false;
                                                                return;
                                                            }
                                                            default: {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }, arguments);

                                            $asyncBody();
                                        }));
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            UnLockAllBookingList: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    gridView, 
                    listViewItems, 
                    confirm, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                                            return Bridge.referenceEquals(x.GuiInfo.FieldName, "BookingList");
                                        }, null);
                                        if (gridView == null) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        $task1 = gridView.GetRealTimeSelectedRows();
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        listViewItems = System.Linq.Enumerable.from(($taskResult1)).select(function (x) { return Bridge.cast(x, TMS.API.Models.BookingList); }).where(function (x) {
                                            return x.Submit;
                                        }).toList(TMS.API.Models.BookingList);
                                        if (System.Linq.Enumerable.from(listViewItems, TMS.API.Models.BookingList).count() <= 0) {
                                            listViewItems = System.Linq.Enumerable.from(gridView.RowData.Data).select(function (x) { return Bridge.cast(x, TMS.API.Models.BookingList); }).where(function (x) {
                                                return x.Submit;
                                            }).toList(TMS.API.Models.BookingList);
                                        }
                                        if (listViewItems.Count <= 0) {
                                            Core.Extensions.Toast.Warning("Kh\u00f4ng c\u00f3 danh s\u00e1ch book t\u00e0u n\u00e0o c\u1ea7n m\u1edf kh\u00f3a");
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        confirm = ($t = new Core.Components.Forms.ConfirmDialog(), $t.Content = "B\u1ea1n c\u00f3 ch\u1eafc ch\u1eafn mu\u1ed1n m\u1edf kh\u00f3a " + System.Linq.Enumerable.from(listViewItems, TMS.API.Models.BookingList).count() + " danh s\u00e1ch book t\u00e0u kh\u00f4ng ?", $t);
                                        confirm.Render();
                                        confirm.YesConfirmed = Bridge.fn.combine(confirm.YesConfirmed, Bridge.fn.bind(this, function () {
                                            var $step = 0,
                                                $task1, 
                                                $taskResult1, 
                                                $task2, 
                                                $jumpFromFinally, 
                                                $t1, 
                                                item, 
                                                listViewItem, 
                                                $asyncBody = Bridge.fn.bind(this, function () {
                                                    for (;;) {
                                                        $step = System.Array.min([0,1,2,3,4,5], $step);
                                                        switch ($step) {
                                                            case 0: {
                                                                $t1 = Bridge.getEnumerator(listViewItems);
                                                                $step = 1;
                                                                continue;
                                                            }
                                                            case 1: {
                                                                if ($t1.moveNext()) {
                                                                    item = $t1.Current;
                                                                    $step = 2;
                                                                    continue;
                                                                }
                                                                $step = 4;
                                                                continue;
                                                            }
                                                            case 2: {
                                                                item.Submit = false;
                                                                listViewItem = System.Linq.Enumerable.from(gridView.GetListViewItems(item), Core.Components.ListViewItem).firstOrDefault(null, null);
                                                                $task1 = new Core.Clients.Client.$ctor1("BookingList").PatchAsync(TMS.API.Models.BookingList, this.GetPatchSubmit(item));
                                                                $step = 3;
                                                                if ($task1.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task1.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 3: {
                                                                $taskResult1 = $task1.getAwaitedResult();
                                                                Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, listViewItem.FilterChildren$1(function (y) {
                                                                    return !y.GuiInfo.Disabled;
                                                                }), function (y) {
                                                                    y.Disabled = false;
                                                                });
                                                                $step = 1;
                                                                continue;
                                                            }
                                                            case 4: {
                                                                $task2 = gridView.ApplyFilter(true);
                                                                $step = 5;
                                                                if ($task2.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task2.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 5: {
                                                                $task2.getAwaitedResult();
                                                                gridView.Dirty = false;
                                                                return;
                                                            }
                                                            default: {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }, arguments);

                                            $asyncBody();
                                        }));
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ApproveUnLockShip: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    gridView, 
                    transportations, 
                    confirm, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                                            return Bridge.referenceEquals(x.GuiInfo.FieldName, "TransportationUnLockShip");
                                        }, null);
                                        if (gridView == null) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        $task1 = gridView.GetRealTimeSelectedRows();
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        transportations = System.Linq.Enumerable.from(($taskResult1)).select(function (x) { return Bridge.cast(x, TMS.API.Models.Transportation); }).where(function (x) {
                                            return x.LockShip;
                                        }).toList(TMS.API.Models.Transportation);
                                        if (transportations.Count <= 0) {
                                            Core.Extensions.Toast.Warning("Kh\u00f4ng c\u00f3 cont n\u00e0o b\u1ecb kh\u00f3a !!!");
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        confirm = ($t = new Core.Components.Forms.ConfirmDialog(), $t.Content = System.String.format("B\u1ea1n c\u00f3 ch\u1eafc ch\u1eafn mu\u1ed1n m\u1edf kh\u00f3a cho {0} DSVC kh\u00f4ng?", [Bridge.box(transportations.Count, System.Int32)]), $t);
                                        confirm.Render();
                                        confirm.YesConfirmed = Bridge.fn.combine(confirm.YesConfirmed, Bridge.fn.bind(this, function () {
                                            var $step = 0,
                                                $task1, 
                                                $taskResult1, 
                                                $jumpFromFinally, 
                                                $t1, 
                                                item, 
                                                res, 
                                                $asyncBody = Bridge.fn.bind(this, function () {
                                                    for (;;) {
                                                        $step = System.Array.min([0,1], $step);
                                                        switch ($step) {
                                                            case 0: {
                                                                $t1 = Bridge.getEnumerator(transportations);
                                                                try {
                                                                    while ($t1.moveNext()) {
                                                                        item = $t1.Current;
                                                                        item.LockShip = false;
                                                                        item.IsRequestUnLockShip = false;
                                                                    }
                                                                } finally {
                                                                    if (Bridge.is($t1, System.IDisposable)) {
                                                                        $t1.System$IDisposable$Dispose();
                                                                    }
                                                                }
                                                                $task1 = new Core.Clients.Client.$ctor1("Transportation").PostAsync(System.Boolean, transportations, "ApproveUnLockShip");
                                                                $step = 1;
                                                                if ($task1.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task1.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 1: {
                                                                $taskResult1 = $task1.getAwaitedResult();
                                                                res = $taskResult1;
                                                                if (res) {
                                                                    gridView.RemoveRange(transportations);
                                                                    Core.Extensions.Toast.Success("M\u1edf kh\u00f3a th\u00e0nh c\u00f4ng");
                                                                } else {
                                                                    Core.Extensions.Toast.Warning("\u0110\u00e3 c\u00f3 l\u1ed7i x\u1ea3y ra");
                                                                }
                                                                return;
                                                            }
                                                            default: {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }, arguments);

                                            $asyncBody();
                                        }));
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            GetPatchEntity: function (bookingList) {
                var $t;
                var details = new (System.Collections.Generic.List$1(Core.ViewModels.PatchUpdateDetail)).ctor();
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = Core.Extensions.Utils.IdField, $t.Value = Bridge.toString(bookingList.Id), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "ShipUnitPrice", $t.Value = bookingList.ShipUnitPrice.toString(), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "Count", $t.Value = System.Nullable.toString(bookingList.Count, null), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "TotalPrice", $t.Value = bookingList.TotalPrice.toString(), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "OrtherFeePrice", $t.Value = bookingList.OrtherFeePrice.toString(), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "TotalFee", $t.Value = bookingList.TotalFee.toString(), $t));
                return ($t = new Core.ViewModels.PatchUpdate(), $t.Changes = details, $t);
            },
            GetPatchSubmit: function (bookingList) {
                var $t;
                var details = new (System.Collections.Generic.List$1(Core.ViewModels.PatchUpdateDetail)).ctor();
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = Core.Extensions.Utils.IdField, $t.Value = Bridge.toString(bookingList.Id), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "Submit", $t.Value = System.Boolean.toString(bookingList.Submit), $t));
                return ($t = new Core.ViewModels.PatchUpdate(), $t.Changes = details, $t);
            }
        }
    });

    Bridge.define("TMS.UI.Business.Manage.BossEditorMobileBL", {
        inherits: [Core.Components.Forms.TabEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "Vendor");
                this.Name = "Vendor Editor Mobile";
                this.DOMContentLoaded = Bridge.fn.combine(this.DOMContentLoaded, Bridge.fn.bind(this, function () {
                    Core.Extensions.BridgeExt.SetPropValue(this.Entity, "TypeId", Bridge.box(7551, System.Int32));
                }));
            }
        },
        methods: {
            Save: function (entity) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    rs, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4], $step);
                                switch ($step) {
                                    case 0: {
                                        if (entity === void 0) { entity = null; }
                                        $task1 = this.IsFormValid();
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        if (!($taskResult1)) {
                                            $step = 2;
                                            continue;
                                        } 
                                        $step = 3;
                                        continue;
                                    }
                                    case 2: {
                                        $tcs.setResult(false);
                                        return;
                                    }
                                    case 3: {
                                        $task2 = Core.Components.Forms.TabEditor.prototype.Save.call(this, entity);
                                        $step = 4;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        rs = $taskResult2;
                                        this.Dispose();
                                        $tcs.setResult(rs);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("TMS.UI.Business.Manage.CheckFeeEditorBL", {
        inherits: [Core.Components.Forms.TabEditor],
        props: {
            CheckFeeHistoryEntity: {
                get: function () {
                    return Bridge.as(this.Entity, TMS.API.Models.CheckFeeHistory);
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "CheckFeeHistory");
                this.Name = "CheckFee Editor";
            }
        },
        methods: {
            ExportCheckFee: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    path, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = new Core.Clients.Client.$ctor1("Transportation").PostAsync(System.String, this.CheckFeeHistoryEntity, "ExportCheckFee?Type=1");
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        path = $taskResult1;
                                        Core.Clients.Client.Download(System.String.format("/excel/Download/{0}", [path]));
                                        Core.Extensions.Toast.Success("Xu\u1ea5t file th\u00e0nh c\u00f4ng");
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            Allotment: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    gridView, 
                    selected, 
                    fees, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2], $step);
                                switch ($step) {
                                    case 0: {
                                        gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                                            return Bridge.referenceEquals(x.GuiInfo.RefName, "Transportation");
                                        }, null);
                                        $task1 = gridView.GetRealTimeSelectedRows();
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        selected = System.Linq.Enumerable.from(($taskResult1)).select(function (x) { return Bridge.cast(x, TMS.API.Models.Transportation); }).where(function (x) {
                                            return x.Id > 0;
                                        }).toList(TMS.API.Models.Transportation);
                                        if (Core.Extensions.IEnumerableExtensions.Nothing(TMS.API.Models.Transportation, selected)) {
                                            Core.Extensions.Toast.Warning("Vui l\u00f2ng ch\u1ecdn cont c\u1ea7n ph\u00e2n b\u1ed5");
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        fees = System.Linq.Enumerable.from(selected, TMS.API.Models.Transportation).select(function (x) {
                                            var $t;
                                            return ($t = new TMS.API.Models.Expense(), $t.ExpenseTypeId = null, $t.UnitPrice = System.Decimal(0), $t.Quantity = System.Decimal(1), $t.TotalPriceAfterTax = System.Decimal(0), $t.TotalPriceBeforeTax = System.Decimal(0), $t.Vat = System.Decimal(0), $t.ContainerNo = x.ContainerNo, $t.SealNo = x.SealNo, $t.BossId = x.BossId, $t.CommodityId = x.CommodityId, $t.ClosingDate = x.ClosingDate, $t.ReturnDate = x.ReturnDate, $t.TransportationId = x.Id, $t);
                                        }).toList(TMS.API.Models.Expense);
                                        $task2 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Allotment Editor", function () {
                                            var $t;
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Manage.AllotmentEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Ph\u00e2n b\u1ed5 chi ph\u00ed \u0111\u00f3ng h\u00e0ng";
                                            instance.Entity = ($t = new TMS.API.Models.Allotment(), $t.UnitPrice = System.Decimal(0), $t.Expense = fees, $t);
                                            return instance;
                                        }, false, false);
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ChangeTransportationList: function (transportation, listViewItem) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $task3, 
                    $task4, 
                    $task5, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    pathModel, 
                    patchUpdate, 
                    tran, 
                    changes, 
                    gridView, 
                    $t, 
                    rs, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,10,11], $step);
                                switch ($step) {
                                    case 0: {
                                        pathModel = listViewItem.GetPathEntity();
                                        if (System.Linq.Enumerable.from(pathModel.Changes, Core.ViewModels.PatchUpdateDetail).any(function (x) {
                                            return Bridge.referenceEquals(x.Field, "ContainerNoCheck") || Bridge.referenceEquals(x.Field, "ClosingDateCheck");
                                        }) && (Core.Extensions.StringExt.IsNullOrWhiteSpace(System.Linq.Enumerable.from(pathModel.Changes, Core.ViewModels.PatchUpdateDetail).firstOrDefault(function (x) {
                                            return Bridge.referenceEquals(x.Field, Core.Components.EditableComponent.IdField);
                                        }, null).Value) || transportation.Id <= 0)) {
                                            $step = 1;
                                            continue;
                                        } else  {
                                            $step = 9;
                                            continue;
                                        }
                                    }
                                    case 1: {
                                        patchUpdate = new Core.ViewModels.PatchUpdate();
                                        $task1 = new Core.Clients.Client.$ctor1("Transportation").FirstOrDefaultAsync(TMS.API.Models.Transportation, System.String.format("?$filter={0} eq {1} and {2} eq '{3}' and (cast({4},Edm.DateTimeOffset) eq cast({5},Edm.DateTimeOffset))", "ClosingId", Bridge.box(transportation.ClosingId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), "ContainerNo", transportation.ContainerNoCheck, "ClosingDate", Core.Extensions.DateTimeExt.ToISOFormat(System.DateTime.getDate(System.Nullable.getValue(transportation.ClosingDateCheck)))));
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        tran = $taskResult1;
                                        changes = new (System.Collections.Generic.List$1(Core.ViewModels.PatchUpdateDetail)).ctor();
                                        gridView = Core.Components.Extensions.ComponentExt.FindClosest(Core.Components.GridView, listViewItem);
                                        if (tran != null) {
                                            $step = 3;
                                            continue;
                                        } else  {
                                            $step = 6;
                                            continue;
                                        }
                                    }
                                    case 3: {
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "Id", $t.Value = Bridge.toString(tran.Id), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "ContainerNoCheck", $t.Value = transportation.ContainerNoCheck, $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "ContainerNoUpload", $t.Value = transportation.ContainerNoUpload, $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "ReceivedCheck", $t.Value = transportation.ReceivedCheck, $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "ReceivedCheckUpload", $t.Value = transportation.ReceivedCheckUpload, $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "ClosingDateCheck", $t.Value = Bridge.equals(transportation.ClosingDateCheck, null) ? null : System.DateTime.format(System.Nullable.getValue(transportation.ClosingDateCheck), "yyyy-MM-dd"), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "ClosingDateUpload", $t.Value = Bridge.equals(transportation.ClosingDateUpload, null) ? null : System.DateTime.format(System.Nullable.getValue(transportation.ClosingDateUpload), "yyyy-MM-dd"), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "SealCheck", $t.Value = transportation.SealCheck, $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "SealCheckUpload", $t.Value = transportation.SealCheckUpload, $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "BossCheck", $t.Value = transportation.BossCheck, $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "BossCheckUpload", $t.Value = transportation.BossCheckUpload, $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "Cont20Check", $t.Value = System.Nullable.toString(transportation.Cont20Check, null), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "Cont40Check", $t.Value = System.Nullable.toString(transportation.Cont40Check, null), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "PickupEmptyCheck", $t.Value = transportation.PickupEmptyCheck, $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "PickupEmptyUpload", $t.Value = transportation.PickupEmptyUpload, $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "PortLoadingCheck", $t.Value = transportation.PortLoadingCheck, $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "PortLoadingUpload", $t.Value = transportation.PortLoadingUpload, $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "LiftFeeCheckUpload", $t.Value = System.Nullable.lifteq("equals", transportation.LiftFeeCheckUpload, System.Decimal.lift(null)) ? null : transportation.LiftFeeCheckUpload.toString(), $t));
                                        ;
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "LiftFeeCheck", $t.Value = System.Nullable.lifteq("equals", transportation.LiftFeeCheck, System.Decimal.lift(null)) ? null : transportation.LiftFeeCheck.toString(), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "LandingFeeCheck", $t.Value = System.Nullable.lifteq("equals", transportation.LandingFeeCheck, System.Decimal.lift(null)) ? null : transportation.LandingFeeCheck.toString(), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "LandingFeeUpload", $t.Value = System.Nullable.lifteq("equals", transportation.LandingFeeUpload, System.Decimal.lift(null)) ? null : transportation.LandingFeeUpload.toString(), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "CollectOnBehaftInvoinceNoFeeCheck", $t.Value = System.Nullable.lifteq("equals", transportation.CollectOnBehaftInvoinceNoFeeCheck, System.Decimal.lift(null)) ? null : transportation.CollectOnBehaftInvoinceNoFeeCheck.toString(), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "CollectOnBehaftInvoinceNoFeeUpload", $t.Value = System.Nullable.lifteq("equals", transportation.CollectOnBehaftInvoinceNoFeeUpload, System.Decimal.lift(null)) ? null : transportation.CollectOnBehaftInvoinceNoFeeUpload.toString(), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "CollectOnBehaftFeeUpload", $t.Value = System.Nullable.lifteq("equals", transportation.CollectOnBehaftFeeUpload, System.Decimal.lift(null)) ? null : transportation.CollectOnBehaftFeeUpload.toString(), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "CollectOnBehaftFeeCheck", $t.Value = System.Nullable.lifteq("equals", transportation.CollectOnBehaftFeeCheck, System.Decimal.lift(null)) ? null : transportation.CollectOnBehaftFeeCheck.toString(), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "CollectOnSupPriceCheck", $t.Value = System.Nullable.lifteq("equals", transportation.CollectOnSupPriceCheck, System.Decimal.lift(null)) ? null : transportation.CollectOnSupPriceCheck.toString(), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "CollectOnSupPriceUpload", $t.Value = System.Nullable.lifteq("equals", transportation.CollectOnSupPriceUpload, System.Decimal.lift(null)) ? null : transportation.CollectOnSupPriceUpload.toString(), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "TotalPriceAfterTaxCheck", $t.Value = System.Nullable.lifteq("equals", transportation.TotalPriceAfterTaxCheck, System.Decimal.lift(null)) ? null : transportation.TotalPriceAfterTaxCheck.toString(), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "TotalPriceAfterTaxUpload", $t.Value = System.Nullable.lifteq("equals", transportation.TotalPriceAfterTaxUpload, System.Decimal.lift(null)) ? null : transportation.TotalPriceAfterTaxUpload.toString(), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "FeeVat1", $t.Value = System.Nullable.lifteq("equals", transportation.FeeVat1, System.Decimal.lift(null)) ? null : transportation.FeeVat1.toString(), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "FeeVat2", $t.Value = System.Nullable.lifteq("equals", transportation.FeeVat2, System.Decimal.lift(null)) ? null : transportation.FeeVat2.toString(), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "FeeVat3", $t.Value = System.Nullable.lifteq("equals", transportation.FeeVat3, System.Decimal.lift(null)) ? null : transportation.FeeVat3.toString(), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "FeeVat1Upload", $t.Value = System.Nullable.lifteq("equals", transportation.FeeVat1Upload, System.Decimal.lift(null)) ? null : transportation.FeeVat1Upload.toString(), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "FeeVat2Upload", $t.Value = System.Nullable.lifteq("equals", transportation.FeeVat2Upload, System.Decimal.lift(null)) ? null : transportation.FeeVat2Upload.toString(), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "FeeVat3Upload", $t.Value = System.Nullable.lifteq("equals", transportation.FeeVat3Upload, System.Decimal.lift(null)) ? null : transportation.FeeVat3Upload.toString(), $t));
                                        //
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "Fee1", $t.Value = System.Nullable.lifteq("equals", transportation.Fee1, System.Decimal.lift(null)) ? null : transportation.Fee1.toString(), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "Fee2", $t.Value = System.Nullable.lifteq("equals", transportation.Fee2, System.Decimal.lift(null)) ? null : transportation.Fee2.toString(), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "Fee3", $t.Value = System.Nullable.lifteq("equals", transportation.Fee3, System.Decimal.lift(null)) ? null : transportation.Fee3.toString(), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "Fee4", $t.Value = System.Nullable.lifteq("equals", transportation.Fee4, System.Decimal.lift(null)) ? null : transportation.Fee4.toString(), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "Fee5", $t.Value = System.Nullable.lifteq("equals", transportation.Fee5, System.Decimal.lift(null)) ? null : transportation.Fee5.toString(), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "Fee6", $t.Value = System.Nullable.lifteq("equals", transportation.Fee6, System.Decimal.lift(null)) ? null : transportation.Fee6.toString(), $t));
                                        //
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "Fee1Upload", $t.Value = System.Nullable.lifteq("equals", transportation.Fee1Upload, System.Decimal.lift(null)) ? null : transportation.Fee1Upload.toString(), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "Fee2Upload", $t.Value = System.Nullable.lifteq("equals", transportation.Fee2Upload, System.Decimal.lift(null)) ? null : transportation.Fee2Upload.toString(), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "Fee3Upload", $t.Value = System.Nullable.lifteq("equals", transportation.Fee3Upload, System.Decimal.lift(null)) ? null : transportation.Fee3Upload.toString(), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "Fee4Upload", $t.Value = System.Nullable.lifteq("equals", transportation.Fee4Upload, System.Decimal.lift(null)) ? null : transportation.Fee4Upload.toString(), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "Fee5Upload", $t.Value = System.Nullable.lifteq("equals", transportation.Fee5Upload, System.Decimal.lift(null)) ? null : transportation.Fee5Upload.toString(), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "Fee6Upload", $t.Value = System.Nullable.lifteq("equals", transportation.Fee6Upload, System.Decimal.lift(null)) ? null : transportation.Fee6Upload.toString(), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "CheckFeeHistoryId", $t.Value = Bridge.toString(this.CheckFeeHistoryEntity.Id), $t));
                                        patchUpdate.Changes = changes;
                                        $task2 = new Core.Clients.Client.$ctor1("Transportation").PatchAsync(TMS.API.Models.Transportation, patchUpdate);
                                        $step = 4;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        rs = $taskResult2;
                                        Core.Extensions.ReflectionExt.CopyPropFrom$1(listViewItem.Entity, rs);
                                        $task3 = gridView.LoadMasterData(System.Array.init([rs], System.Object));
                                        $step = 5;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 5: {
                                        $task3.getAwaitedResult();
                                        listViewItem.EmptyRow = false;
                                        listViewItem.UpdateView$1(true);
                                        Core.Extensions.Toast.Success("\u0110\u00e3 t\u00ecm th\u1ea5y cont!");
                                        $step = 8;
                                        continue;
                                    }
                                    case 6: {
                                        tran = ($t = new TMS.API.Models.Transportation(), $t.ClosingId = transportation.ClosingId, $t.ReceivedCheck = transportation.ReceivedCheck, $t.ClosingDateCheck = transportation.ClosingDateCheck, $t.SealCheck = transportation.SealCheck, $t.BossCheck = transportation.BossCheck, $t.ContainerNoCheck = transportation.ContainerNoCheck, $t.Cont20Check = transportation.Cont20Check, $t.Cont40Check = transportation.Cont40Check, $t.PickupEmptyCheck = transportation.PickupEmptyCheck, $t.PortLoadingCheck = transportation.PortLoadingCheck, $t.ClosingPercentCheck = transportation.ClosingPercentCheck, $t.LiftFeeCheck = transportation.LiftFeeCheck, $t.LandingFeeCheck = transportation.LandingFeeCheck, $t.CollectOnBehaftInvoinceNoFeeCheck = transportation.CollectOnBehaftInvoinceNoFeeCheck, $t.CollectOnBehaftFeeCheck = transportation.CollectOnBehaftFeeCheck, $t.CollectOnSupPriceCheck = transportation.CollectOnSupPriceCheck, $t.TotalPriceAfterTaxCheck = transportation.TotalPriceAfterTaxCheck, $t.FeeVat1 = transportation.FeeVat1, $t.FeeVat2 = transportation.FeeVat2, $t.FeeVat3 = transportation.FeeVat3, $t.FeeVat1Upload = transportation.FeeVat1, $t.FeeVat2Upload = transportation.FeeVat2, $t.FeeVat3Upload = transportation.FeeVat3, $t.Fee1 = transportation.Fee1, $t.Fee2 = transportation.Fee2, $t.Fee3 = transportation.Fee3, $t.Fee4 = transportation.Fee4, $t.Fee5 = transportation.Fee5, $t.Fee6 = transportation.Fee6, $t.Fee1Upload = transportation.Fee1, $t.Fee2Upload = transportation.Fee2, $t.Fee3Upload = transportation.Fee3, $t.Fee4Upload = transportation.Fee4, $t.Fee5Upload = transportation.Fee5, $t.Fee6Upload = transportation.Fee6, $t.CheckFeeHistoryId = this.CheckFeeHistoryEntity.Id, $t);
                                        Core.Extensions.ReflectionExt.CopyPropFrom$1(listViewItem.Entity, tran);
                                        $task4 = gridView.LoadMasterData(function (_o1) {
                                            _o1.add(tran);
                                            return _o1;
                                        }(new (System.Collections.Generic.List$1(TMS.API.Models.Transportation)).ctor()));
                                        $step = 7;
                                        if ($task4.isCompleted()) {
                                            continue;
                                        }
                                        $task4.continue($asyncBody);
                                        return;
                                    }
                                    case 7: {
                                        $task4.getAwaitedResult();
                                        listViewItem.EmptyRow = true;
                                        listViewItem.UpdateView$1(true);
                                        Core.Extensions.Toast.Warning("Kh\u00f4ng t\u00ecm th\u1ea5y cont!");
                                        $step = 8;
                                        continue;
                                    }
                                    case 8: {
                                        $step = 11;
                                        continue;
                                    }
                                    case 9: {
                                        $task5 = listViewItem.PatchUpdate();
                                        $step = 10;
                                        if ($task5.isCompleted()) {
                                            continue;
                                        }
                                        $task5.continue($asyncBody);
                                        return;
                                    }
                                    case 10: {
                                        $task5.getAwaitedResult();
                                        $step = 11;
                                        continue;
                                    }
                                    case 11: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            UpdateQuotation: function (arg) {
                var gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                        return Bridge.referenceEquals(x.GuiInfo.RefName, "Transportation");
                    }, null);
                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $task2, 
                        $taskResult2, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        selected, 
                        coords, 
                        quotation, 
                        $t, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1,2], $step);
                                    switch ($step) {
                                        case 0: {
                                            selected = gridView.LastListViewItem;
                                            if (selected == null) {
                                                Core.Extensions.Toast.Warning("Vui l\u00f2ng ch\u1ecdn cont c\u1ea7n c\u1eadp nh\u1eadt gi\u00e1!");
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            coords = Bridge.unbox(selected.Entity);
                                            $task1 = new Core.Clients.Client.$ctor1("Quotation").FirstOrDefaultAsync(TMS.API.Models.Quotation, (System.String.format("?$filter=TypeId eq 7592 ", null) || "") + (System.String.format("and BossId eq {0} ", [Bridge.box(coords.BossId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]) || "") + (System.String.format("and ContainerTypeId eq {0} ", [Bridge.box(coords.ContainerTypeId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]) || "") + (System.String.format("and LocationId eq {0} ", [Bridge.box(coords.ReceivedId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]) || "") + (System.String.format("and StartDate le {0} ", [Core.Extensions.DateTimeExt.ToOdataFormat(System.Nullable.getValue(coords.ClosingDate))]) || "") + (System.String.format("and PackingId eq {0}&$orderby=StartDate desc", [Bridge.box(coords.ClosingId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]) || ""));
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            quotation = $taskResult1;
                                            if (quotation == null) {
                                                quotation = ($t = new TMS.API.Models.Quotation(), $t.TypeId = 7592, $t.BossId = coords.BossId, $t.ContainerTypeId = coords.ContainerTypeId, $t.LocationId = coords.ReceivedId, $t.StartDate = coords.ClosingDate, $t.PackingId = coords.ClosingId, $t);
                                            }
                                            $task2 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Quotation Editor", function () {
                                                var type = Bridge.Reflection.getType("TMS.UI.Business.Settings.QuotationEditorBL");
                                                var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                                instance.Title = "Ch\u1ec9nh s\u1eeda b\u1ea3ng gi\u00e1 \u0111\u00f3ng h\u00e0ng";
                                                instance.Entity = quotation;
                                                return instance;
                                            }, false, false);
                                            $step = 2;
                                            if ($task2.isCompleted()) {
                                                continue;
                                            }
                                            $task2.continue($asyncBody);
                                            return;
                                        }
                                        case 2: {
                                            $taskResult2 = $task2.getAwaitedResult();
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            CheckQuotationTransportation: function () {
                var gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                        return Bridge.referenceEquals(x.GuiInfo.RefName, "Transportation");
                    }, null);
                if (gridView == null) {
                    return;
                }
                gridView.BodyContextMenuShow = Bridge.fn.combine(gridView.BodyContextMenuShow, Bridge.fn.bind(this, function () {
                    var $t;
                    var menus = new (System.Collections.Generic.List$1(Core.Components.Forms.ContextMenuItem)).ctor();
                    menus.clear();
                    menus.add(($t = new Core.Components.Forms.ContextMenuItem(), $t.Icon = "fas fa-pen", $t.Text = "C\u1eadp nh\u1eadt gi\u00e1", $t.Click = Bridge.fn.cacheBind(this, this.UpdateQuotation), $t));
                    menus.add(($t = new Core.Components.Forms.ContextMenuItem(), $t.Icon = "fas fa-pen", $t.Text = "C\u1eadp nh\u1eadt ph\u00ed", $t.MenuItems = Bridge.fn.bind(this, function (_o1) {
                            var $t1;
                            _o1.add(($t1 = new Core.Components.Forms.ContextMenuItem(), $t1.Text = "C\u1eadp c\u01b0\u1edbc t\u00e0u", $t1.Click = Bridge.fn.cacheBind(this, this.UpdateShipQuotation), $t1));
                            _o1.add(($t1 = new Core.Components.Forms.ContextMenuItem(), $t1.Text = "C\u1eadp ph\u00ed n\u00e2ng", $t1.Click = Bridge.fn.cacheBind(this, this.UpdateLiftQuotation), $t1));
                            _o1.add(($t1 = new Core.Components.Forms.ContextMenuItem(), $t1.Text = "C\u1eadp ph\u00ed h\u1ea1", $t1.Click = Bridge.fn.cacheBind(this, this.UpdateLadingQuotation), $t1));
                            return _o1;
                        })(new (System.Collections.Generic.List$1(Core.Components.Forms.ContextMenuItem)).ctor()), $t));
                    Core.Components.Forms.ContextMenu.Instance.MenuItems = menus;
                }));
            },
            UpdateShipQuotation: function (arg) {
                var gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                        return Bridge.referenceEquals(x.GuiInfo.FieldName, "Transportation");
                    }, null);

                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $task2, 
                        $taskResult2, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        selected, 
                        coords, 
                        quotation, 
                        $t, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1,2], $step);
                                    switch ($step) {
                                        case 0: {
                                            selected = gridView.LastListViewItem;
                                            if (selected == null) {
                                                Core.Extensions.Toast.Warning("Vui l\u00f2ng ch\u1ecdn cont c\u1ea7n c\u1eadp nh\u1eadt gi\u00e1!");
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            coords = Bridge.unbox(selected.Entity);
                                            if (coords.BrandShipId == null || coords.RouteId == null || coords.ContainerTypeId == null) {
                                                Core.Extensions.Toast.Warning("Vui l\u00f2ng nh\u1eadp \u0111\u1ea7y \u0111\u1ee7 th\u00f4ng tin");
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            $task1 = new Core.Clients.Client.$ctor1("Quotation").FirstOrDefaultAsync(TMS.API.Models.Quotation, (System.String.format("?$filter=TypeId eq 7598 ", null) || "") + (System.String.format("and RouteId eq {0} ", [Bridge.box(coords.RouteId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]) || "") + (System.String.format("and PackingId eq {0} ", [Bridge.box(coords.BrandShipId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]) || "") + (System.String.format("and ContainerTypeId eq {0} ", [Bridge.box(coords.ContainerTypeId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]) || "") + (System.String.format("and cast(StartDate,Edm.DateTimeOffset) le {0}&$orderby=StartDate desc", [Core.Extensions.DateTimeExt.ToOdataFormat(System.Nullable.getValue(coords.ClosingDate))]) || ""));
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            quotation = $taskResult1;
                                            if (quotation == null) {
                                                quotation = ($t = new TMS.API.Models.Quotation(), $t.TypeId = 7598, $t.RouteId = coords.RouteId, $t.PackingId = coords.BrandShipId, $t.ContainerTypeId = coords.ContainerTypeId, $t.StartDate = coords.ClosingDate, $t);
                                            }
                                            $task2 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Quotation Editor", function () {
                                                var type = Bridge.Reflection.getType("TMS.UI.Business.Settings.QuotationEditorBL");
                                                var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                                instance.Title = "Ch\u1ec9nh s\u1eeda b\u1ea3ng gi\u00e1 c\u01b0\u1edbc t\u00e0u";
                                                instance.Entity = quotation;
                                                return instance;
                                            }, false, false);
                                            $step = 2;
                                            if ($task2.isCompleted()) {
                                                continue;
                                            }
                                            $task2.continue($asyncBody);
                                            return;
                                        }
                                        case 2: {
                                            $taskResult2 = $task2.getAwaitedResult();
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            UpdateLiftQuotation: function (arg) {
                var gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                        return Bridge.referenceEquals(x.GuiInfo.FieldName, "Transportation");
                    }, null);

                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $task2, 
                        $taskResult2, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        selected, 
                        coords, 
                        quotation, 
                        $t, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1,2], $step);
                                    switch ($step) {
                                        case 0: {
                                            selected = gridView.LastListViewItem;
                                            if (selected == null) {
                                                Core.Extensions.Toast.Warning("Vui l\u00f2ng ch\u1ecdn cont c\u1ea7n c\u1eadp nh\u1eadt gi\u00e1!");
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            coords = Bridge.unbox(selected.Entity);
                                            if (coords.PickupEmptyId == null || coords.ContainerTypeId == null) {
                                                Core.Extensions.Toast.Warning("Vui l\u00f2ng nh\u1eadp \u0111\u1ea7y \u0111\u1ee7 th\u00f4ng tin");
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            $task1 = new Core.Clients.Client.$ctor1("Quotation").FirstOrDefaultAsync(TMS.API.Models.Quotation, (System.String.format("?$filter=TypeId eq 7594 ", null) || "") + (System.String.format("and ContainerTypeId eq {0} ", [Bridge.box(coords.ContainerTypeId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]) || "") + (System.String.format("and LocationId eq {0} ", [Bridge.box(coords.PickupEmptyId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]) || "") + (System.String.format("and StartDate le {0}&$orderby=StartDate desc", [Core.Extensions.DateTimeExt.ToOdataFormat(System.Nullable.getValue(coords.ClosingDate))]) || ""));
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            quotation = $taskResult1;
                                            if (quotation == null) {
                                                quotation = ($t = new TMS.API.Models.Quotation(), $t.TypeId = 7594, $t.LocationId = coords.PickupEmptyId, $t.ContainerTypeId = coords.ContainerTypeId, $t.StartDate = coords.ClosingDate, $t);
                                            }
                                            $task2 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Quotation Editor", function () {
                                                var type = Bridge.Reflection.getType("TMS.UI.Business.Settings.QuotationEditorBL");
                                                var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                                instance.Title = "Ch\u1ec9nh s\u1eeda b\u1ea3ng gi\u00e1 n\u00e2ng \u0111\u00f3ng h\u00e0ng";
                                                instance.Entity = quotation;
                                                return instance;
                                            }, false, false);
                                            $step = 2;
                                            if ($task2.isCompleted()) {
                                                continue;
                                            }
                                            $task2.continue($asyncBody);
                                            return;
                                        }
                                        case 2: {
                                            $taskResult2 = $task2.getAwaitedResult();
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            UpdateLadingQuotation: function (arg) {
                var gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                        return Bridge.referenceEquals(x.GuiInfo.FieldName, "Transportation");
                    }, null);
                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $task2, 
                        $taskResult2, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        selected, 
                        coords, 
                        quotation, 
                        $t, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1,2], $step);
                                    switch ($step) {
                                        case 0: {
                                            selected = gridView.LastListViewItem;
                                            if (selected == null) {
                                                Core.Extensions.Toast.Warning("Vui l\u00f2ng ch\u1ecdn cont c\u1ea7n c\u1eadp nh\u1eadt gi\u00e1!");
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            coords = selected;
                                            if (coords.PortLoadingId == null || coords.ContainerTypeId == null) {
                                                Core.Extensions.Toast.Warning("Vui l\u00f2ng nh\u1eadp \u0111\u1ea7y \u0111\u1ee7 th\u00f4ng tin");
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            $task1 = new Core.Clients.Client.$ctor1("Quotation").FirstOrDefaultAsync(TMS.API.Models.Quotation, (System.String.format("?$filter=TypeId eq 7596 ", null) || "") + (System.String.format("and ContainerTypeId eq {0} ", [Bridge.box(coords.ContainerTypeId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]) || "") + (System.String.format("and LocationId eq {0} ", [Bridge.box(coords.PortLoadingId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]) || "") + (System.String.format("and StartDate le {0}&$orderby=StartDate desc", [Core.Extensions.DateTimeExt.ToOdataFormat(System.Nullable.getValue(coords.ClosingDate))]) || ""));
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            quotation = $taskResult1;
                                            if (quotation == null) {
                                                quotation = ($t = new TMS.API.Models.Quotation(), $t.TypeId = 7596, $t.LocationId = coords.PortLoadingId, $t.ContainerTypeId = coords.ContainerTypeId, $t.StartDate = coords.ClosingDate, $t);
                                            }
                                            $task2 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Quotation Editor", function () {
                                                var type = Bridge.Reflection.getType("TMS.UI.Business.Settings.QuotationEditorBL");
                                                var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                                instance.Title = "Ch\u1ec9nh s\u1eeda b\u1ea3ng gi\u00e1 h\u1ea1 \u0111\u00f3ng h\u00e0ng";
                                                instance.Entity = quotation;
                                                return instance;
                                            }, false, false);
                                            $step = 2;
                                            if ($task2.isCompleted()) {
                                                continue;
                                            }
                                            $task2.continue($asyncBody);
                                            return;
                                        }
                                        case 2: {
                                            $taskResult2 = $task2.getAwaitedResult();
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            }
        }
    });

    Bridge.define("TMS.UI.Business.Manage.CheckFeeFormBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        fields: {
            _uploaderCheckFee: null
        },
        props: {
            AEntity: {
                get: function () {
                    return Bridge.as(this.Entity, TMS.API.Models.CheckFeeHistory);
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "CheckFeeHistory");
                this.Name = "CheckFee Form";
                this.DOMContentLoaded = Bridge.fn.combine(this.DOMContentLoaded, Bridge.fn.bind(this, function () {

                    Core.MVVM.Html.Take(this.ParentElement).Form.Attr$1("method", "POST").Attr$1("enctype", "multipart/form-data").Display$1(false).Input.Event$1("change", Bridge.fn.bind(this, function (ev) {
                        var $step = 0,
                            $task1, 
                            $jumpFromFinally, 
                            $asyncBody = Bridge.fn.bind(this, function () {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = this.SelectedExcelCheckFee(ev);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            return;
                                        }
                                        default: {
                                            return;
                                        }
                                    }
                                }
                            }, arguments);

                        $asyncBody();
                    })).Type$1("file").Id(System.String.format("id_{0}", [Bridge.box(Bridge.getHashCode(this), System.Int32)])).Attr$1("name", "fileCheckFee").Attr$1("accept", ".xlsx");
                    this._uploaderCheckFee = Bridge.as(Core.MVVM.Html.Context, HTMLInputElement);
                }));
            }
        },
        methods: {
            CheckFee: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        for (;;) {
                            $step = System.Array.min([0,1,2,3], $step);
                            switch ($step) {
                                case 0: {
                                    $task1 = this.IsFormValid();
                                    $step = 1;
                                    if ($task1.isCompleted()) {
                                        continue;
                                    }
                                    $task1.continue($asyncBody);
                                    return;
                                }
                                case 1: {
                                    $taskResult1 = $task1.getAwaitedResult();
                                    if (!($taskResult1)) {
                                        $step = 2;
                                        continue;
                                    } 
                                    $step = 3;
                                    continue;
                                }
                                case 2: {
                                    return;
                                }
                                case 3: {
                                    if (this.AEntity.RouteIds == null || Core.Extensions.IEnumerableExtensions.Nothing(System.Int32, this.AEntity.RouteIds)) {
                                        Core.Extensions.Toast.Warning("Vui l\u00f2ng ch\u1ecdn chuy\u1ebfn xe");
                                        return;
                                    }
                                    this._uploaderCheckFee.click();
                                    return;
                                }
                                default: {
                                    return;
                                }
                            }
                        }
                    }, arguments);

                $asyncBody();
            },
            ExportCheckFeeSelected: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    path, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.IsFormValid();
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        if (!($taskResult1)) {
                                            $step = 2;
                                            continue;
                                        } 
                                        $step = 3;
                                        continue;
                                    }
                                    case 2: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    case 3: {
                                        $task2 = new Core.Clients.Client.$ctor1("Transportation").PostAsync(System.String, this.AEntity, "ExportCheckFee?Type=2");
                                        $step = 4;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        path = $taskResult2;
                                        Core.Clients.Client.Download(System.String.format("/excel/Download/{0}", [Core.Extensions.Utils.EncodeSpecialChar(path)]));
                                        Core.Extensions.Toast.Success("Xu\u1ea5t file th\u00e0nh c\u00f4ng");
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            SelectedExcelCheckFee: function (e) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    files, 
                    $t, 
                    $t1, 
                    uploadForm, 
                    formData, 
                    rs, 
                    $t2, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        files = Bridge.as(e.target.files, FileList);
                                        if (Core.Extensions.IEnumerableExtensions.Nothing(File, files)) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        Core.Clients.LocalStorage.SetItem(System.Collections.Generic.List$1(System.Int32), "RouteCheckFeeClosing", this.AEntity.RouteIds);
                                        Core.Clients.LocalStorage.SetItem(System.String, "FromDateCheckFeeClosing", !Bridge.equals(($t = this.AEntity.FromDate), null) ? System.DateTime.format($t, "MM/dd/yyyy") : null);
                                        Core.Clients.LocalStorage.SetItem(System.String, "ToDateCheckFeeClosing", !Bridge.equals(($t1 = this.AEntity.ToDate), null) ? System.DateTime.format($t1, "MM/dd/yyyy") : null);
                                        Core.Clients.LocalStorage.SetItem(System.Nullable$1(System.Int32), "ClosingIdCheckFeeClosing", this.AEntity.ClosingId);
                                        uploadForm = Bridge.as(this._uploaderCheckFee.parentElement, HTMLFormElement);
                                        formData = new FormData(uploadForm);
                                        this._uploaderCheckFee.value = null;
                                        formData.append("FromDate", System.Nullable.toString(this.AEntity.FromDate, function ($t) { return System.DateTime.format($t); }));
                                        formData.append("ToDate", System.Nullable.toString(this.AEntity.ToDate, function ($t) { return System.DateTime.format($t); }));
                                        formData.append("ClosingId", System.Nullable.toString(this.AEntity.ClosingId, null));
                                        formData.append("RouteIds", Core.Extensions.IEnumerableExtensions.Combine(System.Int32, this.AEntity.RouteIds));
                                        $task1 = new Core.Clients.Client.$ctor1("Transportation").SubmitAsync(System.Collections.Generic.List$1(TMS.API.Models.Transportation), ($t2 = new Core.Clients.XHRWrapper(), $t2.FormData = formData, $t2.Url = "CheckFee?type=" + System.Nullable.toString(this.AEntity.TypeId, null), $t2.Method = Core.Enums.HttpMethod.POST, $t2.ResponseMimeType = Core.Extensions.Utils.GetMimeType("xlsx"), $t2));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        rs = $taskResult1;
                                        this.Dispose();
                                        window.setTimeout(Bridge.fn.bind(this, function () {
                                            var $step = 0,
                                                $task1, 
                                                $taskResult1, 
                                                $task2, 
                                                $taskResult2, 
                                                $task3, 
                                                $taskResult3, 
                                                $task4, 
                                                $taskResult4, 
                                                $jumpFromFinally, 
                                                entity, 
                                                entity1, 
                                                $asyncBody = Bridge.fn.bind(this, function () {
                                                    for (;;) {
                                                        $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,10,13], $step);
                                                        switch ($step) {
                                                            case 0: {
                                                                if (rs != null) {
                                                                    $step = 1;
                                                                    continue;
                                                                } 
                                                                $step = 13;
                                                                continue;
                                                            }
                                                            case 1: {
                                                                if (System.Nullable.eq(this.AEntity.TypeId, 1)) {
                                                                    $step = 2;
                                                                    continue;
                                                                } else  {
                                                                    $step = 7;
                                                                    continue;
                                                                }
                                                            }
                                                            case 2: {
                                                                $task1 = new Core.Clients.Client.$ctor1("CheckFeeHistory").FirstOrDefaultAsync(TMS.API.Models.CheckFeeHistory, System.String.format("?$filter=Id eq {0}", [Bridge.box(System.Linq.Enumerable.from(rs, TMS.API.Models.Transportation).firstOrDefault(function (x) {
                                                                    return x.CheckFeeHistoryId != null;
                                                                }, null).CheckFeeHistoryId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]));
                                                                $step = 3;
                                                                if ($task1.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task1.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 3: {
                                                                $taskResult1 = $task1.getAwaitedResult();
                                                                entity = $taskResult1;
                                                                if (entity.Id > 0) {
                                                                    $step = 4;
                                                                    continue;
                                                                } 
                                                                $step = 6;
                                                                continue;
                                                            }
                                                            case 4: {
                                                                $task2 = Core.Components.Extensions.ComponentExt.OpenTab$1(this, "CheckFee Editor" + System.Nullable.toString(System.Linq.Enumerable.from(rs, TMS.API.Models.Transportation).firstOrDefault(null, null).CheckFeeHistoryId, null), "Add CheckFee Editor", function () {
                                                                    var type = Bridge.Reflection.getType("TMS.UI.Business.Manage.CheckFeeEditorBL");
                                                                    var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.TabEditor);
                                                                    instance.Icon = "fal fa-sitemap mr-1";
                                                                    instance.Title = "Th\u00eam m\u1edbi ki\u1ec3m tra ph\u00ed \u0111\u00f3ng h\u00e0ng";
                                                                    instance.Entity = entity;
                                                                    Core.Extensions.BridgeExt.SetPropValue(instance.Entity, "TransportationList", rs);
                                                                    return instance;
                                                                }, false, false);
                                                                $step = 5;
                                                                if ($task2.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task2.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 5: {
                                                                $taskResult2 = $task2.getAwaitedResult();
                                                                $step = 6;
                                                                continue;
                                                            }
                                                            case 6: {
                                                                $step = 12;
                                                                continue;
                                                            }
                                                            case 7: {
                                                                $task3 = new Core.Clients.Client.$ctor1("CheckFeeHistory").FirstOrDefaultAsync(TMS.API.Models.CheckFeeHistory, System.String.format("?$filter=Id eq {0}", [Bridge.box(System.Linq.Enumerable.from(rs, TMS.API.Models.Transportation).firstOrDefault(function (x) {
                                                                    return x.CheckFeeHistoryReturnId != null;
                                                                }, null).CheckFeeHistoryReturnId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]));
                                                                $step = 8;
                                                                if ($task3.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task3.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 8: {
                                                                $taskResult3 = $task3.getAwaitedResult();
                                                                entity1 = $taskResult3;
                                                                if (entity1.Id > 0) {
                                                                    $step = 9;
                                                                    continue;
                                                                } 
                                                                $step = 11;
                                                                continue;
                                                            }
                                                            case 9: {
                                                                $task4 = Core.Components.Extensions.ComponentExt.OpenTab$1(this, "CheckFee Return Editor" + System.Nullable.toString(System.Linq.Enumerable.from(rs, TMS.API.Models.Transportation).firstOrDefault(null, null).CheckFeeHistoryReturnId, null), "CheckFee Return Editor", function () {
                                                                    var type = Bridge.Reflection.getType("TMS.UI.Business.Manage.CheckFeeReturnEditorBL");
                                                                    var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.TabEditor);
                                                                    instance.Icon = "fal fa-sitemap mr-1";
                                                                    instance.Title = "Ki\u1ec3m tra ph\u00ed tr\u1ea3 h\u00e0ng";
                                                                    instance.Entity = entity1;
                                                                    Core.Extensions.BridgeExt.SetPropValue(instance.Entity, "TransportationList", rs);
                                                                    return instance;
                                                                }, false, false);
                                                                $step = 10;
                                                                if ($task4.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task4.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 10: {
                                                                $taskResult4 = $task4.getAwaitedResult();
                                                                $step = 11;
                                                                continue;
                                                            }


                                                            case 13: {
                                                                return;
                                                            }
                                                            default: {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }, arguments);

                                            $asyncBody();
                                        }), 2000);
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("TMS.UI.Business.Manage.CheckFeeReturnEditorBL", {
        inherits: [Core.Components.Forms.TabEditor],
        props: {
            CheckFeeHistoryEntity: {
                get: function () {
                    return Bridge.as(this.Entity, TMS.API.Models.CheckFeeHistory);
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "CheckFeeHistory");
                this.Name = "CheckFee Return Editor";
            }
        },
        methods: {
            ExportCheckFee: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    path, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = new Core.Clients.Client.$ctor1("Transportation").PostAsync(System.String, Bridge.unbox(this.Entity.TransportationList), "ExportCheckFee");
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        path = $taskResult1;
                                        Core.Clients.Client.Download(System.String.format("/excel/Download/{0}", [path]));
                                        Core.Extensions.Toast.Success("Xu\u1ea5t file th\u00e0nh c\u00f4ng");
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            Allotment: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    gridView, 
                    selected, 
                    fees, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2], $step);
                                switch ($step) {
                                    case 0: {
                                        gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                                            return Bridge.referenceEquals(x.GuiInfo.RefName, "Transportation");
                                        }, null);
                                        $task1 = gridView.GetRealTimeSelectedRows();
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        selected = System.Linq.Enumerable.from(($taskResult1)).select(function (x) { return Bridge.cast(x, TMS.API.Models.Transportation); }).where(function (x) {
                                            return x.Id > 0;
                                        }).toList(TMS.API.Models.Transportation);
                                        if (Core.Extensions.IEnumerableExtensions.Nothing(TMS.API.Models.Transportation, selected)) {
                                            Core.Extensions.Toast.Warning("Vui l\u00f2ng ch\u1ecdn cont c\u1ea7n ph\u00e2n b\u1ed5");
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        fees = System.Linq.Enumerable.from(selected, TMS.API.Models.Transportation).select(function (x) {
                                            var $t;
                                            return ($t = new TMS.API.Models.Expense(), $t.ExpenseTypeId = null, $t.IsReturn = true, $t.UnitPrice = System.Decimal(0), $t.Quantity = System.Decimal(1), $t.TotalPriceAfterTax = System.Decimal(0), $t.TotalPriceBeforeTax = System.Decimal(0), $t.Vat = System.Decimal(0), $t.ContainerNo = x.ContainerNo, $t.SealNo = x.SealNo, $t.BossId = x.BossId, $t.CommodityId = x.CommodityId, $t.ClosingDate = x.ClosingDate, $t.ReturnDate = x.ReturnDate, $t.TransportationId = x.Id, $t);
                                        }).toList(TMS.API.Models.Expense);
                                        $task2 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Allotment Editor", function () {
                                            var $t;
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Manage.AllotmentEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Ph\u00e2n b\u1ed5 chi ph\u00ed tr\u1ea3 h\u00e0ng";
                                            instance.Entity = ($t = new TMS.API.Models.Allotment(), $t.UnitPrice = System.Decimal(0), $t.Expense = fees, $t);
                                            return instance;
                                        }, false, false);
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ChangeTransportationList: function (transportation, listViewItem) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $task3, 
                    $task4, 
                    $task5, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    pathModel, 
                    patchUpdate, 
                    tran, 
                    changes, 
                    gridView, 
                    $t, 
                    rs, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,10,11], $step);
                                switch ($step) {
                                    case 0: {
                                        pathModel = listViewItem.GetPathEntity();
                                        if (System.Linq.Enumerable.from(pathModel.Changes, Core.ViewModels.PatchUpdateDetail).any(function (x) {
                                            return Bridge.referenceEquals(x.Field, "ContainerNoReturnCheck") || Bridge.referenceEquals(x.Field, "ClosingDateReturnCheck");
                                        }) && (Core.Extensions.StringExt.IsNullOrWhiteSpace(System.Linq.Enumerable.from(pathModel.Changes, Core.ViewModels.PatchUpdateDetail).firstOrDefault(function (x) {
                                            return Bridge.referenceEquals(x.Field, Core.Components.EditableComponent.IdField);
                                        }, null).Value) || transportation.Id <= 0)) {
                                            $step = 1;
                                            continue;
                                        } else  {
                                            $step = 9;
                                            continue;
                                        }
                                    }
                                    case 1: {
                                        patchUpdate = new Core.ViewModels.PatchUpdate();
                                        $task1 = new Core.Clients.Client.$ctor1("Transportation").FirstOrDefaultAsync(TMS.API.Models.Transportation, System.String.format("?$filter={0} eq {1} and {2} eq '{3}' and (cast({4},Edm.DateTimeOffset) eq cast({5},Edm.DateTimeOffset))", "ReturnId", Bridge.box(transportation.ReturnVendorId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), "ContainerNo", transportation.ContainerNoReturnCheck, "ReturnDate", Core.Extensions.DateTimeExt.ToISOFormat(System.DateTime.getDate(System.Nullable.getValue(transportation.ClosingDateReturnCheck)))));
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        tran = $taskResult1;
                                        changes = new (System.Collections.Generic.List$1(Core.ViewModels.PatchUpdateDetail)).ctor();
                                        gridView = Core.Components.Extensions.ComponentExt.FindClosest(Core.Components.GridView, listViewItem);
                                        if (tran != null) {
                                            $step = 3;
                                            continue;
                                        } else  {
                                            $step = 6;
                                            continue;
                                        }
                                    }
                                    case 3: {
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "Id", $t.Value = Bridge.toString(tran.Id), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "ContainerNoReturnCheck", $t.Value = transportation.ContainerNoReturnCheck, $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "ContainerNoUpload", $t.Value = transportation.ContainerNoReturnUpload, $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "ReceivedReturnCheck", $t.Value = transportation.ReceivedReturnCheck, $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "ReceivedCheckReturnUpload", $t.Value = transportation.ReceivedCheckReturnUpload, $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "ClosingDateReturnCheck", $t.Value = System.DateTime.format(System.Nullable.getValue(transportation.ClosingDateReturnCheck), "yyyy-MM-dd"), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "ClosingDateReturnUpload", $t.Value = System.DateTime.format(System.Nullable.getValue(transportation.ClosingDateReturnUpload), "yyyy-MM-dd"), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "SealReturnCheck", $t.Value = transportation.SealReturnCheck, $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "SealCheckReturnUpload", $t.Value = transportation.SealCheckReturnUpload, $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "BossReturnCheck", $t.Value = transportation.BossReturnCheck, $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "BossCheckReturnUpload", $t.Value = transportation.BossCheckReturnUpload, $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "Cont20ReturnCheck", $t.Value = System.Nullable.toString(transportation.Cont20ReturnCheck, null), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "Cont40ReturnCheck", $t.Value = System.Nullable.toString(transportation.Cont40ReturnCheck, null), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "PickupEmptyReturnCheck", $t.Value = transportation.PickupEmptyReturnCheck, $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "PickupEmptyReturnUpload", $t.Value = transportation.PickupEmptyReturnUpload, $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "PortLoadingReturnCheck", $t.Value = transportation.PortLoadingReturnCheck, $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "PortLoadingReturnUpload", $t.Value = transportation.PortLoadingReturnUpload, $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "LiftFeeCheckReturnUpload", $t.Value = transportation.LiftFeeCheckReturnUpload.toString(), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "LiftFeeReturnCheck", $t.Value = transportation.LiftFeeReturnCheck.toString(), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "LandingFeeReturnCheck", $t.Value = System.Nullable.lifteq("equals", transportation.LandingFeeReturnCheck, System.Decimal.lift(null)) ? "0" : transportation.LandingFeeReturnCheck.toString(), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "LandingFeeReturnUpload", $t.Value = System.Nullable.lifteq("equals", transportation.LandingFeeReturnUpload, System.Decimal.lift(null)) ? "0" : transportation.LandingFeeReturnUpload.toString(), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "CollectOnBehaftInvoinceNoFeeReturnCheck", $t.Value = System.Nullable.lifteq("equals", transportation.CollectOnBehaftInvoinceNoFeeReturnCheck, System.Decimal.lift(null)) ? "0" : transportation.CollectOnBehaftInvoinceNoFeeReturnCheck.toString(), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "CollectOnBehaftInvoinceNoFeeReturnUpload", $t.Value = System.Nullable.lifteq("equals", transportation.CollectOnBehaftInvoinceNoFeeReturnUpload, System.Decimal.lift(null)) ? "0" : transportation.CollectOnBehaftInvoinceNoFeeReturnUpload.toString(), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "CollectOnBehaftFeeReturnUpload", $t.Value = System.Nullable.lifteq("equals", transportation.CollectOnBehaftFeeReturnUpload, System.Decimal.lift(null)) ? "0" : transportation.CollectOnBehaftFeeReturnUpload.toString(), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "CollectOnBehaftFeeReturnCheck", $t.Value = System.Nullable.lifteq("equals", transportation.CollectOnBehaftFeeReturnCheck, System.Decimal.lift(null)) ? "0" : transportation.CollectOnBehaftFeeReturnCheck.toString(), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "CollectOnSupPriceReturnCheck", $t.Value = System.Nullable.lifteq("equals", transportation.CollectOnSupPriceReturnCheck, System.Decimal.lift(null)) ? "0" : transportation.CollectOnSupPriceReturnCheck.toString(), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "CollectOnSupPriceReturnUpload", $t.Value = System.Nullable.lifteq("equals", transportation.CollectOnSupPriceReturnUpload, System.Decimal.lift(null)) ? "0" : transportation.CollectOnSupPriceReturnUpload.toString(), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "TotalPriceAfterTaxReturnCheck", $t.Value = System.Nullable.lifteq("equals", transportation.TotalPriceAfterTaxReturnCheck, System.Decimal.lift(null)) ? "0" : transportation.TotalPriceAfterTaxReturnCheck.toString(), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "TotalPriceAfterTaxReturnUpload", $t.Value = System.Nullable.lifteq("equals", transportation.TotalPriceAfterTaxReturnUpload, System.Decimal.lift(null)) ? "0" : transportation.TotalPriceAfterTaxReturnUpload.toString(), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "FeeVatReturn", $t.Value = System.Nullable.lifteq("equals", transportation.FeeVatReturn, System.Decimal.lift(null)) ? "0" : transportation.FeeVatReturn.toString(), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "FeeVatReturn2", $t.Value = System.Nullable.lifteq("equals", transportation.FeeVatReturn2, System.Decimal.lift(null)) ? "0" : transportation.FeeVatReturn2.toString(), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "FeeVatReturn3", $t.Value = System.Nullable.lifteq("equals", transportation.FeeVatReturn3, System.Decimal.lift(null)) ? "0" : transportation.FeeVatReturn3.toString(), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "FeeVat1UploadReturn", $t.Value = System.Nullable.lifteq("equals", transportation.FeeVat1UploadReturn, System.Decimal.lift(null)) ? "0" : transportation.FeeVat1UploadReturn.toString(), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "FeeVat2UploadReturn", $t.Value = System.Nullable.lifteq("equals", transportation.FeeVat2UploadReturn, System.Decimal.lift(null)) ? "0" : transportation.FeeVat2UploadReturn.toString(), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "FeeVat3UploadReturn", $t.Value = System.Nullable.lifteq("equals", transportation.FeeVat3UploadReturn, System.Decimal.lift(null)) ? "0" : transportation.FeeVat3UploadReturn.toString(), $t));
                                        //
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "FeeReturn1", $t.Value = System.Nullable.lifteq("equals", transportation.FeeReturn1, System.Decimal.lift(null)) ? "0" : transportation.FeeReturn1.toString(), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "FeeReturn2", $t.Value = System.Nullable.lifteq("equals", transportation.FeeReturn2, System.Decimal.lift(null)) ? "0" : transportation.FeeReturn2.toString(), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "FeeReturn3", $t.Value = System.Nullable.lifteq("equals", transportation.FeeReturn3, System.Decimal.lift(null)) ? "0" : transportation.FeeReturn3.toString(), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "FeeReturn4", $t.Value = System.Nullable.lifteq("equals", transportation.FeeReturn4, System.Decimal.lift(null)) ? "0" : transportation.FeeReturn4.toString(), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "FeeReturn5", $t.Value = System.Nullable.lifteq("equals", transportation.FeeReturn5, System.Decimal.lift(null)) ? "0" : transportation.FeeReturn5.toString(), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "FeeReturn6", $t.Value = System.Nullable.lifteq("equals", transportation.FeeReturn6, System.Decimal.lift(null)) ? "0" : transportation.FeeReturn6.toString(), $t));
                                        //
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "Fee1UploadReturn", $t.Value = System.Nullable.lifteq("equals", transportation.Fee1UploadReturn, System.Decimal.lift(null)) ? "0" : transportation.Fee1UploadReturn.toString(), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "Fee2UploadReturn", $t.Value = System.Nullable.lifteq("equals", transportation.Fee2UploadReturn, System.Decimal.lift(null)) ? "0" : transportation.Fee2UploadReturn.toString(), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "Fee3UploadReturn", $t.Value = System.Nullable.lifteq("equals", transportation.Fee3UploadReturn, System.Decimal.lift(null)) ? "0" : transportation.Fee3UploadReturn.toString(), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "Fee4UploadReturn", $t.Value = System.Nullable.lifteq("equals", transportation.Fee4UploadReturn, System.Decimal.lift(null)) ? "0" : transportation.Fee4UploadReturn.toString(), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "Fee5UploadReturn", $t.Value = System.Nullable.lifteq("equals", transportation.Fee5UploadReturn, System.Decimal.lift(null)) ? "0" : transportation.Fee5UploadReturn.toString(), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "Fee6UploadReturn", $t.Value = System.Nullable.lifteq("equals", transportation.Fee6UploadReturn, System.Decimal.lift(null)) ? "0" : transportation.Fee6UploadReturn.toString(), $t));
                                        changes.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "CheckFeeHistoryReturnId", $t.Value = Bridge.toString(this.CheckFeeHistoryEntity.Id), $t));
                                        patchUpdate.Changes = changes;
                                        $task2 = new Core.Clients.Client.$ctor1("Transportation").PatchAsync(TMS.API.Models.Transportation, patchUpdate);
                                        $step = 4;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        rs = $taskResult2;
                                        Core.Extensions.ReflectionExt.CopyPropFrom$1(listViewItem.Entity, rs);
                                        $task3 = gridView.LoadMasterData(System.Array.init([rs], System.Object));
                                        $step = 5;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 5: {
                                        $task3.getAwaitedResult();
                                        listViewItem.EmptyRow = false;
                                        listViewItem.UpdateView$1(true);
                                        Core.Extensions.Toast.Success("\u0110\u00e3 t\u00ecm th\u1ea5y cont!");
                                        $step = 8;
                                        continue;
                                    }
                                    case 6: {
                                        tran = new TMS.API.Models.Transportation();
                                        tran.ReturnVendorId = tran.ReturnVendorId;
                                        tran.OrderExcelReturn = tran.OrderExcelReturn;
                                        tran.CheckFeeHistoryReturnId = tran.CheckFeeHistoryReturnId;
                                        tran.ReceivedReturnCheck = tran.ReceivedReturnCheck;
                                        tran.ClosingDateReturnCheck = tran.ClosingDateReturnCheck;
                                        tran.SealReturnCheck = tran.SealReturnCheck;
                                        tran.ContainerNoReturnCheck = tran.ContainerNoReturnCheck;
                                        tran.BossReturnCheck = tran.BossReturnCheck;
                                        tran.Cont20ReturnCheck = tran.Cont20ReturnCheck;
                                        tran.Cont40ReturnCheck = tran.Cont40ReturnCheck;
                                        tran.ClosingPercentReturnCheck = tran.ClosingPercentReturnCheck;
                                        tran.PickupEmptyReturnCheck = tran.PickupEmptyReturnCheck;
                                        tran.PortLoadingReturnCheck = tran.PortLoadingReturnCheck;
                                        tran.LiftFeeReturnCheck = tran.LiftFeeReturnCheck;
                                        tran.LandingFeeReturnCheck = tran.LandingFeeReturnCheck;
                                        tran.CollectOnBehaftInvoinceNoFeeReturnCheck = tran.CollectOnBehaftInvoinceNoFeeReturnCheck;
                                        tran.FeeVatReturn = tran.FeeVatReturn;
                                        tran.FeeVatReturn2 = tran.FeeVatReturn2;
                                        tran.FeeVatReturn3 = tran.FeeVatReturn3;
                                        tran.FeeVat1UploadReturn = tran.FeeVat1UploadReturn;
                                        tran.FeeVat2UploadReturn = tran.FeeVat2UploadReturn;
                                        tran.FeeVat3UploadReturn = tran.FeeVat3UploadReturn;
                                        tran.FeeReturn1 = tran.FeeReturn1;
                                        tran.FeeReturn2 = tran.FeeReturn2;
                                        tran.FeeReturn3 = tran.FeeReturn3;
                                        tran.FeeReturn4 = tran.FeeReturn4;
                                        tran.FeeReturn5 = tran.FeeReturn5;
                                        tran.FeeReturn6 = tran.FeeReturn6;
                                        tran.Fee1UploadReturn = tran.Fee1UploadReturn;
                                        tran.Fee2UploadReturn = tran.Fee2UploadReturn;
                                        tran.Fee3UploadReturn = tran.Fee3UploadReturn;
                                        tran.Fee4UploadReturn = tran.Fee4UploadReturn;
                                        tran.Fee5UploadReturn = tran.Fee5UploadReturn;
                                        tran.Fee6UploadReturn = tran.Fee6UploadReturn;
                                        tran.CollectOnBehaftFeeReturnCheck = tran.CollectOnBehaftFeeReturnCheck;
                                        tran.CollectOnSupPriceReturnCheck = tran.CollectOnSupPriceReturnCheck;
                                        tran.TotalPriceAfterTaxReturnCheck = tran.TotalPriceAfterTaxReturnCheck;
                                        tran.ReceivedCheckReturnUpload = tran.ReceivedCheckReturnUpload;
                                        tran.ClosingDateReturnUpload = tran.ClosingDateReturnUpload;
                                        tran.SealCheckReturnUpload = tran.SealCheckReturnUpload;
                                        tran.ContainerNoReturnUpload = tran.ContainerNoReturnUpload;
                                        tran.Cont20CheckReturnUpload = tran.Cont20CheckReturnUpload;
                                        tran.Cont40CheckReturnUpload = tran.Cont40CheckReturnUpload;
                                        tran.ClosingPercentReturnUpload = tran.ClosingPercentReturnUpload;
                                        tran.PickupEmptyReturnUpload = tran.PickupEmptyReturnUpload;
                                        tran.PortLoadingReturnUpload = tran.PortLoadingReturnUpload;
                                        tran.LiftFeeCheckReturnUpload = tran.LiftFeeCheckReturnUpload;
                                        tran.LandingFeeReturnUpload = tran.LandingFeeReturnUpload;
                                        tran.CollectOnBehaftInvoinceNoFeeReturnUpload = tran.CollectOnBehaftInvoinceNoFeeReturnUpload;
                                        tran.CollectOnBehaftFeeReturnUpload = tran.CollectOnBehaftFeeReturnUpload;
                                        tran.CollectOnSupPriceReturnUpload = tran.CollectOnSupPriceReturnUpload;
                                        tran.TotalPriceAfterTaxReturnUpload = tran.TotalPriceAfterTaxReturnUpload;
                                        Core.Extensions.ReflectionExt.CopyPropFrom$1(listViewItem.Entity, tran);
                                        $task4 = gridView.LoadMasterData(function (_o1) {
                                            _o1.add(tran);
                                            return _o1;
                                        }(new (System.Collections.Generic.List$1(TMS.API.Models.Transportation)).ctor()));
                                        $step = 7;
                                        if ($task4.isCompleted()) {
                                            continue;
                                        }
                                        $task4.continue($asyncBody);
                                        return;
                                    }
                                    case 7: {
                                        $task4.getAwaitedResult();
                                        listViewItem.EmptyRow = true;
                                        listViewItem.UpdateView$1(true);
                                        Core.Extensions.Toast.Warning("Kh\u00f4ng t\u00ecm th\u1ea5y cont!");
                                        $step = 8;
                                        continue;
                                    }
                                    case 8: {
                                        $step = 11;
                                        continue;
                                    }
                                    case 9: {
                                        $task5 = listViewItem.PatchUpdate();
                                        $step = 10;
                                        if ($task5.isCompleted()) {
                                            continue;
                                        }
                                        $task5.continue($asyncBody);
                                        return;
                                    }
                                    case 10: {
                                        $task5.getAwaitedResult();
                                        $step = 11;
                                        continue;
                                    }
                                    case 11: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CheckStatusQuotationReturn: function () {
                var gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                        return Bridge.referenceEquals(x.GuiInfo.RefName, "Transportation");
                    }, null);
                if (gridView == null) {
                    return;
                }
                gridView.BodyContextMenuShow = Bridge.fn.combine(gridView.BodyContextMenuShow, Bridge.fn.bind(this, function () {
                    Core.Components.Forms.ContextMenu.Instance.MenuItems = Bridge.fn.bind(this, function (_o1) {
                            var $t;
                            _o1.add(($t = new Core.Components.Forms.ContextMenuItem(), $t.Icon = "fas fa-pen", $t.Text = "C\u1eadp nh\u1eadt gi\u00e1", $t.Click = Bridge.fn.cacheBind(this, this.UpdateQuotation), $t));
                            return _o1;
                        })(new (System.Collections.Generic.List$1(Core.Components.Forms.ContextMenuItem)).ctor());
                }));
            },
            UpdateQuotation: function (arg) {
                var gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                        return Bridge.referenceEquals(x.GuiInfo.RefName, "Transportation");
                    }, null);

                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $task2, 
                        $taskResult2, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        selected, 
                        coords, 
                        quotation, 
                        $t, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1,2], $step);
                                    switch ($step) {
                                        case 0: {
                                            selected = gridView.LastListViewItem;
                                            if (selected == null) {
                                                Core.Extensions.Toast.Warning("Vui l\u00f2ng ch\u1ecdn cont c\u1ea7n c\u1eadp nh\u1eadt gi\u00e1!");
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            coords = Bridge.unbox(selected.Entity);
                                            $task1 = new Core.Clients.Client.$ctor1("Quotation").FirstOrDefaultAsync(TMS.API.Models.Quotation, System.String.format("?$filter=TypeId eq 7593 and BossId eq {0} and ContainerTypeId eq {1} and LocationId eq {2} and StartDate le {3} and PackingId eq {4}&$orderby=StartDate desc", Bridge.box(coords.BossId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), Bridge.box(coords.ContainerTypeId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), Bridge.box(coords.ReturnId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), Core.Extensions.DateTimeExt.ToOdataFormat(System.Nullable.getValue(coords.ReturnDate)), Bridge.box(coords.ReturnVendorId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)));
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            quotation = $taskResult1;
                                            if (quotation == null) {
                                                quotation = ($t = new TMS.API.Models.Quotation(), $t.TypeId = 7593, $t.BossId = coords.BossId, $t.ContainerTypeId = coords.ContainerTypeId, $t.LocationId = coords.ReturnId, $t.StartDate = coords.ReturnDate, $t.PackingId = coords.ReturnVendorId, $t);
                                            }
                                            $task2 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Quotation Editor", function () {
                                                var type = Bridge.Reflection.getType("TMS.UI.Business.Settings.QuotationEditorBL");
                                                var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                                instance.Title = "Ch\u1ec9nh s\u1eeda b\u1ea3ng gi\u00e1 tr\u1ea3 h\u00e0ng";
                                                instance.Entity = quotation;
                                                return instance;
                                            }, false, false);
                                            $step = 2;
                                            if ($task2.isCompleted()) {
                                                continue;
                                            }
                                            $task2.continue($asyncBody);
                                            return;
                                        }
                                        case 2: {
                                            $taskResult2 = $task2.getAwaitedResult();
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            }
        }
    });

    Bridge.define("TMS.UI.Business.Manage.CommodityValueBL", {
        inherits: [Core.Components.Forms.TabEditor],
        fields: {
            gridView: null,
            _uploader: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "CommodityValue");
                this.Name = "CommodityValue List";
                this.DOMContentLoaded = Bridge.fn.combine(this.DOMContentLoaded, Bridge.fn.bind(this, function () {
                    Core.MVVM.Html.Take$1("Body").Form.Attr$1("method", "POST").Attr$1("enctype", "multipart/form-data").Display$1(false).Input.Event$1("change", Bridge.fn.bind(this, function (ev) {
                        var $step = 0,
                            $task1, 
                            $jumpFromFinally, 
                            $asyncBody = Bridge.fn.bind(this, function () {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = this.SelectedExcel(ev);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            return;
                                        }
                                        default: {
                                            return;
                                        }
                                    }
                                }
                            }, arguments);

                        $asyncBody();
                    })).Type$1("file").Id(System.String.format("id_{0}", [Bridge.box(Bridge.getHashCode(this), System.Int32)])).Attr$1("name", "fileImport").Attr$1("accept", ".xlsx");
                    this._uploader = Bridge.as(Core.MVVM.Html.Context, HTMLInputElement);
                }));
            }
        },
        methods: {
            EditCommodityValue: function (entity) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "CommodityValue Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Manage.CommodityValueEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Ch\u1ec9nh s\u1eeda gi\u00e1 tr\u1ecb h\u00e0ng h\u00f3a";
                                            instance.Entity = entity;
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            AddCommodityValue: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "CommodityValue Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Manage.CommodityValueEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Th\u00eam m\u1edbi gi\u00e1 tr\u1ecb h\u00e0ng h\u00f3a";
                                            instance.Entity = new TMS.API.Models.CommodityValue();
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            SelectedExcel: function (e) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    files, 
                    uploadForm, 
                    formData, 
                    response, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        files = Bridge.as(e.target.files, FileList);
                                        if (Core.Extensions.IEnumerableExtensions.Nothing(File, files)) {
                                            $tcs.setResult(null);
                                            return;
                                        }

                                        uploadForm = Bridge.as(this._uploader.parentElement, HTMLFormElement);
                                        formData = new FormData(uploadForm);
                                        $task1 = this.Client.SubmitAsync(System.Collections.Generic.List$1(TMS.API.Models.CommodityValue), ($t = new Core.Clients.XHRWrapper(), $t.FormData = formData, $t.Url = "ImportExcel", $t.Method = Core.Enums.HttpMethod.POST, $t.ResponseMimeType = Core.Extensions.Utils.GetMimeType("xlsx"), $t));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        response = $taskResult1;
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ImportExcel: function () {
                this._uploader.click();
            },
            CheckCommodityValueTerm: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $task3, 
                    $taskResult3, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    commodityValueDB, 
                    commodityValues, 
                    startDate1, 
                    startDate2, 
                    endDate1, 
                    endDate2, 
                    updated, 
                    $t, 
                    $t1, 
                    item, 
                    newCommodityValue, 
                    $t2, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = new Core.Clients.Client.$ctor1("CommodityValue").GetRawList(TMS.API.Models.CommodityValue, System.String.format("?$fiter=Active eq true", null));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        commodityValueDB = $taskResult1;
                                        commodityValues = System.Linq.Enumerable.from(commodityValueDB, TMS.API.Models.CommodityValue).where(function (x) {
                                            return System.DateTime.lte(x.EndDate, System.DateTime.getDate(System.DateTime.getNow()));
                                        }).toList(TMS.API.Models.CommodityValue);
                                        startDate1 = System.DateTime.create(System.DateTime.getYear(System.DateTime.getNow()), 1, 1);
                                        startDate2 = System.DateTime.create(System.DateTime.getYear(System.DateTime.getNow()), 6, 30);
                                        endDate1 = System.DateTime.create(System.DateTime.getYear(System.DateTime.getNow()), 7, 1);
                                        endDate2 = System.DateTime.create(System.DateTime.getYear(System.DateTime.getNow()), 12, 31);
                                        updated = ($t = TMS.API.Models.CommodityValue, System.Linq.Enumerable.from(Core.Extensions.IEnumerableExtensions.ForEach(TMS.API.Models.CommodityValue, commodityValues, function (x) {
                                            x.Active = false;
                                        }), $t).toList($t));
                                        $task2 = new Core.Clients.Client.$ctor1("CommodityValue").BulkUpdateAsync(TMS.API.Models.CommodityValue, updated);
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        $t1 = Bridge.getEnumerator(commodityValues);
                                        $step = 3;
                                        continue;
                                    }
                                    case 3: {
                                        if ($t1.moveNext()) {
                                            item = $t1.Current;
                                            $step = 4;
                                            continue;
                                        }
                                        $step = 6;
                                        continue;
                                    }
                                    case 4: {
                                        newCommodityValue = ($t2 = new TMS.API.Models.CommodityValue(), $t2.BossId = item.BossId, $t2.CommodityId = item.CommodityId, $t2.ContainerId = item.ContainerId, $t2.TotalPrice = item.TotalPrice, $t2.IsWet = item.IsWet, $t2.Active = true, $t2.InsertedBy = 1, $t2.InsertedDate = System.DateTime.getDate(System.DateTime.getNow()), $t2);
                                        if (System.DateTime.gte(System.DateTime.getDate(System.DateTime.getNow()), startDate1) && System.DateTime.lte(System.DateTime.getDate(System.DateTime.getNow()), startDate2)) {
                                            newCommodityValue.StartDate = startDate1;
                                        } else if (System.DateTime.gte(System.DateTime.getDate(System.DateTime.getNow()), endDate1) && System.DateTime.lte(System.DateTime.getDate(System.DateTime.getNow()), endDate2)) {
                                            newCommodityValue.StartDate = endDate1;
                                        }
                                        if (System.DateTime.gte(System.DateTime.getDate(System.DateTime.getNow()), startDate1) && System.DateTime.lte(System.DateTime.getDate(System.DateTime.getNow()), startDate2)) {
                                            newCommodityValue.EndDate = startDate2;
                                        } else if (System.DateTime.gte(System.DateTime.getDate(System.DateTime.getNow()), endDate1) && System.DateTime.lte(System.DateTime.getDate(System.DateTime.getNow()), endDate2)) {
                                            newCommodityValue.EndDate = endDate2;
                                        }
                                        $task3 = new Core.Clients.Client.$ctor1("CommodityValue").CreateAsync$1(newCommodityValue);
                                        $step = 5;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 5: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        $step = 3;
                                        continue;
                                    }
                                    case 6: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            UpdateCommodityAsync: function (commodityValueEntity) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    commodityValue, 
                    confirm, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3], $step);
                                switch ($step) {
                                    case 0: {
                                        this.gridView = this.gridView || System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(null, null);
                                        if (commodityValueEntity != null && System.Nullable.gt(commodityValueEntity.BossId, 0) && System.Nullable.gt(commodityValueEntity.CommodityId, 0) && System.Nullable.gt(commodityValueEntity.ContainerId, 0)) {
                                            $step = 1;
                                            continue;
                                        } 
                                        $step = 3;
                                        continue;
                                    }
                                    case 1: {
                                        $task1 = new Core.Clients.Client.$ctor1("CommodityValue").FirstOrDefaultAsync(TMS.API.Models.CommodityValue, System.String.format("?$filter=Active eq true and BossId eq {0} and CommodityId eq {1} and ContainerId eq {2}", Bridge.box(commodityValueEntity.BossId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), Bridge.box(commodityValueEntity.CommodityId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), Bridge.box(commodityValueEntity.ContainerId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)));
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        commodityValue = $taskResult1;
                                        if (commodityValue.TotalPrice.ne(commodityValueEntity.TotalPrice)) {
                                            confirm = ($t = new Core.Components.Forms.ConfirmDialog(), $t.Content = "B\u1ea1n c\u00f3 mu\u1ed1n c\u1eadp nh\u1eadt GTHH n\u00e0y t\u1eeb " + (Bridge.Int.format(commodityValue.TotalPrice, "N0") || "") + " th\u00e0nh " + (Bridge.Int.format(commodityValueEntity.TotalPrice, "N0") || "") + " kh\u00f4ng?", $t);
                                            confirm.Render();
                                            confirm.YesConfirmed = Bridge.fn.combine(confirm.YesConfirmed, Bridge.fn.bind(this, function () {
                                                var $step = 0,
                                                    $task1, 
                                                    $taskResult1, 
                                                    $task2, 
                                                    $taskResult2, 
                                                    $task3, 
                                                    $task4, 
                                                    $taskResult4, 
                                                    $task5, 
                                                    $taskResult5, 
                                                    $task6, 
                                                    $taskResult6, 
                                                    $task7, 
                                                    $taskResult7, 
                                                    $task8, 
                                                    $taskResult8, 
                                                    $task9, 
                                                    $taskResult9, 
                                                    $task10, 
                                                    $taskResult10, 
                                                    $task11, 
                                                    $taskResult11, 
                                                    $task12, 
                                                    $taskResult12, 
                                                    $task13, 
                                                    $taskResult13, 
                                                    $jumpFromFinally, 
                                                    newCommodityValue, 
                                                    expenseContainerType, 
                                                    containerTypes, 
                                                    containerTypeCodes, 
                                                    startDate, 
                                                    expenseTypes, 
                                                    expenseTypeCodes, 
                                                    expenses, 
                                                    insuranceFeesRates, 
                                                    extraInsuranceFeesRateDB, 
                                                    insuranceFeesRateColdDB, 
                                                    containerTypeIdExpenses, 
                                                    containerTypeExpenses, 
                                                    containerTypeOfExpenses, 
                                                    $t1, 
                                                    item, 
                                                    container, 
                                                    $t2, 
                                                    item1, 
                                                    checkIsSOC, 
                                                    containerExpense, 
                                                    rs, 
                                                    $asyncBody = Bridge.fn.bind(this, function () {
                                                        for (;;) {
                                                            $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16], $step);
                                                            switch ($step) {
                                                                case 0: {
                                                                    commodityValue.EndDate = System.DateTime.getDate(System.DateTime.getNow());
                                                                    commodityValue.Active = false;
                                                                    $task1 = new Core.Clients.Client.$ctor1("CommodityValue").PatchAsync(System.Object, this.GetPatchEntity(commodityValue));
                                                                    $step = 1;
                                                                    if ($task1.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task1.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 1: {
                                                                    $taskResult1 = $task1.getAwaitedResult();
                                                                    newCommodityValue = this.CreateCommodityValue(commodityValueEntity);
                                                                    $task2 = new Core.Clients.Client.$ctor1("CommodityValue").CreateAsync(TMS.API.Models.CommodityValue, newCommodityValue);
                                                                    $step = 2;
                                                                    if ($task2.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task2.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 2: {
                                                                    $taskResult2 = $task2.getAwaitedResult();
                                                                    Core.Extensions.Toast.Success("\u0110\u00e3 c\u1eadp nh\u1eadt th\u00e0nh c\u00f4ng");
                                                                    $task3 = this.gridView.ApplyFilter(true);
                                                                    $step = 3;
                                                                    if ($task3.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task3.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 3: {
                                                                    $task3.getAwaitedResult();
                                                                    $task4 = new Core.Clients.Client.$ctor1("MasterData").FirstOrDefaultAsync(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and ParentId eq 7565 and Id eq {0}", [Bridge.box(commodityValue.ContainerId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]));
                                                                    $step = 4;
                                                                    if ($task4.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task4.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 4: {
                                                                    $taskResult4 = $task4.getAwaitedResult();
                                                                    expenseContainerType = $taskResult4;
                                                                    $task5 = new Core.Clients.Client.$ctor1("MasterData").GetRawList(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and ParentId eq 7565 and contains(Description, '{0}')", [expenseContainerType.Description]));
                                                                    $step = 5;
                                                                    if ($task5.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task5.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 5: {
                                                                    $taskResult5 = $task5.getAwaitedResult();
                                                                    containerTypes = $taskResult5;
                                                                    containerTypeCodes = System.Linq.Enumerable.from(containerTypes, TMS.API.Models.MasterData).select(function (x) {
                                                                        return x.Id;
                                                                    }).toList(System.Int32);
                                                                    startDate = System.DateTime.format(System.DateTime.getDate(System.Nullable.getValue(newCommodityValue.StartDate)), "yyyy-MM-dd");
                                                                    $task6 = new Core.Clients.Client.$ctor1("MasterData").GetRawList(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and ParentId eq 7577 and (contains(Name, 'BH SOC') or contains(Name, 'B\u1ea3o hi\u1ec3m'))", null));
                                                                    $step = 6;
                                                                    if ($task6.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task6.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 6: {
                                                                    $taskResult6 = $task6.getAwaitedResult();
                                                                    expenseTypes = $taskResult6;
                                                                    expenseTypeCodes = System.Linq.Enumerable.from(expenseTypes, TMS.API.Models.MasterData).select(function (x) {
                                                                        return x.Id;
                                                                    }).toList(System.Int32);
                                                                    $task7 = new Core.Clients.Client.$ctor1("Expense").GetRawList(TMS.API.Models.Expense, System.String.format("?$filter=Active eq true and BossId eq {0} and CommodityId eq {1} and ContainerTypeId in ({2}) and (StartShip ge {3} or StartShip eq null) and IsPurchasedInsurance eq false and ExpenseTypeId in ({4}) and RequestChangeId eq null", Bridge.box(commodityValueEntity.BossId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), Bridge.box(commodityValueEntity.CommodityId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), Core.Extensions.IEnumerableExtensions.Combine(System.Int32, containerTypeCodes), startDate, Core.Extensions.IEnumerableExtensions.Combine(System.Int32, expenseTypeCodes)));
                                                                    $step = 7;
                                                                    if ($task7.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task7.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 7: {
                                                                    $taskResult7 = $task7.getAwaitedResult();
                                                                    expenses = $taskResult7;
                                                                    $task8 = new Core.Clients.Client.$ctor1("InsuranceFeesRate").GetRawList(TMS.API.Models.InsuranceFeesRate, System.String.format("?$filter=Active eq true", null));
                                                                    $step = 8;
                                                                    if ($task8.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task8.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 8: {
                                                                    $taskResult8 = $task8.getAwaitedResult();
                                                                    insuranceFeesRates = $taskResult8;
                                                                    $task9 = new Core.Clients.Client.$ctor1("MasterData").GetRawList(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and ParentId eq 25374", null));
                                                                    $step = 9;
                                                                    if ($task9.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task9.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 9: {
                                                                    $taskResult9 = $task9.getAwaitedResult();
                                                                    extraInsuranceFeesRateDB = $taskResult9;
                                                                    $task10 = new Core.Clients.Client.$ctor1("MasterData").FirstOrDefaultAsync(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and Id eq 25391", null));
                                                                    $step = 10;
                                                                    if ($task10.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task10.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 10: {
                                                                    $taskResult10 = $task10.getAwaitedResult();
                                                                    insuranceFeesRateColdDB = $taskResult10;
                                                                    containerTypeIdExpenses = System.Linq.Enumerable.from(expenses, TMS.API.Models.Expense).select(function (x) {
                                                                        return x.ContainerTypeId;
                                                                    }).toList(System.Int32);
                                                                    $task11 = new Core.Clients.Client.$ctor1("MasterData").GetRawList(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and Id in ({0})", [Core.Extensions.IEnumerableExtensions.Combine(System.Nullable$1(System.Int32), containerTypeIdExpenses)]));
                                                                    $step = 11;
                                                                    if ($task11.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task11.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 11: {
                                                                    $taskResult11 = $task11.getAwaitedResult();
                                                                    containerTypeExpenses = $taskResult11;
                                                                    containerTypeOfExpenses = new (System.Collections.Generic.Dictionary$2(System.Int32,TMS.API.Models.MasterData)).ctor();
                                                                    $t1 = Bridge.getEnumerator(expenses);
                                                                    try {
                                                                        while ($t1.moveNext()) {
                                                                            item = { v : $t1.Current };
                                                                            container = System.Linq.Enumerable.from(containerTypeExpenses, TMS.API.Models.MasterData).where((function ($me, item) {
                                                                                return function (x) {
                                                                                    return System.Nullable.eq(x.Id, item.v.ContainerTypeId);
                                                                                };
                                                                            })(this, item)).firstOrDefault(null, null);
                                                                            containerTypeOfExpenses.add(item.v.Id, container);
                                                                        }
                                                                    } finally {
                                                                        if (Bridge.is($t1, System.IDisposable)) {
                                                                            $t1.System$IDisposable$Dispose();
                                                                        }
                                                                    }
                                                                    $t2 = Bridge.getEnumerator(expenses);
                                                                    $step = 12;
                                                                    continue;
                                                                }
                                                                case 12: {
                                                                    if ($t2.moveNext()) {
                                                                        item1 = $t2.Current;
                                                                        $step = 13;
                                                                        continue;
                                                                    }
                                                                    $step = 15;
                                                                    continue;
                                                                }
                                                                case 13: {
                                                                    item1.CommodityValue = newCommodityValue.TotalPrice;
                                                                    $task12 = new Core.Clients.Client.$ctor1("MasterData").FirstOrDefaultAsync(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and ParentId eq 7577 and Id eq {0}", [Bridge.box(item1.ExpenseTypeId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]));
                                                                    $step = 14;
                                                                    if ($task12.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task12.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 14: {
                                                                    $taskResult12 = $task12.getAwaitedResult();
                                                                    checkIsSOC = $taskResult12;
                                                                    containerExpense = System.Collections.Generic.CollectionExtensions.GetValueOrDefault(System.Int32, TMS.API.Models.MasterData, containerTypeOfExpenses, item1.Id);
                                                                    if (System.String.contains(checkIsSOC.Name,"BH SOC")) {
                                                                        this.CalcInsuranceFees(item1, true, insuranceFeesRates, extraInsuranceFeesRateDB, containerExpense, insuranceFeesRateColdDB);
                                                                    } else {
                                                                        this.CalcInsuranceFees(item1, false, insuranceFeesRates, extraInsuranceFeesRateDB, containerExpense, insuranceFeesRateColdDB);
                                                                    }
                                                                    $step = 12;
                                                                    continue;
                                                                }
                                                                case 15: {
                                                                    $task13 = new Core.Clients.Client.$ctor1("Expense").BulkUpdateAsync(TMS.API.Models.Expense, expenses);
                                                                    $step = 16;
                                                                    if ($task13.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task13.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 16: {
                                                                    $taskResult13 = $task13.getAwaitedResult();
                                                                    rs = $taskResult13;
                                                                    if (rs != null) {
                                                                        Core.Extensions.Toast.Success("\u0110\u00e3 \u00e1p d\u1ee5ng th\u00e0nh c\u00f4ng GTHH");
                                                                    } else {
                                                                        Core.Extensions.Toast.Warning("\u0110\u00e3 \u00e1p d\u1ee5ng th\u1ea5t b\u1ea1i GTHH");
                                                                    }
                                                                    return;
                                                                }
                                                                default: {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }, arguments);

                                                $asyncBody();
                                            }));
                                            confirm.NoConfirmed = Bridge.fn.combine(confirm.NoConfirmed, Bridge.fn.bind(this, function () {
                                                var $step = 0,
                                                    $task1, 
                                                    $taskResult1, 
                                                    $jumpFromFinally, 
                                                    listViewItem, 
                                                    updated, 
                                                    $t1, 
                                                    $asyncBody = Bridge.fn.bind(this, function () {
                                                        for (;;) {
                                                            $step = System.Array.min([0,1], $step);
                                                            switch ($step) {
                                                                case 0: {
                                                                    commodityValueEntity.TotalPrice = commodityValue.TotalPrice;
                                                                    this.gridView.UpdateRow(commodityValueEntity);
                                                                    listViewItem = System.Linq.Enumerable.from(this.gridView.GetListViewItems(commodityValueEntity), Core.Components.ListViewItem).firstOrDefault(null, null);
                                                                    updated = ($t1 = Core.Components.Number, System.Linq.Enumerable.from(listViewItem.FilterChildren(Core.Components.Number, function (x) {
                                                                        return Bridge.referenceEquals(x.GuiInfo.FieldName, "TotalPrice");
                                                                    }), $t1).toList($t1));
                                                                    updated.ForEach(function (x) {
                                                                        x.Dirty = true;
                                                                    });
                                                                    $task1 = new Core.Clients.Client.$ctor1("CommodityValue").PatchAsync(System.Object, this.GetPatchEntity(commodityValueEntity));
                                                                    $step = 1;
                                                                    if ($task1.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task1.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 1: {
                                                                    $taskResult1 = $task1.getAwaitedResult();
                                                                    return;
                                                                }
                                                                default: {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }, arguments);

                                                $asyncBody();
                                            }));
                                        }
                                        $step = 3;
                                        continue;
                                    }
                                    case 3: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CreateCommodityValue: function (commodityValue) {
                var startDate1 = System.DateTime.create(System.DateTime.getYear(System.DateTime.getNow()), 1, 1);
                var endDate1 = System.DateTime.create(System.DateTime.getYear(System.DateTime.getNow()), 6, 30);
                var startDate2 = System.DateTime.create(System.DateTime.getYear(System.DateTime.getNow()), 7, 1);
                var endDate2 = System.DateTime.create(System.DateTime.getYear(System.DateTime.getNow()), 12, 31);
                var newCommodityValue = new TMS.API.Models.CommodityValue();
                Core.Extensions.ReflectionExt.CopyPropFrom$1(newCommodityValue, commodityValue);
                newCommodityValue.Id = 0;
                newCommodityValue.StartDate = System.DateTime.getDate(System.DateTime.getNow());
                newCommodityValue.Active = true;
                newCommodityValue.InsertedDate = System.DateTime.getDate(System.DateTime.getNow());
                if (System.DateTime.gte(System.DateTime.getDate(System.DateTime.getNow()), startDate1) && System.DateTime.lte(System.DateTime.getDate(System.DateTime.getNow()), endDate1)) {
                    newCommodityValue.EndDate = endDate1;
                }
                if (System.DateTime.gte(System.DateTime.getDate(System.DateTime.getNow()), startDate2) && System.DateTime.lte(System.DateTime.getDate(System.DateTime.getNow()), endDate2)) {
                    newCommodityValue.EndDate = endDate2;
                }
                return newCommodityValue;
            },
            CalcInsuranceFees: function (expense, isSOC, insuranceFeesRates, extraInsuranceFeesRateDB, containerExpense, insuranceFeesRateColdDB) {
                var isSubRatio = false;
                if (((expense.IsWet || expense.SteamingTerms || expense.BreakTerms) && expense.IsBought === false) || (expense.IsBought && expense.IsWet)) {
                    isSubRatio = true;
                }
                var insuranceFeesRateDB = null;
                if (expense.IsBought) {
                    insuranceFeesRateDB = System.Linq.Enumerable.from(insuranceFeesRates, TMS.API.Models.InsuranceFeesRate).where(function (x) {
                            return System.Nullable.eq(x.TransportationTypeId, expense.TransportationTypeId) && System.Nullable.eq(x.JourneyId, expense.JourneyId) && x.IsBought === expense.IsBought && System.Nullable.eq(x.IsSOC, isSOC) && x.IsSubRatio === isSubRatio;
                        }).firstOrDefault(null, null);
                } else {
                    insuranceFeesRateDB = System.Linq.Enumerable.from(insuranceFeesRates, TMS.API.Models.InsuranceFeesRate).where(function (x) {
                            return System.Nullable.eq(x.TransportationTypeId, expense.TransportationTypeId) && System.Nullable.eq(x.JourneyId, expense.JourneyId) && x.IsBought === expense.IsBought && System.Nullable.eq(x.IsSOC, isSOC);
                        }).firstOrDefault(null, null);
                }
                if (insuranceFeesRateDB != null) {
                    if (System.Nullable.eq(expense.ExpenseTypeId, 15981)) {
                        expense.InsuranceFeeRate = insuranceFeesRateDB.Rate;
                    } else {
                        if (containerExpense != null && System.String.contains(containerExpense.Description.toLowerCase(),"l\u1ea1nh") && System.Nullable.eq(insuranceFeesRateDB.TransportationTypeId, 11673) && System.Nullable.eq(insuranceFeesRateDB.JourneyId, 12114)) {
                            expense.InsuranceFeeRate = insuranceFeesRateColdDB != null ? System.Decimal(insuranceFeesRateColdDB.Name) : System.Decimal(0);
                        } else {
                            expense.InsuranceFeeRate = insuranceFeesRateDB.Rate;
                        }
                        if (insuranceFeesRateDB.IsSubRatio && expense.IsBought === false) {
                            extraInsuranceFeesRateDB.ForEach(function (x) {
                                var prop = System.Linq.Enumerable.from(Bridge.Reflection.getMembers(Bridge.getType(expense), 16, 28), System.Reflection.PropertyInfo).where(function (y) {
                                        return Bridge.referenceEquals(y.n, x.Name) && System.Boolean.parse(Bridge.toString(Bridge.Reflection.midel(y.g, expense).apply(null, null)));
                                    }).firstOrDefault(null, null);
                                if (prop != null) {
                                    expense.InsuranceFeeRate = System.Nullable.lift2("add", expense.InsuranceFeeRate, System.Decimal(x.Code));
                                }
                            });
                        }
                    }
                } else {
                    expense.InsuranceFeeRate = System.Decimal(0);
                    expense.TotalPriceBeforeTax = System.Decimal(0);
                    expense.TotalPriceAfterTax = System.Decimal(0);
                }
                if (insuranceFeesRateDB != null && System.Nullable.eq(insuranceFeesRateDB.IsVAT, true)) {
                    this.CalcInsuranceFeeNoVAT(expense);
                } else if (insuranceFeesRateDB != null && System.Nullable.eq(insuranceFeesRateDB.IsVAT, false)) {
                    this.CalcInsuranceFee(expense);
                }
            },
            CalcInsuranceFee: function (expense) {
                expense.TotalPriceBeforeTax = System.Nullable.getValue(expense.InsuranceFeeRate).mul(System.Nullable.getValue(expense.CommodityValue)).div(System.Decimal(100));
                expense.TotalPriceAfterTax = expense.TotalPriceBeforeTax.add(System.Decimal.toDecimalPlaces(expense.TotalPriceBeforeTax.mul(expense.Vat).div(System.Decimal(100)), 0, 6));
            },
            CalcInsuranceFeeNoVAT: function (expense) {
                expense.TotalPriceAfterTax = System.Nullable.getValue(expense.InsuranceFeeRate).mul(System.Nullable.getValue(expense.CommodityValue)).div(System.Decimal(100));
                expense.TotalPriceBeforeTax = System.Decimal.toDecimalPlaces(expense.TotalPriceAfterTax.div(System.Decimal(1.1, 1)), 0, 6);
            },
            BeforePatchUpdate: function (entity, patch) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $task3, 
                    $taskResult3, 
                    $task4, 
                    $taskResult4, 
                    $task5, 
                    $task6, 
                    $taskResult6, 
                    $task7, 
                    $taskResult7, 
                    $task8, 
                    $taskResult8, 
                    $task9, 
                    $taskResult9, 
                    $task10, 
                    $taskResult10, 
                    $task11, 
                    $taskResult11, 
                    $task12, 
                    $taskResult12, 
                    $task13, 
                    $taskResult13, 
                    $task14, 
                    $taskResult14, 
                    $task15, 
                    $taskResult15, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    oldEntity, 
                    commodity, 
                    checkBoss, 
                    checkCommodity, 
                    checkContainer, 
                    commodityValueDB, 
                    commodity1, 
                    commodity2, 
                    expenseTypes, 
                    expenseTypeCodes, 
                    expenseTypeDictionary, 
                    $t, 
                    checkBoss1, 
                    checkCommodity1, 
                    checkContainer1, 
                    containerName, 
                    containerTypes, 
                    containerTypeCodes, 
                    startDate, 
                    expenses, 
                    insuranceFeesRates, 
                    extraInsuranceFeesRateDB, 
                    insuranceFeesRateColdDB, 
                    containerTypeIdExpenses, 
                    containerTypeExpenses, 
                    containerTypeOfExpenses, 
                    $t1, 
                    item, 
                    container, 
                    $t2, 
                    x, 
                    expenseType, 
                    containerExpense, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,28], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = new Core.Clients.Client.$ctor1("CommodityValue").FirstOrDefaultAsync(TMS.API.Models.CommodityValue, System.String.format("?$filter=Active eq true and Id eq {0}", [Bridge.box(entity.Id, System.Int32)]));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        oldEntity = $taskResult1;
                                        if (System.Linq.Enumerable.from(patch.Changes, Core.ViewModels.PatchUpdateDetail).any(function (x) {
                                            return Bridge.referenceEquals(x.Field, "BossId") || Bridge.referenceEquals(x.Field, "CommodityId") || Bridge.referenceEquals(x.Field, "ContainerId");
                                        })) {
                                            $step = 2;
                                            continue;
                                        } 
                                        $step = 5;
                                        continue;
                                    }
                                    case 2: {
                                        $task2 = new Core.Clients.Client.$ctor1("MasterData").FirstOrDefaultAsync(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and ParentId ne 7651 and contains(Path,'\\7651\\') and contains(Description,'V\u1ecf r\u1ed7ng')", null));
                                        $step = 3;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        commodity = $taskResult2;
                                        checkBoss = entity.BossId != null ? System.String.format("and BossId eq {0}", [Bridge.box(entity.BossId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]) : "";
                                        checkCommodity = entity.CommodityId != null ? System.String.format("and CommodityId eq {0}", [Bridge.box(entity.CommodityId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]) : "";
                                        checkContainer = entity.ContainerId != null ? System.String.format("and ContainerId eq {0}", [Bridge.box(entity.ContainerId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]) : "";
                                        $task3 = new Core.Clients.Client.$ctor1("CommodityValue").FirstOrDefaultAsync(TMS.API.Models.CommodityValue, System.String.format("?$filter=Active eq true {0} {1} {2}", checkBoss, checkCommodity, checkContainer));
                                        $step = 4;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        commodityValueDB = $taskResult3;
                                        if (commodityValueDB != null || System.Nullable.eq(entity.CommodityId, commodity.Id)) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        $step = 5;
                                        continue;
                                    }
                                    case 5: {
                                        if (System.Linq.Enumerable.from(patch.Changes, Core.ViewModels.PatchUpdateDetail).any(function (x) {
                                            return Bridge.referenceEquals(x.Field, "BossId") || Bridge.referenceEquals(x.Field, "IsWet") || Bridge.referenceEquals(x.Field, "IsBought") || Bridge.referenceEquals(x.Field, "SaleId") || Bridge.referenceEquals(x.Field, "CustomerTypeId") || Bridge.referenceEquals(x.Field, "StartDate") || Bridge.referenceEquals(x.Field, "ContainerId") || Bridge.referenceEquals(x.Field, "JourneyId") || Bridge.referenceEquals(x.Field, "SteamingTerms") || Bridge.referenceEquals(x.Field, "BreakTerms") || Bridge.referenceEquals(x.Field, "CommodityId");
                                        }) && (System.Nullable.neq(oldEntity.BossId, entity.BossId)) || (oldEntity.IsBought !== entity.IsBought) || (System.Nullable.neq(oldEntity.SaleId, entity.SaleId)) || (System.Nullable.neq(oldEntity.CustomerTypeId, entity.CustomerTypeId)) || (!Bridge.equals(oldEntity.StartDate, entity.StartDate)) || (System.Nullable.neq(oldEntity.CommodityId, entity.CommodityId)) || (System.Nullable.neq(oldEntity.ContainerId, entity.ContainerId)) || (System.Nullable.neq(oldEntity.JourneyId, entity.JourneyId)) || (oldEntity.SteamingTerms !== entity.SteamingTerms) || (oldEntity.BreakTerms !== entity.BreakTerms) || (oldEntity.IsWet !== entity.IsWet)) {
                                            $step = 6;
                                            continue;
                                        } 
                                        $step = 8;
                                        continue;
                                    }
                                    case 6: {
                                        $task4 = new Core.Clients.Client.$ctor1("MasterData").FirstOrDefaultAsync(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and ParentId ne 7651 and contains(Path,'\\7651\\') and contains(Description,'V\u1ecf r\u1ed7ng')", null));
                                        $step = 7;
                                        if ($task4.isCompleted()) {
                                            continue;
                                        }
                                        $task4.continue($asyncBody);
                                        return;
                                    }
                                    case 7: {
                                        $taskResult4 = $task4.getAwaitedResult();
                                        commodity1 = $taskResult4;
                                        if (System.Nullable.eq(oldEntity.CommodityId, commodity1.Id)) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        $step = 8;
                                        continue;
                                    }
                                    case 8: {
                                        if (System.Linq.Enumerable.from(patch.Changes, Core.ViewModels.PatchUpdateDetail).any(function (x) {
                                            return Bridge.referenceEquals(x.Field, "TotalPrice");
                                        })) {
                                            $step = 9;
                                            continue;
                                        } 
                                        $step = 11;
                                        continue;
                                    }
                                    case 9: {
                                        $task5 = this.UpdateCommodityAsync(entity);
                                        $step = 10;
                                        if ($task5.isCompleted()) {
                                            continue;
                                        }
                                        $task5.continue($asyncBody);
                                        return;
                                    }
                                    case 10: {
                                        $task5.getAwaitedResult();
                                        $step = 11;
                                        continue;
                                    }
                                    case 11: {
                                        if (System.Linq.Enumerable.from(patch.Changes, Core.ViewModels.PatchUpdateDetail).any(function (x) {
                                            return Bridge.referenceEquals(x.Field, "StartDate") || Bridge.referenceEquals(x.Field, "IsWet") || Bridge.referenceEquals(x.Field, "IsBought") || Bridge.referenceEquals(x.Field, "CustomerTypeId") || Bridge.referenceEquals(x.Field, "Notes") || Bridge.referenceEquals(x.Field, "SteamingTerms") || Bridge.referenceEquals(x.Field, "BreakTerms") || Bridge.referenceEquals(x.Field, "JourneyId");
                                        }) && (!Bridge.equals(oldEntity.StartDate, entity.StartDate)) || (oldEntity.IsBought !== entity.IsBought) || (System.Nullable.neq(oldEntity.CustomerTypeId, entity.CustomerTypeId)) || (System.Nullable.neq(oldEntity.JourneyId, entity.JourneyId)) || (!Bridge.referenceEquals(oldEntity.Notes, entity.Notes)) || (oldEntity.SteamingTerms !== entity.SteamingTerms) || (oldEntity.BreakTerms !== entity.BreakTerms) || (oldEntity.IsWet !== entity.IsWet)) {
                                            $step = 12;
                                            continue;
                                        } 
                                        $step = 28;
                                        continue;
                                    }
                                    case 12: {
                                        if (entity.IsWet && entity.SteamingTerms && entity.BreakTerms) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        $task6 = new Core.Clients.Client.$ctor1("MasterData").FirstOrDefaultAsync(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and ParentId ne 7651 and contains(Path,'\\7651\\') and contains(Description,'V\u1ecf r\u1ed7ng')", null));
                                        $step = 13;
                                        if ($task6.isCompleted()) {
                                            continue;
                                        }
                                        $task6.continue($asyncBody);
                                        return;
                                    }
                                    case 13: {
                                        $taskResult6 = $task6.getAwaitedResult();
                                        commodity2 = $taskResult6;
                                        if (System.Nullable.eq(oldEntity.CommodityId, commodity2.Id)) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        $task7 = new Core.Clients.Client.$ctor1("MasterData").GetRawList(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and ParentId eq 7577 and (contains(Name,'B\u1ea3o hi\u1ec3m') or contains(Name,'BH SOC'))", null));
                                        $step = 14;
                                        if ($task7.isCompleted()) {
                                            continue;
                                        }
                                        $task7.continue($asyncBody);
                                        return;
                                    }
                                    case 14: {
                                        $taskResult7 = $task7.getAwaitedResult();
                                        expenseTypes = $taskResult7;
                                        expenseTypeCodes = System.Linq.Enumerable.from(expenseTypes, TMS.API.Models.MasterData).select(function (x) {
                                            return x.Id;
                                        }).toList(System.Int32);
                                        expenseTypeDictionary = ($t = TMS.API.Models.MasterData, System.Linq.Enumerable.from(expenseTypes, $t).toDictionary(function (x) {
                                            return x.Id;
                                        }, null, System.Int32, $t));
                                        checkBoss1 = entity.BossId != null ? System.String.format("and BossId eq {0}", [Bridge.box(entity.BossId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]) : "";
                                        checkCommodity1 = entity.CommodityId != null ? System.String.format("and CommodityId eq {0}", [Bridge.box(entity.CommodityId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]) : "";
                                        checkContainer1 = entity.ContainerId != null ? System.String.format("and ContainerId eq {0}", [Bridge.box(entity.ContainerId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]) : "";
                                        $task8 = new Core.Clients.Client.$ctor1("MasterData").FirstOrDefaultAsync(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and Id eq {0}", [Bridge.box(entity.ContainerId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]));
                                        $step = 15;
                                        if ($task8.isCompleted()) {
                                            continue;
                                        }
                                        $task8.continue($asyncBody);
                                        return;
                                    }
                                    case 15: {
                                        $taskResult8 = $task8.getAwaitedResult();
                                        containerName = $taskResult8;
                                        containerTypes = new (System.Collections.Generic.List$1(TMS.API.Models.MasterData)).ctor();
                                        if (containerName != null) {
                                            $step = 16;
                                            continue;
                                        } 
                                        $step = 27;
                                        continue;
                                    }
                                    case 16: {
                                        $task9 = new Core.Clients.Client.$ctor1("MasterData").GetRawList(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and ParentId eq 7565 and contains(Description,'{0}')", [containerName.Description]));
                                        $step = 17;
                                        if ($task9.isCompleted()) {
                                            continue;
                                        }
                                        $task9.continue($asyncBody);
                                        return;
                                    }
                                    case 17: {
                                        $taskResult9 = $task9.getAwaitedResult();
                                        containerTypes = $taskResult9;
                                        containerTypeCodes = System.Linq.Enumerable.from(containerTypes, TMS.API.Models.MasterData).select(function (x) {
                                            return x.Id;
                                        }).toList(System.Int32);
                                        startDate = System.DateTime.format(System.DateTime.getDate(System.Nullable.getValue(entity.StartDate)), "yyyy-MM-dd");
                                        $task10 = new Core.Clients.Client.$ctor1("Expense").GetRawList(TMS.API.Models.Expense, System.String.format("?$filter=Active eq true and ExpenseTypeId in ({0}) {1} {2} and ContainerTypeId in ({3}) and IsPurchasedInsurance eq false and (StartShip eq null or StartShip ge {4}) and RequestChangeId eq null", Core.Extensions.IEnumerableExtensions.Combine(System.Int32, expenseTypeCodes), checkBoss1, checkCommodity1, Core.Extensions.IEnumerableExtensions.Combine(System.Int32, containerTypeCodes), startDate));
                                        $step = 18;
                                        if ($task10.isCompleted()) {
                                            continue;
                                        }
                                        $task10.continue($asyncBody);
                                        return;
                                    }
                                    case 18: {
                                        $taskResult10 = $task10.getAwaitedResult();
                                        expenses = $taskResult10;
                                        $task11 = new Core.Clients.Client.$ctor1("InsuranceFeesRate").GetRawList(TMS.API.Models.InsuranceFeesRate, System.String.format("?$filter=Active eq true", null));
                                        $step = 19;
                                        if ($task11.isCompleted()) {
                                            continue;
                                        }
                                        $task11.continue($asyncBody);
                                        return;
                                    }
                                    case 19: {
                                        $taskResult11 = $task11.getAwaitedResult();
                                        insuranceFeesRates = $taskResult11;
                                        $task12 = new Core.Clients.Client.$ctor1("MasterData").GetRawList(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and ParentId eq 25374", null));
                                        $step = 20;
                                        if ($task12.isCompleted()) {
                                            continue;
                                        }
                                        $task12.continue($asyncBody);
                                        return;
                                    }
                                    case 20: {
                                        $taskResult12 = $task12.getAwaitedResult();
                                        extraInsuranceFeesRateDB = $taskResult12;
                                        $task13 = new Core.Clients.Client.$ctor1("MasterData").FirstOrDefaultAsync(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and Id eq 25391", null));
                                        $step = 21;
                                        if ($task13.isCompleted()) {
                                            continue;
                                        }
                                        $task13.continue($asyncBody);
                                        return;
                                    }
                                    case 21: {
                                        $taskResult13 = $task13.getAwaitedResult();
                                        insuranceFeesRateColdDB = $taskResult13;
                                        containerTypeIdExpenses = System.Linq.Enumerable.from(expenses, TMS.API.Models.Expense).select(function (x) {
                                            return x.ContainerTypeId;
                                        }).toList(System.Int32);
                                        $task14 = new Core.Clients.Client.$ctor1("MasterData").GetRawList(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and Id in ({0})", [Core.Extensions.IEnumerableExtensions.Combine(System.Nullable$1(System.Int32), containerTypeIdExpenses)]));
                                        $step = 22;
                                        if ($task14.isCompleted()) {
                                            continue;
                                        }
                                        $task14.continue($asyncBody);
                                        return;
                                    }
                                    case 22: {
                                        $taskResult14 = $task14.getAwaitedResult();
                                        containerTypeExpenses = $taskResult14;
                                        containerTypeOfExpenses = new (System.Collections.Generic.Dictionary$2(System.Int32,TMS.API.Models.MasterData)).ctor();
                                        $t1 = Bridge.getEnumerator(expenses);
                                        try {
                                            while ($t1.moveNext()) {
                                                item = { v : $t1.Current };
                                                container = System.Linq.Enumerable.from(containerTypeExpenses, TMS.API.Models.MasterData).where((function ($me, item) {
                                                    return function (x) {
                                                        return System.Nullable.eq(x.Id, item.v.ContainerTypeId);
                                                    };
                                                })(this, item)).firstOrDefault(null, null);
                                                containerTypeOfExpenses.add(item.v.Id, container);
                                            }
                                        } finally {
                                            if (Bridge.is($t1, System.IDisposable)) {
                                                $t1.System$IDisposable$Dispose();
                                            }
                                        }
                                        $t2 = Bridge.getEnumerator(expenses);
                                        $step = 23;
                                        continue;
                                    }
                                    case 23: {
                                        if ($t2.moveNext()) {
                                            x = $t2.Current;
                                            $step = 24;
                                            continue;
                                        }
                                        $step = 26;
                                        continue;
                                    }
                                    case 24: {
                                        x.CommodityValue = entity.TotalPrice;
                                        x.CustomerTypeId = entity.CustomerTypeId;
                                        x.CommodityValueNotes = entity.Notes;
                                        x.JourneyId = entity.JourneyId;
                                        expenseType = System.Collections.Generic.CollectionExtensions.GetValueOrDefault(System.Int32, TMS.API.Models.MasterData, expenseTypeDictionary, System.Nullable.getValue(x.ExpenseTypeId));
                                        if (System.Nullable.neq(x.CommodityId, commodity2.Id) && System.String.contains(expenseType.Name,"BH SOC") === false) {
                                            x.IsWet = entity.IsWet;
                                            x.IsBought = entity.IsBought;
                                            x.SteamingTerms = entity.SteamingTerms;
                                            x.BreakTerms = entity.BreakTerms;
                                        }
                                        containerExpense = System.Collections.Generic.CollectionExtensions.GetValueOrDefault(System.Int32, TMS.API.Models.MasterData, containerTypeOfExpenses, x.Id);
                                        this.CalcInsuranceFees(x, false, insuranceFeesRates, extraInsuranceFeesRateDB, containerExpense, insuranceFeesRateColdDB);
                                        $task15 = new Core.Clients.Client.$ctor1("Expense").UpdateAsync(TMS.API.Models.Expense, x);
                                        $step = 25;
                                        if ($task15.isCompleted()) {
                                            continue;
                                        }
                                        $task15.continue($asyncBody);
                                        return;
                                    }
                                    case 25: {
                                        $taskResult15 = $task15.getAwaitedResult();
                                        $step = 23;
                                        continue;
                                    }
                                    case 26: {
                                        Core.Extensions.Toast.Success("\u0110\u00e3 \u00e1p d\u1ee5ng th\u00e0nh c\u00f4ng GTHH n\u00e0y");
                                        $step = 27;
                                        continue;
                                    }

                                    case 28: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            GetPatchEntity: function (commodityValue) {
                var $t;
                var details = new (System.Collections.Generic.List$1(Core.ViewModels.PatchUpdateDetail)).ctor();
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = Core.Extensions.Utils.IdField, $t.Value = Bridge.toString(commodityValue.Id), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "Active", $t.Value = System.Boolean.toString(commodityValue.Active), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "EndDate", $t.Value = System.Nullable.toString(commodityValue.EndDate, function ($t) { return System.DateTime.format($t); }), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "TotalPrice", $t.Value = commodityValue.TotalPrice.toString(), $t));
                return ($t = new Core.ViewModels.PatchUpdate(), $t.Changes = details, $t);
            }
        }
    });

    Bridge.define("TMS.UI.Business.Manage.CommodityValueEditorBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        fields: {
            gridView: null
        },
        props: {
            commodityValueEntity: {
                get: function () {
                    return Bridge.as(this.Entity, TMS.API.Models.CommodityValue);
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "CommodityValue");
                this.Name = "CommodityValue Editor";
            }
        },
        methods: {
            ToggleApprovalBtn: function (entity) {
                if (entity === void 0) { entity = null; }
                if (this.commodityValueEntity.Id > 0) {
                    Core.Components.Extensions.ComponentExt.SetDisabled$1(this, true, ["BossId"]);
                    Core.Components.Extensions.ComponentExt.SetDisabled$1(this, true, ["CommodityId"]);
                }
                Core.Components.Forms.PopupEditor.prototype.ToggleApprovalBtn.call(this);
            },
            SetInfo: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    vendor, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = new Core.Clients.Client.$ctor1("Vendor").FirstOrDefaultAsync(TMS.API.Models.Vendor, System.String.format("?$filter=Active eq true and TypeId eq 7551 and Id eq {0}", [Bridge.box(this.commodityValueEntity.BossId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        vendor = $taskResult1;
                                        this.commodityValueEntity.SaleId = vendor == null ? null : vendor.UserId;
                                        this.UpdateView$1(false, ["SaleId"]);
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CheckCommodityValue: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $task3, 
                    $taskResult3, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    commodityValue, 
                    confirm, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7,8,11], $step);
                                switch ($step) {
                                    case 0: {
                                        if (!Bridge.equals(this.commodityValueEntity.StartDate, null) && !Bridge.equals(this.commodityValueEntity.EndDate, null) && System.DateTime.gt(this.commodityValueEntity.StartDate, this.commodityValueEntity.EndDate)) {
                                            Core.Extensions.Toast.Warning("Ng\u00e0y b\u1eaft \u0111\u1ea7u kh\u00f4ng \u0111\u01b0\u1ee3c l\u1edbn h\u01a1n ng\u00e0y k\u1ebft th\u00fac");
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        if (System.Nullable.gt(this.commodityValueEntity.BossId, 0) && System.Nullable.gt(this.commodityValueEntity.CommodityId, 0) && System.Nullable.gt(this.commodityValueEntity.ContainerId, 0)) {
                                            $step = 1;
                                            continue;
                                        } 
                                        $step = 11;
                                        continue;
                                    }
                                    case 1: {
                                        this.gridView = this.gridView || System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this.Parent), Core.Components.GridView).firstOrDefault(null, null);
                                        $task1 = new Core.Clients.Client.$ctor1("CommodityValue").FirstOrDefaultAsync(TMS.API.Models.CommodityValue, System.String.format("?$filter=Active eq true and BossId eq {0} and CommodityId eq {1} and ContainerId eq {2}", Bridge.box(this.commodityValueEntity.BossId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), Bridge.box(this.commodityValueEntity.CommodityId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), Bridge.box(this.commodityValueEntity.ContainerId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)));
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        commodityValue = $taskResult1;
                                        if (commodityValue == null) {
                                            $step = 3;
                                            continue;
                                        } else  {
                                            $step = 5;
                                            continue;
                                        }
                                    }
                                    case 3: {
                                        $task2 = new Core.Clients.Client.$ctor1("CommodityValue").CreateAsync(TMS.API.Models.CommodityValue, this.commodityValueEntity);
                                        $step = 4;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        Core.Extensions.Toast.Success("\u0110\u00e3 t\u1ea1o m\u1edbi th\u00e0nh c\u00f4ng");
                                        $step = 10;
                                        continue;
                                    }
                                    case 5: {
                                        if (this.commodityValueEntity.Id > 0) {
                                            commodityValue.IsBought = this.commodityValueEntity.IsBought;
                                            commodityValue.IsWet = this.commodityValueEntity.IsWet;
                                            commodityValue.CustomerTypeId = this.commodityValueEntity.CustomerTypeId;
                                            commodityValue.ContainerId = this.commodityValueEntity.ContainerId;
                                            commodityValue.StartDate = this.commodityValueEntity.StartDate;
                                            commodityValue.EndDate = this.commodityValueEntity.EndDate;
                                        }
                                        if (commodityValue.TotalPrice.ne(this.commodityValueEntity.TotalPrice)) {
                                            $step = 6;
                                            continue;
                                        } else  {
                                            $step = 7;
                                            continue;
                                        }
                                    }
                                    case 6: {
                                        confirm = ($t = new Core.Components.Forms.ConfirmDialog(), $t.Content = "B\u1ea1n c\u00f3 mu\u1ed1n c\u1eadp nh\u1eadt GTHH n\u00e0y t\u1eeb " + (Bridge.Int.format(commodityValue.TotalPrice, "N0") || "") + " th\u00e0nh " + (Bridge.Int.format(this.commodityValueEntity.TotalPrice, "N0") || "") + " kh\u00f4ng?", $t);
                                        confirm.Render();
                                        confirm.YesConfirmed = Bridge.fn.combine(confirm.YesConfirmed, Bridge.fn.bind(this, function () {
                                            var $step = 0,
                                                $task1, 
                                                $taskResult1, 
                                                $task2, 
                                                $taskResult2, 
                                                $task3, 
                                                $taskResult3, 
                                                $task4, 
                                                $taskResult4, 
                                                $task5, 
                                                $taskResult5, 
                                                $task6, 
                                                $taskResult6, 
                                                $task7, 
                                                $taskResult7, 
                                                $task8, 
                                                $task9, 
                                                $task10, 
                                                $taskResult10, 
                                                $jumpFromFinally, 
                                                newCommodityValue, 
                                                expenseContainerType, 
                                                containerTypes, 
                                                containerTypeCodes, 
                                                startDate, 
                                                expenseTypes, 
                                                expenseTypeCodes, 
                                                expenses, 
                                                $t1, 
                                                item, 
                                                checkIsSOC, 
                                                rs, 
                                                $asyncBody = Bridge.fn.bind(this, function () {
                                                    for (;;) {
                                                        $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16], $step);
                                                        switch ($step) {
                                                            case 0: {
                                                                commodityValue.EndDate = System.DateTime.getDate(System.DateTime.getNow());
                                                                commodityValue.Active = false;
                                                                newCommodityValue = this.CreateCommodityValue(this.commodityValueEntity);
                                                                $task1 = new Core.Clients.Client.$ctor1("CommodityValue").PatchAsync(System.Object, this.GetPatchEntity(commodityValue));
                                                                $step = 1;
                                                                if ($task1.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task1.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 1: {
                                                                $taskResult1 = $task1.getAwaitedResult();
                                                                $task2 = new Core.Clients.Client.$ctor1("CommodityValue").CreateAsync(TMS.API.Models.CommodityValue, newCommodityValue);
                                                                $step = 2;
                                                                if ($task2.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task2.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 2: {
                                                                $taskResult2 = $task2.getAwaitedResult();
                                                                Core.Extensions.Toast.Success("\u0110\u00e3 c\u1eadp nh\u1eadt th\u00e0nh c\u00f4ng");
                                                                $task3 = new Core.Clients.Client.$ctor1("MasterData").FirstOrDefaultAsync(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and ParentId eq 7565 and Id eq {0}", [Bridge.box(commodityValue.ContainerId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]));
                                                                $step = 3;
                                                                if ($task3.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task3.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 3: {
                                                                $taskResult3 = $task3.getAwaitedResult();
                                                                expenseContainerType = $taskResult3;
                                                                $task4 = new Core.Clients.Client.$ctor1("MasterData").GetRawList(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and ParentId eq 7565 and contains(Description, '{0}')", [expenseContainerType.Description]));
                                                                $step = 4;
                                                                if ($task4.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task4.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 4: {
                                                                $taskResult4 = $task4.getAwaitedResult();
                                                                containerTypes = $taskResult4;
                                                                containerTypeCodes = System.Linq.Enumerable.from(containerTypes, TMS.API.Models.MasterData).select(function (x) {
                                                                    return x.Id;
                                                                }).toList(System.Int32);
                                                                startDate = System.DateTime.format(System.DateTime.getDate(System.Nullable.getValue(newCommodityValue.StartDate)), "yyyy-MM-dd");
                                                                $task5 = new Core.Clients.Client.$ctor1("MasterData").GetRawList(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and ParentId eq 7577 and (contains(Name, 'BH SOC') or contains(Name, 'B\u1ea3o hi\u1ec3m'))", null));
                                                                $step = 5;
                                                                if ($task5.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task5.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 5: {
                                                                $taskResult5 = $task5.getAwaitedResult();
                                                                expenseTypes = $taskResult5;
                                                                expenseTypeCodes = System.Linq.Enumerable.from(expenseTypes, TMS.API.Models.MasterData).select(function (x) {
                                                                    return x.Id;
                                                                }).toList(System.Int32);
                                                                $task6 = new Core.Clients.Client.$ctor1("Expense").GetRawList(TMS.API.Models.Expense, System.String.format("?$filter=Active eq true and BossId eq {0} and CommodityId eq {1} and ContainerTypeId in ({2}) and (StartShip ge {3} or StartShip eq null) and IsPurchasedInsurance eq false and ExpenseTypeId in ({4}) and RequestChangeId eq null", Bridge.box(this.commodityValueEntity.BossId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), Bridge.box(this.commodityValueEntity.CommodityId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), Core.Extensions.IEnumerableExtensions.Combine(System.Int32, containerTypeCodes), startDate, Core.Extensions.IEnumerableExtensions.Combine(System.Int32, expenseTypeCodes)));
                                                                $step = 6;
                                                                if ($task6.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task6.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 6: {
                                                                $taskResult6 = $task6.getAwaitedResult();
                                                                expenses = $taskResult6;
                                                                $t1 = Bridge.getEnumerator(expenses);
                                                                $step = 7;
                                                                continue;
                                                            }
                                                            case 7: {
                                                                if ($t1.moveNext()) {
                                                                    item = $t1.Current;
                                                                    $step = 8;
                                                                    continue;
                                                                }
                                                                $step = 15;
                                                                continue;
                                                            }
                                                            case 8: {
                                                                item.CommodityValue = newCommodityValue.TotalPrice;
                                                                $task7 = new Core.Clients.Client.$ctor1("MasterData").FirstOrDefaultAsync(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and ParentId eq 7577 and Id eq {0}", [Bridge.box(item.ExpenseTypeId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]));
                                                                $step = 9;
                                                                if ($task7.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task7.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 9: {
                                                                $taskResult7 = $task7.getAwaitedResult();
                                                                checkIsSOC = $taskResult7;
                                                                if (System.String.contains(checkIsSOC.Name,"BH SOC")) {
                                                                    $step = 10;
                                                                    continue;
                                                                } else  {
                                                                    $step = 12;
                                                                    continue;
                                                                }
                                                            }
                                                            case 10: {
                                                                $task8 = this.CalcInsuranceFees(item, true);
                                                                $step = 11;
                                                                if ($task8.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task8.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 11: {
                                                                $task8.getAwaitedResult();
                                                                $step = 14;
                                                                continue;
                                                            }
                                                            case 12: {
                                                                $task9 = this.CalcInsuranceFees(item, false);
                                                                $step = 13;
                                                                if ($task9.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task9.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 13: {
                                                                $task9.getAwaitedResult();
                                                                $step = 14;
                                                                continue;
                                                            }
                                                            case 14: {
                                                                $step = 7;
                                                                continue;
                                                            }
                                                            case 15: {
                                                                $task10 = new Core.Clients.Client.$ctor1("Expense").BulkUpdateAsync(TMS.API.Models.Expense, expenses);
                                                                $step = 16;
                                                                if ($task10.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task10.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 16: {
                                                                $taskResult10 = $task10.getAwaitedResult();
                                                                rs = $taskResult10;
                                                                if (rs != null) {
                                                                    Core.Extensions.Toast.Success("\u0110\u00e3 \u00e1p d\u1ee5ng th\u00e0nh c\u00f4ng GTHH");
                                                                    this.Dispose();
                                                                } else {
                                                                    Core.Extensions.Toast.Warning("\u0110\u00e3 \u00e1p d\u1ee5ng th\u1ea5t b\u1ea1i GTHH");
                                                                    this.Dispose();
                                                                }
                                                                return;
                                                            }
                                                            default: {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }, arguments);

                                            $asyncBody();
                                        }));
                                        $step = 9;
                                        continue;
                                    }
                                    case 7: {
                                        $task3 = new Core.Clients.Client.$ctor1("CommodityValue").UpdateAsync(TMS.API.Models.CommodityValue, commodityValue);
                                        $step = 8;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 8: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        $step = 9;
                                        continue;
                                    }


                                    case 11: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CreateCommodityValue: function (commodityValue) {
                var startDate1 = System.DateTime.create(System.DateTime.getYear(System.DateTime.getNow()), 1, 1);
                var endDate1 = System.DateTime.create(System.DateTime.getYear(System.DateTime.getNow()), 6, 30);
                var startDate2 = System.DateTime.create(System.DateTime.getYear(System.DateTime.getNow()), 7, 1);
                var endDate2 = System.DateTime.create(System.DateTime.getYear(System.DateTime.getNow()), 12, 31);
                var newCommodityValue = new TMS.API.Models.CommodityValue();
                Core.Extensions.ReflectionExt.CopyPropFrom$1(newCommodityValue, commodityValue);
                newCommodityValue.Id = 0;
                newCommodityValue.StartDate = System.DateTime.getDate(System.DateTime.getNow());
                newCommodityValue.Active = true;
                newCommodityValue.InsertedDate = System.DateTime.getDate(System.DateTime.getNow());
                if (System.DateTime.gte(System.DateTime.getDate(System.DateTime.getNow()), startDate1) && System.DateTime.lte(System.DateTime.getDate(System.DateTime.getNow()), endDate1)) {
                    newCommodityValue.EndDate = endDate1;
                }
                if (System.DateTime.gte(System.DateTime.getDate(System.DateTime.getNow()), startDate2) && System.DateTime.lte(System.DateTime.getDate(System.DateTime.getNow()), endDate2)) {
                    newCommodityValue.EndDate = endDate2;
                }
                return newCommodityValue;
            },
            CalcInsuranceFees: function (expense, isSOC) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $task3, 
                    $taskResult3, 
                    $task4, 
                    $taskResult4, 
                    $task5, 
                    $taskResult5, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    isSubRatio, 
                    journeyId, 
                    insuranceFeesRateDB, 
                    getContainerType, 
                    insuranceFeesRateColdDB, 
                    extraInsuranceFeesRateDB, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,17,18,19], $step);
                                switch ($step) {
                                    case 0: {
                                        isSubRatio = false;
                                        if (((expense.IsWet || expense.SteamingTerms || expense.BreakTerms) && expense.IsBought === false) || (expense.IsBought && expense.IsWet)) {
                                            isSubRatio = true;
                                        }
                                        journeyId = expense.JourneyId == null ? "" : "and JourneyId eq " + (System.Nullable.toString(expense.JourneyId, null) || "");
                                        insuranceFeesRateDB = null;
                                        if (expense.IsBought) {
                                            $step = 1;
                                            continue;
                                        } else  {
                                            $step = 3;
                                            continue;
                                        }
                                    }
                                    case 1: {
                                        $task1 = new Core.Clients.Client.$ctor1("InsuranceFeesRate").FirstOrDefaultAsync(TMS.API.Models.InsuranceFeesRate, System.String.format("?$filter=Active eq true and TransportationTypeId eq {0} {1} and IsBought eq {2} and IsSOC eq {3} and IsSubRatio eq {4}", Bridge.box(expense.TransportationTypeId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), journeyId, System.Boolean.toString(expense.IsBought).toLowerCase(), System.Boolean.toString(isSOC).toLowerCase(), System.Boolean.toString(isSubRatio).toLowerCase()));
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        insuranceFeesRateDB = $taskResult1;
                                        $step = 5;
                                        continue;
                                    }
                                    case 3: {
                                        $task2 = new Core.Clients.Client.$ctor1("InsuranceFeesRate").FirstOrDefaultAsync(TMS.API.Models.InsuranceFeesRate, System.String.format("?$filter=Active eq true and TransportationTypeId eq {0} {1} and IsBought eq {2} and IsSOC eq {3}", Bridge.box(expense.TransportationTypeId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), journeyId, System.Boolean.toString(expense.IsBought).toLowerCase(), System.Boolean.toString(isSOC).toLowerCase()));
                                        $step = 4;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        insuranceFeesRateDB = $taskResult2;
                                        $step = 5;
                                        continue;
                                    }
                                    case 5: {
                                        if (insuranceFeesRateDB != null) {
                                            $step = 6;
                                            continue;
                                        } else  {
                                            $step = 18;
                                            continue;
                                        }
                                    }
                                    case 6: {
                                        if (System.Nullable.eq(expense.ExpenseTypeId, 15981)) {
                                            $step = 7;
                                            continue;
                                        } else  {
                                            $step = 8;
                                            continue;
                                        }
                                    }
                                    case 7: {
                                        expense.InsuranceFeeRate = insuranceFeesRateDB.Rate;
                                        $step = 17;
                                        continue;
                                    }
                                    case 8: {
                                        $task3 = new Core.Clients.Client.$ctor1("MasterData").FirstOrDefaultAsync(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and Id eq {0}", [Bridge.box(expense.ContainerTypeId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]));
                                        $step = 9;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 9: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        getContainerType = $taskResult3;
                                        if (getContainerType != null && System.String.contains(getContainerType.Description.toLowerCase(),"l\u1ea1nh") && System.Nullable.eq(insuranceFeesRateDB.TransportationTypeId, 11673) && System.Nullable.eq(insuranceFeesRateDB.JourneyId, 12114)) {
                                            $step = 10;
                                            continue;
                                        } else  {
                                            $step = 12;
                                            continue;
                                        }
                                    }
                                    case 10: {
                                        $task4 = new Core.Clients.Client.$ctor1("MasterData").FirstOrDefaultAsync(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and Id eq 25391", null));
                                        $step = 11;
                                        if ($task4.isCompleted()) {
                                            continue;
                                        }
                                        $task4.continue($asyncBody);
                                        return;
                                    }
                                    case 11: {
                                        $taskResult4 = $task4.getAwaitedResult();
                                        insuranceFeesRateColdDB = $taskResult4;
                                        expense.InsuranceFeeRate = insuranceFeesRateColdDB != null ? System.Decimal(insuranceFeesRateColdDB.Name) : System.Decimal(0);
                                        $step = 13;
                                        continue;
                                    }
                                    case 12: {
                                        expense.InsuranceFeeRate = insuranceFeesRateDB.Rate;
                                        $step = 13;
                                        continue;
                                    }
                                    case 13: {
                                        if (insuranceFeesRateDB.IsSubRatio && expense.IsBought === false) {
                                            $step = 14;
                                            continue;
                                        } 
                                        $step = 16;
                                        continue;
                                    }
                                    case 14: {
                                        $task5 = new Core.Clients.Client.$ctor1("MasterData").GetRawList(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and ParentId eq 25374", null));
                                        $step = 15;
                                        if ($task5.isCompleted()) {
                                            continue;
                                        }
                                        $task5.continue($asyncBody);
                                        return;
                                    }
                                    case 15: {
                                        $taskResult5 = $task5.getAwaitedResult();
                                        extraInsuranceFeesRateDB = $taskResult5;
                                        extraInsuranceFeesRateDB.ForEach(function (x) {
                                            var prop = System.Linq.Enumerable.from(Bridge.Reflection.getMembers(Bridge.getType(expense), 16, 28), System.Reflection.PropertyInfo).where(function (y) {
                                                return Bridge.referenceEquals(y.n, x.Name) && System.Boolean.parse(Bridge.toString(Bridge.Reflection.midel(y.g, expense).apply(null, null)));
                                            }).firstOrDefault(null, null);
                                            if (prop != null) {
                                                expense.InsuranceFeeRate = System.Nullable.lift2("add", expense.InsuranceFeeRate, System.Decimal(x.Code));
                                            }
                                        });
                                        $step = 16;
                                        continue;
                                    }

                                    case 17: {
                                        $step = 19;
                                        continue;
                                    }
                                    case 18: {
                                        expense.InsuranceFeeRate = System.Decimal(0);
                                        expense.TotalPriceBeforeTax = System.Decimal(0);
                                        expense.TotalPriceAfterTax = System.Decimal(0);
                                        $step = 19;
                                        continue;
                                    }
                                    case 19: {
                                        if (insuranceFeesRateDB != null && System.Nullable.eq(insuranceFeesRateDB.IsVAT, true)) {
                                            this.CalcInsuranceFeeNoVAT(expense);
                                        } else if (insuranceFeesRateDB != null && System.Nullable.eq(insuranceFeesRateDB.IsVAT, false)) {
                                            this.CalcInsuranceFee(expense);
                                        }
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CalcInsuranceFee: function (expense) {
                expense.TotalPriceBeforeTax = System.Nullable.getValue(expense.InsuranceFeeRate).mul(System.Nullable.getValue(expense.CommodityValue)).div(System.Decimal(100));
                expense.TotalPriceAfterTax = expense.TotalPriceBeforeTax.add(System.Decimal.toDecimalPlaces(expense.TotalPriceBeforeTax.mul(expense.Vat).div(System.Decimal(100)), 0, 6));
            },
            CalcInsuranceFeeNoVAT: function (expense) {
                expense.TotalPriceAfterTax = System.Nullable.getValue(expense.InsuranceFeeRate).mul(System.Nullable.getValue(expense.CommodityValue)).div(System.Decimal(100));
                expense.TotalPriceBeforeTax = System.Decimal.toDecimalPlaces(expense.TotalPriceAfterTax.div(System.Decimal(1.1, 1)), 0, 6);
            },
            GetPatchEntity: function (commodityValue) {
                var $t;
                var details = new (System.Collections.Generic.List$1(Core.ViewModels.PatchUpdateDetail)).ctor();
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = Core.Extensions.Utils.IdField, $t.Value = Bridge.toString(commodityValue.Id), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "Active", $t.Value = System.Boolean.toString(commodityValue.Active), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "EndDate", $t.Value = System.Nullable.toString(commodityValue.EndDate, function ($t) { return System.DateTime.format($t); }), $t));
                return ($t = new Core.ViewModels.PatchUpdate(), $t.Changes = details, $t);
            }
        }
    });

    Bridge.define("TMS.UI.Business.Manage.ContainerBetManagerListBL", {
        inherits: [Core.Components.Forms.TabEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "Transportation");
                this.Name = "ContainerBetManager List";
            }
        },
        methods: {
            EditTransportation: function (entity) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Transportation Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Manage.TransportationEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Ch\u1ec9nh s\u1eeda danh s\u00e1ch v\u1eadn chuy\u1ec3n";
                                            instance.Entity = entity;
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            AddTransportation: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Transportation Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Manage.TransportationEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Th\u00eam m\u1edbi danh s\u00e1ch v\u1eadn chuy\u1ec3n";
                                            instance.Entity = new TMS.API.Models.Transportation();
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            UpdateBetAmount: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "UpdateBetAmount", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Setting.UpdateBetAmountBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Ch\u1ec9nh s\u1eeda s\u1ed1 ti\u1ec1n c\u01b0\u1ee3c h\u00e3ng t\u00e0u";
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            LoadTransportationReport: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    gridView, 
                    gridViewReport, 
                    selecteds, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2], $step);
                                switch ($step) {
                                    case 0: {
                                        gridView = Core.Components.Extensions.ComponentExt.FindComponentByName(Core.Components.GridView, this, "Transportation");
                                        if (gridView == null) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        gridViewReport = Core.Components.Extensions.ComponentExt.FindComponentByName(Core.Components.GridView, this, "TransportationReport");
                                        $task1 = gridView.GetRealTimeSelectedRows();
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        selecteds = System.Linq.Enumerable.from(($taskResult1)).select(function (x) { return Bridge.cast(x, TMS.API.Models.Transportation); }).select(function (x) {
                                            return x.Id;
                                        }).toList(System.Int32);
                                        gridViewReport.DataSourceFilter = System.String.format("?$filter=Active eq true and Id in ({0}) and ShipDate ne null&$orderby=StartShip desc", [Core.Extensions.IEnumerableExtensions.Combine(System.Int32, selecteds)]);
                                        $task2 = gridViewReport.ApplyFilter(true);
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $task2.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            RequestUnClosing: function (transportation, patch) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    tran, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        tran = new TMS.UI.Business.Manage.TransportationListAccountantBL();
                                        $task1 = tran.RequestUnClosing(transportation, patch);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("TMS.UI.Business.Manage.ExtraInsuranceFeesRateBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "MasterData");
                this.Name = "ExtraInsuranceFeesRate List";
            }
        }
    });

    Bridge.define("TMS.UI.Business.Manage.InsuranceFeesBL", {
        inherits: [Core.Components.Forms.TabEditor],
        fields: {
            commodityAwaiter: 0,
            containerId: 0,
            awaiter$1: 0
        },
        props: {
            gridView: null
        },
        ctors: {
            init: function () {
                this.containerId = 0;
            },
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "Expense");
                this.Name = "InsuranceFees List";
            }
        },
        methods: {
            EditInsuranceFees: function (entity) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    gridView, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4], $step);
                                switch ($step) {
                                    case 0: {
                                        gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(null, null);
                                        if (System.String.contains(gridView.Name,"ExpenseIsDelete")) {
                                            $step = 1;
                                            continue;
                                        } else  {
                                            $step = 2;
                                            continue;
                                        }
                                    }
                                    case 1: {
                                        this.ApproveDelete(entity);
                                        $step = 4;
                                        continue;
                                    }
                                    case 2: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "InsuranceFees Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Manage.InsuranceFeesEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Y\u00eau c\u1ea7u thay \u0111\u1ed5i th\u00f4ng tin ph\u00ed b\u1ea3o hi\u1ec3m";
                                            instance.Entity = entity;
                                            return instance;
                                        }, false, false);
                                        $step = 3;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ViewChangeInsuranceFees: function (entity) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "InsuranceFees View Change", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Manage.InsuranceFeesViewChangeBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "L\u1ecbch s\u1eed thay \u0111\u1ed5i";
                                            instance.Entity = entity;
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            UpdateDataFromTransportation: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "InsuranceFees Update Data", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Manage.InsuranceFeesUpdateDataBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "C\u1eadp nh\u1eadt d\u1eef li\u1ec7u";
                                            instance.Entity = new TMS.API.Models.Expense();
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            LockExpense: function () {
                var $step = 0,
                    $task1, 
                    $task2, 
                    $taskResult2, 
                    $task3, 
                    $taskResult3, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    gridView, 
                    listViewItems, 
                    ids, 
                    listExpenses, 
                    checkHistorys, 
                    $t, 
                    item, 
                    expenses, 
                    checkHistory, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.ChangeBackgroudColor();
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(null, null);
                                        listViewItems = System.Linq.Enumerable.from(gridView.RowData.Data).select(function (x) { return Bridge.cast(x, TMS.API.Models.Expense); }).toList(TMS.API.Models.Expense);
                                        if (System.String.contains(gridView.Name,"ExpenseIsDelete")) {
                                            $step = 2;
                                            continue;
                                        } else  {
                                            $step = 3;
                                            continue;
                                        }
                                    }
                                    case 2: {
                                        listViewItems.ForEach(function (x) {
                                            var listViewItem = System.Linq.Enumerable.from(gridView.GetListViewItems(x), Core.Components.ListViewItem).firstOrDefault(null, null);
                                            if (listViewItem == null) {
                                                return;
                                            }
                                            Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, listViewItem.FilterChildren$1(function (y) {
                                                return !y.GuiInfo.Disabled;
                                            }), function (y) {
                                                y.Disabled = false;
                                            });
                                            Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, listViewItem.FilterChildren$1(function (y) {
                                                return !Bridge.referenceEquals(y.GuiInfo.FieldName, "btnRequestChange") && !y.GuiInfo.Disabled;
                                            }), function (y) {
                                                y.Disabled = true;
                                            });
                                        });
                                        $step = 6;
                                        continue;
                                    }
                                    case 3: {
                                        ids = System.Linq.Enumerable.from(listViewItems, TMS.API.Models.Expense).select(function (x) {
                                            return x.Id;
                                        }).toList(System.Int32);
                                        $task2 = new Core.Clients.Client.$ctor1("Expense").GetRawList(TMS.API.Models.Expense, System.String.format("?$filter=Active eq true and IsPurchasedInsurance eq true and Id in ({0}) and StatusId eq {1} and RequestChangeId eq null ", Core.Extensions.IEnumerableExtensions.Combine(System.Int32, ids), Bridge.box(Core.Enums.ApprovalStatusEnum.Approving, System.Int32)));
                                        $step = 4;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        listExpenses = $taskResult2;
                                        $task3 = new Core.Clients.Client.$ctor1("Expense").GetRawList(TMS.API.Models.Expense, System.String.format("?$filter=Active eq true and RequestChangeId in ({0}) and StatusId eq {1}", Core.Extensions.IEnumerableExtensions.Combine(System.Int32, ids), Bridge.box(Core.Enums.ApprovalStatusEnum.New, System.Int32)));
                                        $step = 5;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 5: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        checkHistorys = $taskResult3;
                                        $t = Bridge.getEnumerator(listViewItems);
                                        try {
                                            while ($t.moveNext()) {
                                                item = { v : $t.Current };
                                                expenses = System.Linq.Enumerable.from(listExpenses, TMS.API.Models.Expense).where((function ($me, item) {
                                                    return function (x) {
                                                        return x.Id === item.v.Id;
                                                    };
                                                })(this, item)).toList(TMS.API.Models.Expense);
                                                checkHistory = System.Linq.Enumerable.from(checkHistorys, TMS.API.Models.Expense).where((function ($me, item) {
                                                    return function (x) {
                                                        return System.Nullable.eq(x.RequestChangeId, item.v.Id);
                                                    };
                                                })(this, item)).toList(TMS.API.Models.Expense);
                                                this.UpdateListView(item.v, gridView, expenses, checkHistory);
                                            }
                                        } finally {
                                            if (Bridge.is($t, System.IDisposable)) {
                                                $t.System$IDisposable$Dispose();
                                            }
                                        }
                                        $step = 6;
                                        continue;
                                    }
                                    case 6: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            UpdateListView: function (x, gridView, expenses, checkHistory) {
                var listViewItem = System.Linq.Enumerable.from(gridView.GetListViewItems(x), Core.Components.ListViewItem).firstOrDefault(null, null);
                if (listViewItem == null) {
                    return;
                }
                if (x.IsClosing) {
                    Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, listViewItem.FilterChildren$1(function (y) {
                        return !Bridge.referenceEquals(y.GuiInfo.FieldName, "IsClosing");
                    }), function (y) {
                        y.Disabled = true;
                    });
                } else {
                    if (expenses.Count > 0) {
                        Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, listViewItem.FilterChildren$1(function (y) {
                            return !y.GuiInfo.Disabled;
                        }), function (y) {
                            y.Disabled = true;
                        });
                        Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, listViewItem.FilterChildren$1(function (y) {
                            return Bridge.referenceEquals(y.GuiInfo.FieldName, "btnRequestChange");
                        }), function (y) {
                            y.Disabled = false;
                        });
                    } else {
                        Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, listViewItem.FilterChildren$1(function (y) {
                            return y.GuiInfo.Disabled;
                        }), function (y) {
                            y.Disabled = false;
                        });
                        Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, listViewItem.FilterChildren$1(function (y) {
                            return Bridge.referenceEquals(y.GuiInfo.FieldName, "btnRequestChange");
                        }), function (y) {
                            y.Disabled = true;
                        });
                    }
                }
                if (checkHistory.Count > 0) {
                    Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, listViewItem.FilterChildren$1(function (y) {
                        return Bridge.referenceEquals(y.GuiInfo.FieldName, "btnViewChange") || Bridge.referenceEquals(y.GuiInfo.FieldName, "IsApproveChange") || Bridge.referenceEquals(y.GuiInfo.FieldName, "NotesInsuranceFees");
                    }), function (y) {
                        y.Disabled = false;
                    });
                } else {
                    Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, listViewItem.FilterChildren$1(function (y) {
                        return Bridge.referenceEquals(y.GuiInfo.FieldName, "btnViewChange") || Bridge.referenceEquals(y.GuiInfo.FieldName, "IsApproveChange");
                    }), function (y) {
                        y.Disabled = true;
                    });
                }
            },
            UpdateVATInsuranceFees: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    entity, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = new Core.Clients.Client.$ctor1("MasterData").FirstOrDefaultAsync(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and Id eq 11685", null));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        entity = $taskResult1;
                                        $task2 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "UpdateVATInsuranceFees", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Setting.UpdateVATInsuranceFeesBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Ch\u1ec9nh s\u1eeda VAT ph\u00ed b\u1ea3o hi\u1ec3m";
                                            instance.Entity = entity;
                                            return instance;
                                        }, false, false);
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            UpdateCommodityValue: function (expense) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    commodity, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = new Core.Clients.Client.$ctor1("MasterData").FirstOrDefaultAsync(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and ParentId ne 7651 and contains(Path, '7651') and contains(Description, 'V\u1ecf r\u1ed7ng')", null));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        commodity = $taskResult1;
                                        if (System.Nullable.eq(expense.CommodityId, commodity.Id)) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        window.clearTimeout(this.commodityAwaiter);
                                        this.commodityAwaiter = window.setTimeout(Bridge.fn.bind(this, function () {
                                            var $step = 0,
                                                $task1, 
                                                $jumpFromFinally, 
                                                $asyncBody = Bridge.fn.bind(this, function () {
                                                    for (;;) {
                                                        $step = System.Array.min([0,1], $step);
                                                        switch ($step) {
                                                            case 0: {
                                                                $task1 = this.UpdateCommodityAsync(expense);
                                                                $step = 1;
                                                                if ($task1.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task1.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 1: {
                                                                $task1.getAwaitedResult();
                                                                return;
                                                            }
                                                            default: {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }, arguments);

                                            $asyncBody();
                                        }), 500);
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CheckContainerType: function (expense) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    containerTypes, 
                    containerTypeCodes, 
                    $t, 
                    containerTypeName, 
                    containers, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = new Core.Clients.Client.$ctor1("MasterData").GetRawList(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and ParentId eq 7565", null));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        containerTypes = $taskResult1;
                                        containerTypeCodes = ($t = TMS.API.Models.MasterData, System.Linq.Enumerable.from(containerTypes, $t).toDictionary(function (x) {
                                            return x.Id;
                                        }, null, System.Int32, $t));
                                        containerTypeName = System.Collections.Generic.CollectionExtensions.GetValueOrDefault(System.Int32, TMS.API.Models.MasterData, containerTypeCodes, System.Nullable.getValue(expense.ContainerTypeId));
                                        $task2 = new Core.Clients.Client.$ctor1("MasterData").GetRawList(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and (contains(Name, '40HC') or contains(Name, '20DC') or contains(Name, '45HC') or contains(Name, '50DC'))", null));
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        containers = $taskResult2;
                                        if (System.String.contains(containerTypeName.Description,"Cont 20")) {
                                            this.containerId = containers.Find(function (x) {
                                                return System.String.contains(x.Name,"20DC");
                                            }).Id;
                                        } else if (System.String.contains(containerTypeName.Description,"Cont 40")) {
                                            this.containerId = containers.Find(function (x) {
                                                return System.String.contains(x.Name,"40HC");
                                            }).Id;
                                        } else if (System.String.contains(containerTypeName.Description,"Cont 45")) {
                                            this.containerId = containers.Find(function (x) {
                                                return System.String.contains(x.Name,"45HC");
                                            }).Id;
                                        } else if (System.String.contains(containerTypeName.Description,"Cont 50")) {
                                            this.containerId = containers.Find(function (x) {
                                                return System.String.contains(x.Name,"50DC");
                                            }).Id;
                                        }
                                        $tcs.setResult(this.containerId);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            UpdateCommodityAsync: function (expense) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $task3, 
                    $taskResult3, 
                    $task4, 
                    $task5, 
                    $taskResult5, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    containerId, 
                    commodityValueDB, 
                    boss, 
                    confirm, 
                    $t, 
                    confirm1, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7,8,10], $step);
                                switch ($step) {
                                    case 0: {
                                        if (expense.BossId != null && System.Nullable.gt(expense.BossId, 0) && expense.CommodityId != null && System.Nullable.gt(expense.CommodityId, 0) && expense.ContainerTypeId != null && System.Nullable.gt(expense.ContainerTypeId, 0)) {
                                            $step = 1;
                                            continue;
                                        } 
                                        $step = 10;
                                        continue;
                                    }
                                    case 1: {
                                        $task1 = this.CheckContainerType(expense);
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        containerId = $taskResult1;
                                        $task2 = new Core.Clients.Client.$ctor1("CommodityValue").FirstOrDefaultAsync(TMS.API.Models.CommodityValue, System.String.format("?$filter=Active eq true and BossId eq {0} and CommodityId eq {1} and ContainerId eq {2}", Bridge.box(expense.BossId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), Bridge.box(expense.CommodityId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), Bridge.box(containerId, System.Int32)));
                                        $step = 3;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        commodityValueDB = $taskResult2;
                                        $task3 = new Core.Clients.Client.$ctor1("Vendor").FirstOrDefaultAsync(TMS.API.Models.Vendor, System.String.format("?$filter=Active eq true and Id eq {0}", [Bridge.box(expense.BossId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]));
                                        $step = 4;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        boss = $taskResult3;
                                        if (commodityValueDB == null) {
                                            $step = 5;
                                            continue;
                                        } else  {
                                            $step = 6;
                                            continue;
                                        }
                                    }
                                    case 5: {
                                        confirm = ($t = new Core.Components.Forms.ConfirmDialog(), $t.Content = "B\u1ea1n c\u00f3 mu\u1ed1n l\u01b0u gi\u00e1 tr\u1ecb n\u00e0y v\u00e0o b\u1ea3ng GTHH kh\u00f4ng?", $t);
                                        confirm.Render();
                                        confirm.YesConfirmed = Bridge.fn.combine(confirm.YesConfirmed, Bridge.fn.bind(this, function () {
                                            var $step = 0,
                                                $task1, 
                                                $taskResult1, 
                                                $jumpFromFinally, 
                                                newCommodityValue, 
                                                $asyncBody = Bridge.fn.bind(this, function () {
                                                    for (;;) {
                                                        $step = System.Array.min([0,1], $step);
                                                        switch ($step) {
                                                            case 0: {
                                                                newCommodityValue = this.CreateCommodityValue(expense);
                                                                newCommodityValue.TotalPrice = System.Nullable.getValue(expense.CommodityValue);
                                                                newCommodityValue.SaleId = boss.UserId;
                                                                newCommodityValue.CreatedBy = Core.Clients.Client.Token.UserId;
                                                                $task1 = new Core.Clients.Client.$ctor1("CommodityValue").CreateAsync$1(newCommodityValue);
                                                                $step = 1;
                                                                if ($task1.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task1.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 1: {
                                                                $taskResult1 = $task1.getAwaitedResult();
                                                                return;
                                                            }
                                                            default: {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }, arguments);

                                            $asyncBody();
                                        }));
                                        $step = 9;
                                        continue;
                                    }
                                    case 6: {
                                        if (System.Nullable.liftne("ne", expense.CommodityValue, commodityValueDB.TotalPrice)) {
                                            confirm1 = ($t = new Core.Components.Forms.ConfirmDialog(), $t.Content = "B\u1ea1n c\u00f3 mu\u1ed1n l\u01b0u gi\u00e1 tr\u1ecb n\u00e0y v\u00e0o b\u1ea3ng GTHH kh\u00f4ng?", $t);
                                            confirm1.Render();
                                            confirm1.YesConfirmed = Bridge.fn.combine(confirm1.YesConfirmed, Bridge.fn.bind(this, function () {
                                                var $step = 0,
                                                    $task1, 
                                                    $taskResult1, 
                                                    $task2, 
                                                    $taskResult2, 
                                                    $jumpFromFinally, 
                                                    newCommodityValue, 
                                                    $asyncBody = Bridge.fn.bind(this, function () {
                                                        for (;;) {
                                                            $step = System.Array.min([0,1,2], $step);
                                                            switch ($step) {
                                                                case 0: {
                                                                    commodityValueDB.EndDate = System.DateTime.getDate(System.DateTime.getNow());
                                                                    commodityValueDB.Active = false;
                                                                    $task1 = new Core.Clients.Client.$ctor1("CommodityValue").UpdateAsync$1(commodityValueDB);
                                                                    $step = 1;
                                                                    if ($task1.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task1.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 1: {
                                                                    $taskResult1 = $task1.getAwaitedResult();
                                                                    newCommodityValue = this.CreateCommodityValue(expense);
                                                                    newCommodityValue.TotalPrice = System.Nullable.getValue(expense.CommodityValue);
                                                                    $task2 = new Core.Clients.Client.$ctor1("CommodityValue").CreateAsync$1(newCommodityValue);
                                                                    $step = 2;
                                                                    if ($task2.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task2.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 2: {
                                                                    $taskResult2 = $task2.getAwaitedResult();
                                                                    return;
                                                                }
                                                                default: {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }, arguments);

                                                $asyncBody();
                                            }));
                                        }
                                        $task4 = this.CalcInsuranceFees(expense, false);
                                        $step = 7;
                                        if ($task4.isCompleted()) {
                                            continue;
                                        }
                                        $task4.continue($asyncBody);
                                        return;
                                    }
                                    case 7: {
                                        $task4.getAwaitedResult();
                                        $task5 = new Core.Clients.Client.$ctor1("Expense").PatchAsync(TMS.API.Models.Expense, this.GetPatchEntity(expense));
                                        $step = 8;
                                        if ($task5.isCompleted()) {
                                            continue;
                                        }
                                        $task5.continue($asyncBody);
                                        return;
                                    }
                                    case 8: {
                                        $taskResult5 = $task5.getAwaitedResult();
                                        $step = 9;
                                        continue;
                                    }

                                    case 10: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CreateCommodityValue: function (expense) {
                var startDate1 = System.DateTime.create(System.DateTime.getYear(System.DateTime.getNow()), 1, 1);
                var endDate1 = System.DateTime.create(System.DateTime.getYear(System.DateTime.getNow()), 6, 30);
                var startDate2 = System.DateTime.create(System.DateTime.getYear(System.DateTime.getNow()), 7, 1);
                var endDate2 = System.DateTime.create(System.DateTime.getYear(System.DateTime.getNow()), 12, 31);
                var newCommodityValue = new TMS.API.Models.CommodityValue();
                Core.Extensions.ReflectionExt.CopyPropFrom$1(newCommodityValue, expense);
                newCommodityValue.Id = 0;
                newCommodityValue.ContainerId = this.containerId;
                newCommodityValue.Notes = expense.CommodityValueNotes;
                newCommodityValue.TotalPrice = System.Decimal(0);
                newCommodityValue.Active = true;
                newCommodityValue.CreatedBy = Core.Clients.Client.Token.UserId;
                newCommodityValue.InsertedDate = System.DateTime.getDate(System.DateTime.getNow());
                newCommodityValue.StartDate = System.DateTime.getDate(System.DateTime.getNow());
                if (System.DateTime.gte(System.DateTime.getDate(System.DateTime.getNow()), startDate1) && System.DateTime.lte(System.DateTime.getDate(System.DateTime.getNow()), endDate1)) {
                    newCommodityValue.EndDate = endDate1;
                }
                if (System.DateTime.gte(System.DateTime.getDate(System.DateTime.getNow()), startDate2) && System.DateTime.lte(System.DateTime.getDate(System.DateTime.getNow()), endDate2)) {
                    newCommodityValue.EndDate = endDate2;
                }
                return newCommodityValue;
            },
            CalcInsuranceFees: function (expense, isSOC) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $task3, 
                    $taskResult3, 
                    $task4, 
                    $taskResult4, 
                    $task5, 
                    $taskResult5, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    isSubRatio, 
                    journeyId, 
                    insuranceFeesRateDB, 
                    getContainerType, 
                    insuranceFeesRateColdDB, 
                    extraInsuranceFeesRateDB, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,17,18,19], $step);
                                switch ($step) {
                                    case 0: {
                                        isSubRatio = false;
                                        if (((expense.IsWet || expense.SteamingTerms || expense.BreakTerms) && expense.IsBought === false) || (expense.IsBought && expense.IsWet)) {
                                            isSubRatio = true;
                                        }
                                        journeyId = expense.JourneyId == null ? "" : "and JourneyId eq " + (System.Nullable.toString(expense.JourneyId, null) || "");
                                        insuranceFeesRateDB = null;
                                        if (expense.IsBought) {
                                            $step = 1;
                                            continue;
                                        } else  {
                                            $step = 3;
                                            continue;
                                        }
                                    }
                                    case 1: {
                                        $task1 = new Core.Clients.Client.$ctor1("InsuranceFeesRate").FirstOrDefaultAsync(TMS.API.Models.InsuranceFeesRate, System.String.format("?$filter=Active eq true and TransportationTypeId eq {0} {1} and IsBought eq {2} and IsSOC eq {3} and IsSubRatio eq {4}", Bridge.box(expense.TransportationTypeId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), journeyId, System.Boolean.toString(expense.IsBought).toLowerCase(), System.Boolean.toString(isSOC).toLowerCase(), System.Boolean.toString(isSubRatio).toLowerCase()));
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        insuranceFeesRateDB = $taskResult1;
                                        $step = 5;
                                        continue;
                                    }
                                    case 3: {
                                        $task2 = new Core.Clients.Client.$ctor1("InsuranceFeesRate").FirstOrDefaultAsync(TMS.API.Models.InsuranceFeesRate, System.String.format("?$filter=Active eq true and TransportationTypeId eq {0} {1} and IsBought eq {2} and IsSOC eq {3}", Bridge.box(expense.TransportationTypeId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), journeyId, System.Boolean.toString(expense.IsBought).toLowerCase(), System.Boolean.toString(isSOC).toLowerCase()));
                                        $step = 4;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        insuranceFeesRateDB = $taskResult2;
                                        $step = 5;
                                        continue;
                                    }
                                    case 5: {
                                        if (insuranceFeesRateDB != null) {
                                            $step = 6;
                                            continue;
                                        } else  {
                                            $step = 18;
                                            continue;
                                        }
                                    }
                                    case 6: {
                                        if (System.Nullable.eq(expense.ExpenseTypeId, 15981)) {
                                            $step = 7;
                                            continue;
                                        } else  {
                                            $step = 8;
                                            continue;
                                        }
                                    }
                                    case 7: {
                                        expense.InsuranceFeeRate = insuranceFeesRateDB.Rate;
                                        $step = 17;
                                        continue;
                                    }
                                    case 8: {
                                        $task3 = new Core.Clients.Client.$ctor1("MasterData").FirstOrDefaultAsync(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and Id eq {0}", [Bridge.box(expense.ContainerTypeId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]));
                                        $step = 9;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 9: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        getContainerType = $taskResult3;
                                        if (getContainerType != null && System.String.contains(getContainerType.Description.toLowerCase(),"l\u1ea1nh") && System.Nullable.eq(insuranceFeesRateDB.TransportationTypeId, 11673) && System.Nullable.eq(insuranceFeesRateDB.JourneyId, 12114)) {
                                            $step = 10;
                                            continue;
                                        } else  {
                                            $step = 12;
                                            continue;
                                        }
                                    }
                                    case 10: {
                                        $task4 = new Core.Clients.Client.$ctor1("MasterData").FirstOrDefaultAsync(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and Id eq 25391", null));
                                        $step = 11;
                                        if ($task4.isCompleted()) {
                                            continue;
                                        }
                                        $task4.continue($asyncBody);
                                        return;
                                    }
                                    case 11: {
                                        $taskResult4 = $task4.getAwaitedResult();
                                        insuranceFeesRateColdDB = $taskResult4;
                                        expense.InsuranceFeeRate = insuranceFeesRateColdDB != null ? System.Decimal(insuranceFeesRateColdDB.Name) : System.Decimal(0);
                                        $step = 13;
                                        continue;
                                    }
                                    case 12: {
                                        expense.InsuranceFeeRate = insuranceFeesRateDB.Rate;
                                        $step = 13;
                                        continue;
                                    }
                                    case 13: {
                                        if (insuranceFeesRateDB.IsSubRatio && expense.IsBought === false) {
                                            $step = 14;
                                            continue;
                                        } 
                                        $step = 16;
                                        continue;
                                    }
                                    case 14: {
                                        $task5 = new Core.Clients.Client.$ctor1("MasterData").GetRawList(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and ParentId eq 25374", null));
                                        $step = 15;
                                        if ($task5.isCompleted()) {
                                            continue;
                                        }
                                        $task5.continue($asyncBody);
                                        return;
                                    }
                                    case 15: {
                                        $taskResult5 = $task5.getAwaitedResult();
                                        extraInsuranceFeesRateDB = $taskResult5;
                                        extraInsuranceFeesRateDB.ForEach(function (x) {
                                            var prop = System.Linq.Enumerable.from(Bridge.Reflection.getMembers(Bridge.getType(expense), 16, 28), System.Reflection.PropertyInfo).where(function (y) {
                                                return Bridge.referenceEquals(y.n, x.Name) && System.Boolean.parse(Bridge.toString(Bridge.Reflection.midel(y.g, expense).apply(null, null)));
                                            }).firstOrDefault(null, null);
                                            if (prop != null) {
                                                expense.InsuranceFeeRate = System.Nullable.lift2("add", expense.InsuranceFeeRate, System.Decimal(x.Code));
                                            }
                                        });
                                        $step = 16;
                                        continue;
                                    }

                                    case 17: {
                                        $step = 19;
                                        continue;
                                    }
                                    case 18: {
                                        expense.InsuranceFeeRate = System.Decimal(0);
                                        expense.TotalPriceBeforeTax = System.Decimal(0);
                                        expense.TotalPriceAfterTax = System.Decimal(0);
                                        $step = 19;
                                        continue;
                                    }
                                    case 19: {
                                        if (insuranceFeesRateDB != null && System.Nullable.eq(insuranceFeesRateDB.IsVAT, true)) {
                                            this.CalcInsuranceFeeNoVAT(expense);
                                        } else if (insuranceFeesRateDB != null && System.Nullable.eq(insuranceFeesRateDB.IsVAT, false)) {
                                            this.CalcInsuranceFee(expense);
                                        }
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CalcInsuranceFee: function (expense) {
                expense.TotalPriceBeforeTax = System.Nullable.getValue(expense.InsuranceFeeRate).mul(System.Nullable.getValue(expense.CommodityValue)).div(System.Decimal(100));
                expense.TotalPriceAfterTax = expense.TotalPriceBeforeTax.add(System.Decimal.toDecimalPlaces(expense.TotalPriceBeforeTax.mul(expense.Vat).div(System.Decimal(100)), 0, 6));
            },
            CalcInsuranceFeeNoVAT: function (expense) {
                expense.TotalPriceAfterTax = System.Nullable.getValue(expense.InsuranceFeeRate).mul(System.Nullable.getValue(expense.CommodityValue)).div(System.Decimal(100));
                expense.TotalPriceBeforeTax = System.Decimal.toDecimalPlaces(expense.TotalPriceAfterTax.div(System.Decimal(1.1, 1)), 0, 6);
            },
            UpdateDatePurchasedInsurance: function (expense) {
                var $t, $t1;
                this.gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                        return Bridge.referenceEquals(x.Name, "Expense");
                    }, null);
                var listViewItem = System.Linq.Enumerable.from(this.gridView.GetListViewItems(expense), Core.Components.ListViewItem).firstOrDefault(null, null);
                if (expense.IsPurchasedInsurance) {
                    expense.DatePurchasedInsurance = System.DateTime.getDate(System.DateTime.getNow());
                    listViewItem.UpdateView();
                    ($t = Core.Components.Datepicker, System.Linq.Enumerable.from(listViewItem.FilterChildren(Core.Components.Datepicker, function (x) {
                            return Bridge.referenceEquals(x.GuiInfo.FieldName, "DatePurchasedInsurance");
                        }), $t).toList($t)).ForEach(function (x) {
                        x.Dirty = true;
                    });
                    Core.Extensions.HtmlElementExtension.AddClass(listViewItem.Element, "bg-host");
                } else {
                    var confirm = ($t1 = new Core.Components.Forms.ConfirmDialog(), $t1.Content = "B\u1ea1n c\u00f3 ch\u1eafc ch\u1eafn mu\u1ed1n b\u1ecf mua BH?", $t1);
                    confirm.Render();
                    confirm.YesConfirmed = Bridge.fn.combine(confirm.YesConfirmed, Bridge.fn.bind(this, function () {
                        var $step = 0,
                            $task1, 
                            $taskResult1, 
                            $jumpFromFinally, 
                            $asyncBody = Bridge.fn.bind(this, function () {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            expense.IsPurchasedInsurance = false;
                                            $task1 = new Core.Clients.Client.$ctor1("Expense").PatchAsync(TMS.API.Models.Expense, this.GetPatchIsPurchasedInsuranceEntity(expense), "", "true", false, false);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            listViewItem.UpdateView$1(false, ["IsPurchasedInsurance"]);
                                            Core.Extensions.HtmlElementExtension.RemoveClass(listViewItem.Element, "bg-host");
                                            return;
                                        }
                                        default: {
                                            return;
                                        }
                                    }
                                }
                            }, arguments);

                        $asyncBody();
                    }));
                    confirm.NoConfirmed = Bridge.fn.combine(confirm.NoConfirmed, Bridge.fn.bind(this, function () {
                        var $step = 0,
                            $task1, 
                            $taskResult1, 
                            $jumpFromFinally, 
                            $asyncBody = Bridge.fn.bind(this, function () {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            expense.IsPurchasedInsurance = true;
                                            $task1 = new Core.Clients.Client.$ctor1("Expense").PatchAsync(TMS.API.Models.Expense, this.GetPatchIsPurchasedInsuranceEntity(expense), "", "true", false, false);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            listViewItem.UpdateView$1(false, ["IsPurchasedInsurance"]);
                                            return;
                                        }
                                        default: {
                                            return;
                                        }
                                    }
                                }
                            }, arguments);

                        $asyncBody();
                    }));
                }
            },
            UpdateIsClosing: function (expense) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    listViewItem, 
                    $t, 
                    $t1, 
                    confirm, 
                    $t2, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6], $step);
                                switch ($step) {
                                    case 0: {
                                        this.gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                                            return Bridge.referenceEquals(x.Name, "Expense");
                                        }, null);
                                        listViewItem = System.Linq.Enumerable.from(this.gridView.GetListViewItems(expense), Core.Components.ListViewItem).firstOrDefault(null, null);
                                        if (expense.IsClosing) {
                                            $step = 1;
                                            continue;
                                        } else  {
                                            $step = 5;
                                            continue;
                                        }
                                    }
                                    case 1: {
                                        if (expense.IsPurchasedInsurance === false) {
                                            $step = 2;
                                            continue;
                                        } 
                                        $step = 4;
                                        continue;
                                    }
                                    case 2: {
                                        expense.IsPurchasedInsurance = true;
                                        expense.DatePurchasedInsurance = System.DateTime.getDate(System.DateTime.getNow());
                                        listViewItem.UpdateView();
                                        ($t = Core.Components.Checkbox, System.Linq.Enumerable.from(listViewItem.FilterChildren(Core.Components.Checkbox, function (x) {
                                            return Bridge.referenceEquals(x.GuiInfo.FieldName, "IsPurchasedInsurance");
                                        }), $t).toList($t)).ForEach(function (x) {
                                            x.Dirty = true;
                                        });
                                        ($t1 = Core.Components.Datepicker, System.Linq.Enumerable.from(listViewItem.FilterChildren(Core.Components.Datepicker, function (x) {
                                            return Bridge.referenceEquals(x.GuiInfo.FieldName, "DatePurchasedInsurance");
                                        }), $t1).toList($t1)).ForEach(function (x) {
                                            x.Dirty = true;
                                        });
                                        $task1 = listViewItem.PatchUpdate();
                                        $step = 3;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $task1.getAwaitedResult();
                                        Core.Extensions.HtmlElementExtension.AddClass(listViewItem.Element, "bg-host");
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, listViewItem.FilterChildren$1(function (y) {
                                            return !Bridge.referenceEquals(y.GuiInfo.FieldName, "IsClosing");
                                        }), function (y) {
                                            y.Disabled = true;
                                        });
                                        $step = 6;
                                        continue;
                                    }
                                    case 5: {
                                        confirm = ($t2 = new Core.Components.Forms.ConfirmDialog(), $t2.Content = "B\u1ea1n c\u00f3 ch\u1eafc ch\u1eafn mu\u1ed1n b\u1ecf ch\u1ed1t BH?", $t2);
                                        confirm.Render();
                                        confirm.YesConfirmed = Bridge.fn.combine(confirm.YesConfirmed, Bridge.fn.bind(this, function () {
                                            var $step = 0,
                                                $task1, 
                                                $taskResult1, 
                                                $jumpFromFinally, 
                                                res, 
                                                $asyncBody = Bridge.fn.bind(this, function () {
                                                    for (;;) {
                                                        $step = System.Array.min([0,1], $step);
                                                        switch ($step) {
                                                            case 0: {
                                                                expense.IsClosing = false;
                                                                $task1 = new Core.Clients.Client.$ctor1("Expense").PatchAsync(TMS.API.Models.Expense, this.GetPatchIsClosingEntity(expense), "", "true", false, false);
                                                                $step = 1;
                                                                if ($task1.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task1.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 1: {
                                                                $taskResult1 = $task1.getAwaitedResult();
                                                                res = $taskResult1;
                                                                listViewItem.UpdateView$1(false, ["IsClosing"]);
                                                                return;
                                                            }
                                                            default: {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }, arguments);

                                            $asyncBody();
                                        }));
                                        confirm.NoConfirmed = Bridge.fn.combine(confirm.NoConfirmed, Bridge.fn.bind(this, function () {
                                            var $step = 0,
                                                $task1, 
                                                $taskResult1, 
                                                $jumpFromFinally, 
                                                $asyncBody = Bridge.fn.bind(this, function () {
                                                    for (;;) {
                                                        $step = System.Array.min([0,1], $step);
                                                        switch ($step) {
                                                            case 0: {
                                                                expense.IsClosing = true;
                                                                $task1 = new Core.Clients.Client.$ctor1("Expense").PatchAsync(TMS.API.Models.Expense, this.GetPatchIsClosingEntity(expense), "", "true", false, false);
                                                                $step = 1;
                                                                if ($task1.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task1.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 1: {
                                                                $taskResult1 = $task1.getAwaitedResult();
                                                                listViewItem.UpdateView$1(false, ["IsClosing"]);
                                                                return;
                                                            }
                                                            default: {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }, arguments);

                                            $asyncBody();
                                        }));
                                        $step = 6;
                                        continue;
                                    }
                                    case 6: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ChangeBackgroudColor: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    gridView, 
                    listViewItems, 
                    $t, 
                    item, 
                    listViewItem, 
                    checkHistory, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6], $step);
                                switch ($step) {
                                    case 0: {
                                        gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(null, null);
                                        if (gridView == null) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        listViewItems = System.Linq.Enumerable.from(gridView.RowData.Data).select(function (x) { return Bridge.cast(x, TMS.API.Models.Expense); }).toList(TMS.API.Models.Expense);
                                        $t = Bridge.getEnumerator(listViewItems);
                                        $step = 1;
                                        continue;
                                    }
                                    case 1: {
                                        if ($t.moveNext()) {
                                            item = $t.Current;
                                            $step = 2;
                                            continue;
                                        }
                                        $step = 6;
                                        continue;
                                    }
                                    case 2: {
                                        listViewItem = System.Linq.Enumerable.from(gridView.GetListViewItems(item), Core.Components.ListViewItem).firstOrDefault(null, null);
                                        if (listViewItem == null) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        if (listViewItem != null) {
                                            $step = 3;
                                            continue;
                                        } 
                                        $step = 5;
                                        continue;
                                    }
                                    case 3: {
                                        $task1 = new Core.Clients.Client.$ctor1("Expense").GetRawList(TMS.API.Models.Expense, System.String.format("?$filter=Active eq true and RequestChangeId eq {0} and StatusId eq 2", [Bridge.box(item.Id, System.Int32)]));
                                        $step = 4;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        checkHistory = $taskResult1;
                                        if (checkHistory.Count > 0) {
                                            Core.Extensions.HtmlElementExtension.AddClass(listViewItem.Element, "bg-red1");
                                        } else {
                                            Core.Extensions.HtmlElementExtension.RemoveClass(listViewItem.Element, "bg-red1");
                                        }
                                        if (item.IsPurchasedInsurance) {
                                            Core.Extensions.HtmlElementExtension.AddClass(listViewItem.Element, "bg-host");
                                        } else {
                                            Core.Extensions.HtmlElementExtension.RemoveClass(listViewItem.Element, "bg-host");
                                        }
                                        $step = 5;
                                        continue;
                                    }
                                    case 5: {
                                        $step = 1;
                                        continue;
                                    }
                                    case 6: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            SetPurchasedForExpenses: function () {
                var $t, $t1;
                var gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                        return Bridge.referenceEquals(x.GuiInfo.FieldName, "Expense");
                    }, null);
                if (gridView == null) {
                    return;
                }
                var ids = ($t = System.Int32, System.Linq.Enumerable.from(gridView.SelectedIds, $t).toList($t));
                var expenses = System.Linq.Enumerable.from(gridView.GetSelectedRows()).select(function (x) { return Bridge.cast(x, TMS.API.Models.Expense); }).toList(TMS.API.Models.Expense);
                var listViewItems = System.Linq.Enumerable.from(expenses, TMS.API.Models.Expense).where(function (x) {
                        return x.IsPurchasedInsurance === false;
                    }).toList(TMS.API.Models.Expense);
                if (listViewItems.Count <= 0) {
                    Core.Extensions.Toast.Warning("B\u1ea1n ch\u01b0a ch\u1ecdn d\u1eef li\u1ec7u");
                    return;
                }
                var confirm = ($t1 = new Core.Components.Forms.ConfirmDialog(), $t1.Content = "B\u1ea1n c\u00f3 ch\u1eafc ch\u1eafn mu\u1ed1n mua BH cho " + System.Linq.Enumerable.from(listViewItems, TMS.API.Models.Expense).count() + " Cont ?", $t1);
                confirm.Render();
                confirm.YesConfirmed = Bridge.fn.combine(confirm.YesConfirmed, Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $task2, 
                        $jumpFromFinally, 
                        res, 
                        $t2, 
                        item, 
                        listViewItem, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = new Core.Clients.Client.$ctor1("Expense").PostAsync(System.Boolean, ids, "PurchasedInsuranceFees");
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        res = $taskResult1;
                                        if (res) {
                                            $step = 2;
                                            continue;
                                        } else  {
                                            $step = 4;
                                            continue;
                                        }
                                    }
                                    case 2: {
                                        $task2 = gridView.ApplyFilter(true);
                                        $step = 3;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $task2.getAwaitedResult();
                                        $t2 = Bridge.getEnumerator(listViewItems);
                                        try {
                                            while ($t2.moveNext()) {
                                                item = $t2.Current;
                                                listViewItem = System.Linq.Enumerable.from(gridView.GetListViewItems(item), Core.Components.ListViewItem).firstOrDefault(null, null);
                                                if (listViewItem != null) {
                                                    Core.Extensions.HtmlElementExtension.AddClass(listViewItem.Element, "bg-host");
                                                }
                                            }
                                        } finally {
                                            if (Bridge.is($t2, System.IDisposable)) {
                                                $t2.System$IDisposable$Dispose();
                                            }
                                        }
                                        Core.Extensions.Toast.Success("\u0110\u00e3 c\u1eadp nh\u1eadt th\u00e0nh c\u00f4ng");
                                        $step = 5;
                                        continue;
                                    }
                                    case 4: {
                                        Core.Extensions.Toast.Warning("\u0110\u00e3 c\u00f3 l\u1ed7i x\u1ea3y ra");
                                        $step = 5;
                                        continue;
                                    }
                                    case 5: {
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }));
            },
            SetClosingForExpenses: function () {
                var $t, $t1;
                var gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                        return Bridge.referenceEquals(x.GuiInfo.FieldName, "Expense");
                    }, null);
                if (gridView == null) {
                    return;
                }
                var ids = ($t = System.Int32, System.Linq.Enumerable.from(gridView.SelectedIds, $t).toList($t));
                var expenses = System.Linq.Enumerable.from(gridView.GetSelectedRows()).select(function (x) { return Bridge.cast(x, TMS.API.Models.Expense); }).toList(TMS.API.Models.Expense);
                var listViewItems = System.Linq.Enumerable.from(expenses, TMS.API.Models.Expense).where(function (x) {
                        return x.IsClosing === false;
                    }).toList(TMS.API.Models.Expense);
                if (listViewItems.Count <= 0) {
                    Core.Extensions.Toast.Warning("B\u1ea1n ch\u01b0a ch\u1ecdn d\u1eef li\u1ec7u");
                    return;
                }
                var confirm = ($t1 = new Core.Components.Forms.ConfirmDialog(), $t1.Content = "B\u1ea1n c\u00f3 ch\u1eafc ch\u1eafn mu\u1ed1n ch\u1ed1t BH cho " + System.Linq.Enumerable.from(listViewItems, TMS.API.Models.Expense).count() + " Cont ?", $t1);
                confirm.Render();
                confirm.YesConfirmed = Bridge.fn.combine(confirm.YesConfirmed, Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $task2, 
                        $jumpFromFinally, 
                        res, 
                        $t2, 
                        item, 
                        listViewItem, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = new Core.Clients.Client.$ctor1("Expense").PostAsync(System.Boolean, expenses, "ClosingInsuranceFees");
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        res = $taskResult1;
                                        if (res) {
                                            $step = 2;
                                            continue;
                                        } else  {
                                            $step = 4;
                                            continue;
                                        }
                                    }
                                    case 2: {
                                        $task2 = gridView.ApplyFilter(true);
                                        $step = 3;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $task2.getAwaitedResult();
                                        $t2 = Bridge.getEnumerator(listViewItems);
                                        try {
                                            while ($t2.moveNext()) {
                                                item = $t2.Current;
                                                listViewItem = System.Linq.Enumerable.from(gridView.GetListViewItems(item), Core.Components.ListViewItem).firstOrDefault(null, null);
                                                if (listViewItem != null) {
                                                    Core.Extensions.HtmlElementExtension.AddClass(listViewItem.Element, "bg-host");
                                                }
                                            }
                                        } finally {
                                            if (Bridge.is($t2, System.IDisposable)) {
                                                $t2.System$IDisposable$Dispose();
                                            }
                                        }
                                        Core.Extensions.Toast.Success("\u0110\u00e3 c\u1eadp nh\u1eadt th\u00e0nh c\u00f4ng");
                                        $step = 5;
                                        continue;
                                    }
                                    case 4: {
                                        Core.Extensions.Toast.Warning("\u0110\u00e3 c\u00f3 l\u1ed7i x\u1ea3y ra");
                                        $step = 5;
                                        continue;
                                    }
                                    case 5: {
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }));
            },
            ApproveDelete: function (expense) {
                var $t;
                var confirm = ($t = new Core.Components.Forms.ConfirmDialog(), $t.Content = "B\u1ea1n c\u00f3 ch\u1eafc ch\u1eafn duy\u1ec7t y\u00eau c\u1ea7u h\u1ee7y ?", $t);
                confirm.Render();
                confirm.YesConfirmed = Bridge.fn.combine(confirm.YesConfirmed, Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $task2, 
                        $taskResult2, 
                        $task3, 
                        $taskResult3, 
                        $jumpFromFinally, 
                        transportation, 
                        expenses, 
                        $t1, 
                        x, 
                        confirmDel, 
                        $t2, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7,8,9], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = new Core.Clients.Client.$ctor1("Transportation").FirstOrDefaultAsync(TMS.API.Models.Transportation, System.String.format("?$filter=Active eq true and Id eq {0}", [Bridge.box(expense.TransportationId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        transportation = $taskResult1;
                                        $task2 = new Core.Clients.Client.$ctor1("Expense").GetRawList(TMS.API.Models.Expense, System.String.format("?$filter=Active eq true and TransportationId eq {0} and RequestChangeId eq null", [Bridge.box(expense.TransportationId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]));
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        expenses = $taskResult2;
                                        $t1 = Bridge.getEnumerator(expenses);
                                        $step = 3;
                                        continue;
                                    }
                                    case 3: {
                                        if ($t1.moveNext()) {
                                            x = { v : $t1.Current };
                                            $step = 4;
                                            continue;
                                        }
                                        $step = 9;
                                        continue;
                                    }
                                    case 4: {
                                        if (x.v.IsClosing && x.v.IsPurchasedInsurance) {
                                            $step = 5;
                                            continue;
                                        } else  {
                                            $step = 6;
                                            continue;
                                        }
                                    }
                                    case 5: {
                                        confirmDel = ($t2 = new Core.Components.Forms.ConfirmDialog(), $t2.Content = "\u0110\u00e3 c\u00f3 ph\u00ed BH \u0111\u01b0\u1ee3c mua v\u00e0 ch\u1ed1t, b\u1ea1n c\u00f3 mu\u1ed1n ti\u1ebfp t\u1ee5c duy\u1ec7t v\u00e0 t\u00ecm cont thay th\u1ebf kh\u00f4ng ?", $t2);
                                        confirmDel.Render();
                                        confirmDel.YesConfirmed = Bridge.fn.combine(confirmDel.YesConfirmed, (function ($me, x) {
                                            return Bridge.fn.bind($me, function () {
                                                var $step = 0,
                                                    $task1, 
                                                    $taskResult1, 
                                                    $task2, 
                                                    $taskResult2, 
                                                    $task3, 
                                                    $taskResult3, 
                                                    $jumpFromFinally, 
                                                    saleFilter, 
                                                    findReplace, 
                                                    selectExpenseReplace, 
                                                    expenseReplace, 
                                                    confirmReplace, 
                                                    $t3, 
                                                    $asyncBody = Bridge.fn.bind(this, function () {
                                                        for (;;) {
                                                            $step = System.Array.min([0,1,2,3,4,5,6,7,8], $step);
                                                            switch ($step) {
                                                                case 0: {
                                                                    if (x.v.TransportationTypeId == null || x.v.CustomerTypeId == null || x.v.JourneyId == null) {
                                                                        Core.Extensions.Toast.Warning("Kh\u00f4ng t\u00ecm th\u1ea5y cont ph\u00f9 h\u1ee3p!");
                                                                    }
                                                                    saleFilter = x.v.SaleId == null ? "" : System.String.format("and SaleId eq {0}", [Bridge.box(x.v.SaleId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]);
                                                                    $task1 = new Core.Clients.Client.$ctor1("Expense").GetRawList(TMS.API.Models.Expense, System.String.format("?$filter=Active eq true and IsPurchasedInsurance eq false and TransportationTypeId eq {0} and IsWet eq {1} and IsBought eq {2} and JourneyId eq {3} and CustomerTypeId eq {4} {5} and Id ne {6}", Bridge.box(x.v.TransportationTypeId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), System.Boolean.toString(x.v.IsWet).toLowerCase(), System.Boolean.toString(x.v.IsBought).toLowerCase(), Bridge.box(x.v.JourneyId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), Bridge.box(x.v.CustomerTypeId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), saleFilter, Bridge.box(x.v.Id, System.Int32)));
                                                                    $step = 1;
                                                                    if ($task1.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task1.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 1: {
                                                                    $taskResult1 = $task1.getAwaitedResult();
                                                                    findReplace = $taskResult1;
                                                                    if (findReplace == null) {
                                                                        $step = 2;
                                                                        continue;
                                                                    } 
                                                                    $step = 4;
                                                                    continue;
                                                                }
                                                                case 2: {
                                                                    $task2 = new Core.Clients.Client.$ctor1("Expense").GetRawList(TMS.API.Models.Expense, System.String.format("?$filter=Active eq true and IsPurchasedInsurance eq false and TransportationTypeId eq {0} and IsWet eq {1} and IsBought eq {2} and JourneyId eq {3} and CustomerTypeId eq {4} and Id ne {5}", Bridge.box(x.v.TransportationTypeId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), System.Boolean.toString(x.v.IsWet).toLowerCase(), System.Boolean.toString(x.v.IsBought).toLowerCase(), Bridge.box(x.v.JourneyId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), Bridge.box(x.v.CustomerTypeId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), Bridge.box(x.v.Id, System.Int32)));
                                                                    $step = 3;
                                                                    if ($task2.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task2.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 3: {
                                                                    $taskResult2 = $task2.getAwaitedResult();
                                                                    findReplace = $taskResult2;
                                                                    $step = 4;
                                                                    continue;
                                                                }
                                                                case 4: {
                                                                    if (findReplace.Count <= 0) {
                                                                        $step = 5;
                                                                        continue;
                                                                    } else  {
                                                                        $step = 6;
                                                                        continue;
                                                                    }
                                                                }
                                                                case 5: {
                                                                    Core.Extensions.Toast.Warning("Kh\u00f4ng t\u00ecm th\u1ea5y cont ph\u00f9 h\u1ee3p!");
                                                                    $step = 8;
                                                                    continue;
                                                                }
                                                                case 6: {
                                                                    selectExpenseReplace = System.Linq.Enumerable.from(findReplace, TMS.API.Models.Expense).orderBy(function (item) {
                                                                        return Math.abs(((System.Decimal.toInt(System.Nullable.getValue(x.v.CommodityValue), System.Int32) - System.Decimal.toInt(System.Nullable.getValue(item.CommodityValue), System.Int32)) | 0));
                                                                    }).firstOrDefault(null, null);
                                                                    $task3 = new Core.Clients.Client.$ctor1("Expense").FirstOrDefaultAsync(TMS.API.Models.Expense, System.String.format("?$filter=Active eq true and Id eq {0}", [Bridge.box(selectExpenseReplace.Id, System.Int32)]));
                                                                    $step = 7;
                                                                    if ($task3.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task3.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 7: {
                                                                    $taskResult3 = $task3.getAwaitedResult();
                                                                    expenseReplace = $taskResult3;
                                                                    confirmReplace = ($t3 = new Core.Components.Forms.ConfirmDialog(), $t3.Content = (System.String.format("\u0110\u00e3 t\u00ecm th\u1ea5y cont Id: {0} c\u00f3 GTHH ", [Bridge.box(expenseReplace.Id, System.Int32)]) || "") + (Bridge.Int.format(System.Decimal(expenseReplace.CommodityValue.toString()), "N0") || "") + ". B\u1ea1n c\u00f3 mu\u1ed1n thay th\u1ebf kh\u00f4ng?", $t3);
                                                                    confirmReplace.Render();
                                                                    confirmReplace.YesConfirmed = Bridge.fn.combine(confirmReplace.YesConfirmed, Bridge.fn.bind(this, function () {
                                                                        var $step = 0,
                                                                            $task1, 
                                                                            $taskResult1, 
                                                                            $task2, 
                                                                            $taskResult2, 
                                                                            $task3, 
                                                                            $taskResult3, 
                                                                            $task4, 
                                                                            $taskResult4, 
                                                                            $task5, 
                                                                            $taskResult5, 
                                                                            $task6, 
                                                                            $taskResult6, 
                                                                            $task7, 
                                                                            $taskResult7, 
                                                                            $jumpFromFinally, 
                                                                            bossName, 
                                                                            commodityName, 
                                                                            saleName, 
                                                                            note1, 
                                                                            note2, 
                                                                            note3, 
                                                                            note4, 
                                                                            note5, 
                                                                            resUpdate, 
                                                                            res, 
                                                                            check, 
                                                                            resTr, 
                                                                            $asyncBody = Bridge.fn.bind(this, function () {
                                                                                for (;;) {
                                                                                    $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,10,12,13,14], $step);
                                                                                    switch ($step) {
                                                                                        case 0: {
                                                                                            expenseReplace.IsPurchasedInsurance = true;
                                                                                            expenseReplace.DatePurchasedInsurance = x.v.DatePurchasedInsurance;
                                                                                            $task1 = new Core.Clients.Client.$ctor1("Vendor").FirstOrDefaultAsync(TMS.API.Models.Vendor, System.String.format("?$filter=Active eq true and Id eq {0}", [Bridge.box(x.v.BossId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]));
                                                                                            $step = 1;
                                                                                            if ($task1.isCompleted()) {
                                                                                                continue;
                                                                                            }
                                                                                            $task1.continue($asyncBody);
                                                                                            return;
                                                                                        }
                                                                                        case 1: {
                                                                                            $taskResult1 = $task1.getAwaitedResult();
                                                                                            bossName = $taskResult1;
                                                                                            $task2 = new Core.Clients.Client.$ctor1("MasterData").FirstOrDefaultAsync(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and Id eq {0}", [Bridge.box(x.v.CommodityId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]));
                                                                                            $step = 2;
                                                                                            if ($task2.isCompleted()) {
                                                                                                continue;
                                                                                            }
                                                                                            $task2.continue($asyncBody);
                                                                                            return;
                                                                                        }
                                                                                        case 2: {
                                                                                            $taskResult2 = $task2.getAwaitedResult();
                                                                                            commodityName = $taskResult2;
                                                                                            $task3 = new Core.Clients.Client.$ctor1("User").FirstOrDefaultAsync(TMS.API.Models.User, System.String.format("?$filter=Active eq true and Id eq {0}", [Bridge.box(x.v.CommodityId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]));
                                                                                            $step = 3;
                                                                                            if ($task3.isCompleted()) {
                                                                                                continue;
                                                                                            }
                                                                                            $task3.continue($asyncBody);
                                                                                            return;
                                                                                        }
                                                                                        case 3: {
                                                                                            $taskResult3 = $task3.getAwaitedResult();
                                                                                            saleName = $taskResult3;
                                                                                            note1 = Bridge.equals(x.v.StartShip, null) ? "" : System.DateTime.format(System.DateTime.getDate(System.Nullable.getValue(x.v.StartShip)), "dd/MM/yyyy");
                                                                                            note2 = bossName == null ? "" : bossName.Name;
                                                                                            note3 = commodityName == null ? "" : commodityName.Description;
                                                                                            note4 = saleName == null ? "" : saleName.FullName;
                                                                                            note5 = Bridge.equals(x.v.DatePurchasedInsurance, null) ? "" : System.DateTime.format(System.DateTime.getDate(System.Nullable.getValue(x.v.DatePurchasedInsurance)), "dd/MM/yyyy");
                                                                                            expenseReplace.NotesInsuranceFees = (System.String.format("Thay th\u1ebf cont b\u1ecb h\u1ee7y: Id: {0}, \u0111\u00f3ng ng\u00e0y: ", [Bridge.box(x.v.Id, System.Int32)]) || "") + (note1 || "") + ", ch\u1ee7 h\u00e0ng: " + (note2 || "") + ", v\u1eadt t\u01b0: " + (note3 || "") + ", sale: " + (note4 || "") + ", mua ng\u00e0y: " + (note5 || "");
                                                                                            $task4 = new Core.Clients.Client.$ctor1("Expense").UpdateAsync(TMS.API.Models.Expense, expenseReplace);
                                                                                            $step = 4;
                                                                                            if ($task4.isCompleted()) {
                                                                                                continue;
                                                                                            }
                                                                                            $task4.continue($asyncBody);
                                                                                            return;
                                                                                        }
                                                                                        case 4: {
                                                                                            $taskResult4 = $task4.getAwaitedResult();
                                                                                            resUpdate = $taskResult4;
                                                                                            if (resUpdate != null) {
                                                                                                $step = 5;
                                                                                                continue;
                                                                                            } else  {
                                                                                                $step = 13;
                                                                                                continue;
                                                                                            }
                                                                                        }
                                                                                        case 5: {
                                                                                            Core.Extensions.Toast.Success("Thay th\u1ebf th\u00e0nh c\u00f4ng!");
                                                                                            $task5 = new Core.Clients.Client.$ctor1("Expense").HardDeleteAsync$1(x.v.Id);
                                                                                            $step = 6;
                                                                                            if ($task5.isCompleted()) {
                                                                                                continue;
                                                                                            }
                                                                                            $task5.continue($asyncBody);
                                                                                            return;
                                                                                        }
                                                                                        case 6: {
                                                                                            $taskResult5 = $task5.getAwaitedResult();
                                                                                            res = $taskResult5;
                                                                                            if (res) {
                                                                                                $step = 7;
                                                                                                continue;
                                                                                            } 
                                                                                            $step = 12;
                                                                                            continue;
                                                                                        }
                                                                                        case 7: {
                                                                                            $task6 = new Core.Clients.Client.$ctor1("Expense").GetRawList(TMS.API.Models.Expense, System.String.format("?$filter=Active eq true and TransportationId eq {0} and RequestChangeId eq null", [Bridge.box(expense.TransportationId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]));
                                                                                            $step = 8;
                                                                                            if ($task6.isCompleted()) {
                                                                                                continue;
                                                                                            }
                                                                                            $task6.continue($asyncBody);
                                                                                            return;
                                                                                        }
                                                                                        case 8: {
                                                                                            $taskResult6 = $task6.getAwaitedResult();
                                                                                            check = $taskResult6;
                                                                                            if (check.Count <= 0) {
                                                                                                $step = 9;
                                                                                                continue;
                                                                                            } 
                                                                                            $step = 11;
                                                                                            continue;
                                                                                        }
                                                                                        case 9: {
                                                                                            $task7 = new Core.Clients.Client.$ctor1("Transportation").HardDeleteAsync$1(transportation.Id);
                                                                                            $step = 10;
                                                                                            if ($task7.isCompleted()) {
                                                                                                continue;
                                                                                            }
                                                                                            $task7.continue($asyncBody);
                                                                                            return;
                                                                                        }
                                                                                        case 10: {
                                                                                            $taskResult7 = $task7.getAwaitedResult();
                                                                                            resTr = $taskResult7;
                                                                                            if (resTr) {
                                                                                                Core.Extensions.Toast.Success("H\u1ee7y th\u00e0nh c\u00f4ng");
                                                                                            } else {
                                                                                                Core.Extensions.Toast.Warning("\u0110\u00e3 x\u1ea3y ra l\u1ed7i trong qu\u00e1 tr\u00ecnh x\u1eed l\u00fd.");
                                                                                            }
                                                                                            $step = 11;
                                                                                            continue;
                                                                                        }

                                                                                        case 12: {
                                                                                            $step = 14;
                                                                                            continue;
                                                                                        }
                                                                                        case 13: {
                                                                                            Core.Extensions.Toast.Warning("\u0110\u00e3 x\u1ea3y ra l\u1ed7i trong qu\u00e1 tr\u00ecnh x\u1eed l\u00fd.");
                                                                                            $step = 14;
                                                                                            continue;
                                                                                        }
                                                                                        case 14: {
                                                                                            return;
                                                                                        }
                                                                                        default: {
                                                                                            return;
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }, arguments);

                                                                        $asyncBody();
                                                                    }));
                                                                    $step = 8;
                                                                    continue;
                                                                }
                                                                case 8: {
                                                                    return;
                                                                }
                                                                default: {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }, arguments);

                                                $asyncBody();
                                            });
                                        })(this, x));
                                        $step = 8;
                                        continue;
                                    }
                                    case 6: {
                                        $task3 = new Core.Clients.Client.$ctor1("Expense").HardDeleteAsync$1(x.v.Id);
                                        $step = 7;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 7: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        $step = 8;
                                        continue;
                                    }
                                    case 8: {
                                        $step = 3;
                                        continue;
                                    }
                                    case 9: {
                                        window.clearTimeout(this.awaiter$1);
                                        this.awaiter$1 = window.setTimeout(Bridge.fn.bind(this, function () {
                                            var $step = 0,
                                                $task1, 
                                                $taskResult1, 
                                                $task2, 
                                                $taskResult2, 
                                                $jumpFromFinally, 
                                                check, 
                                                resTr, 
                                                $asyncBody = Bridge.fn.bind(this, function () {
                                                    for (;;) {
                                                        $step = System.Array.min([0,1,2,3,4], $step);
                                                        switch ($step) {
                                                            case 0: {
                                                                $task1 = new Core.Clients.Client.$ctor1("Expense").GetRawList(TMS.API.Models.Expense, System.String.format("?$filter=Active eq true and TransportationId eq {0} and RequestChangeId eq null", [Bridge.box(expense.TransportationId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]));
                                                                $step = 1;
                                                                if ($task1.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task1.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 1: {
                                                                $taskResult1 = $task1.getAwaitedResult();
                                                                check = $taskResult1;
                                                                if (check.Count <= 0) {
                                                                    $step = 2;
                                                                    continue;
                                                                } 
                                                                $step = 4;
                                                                continue;
                                                            }
                                                            case 2: {
                                                                $task2 = new Core.Clients.Client.$ctor1("Transportation").HardDeleteAsync$1(transportation.Id);
                                                                $step = 3;
                                                                if ($task2.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task2.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 3: {
                                                                $taskResult2 = $task2.getAwaitedResult();
                                                                resTr = $taskResult2;
                                                                if (resTr) {
                                                                    Core.Extensions.Toast.Success("H\u1ee7y th\u00e0nh c\u00f4ng");
                                                                } else {
                                                                    Core.Extensions.Toast.Warning("\u0110\u00e3 x\u1ea3y ra l\u1ed7i trong qu\u00e1 tr\u00ecnh x\u1eed l\u00fd.");
                                                                }
                                                                $step = 4;
                                                                continue;
                                                            }
                                                            case 4: {
                                                                return;
                                                            }
                                                            default: {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }, arguments);

                                            $asyncBody();
                                        }), 1000);
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }));
            },
            ExportCheckChange: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    gridView, 
                    listViewItems, 
                    $t, 
                    path, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                                            return Bridge.referenceEquals(x.GuiInfo.RefName, "Expense");
                                        }, null);
                                        if (gridView == null) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        listViewItems = ($t = System.Int32, System.Linq.Enumerable.from(gridView.SelectedIds, $t).toList($t));
                                        if (listViewItems.Count <= 0) {
                                            Core.Extensions.Toast.Warning("B\u1ea1n ch\u01b0a ch\u1ecdn d\u1eef li\u1ec7u");
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        $task1 = new Core.Clients.Client.$ctor1("Expense").PostAsync(System.String, listViewItems, "ExportCheckChange");
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        path = $taskResult1;
                                        Core.Clients.Client.Download(System.String.format("/excel/Download/{0}", [path]));
                                        Core.Extensions.Toast.Success("Xu\u1ea5t file th\u00e0nh c\u00f4ng");
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            BeforePatchUpdate: function (entity, patch) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $task3, 
                    $taskResult3, 
                    $task4, 
                    $taskResult4, 
                    $task5, 
                    $taskResult5, 
                    $task6, 
                    $taskResult6, 
                    $task7, 
                    $task8, 
                    $task9, 
                    $taskResult9, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    oldEntity, 
                    expenseTypes, 
                    check, 
                    tran, 
                    expenseType, 
                    expenseTypeSOC, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,7,8,9,10,11,12,13,14,15,16,17,19,20,21], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = new Core.Clients.Client.$ctor1("Expense").FirstOrDefaultAsync(TMS.API.Models.Expense, System.String.format("?$filter=Active eq true and Id eq {0}", [Bridge.box(entity.Id, System.Int32)]));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        oldEntity = $taskResult1;
                                        if (System.Linq.Enumerable.from(patch.Changes, Core.ViewModels.PatchUpdateDetail).any(function (x) {
                                            return Bridge.referenceEquals(x.Field, "ExpenseTypeId");
                                        }) && (System.Nullable.neq(oldEntity.ExpenseTypeId, entity.ExpenseTypeId))) {
                                            $step = 2;
                                            continue;
                                        } 
                                        $step = 7;
                                        continue;
                                    }
                                    case 2: {
                                        $task2 = new Core.Clients.Client.$ctor1("MasterData").GetRawList(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and ParentId eq 7577 and (contains(Name,'B\u1ea3o hi\u1ec3m') or contains(Name,'BH SOC'))", null));
                                        $step = 3;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        expenseTypes = $taskResult2;
                                        if (System.Linq.Enumerable.from(expenseTypes, TMS.API.Models.MasterData).where(function (x) {
                                            return System.Nullable.eq(x.Id, entity.ExpenseTypeId);
                                        }).any()) {
                                            $step = 4;
                                            continue;
                                        } 
                                        $step = 6;
                                        continue;
                                    }
                                    case 4: {
                                        $task3 = new Core.Clients.Client.$ctor1("Expense").FirstOrDefaultAsync(TMS.API.Models.Expense, System.String.format("?$filter=Active eq true and TransportationId eq {0} and ExpenseTypeId eq {1} and RequestChangeId eq null", Bridge.box(entity.TransportationId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), Bridge.box(entity.ExpenseTypeId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)));
                                        $step = 5;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 5: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        check = $taskResult3;
                                        if (check != null && entity.RequestChangeId == null) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        $step = 6;
                                        continue;
                                    }

                                    case 7: {
                                        if (System.Linq.Enumerable.from(patch.Changes, Core.ViewModels.PatchUpdateDetail).any(function (x) {
                                            return Bridge.referenceEquals(x.Field, "IsWet") || Bridge.referenceEquals(x.Field, "SteamingTerms") || Bridge.referenceEquals(x.Field, "BreakTerms");
                                        }) && (oldEntity.IsWet !== entity.IsWet) || (oldEntity.SteamingTerms !== entity.SteamingTerms) || (oldEntity.BreakTerms !== entity.BreakTerms)) {
                                            if (entity.IsWet && entity.SteamingTerms && entity.BreakTerms) {
                                                $tcs.setResult(null);
                                                return;
                                            }
                                        }
                                        if (System.Linq.Enumerable.from(patch.Changes, Core.ViewModels.PatchUpdateDetail).any(function (x) {
                                            return Bridge.referenceEquals(x.Field, "TransportationTypeId") || Bridge.referenceEquals(x.Field, "JourneyId") || Bridge.referenceEquals(x.Field, "IsWet") || Bridge.referenceEquals(x.Field, "SteamingTerms") || Bridge.referenceEquals(x.Field, "BreakTerms") || Bridge.referenceEquals(x.Field, "IsBought");
                                        }) && (System.Nullable.neq(oldEntity.TransportationTypeId, entity.TransportationTypeId)) || (System.Nullable.neq(oldEntity.JourneyId, entity.JourneyId)) || (oldEntity.IsWet !== entity.IsWet) || (oldEntity.SteamingTerms !== entity.SteamingTerms) || (oldEntity.BreakTerms !== entity.BreakTerms) || (oldEntity.IsBought !== entity.IsBought)) {
                                            $step = 8;
                                            continue;
                                        } 
                                        $step = 21;
                                        continue;
                                    }
                                    case 8: {
                                        $task4 = new Core.Clients.Client.$ctor1("Transportation").FirstOrDefaultAsync(TMS.API.Models.Transportation, System.String.format("?$filter=Active eq true and Id eq {0}", [Bridge.box(entity.TransportationId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]));
                                        $step = 9;
                                        if ($task4.isCompleted()) {
                                            continue;
                                        }
                                        $task4.continue($asyncBody);
                                        return;
                                    }
                                    case 9: {
                                        $taskResult4 = $task4.getAwaitedResult();
                                        tran = $taskResult4;
                                        $task5 = new Core.Clients.Client.$ctor1("MasterData").FirstOrDefaultAsync(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and ParentId eq 7577 and contains(Name,'B\u1ea3o hi\u1ec3m')", null));
                                        $step = 10;
                                        if ($task5.isCompleted()) {
                                            continue;
                                        }
                                        $task5.continue($asyncBody);
                                        return;
                                    }
                                    case 10: {
                                        $taskResult5 = $task5.getAwaitedResult();
                                        expenseType = $taskResult5;
                                        $task6 = new Core.Clients.Client.$ctor1("MasterData").FirstOrDefaultAsync(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and ParentId eq 7577 and contains(Name,'BH SOC')", null));
                                        $step = 11;
                                        if ($task6.isCompleted()) {
                                            continue;
                                        }
                                        $task6.continue($asyncBody);
                                        return;
                                    }
                                    case 11: {
                                        $taskResult6 = $task6.getAwaitedResult();
                                        expenseTypeSOC = $taskResult6;
                                        if (System.Nullable.eq(entity.ExpenseTypeId, expenseType.Id)) {
                                            $step = 12;
                                            continue;
                                        } else  {
                                            $step = 14;
                                            continue;
                                        }
                                    }
                                    case 12: {
                                        this.SetWetAndJourneyForExpense(entity, tran);
                                        $task7 = this.CalcInsuranceFees(entity, false);
                                        $step = 13;
                                        if ($task7.isCompleted()) {
                                            continue;
                                        }
                                        $task7.continue($asyncBody);
                                        return;
                                    }
                                    case 13: {
                                        $task7.getAwaitedResult();
                                        $step = 19;
                                        continue;
                                    }
                                    case 14: {
                                        if (System.Nullable.eq(entity.ExpenseTypeId, expenseTypeSOC.Id)) {
                                            $step = 15;
                                            continue;
                                        } else  {
                                            $step = 17;
                                            continue;
                                        }
                                    }
                                    case 15: {
                                        $task8 = this.CalcInsuranceFees(entity, true);
                                        $step = 16;
                                        if ($task8.isCompleted()) {
                                            continue;
                                        }
                                        $task8.continue($asyncBody);
                                        return;
                                    }
                                    case 16: {
                                        $task8.getAwaitedResult();
                                        $step = 18;
                                        continue;
                                    }
                                    case 17: {
                                        $tcs.setResult(null);
                                        return;
                                    }

                                    case 19: {
                                        $task9 = new Core.Clients.Client.$ctor1("Expense").UpdateAsync(TMS.API.Models.Expense, entity);
                                        $step = 20;
                                        if ($task9.isCompleted()) {
                                            continue;
                                        }
                                        $task9.continue($asyncBody);
                                        return;
                                    }
                                    case 20: {
                                        $taskResult9 = $task9.getAwaitedResult();
                                        $step = 21;
                                        continue;
                                    }
                                    case 21: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            SetWetAndJourneyForExpense: function (expense, transportation) {
                if (expense.TransportationTypeId != null) {
                    if (System.Nullable.neq(expense.TransportationTypeId, 11673)) {
                        if (expense.IsPurchasedInsurance === false && expense.RequestChangeId == null) {
                            expense.IsWet = System.Nullable.eq(expense.TransportationTypeId, 11677) ? true : false;
                            if (System.Nullable.neq(expense.TransportationTypeId, 11677)) {
                                expense.JourneyId = 12114;
                            } else {
                                expense.JourneyId = null;
                            }
                        }
                    }
                    if (System.Nullable.eq(expense.JourneyId, 12114) || System.Nullable.eq(expense.JourneyId, 16001)) {
                        expense.StartShip = transportation.ClosingDate;
                    } else {
                        expense.StartShip = transportation.StartShip;
                    }
                }
            },
            GetPatchEntity: function (expense) {
                var $t;
                var details = new (System.Collections.Generic.List$1(Core.ViewModels.PatchUpdateDetail)).ctor();
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = Core.Extensions.Utils.IdField, $t.Value = Bridge.toString(expense.Id), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "CommodityValue", $t.Value = expense.CommodityValue.toString(), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "InsuranceFeeRate", $t.Value = expense.InsuranceFeeRate.toString(), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "TotalPriceBeforeTax", $t.Value = expense.TotalPriceBeforeTax.toString(), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "TotalPriceAfterTax", $t.Value = expense.TotalPriceAfterTax.toString(), $t));
                return ($t = new Core.ViewModels.PatchUpdate(), $t.Changes = details, $t);
            },
            GetPatchEntityPurchased: function (expense) {
                var $t;
                var details = new (System.Collections.Generic.List$1(Core.ViewModels.PatchUpdateDetail)).ctor();
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = Core.Extensions.Utils.IdField, $t.Value = Bridge.toString(expense.Id), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "IsPurchasedInsurance", $t.Value = System.Boolean.toString(expense.IsPurchasedInsurance), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "DatePurchasedInsurance", $t.Value = System.Nullable.toString(expense.DatePurchasedInsurance, function ($t) { return System.DateTime.format($t); }), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "IsClosing", $t.Value = System.Boolean.toString(expense.IsClosing), $t));
                return ($t = new Core.ViewModels.PatchUpdate(), $t.Changes = details, $t);
            },
            GetPatchIsPurchasedInsuranceEntity: function (expense) {
                var $t;
                var details = new (System.Collections.Generic.List$1(Core.ViewModels.PatchUpdateDetail)).ctor();
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = Core.Extensions.Utils.IdField, $t.Value = Bridge.toString(expense.Id), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "IsPurchasedInsurance", $t.Value = System.Boolean.toString(expense.IsPurchasedInsurance), $t));
                return ($t = new Core.ViewModels.PatchUpdate(), $t.Changes = details, $t);
            },
            GetPatchIsClosingEntity: function (expense) {
                var $t;
                var details = new (System.Collections.Generic.List$1(Core.ViewModels.PatchUpdateDetail)).ctor();
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = Core.Extensions.Utils.IdField, $t.Value = Bridge.toString(expense.Id), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "IsClosing", $t.Value = System.Boolean.toString(expense.IsClosing), $t));
                return ($t = new Core.ViewModels.PatchUpdate(), $t.Changes = details, $t);
            }
        }
    });

    Bridge.define("TMS.UI.Business.Manage.InsuranceFeesEditorBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        fields: {
            containerId: 0
        },
        props: {
            expenseEntity: {
                get: function () {
                    return Bridge.as(this.Entity, TMS.API.Models.Expense);
                }
            }
        },
        ctors: {
            init: function () {
                this.containerId = 0;
            },
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "Expense");
                this.Name = "InsuranceFees Editor";
            }
        },
        methods: {
            SelectedCompare: function (expense) {
                this.CompareChanges(expense, this.expenseEntity);
            },
            CompareChanges: function (change, cutting) {
                var $t;
                if (change != null) {
                    var listItem = Bridge.Reflection.getMembers(Bridge.getType(change), 16, 28);
                    var content = Core.Components.Extensions.ComponentExt.FindComponentByName(Core.Components.Section, this, "Wrapper");
                    var gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(null, null);
                    var listViewItem = System.Linq.Enumerable.from(gridView.GetListViewItems(change), Core.Components.ListViewItem).firstOrDefault(null, null);
                    Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, content.FilterChildren$1(function (x) {
                        return true;
                    }), function (x) {
                        Core.Extensions.HtmlElementExtension.RemoveClass(x.ParentElement, "bg-warning");
                    });
                    Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, listViewItem.FilterChildren$1(function (x) {
                        return true;
                    }), function (x) {
                        Core.Extensions.HtmlElementExtension.RemoveClass(x.Element, "text-warning");
                    });
                    $t = Bridge.getEnumerator(listItem);
                    try {
                        while ($t.moveNext()) {
                            var item = { v : $t.Current };
                            var a1 = change[item.v.n];
                            var a2 = cutting[item.v.n];
                            if (a1 == null && a2 == null) {
                                continue;
                            }

                            if (a1 != null && a2 == null || a1 == null && a2 != null || a1 != null && a2 != null && !Bridge.referenceEquals(Bridge.toString(a1), Bridge.toString(a2))) {
                                Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, content.FilterChildren$1((function ($me, item) {
                                    return function (x) {
                                        return Bridge.referenceEquals(x.Name, item.v.n);
                                    };
                                })(this, item)), function (x) {
                                    Core.Extensions.HtmlElementExtension.AddClass(x.ParentElement, "bg-warning");
                                });
                                //listViewItem.FilterChildren(x => x.Name == item.Name).FirstOrDefault()?.Element?.AddClass("text-warning");
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                }
            },
            Reject: function () {
                var $t;
                var confirm = ($t = new Core.Components.Forms.ConfirmDialog(), $t.NeedAnswer = true, $t.ComType = "Textbox", $t.Content = (System.String.format("B\u1ea1n c\u00f3 ch\u1eafc ch\u1eafn mu\u1ed1n tr\u1ea3 v\u1ec1?<br />", null) || "") + "H\u00e3y nh\u1eadp l\u00fd do tr\u1ea3 v\u1ec1", $t);
                confirm.Render();
                confirm.YesConfirmed = Bridge.fn.combine(confirm.YesConfirmed, Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        _gridView, 
                        listViewItem, 
                        res, 
                        $t1, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        _gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(null, null);
                                        listViewItem = System.Linq.Enumerable.from(_gridView.RowData.Data).select(function (x) { return Bridge.cast(x, TMS.API.Models.Expense); }).firstOrDefault(function (x) {
                                            return System.Nullable.eq(x.StatusId, Core.Enums.ApprovalStatusEnum.Approving);
                                        }, null);
                                        Core.Extensions.ReflectionExt.ClearReferences(listViewItem);
                                        $task1 = this.Client.CreateAsync(System.Object, listViewItem, "Reject?reasonOfChange=" + ((($t1 = confirm.Textbox) != null ? $t1.Text : null) || ""));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        res = $taskResult1;
                                        this.ProcessEnumMessage(res);
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }));
            },
            ApproveRequestChange: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    isValid, 
                    confirm, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.IsFormValid();
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        isValid = $taskResult1;
                                        if (!isValid) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        confirm = ($t = new Core.Components.Forms.ConfirmDialog(), $t.Content = "B\u1ea1n c\u00f3 ch\u1eafc ch\u1eafn ph\u00ea duy\u1ec7t?", $t);
                                        confirm.Render();
                                        confirm.YesConfirmed = Bridge.fn.combine(confirm.YesConfirmed, Bridge.fn.bind(this, function () {
                                            var $step = 0,
                                                $task1, 
                                                $taskResult1, 
                                                $task2, 
                                                $taskResult2, 
                                                $task3, 
                                                $taskResult3, 
                                                $task4, 
                                                $taskResult4, 
                                                $task5, 
                                                $taskResult5, 
                                                $task6, 
                                                $taskResult6, 
                                                $task7, 
                                                $jumpFromFinally, 
                                                _gridView, 
                                                listViewItem, 
                                                containerTypeId, 
                                                commodidtyValue, 
                                                newCommodityValue, 
                                                history, 
                                                $asyncBody = Bridge.fn.bind(this, function () {
                                                    for (;;) {
                                                        $step = System.Array.min([0,1,2,3,4,5,6,7,8,9], $step);
                                                        switch ($step) {
                                                            case 0: {
                                                                _gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(null, null);
                                                                listViewItem = System.Linq.Enumerable.from(_gridView.GetSelectedRows()).select(function (x) { return Bridge.cast(x, TMS.API.Models.Expense); }).firstOrDefault(function (x) {
                                                                    return System.Nullable.eq(x.StatusId, Core.Enums.ApprovalStatusEnum.Approving);
                                                                }, null);
                                                                $task1 = this.CheckContainerType(listViewItem);
                                                                $step = 1;
                                                                if ($task1.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task1.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 1: {
                                                                $taskResult1 = $task1.getAwaitedResult();
                                                                containerTypeId = $taskResult1;
                                                                $task2 = new Core.Clients.Client.$ctor1("CommodityValue").FirstOrDefaultAsync(TMS.API.Models.CommodityValue, System.String.format("?$filter=Active eq true and BossId eq {0} and CommodityId eq {1} and ContainerId eq {2}", Bridge.box(listViewItem.BossId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), Bridge.box(listViewItem.CommodityId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), Bridge.box(containerTypeId, System.Int32)));
                                                                $step = 2;
                                                                if ($task2.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task2.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 2: {
                                                                $taskResult2 = $task2.getAwaitedResult();
                                                                commodidtyValue = $taskResult2;
                                                                if (commodidtyValue == null && listViewItem.BossId != null && listViewItem.CommodityId != null && listViewItem.ContainerTypeId != null) {
                                                                    $step = 3;
                                                                    continue;
                                                                } 
                                                                $step = 6;
                                                                continue;
                                                            }
                                                            case 3: {
                                                                $task3 = this.CreateCommodityValue(listViewItem);
                                                                $step = 4;
                                                                if ($task3.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task3.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 4: {
                                                                $taskResult3 = $task3.getAwaitedResult();
                                                                newCommodityValue = $taskResult3;
                                                                $task4 = new Core.Clients.Client.$ctor1("CommodityValue").CreateAsync(TMS.API.Models.CommodityValue, newCommodityValue);
                                                                $step = 5;
                                                                if ($task4.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task4.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 5: {
                                                                $taskResult4 = $task4.getAwaitedResult();
                                                                $step = 6;
                                                                continue;
                                                            }
                                                            case 6: {
                                                                history = new TMS.API.Models.Expense();
                                                                Core.Extensions.ReflectionExt.CopyPropFrom$1(history, this.expenseEntity);
                                                                history.Id = 0;
                                                                history.StatusId = Core.Enums.ApprovalStatusEnum.New;
                                                                history.RequestChangeId = this.expenseEntity.Id;
                                                                $task5 = new Core.Clients.Client.$ctor1("Expense").CreateAsync(TMS.API.Models.Expense, history);
                                                                $step = 7;
                                                                if ($task5.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task5.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 7: {
                                                                $taskResult5 = $task5.getAwaitedResult();
                                                                this.expenseEntity.IsHasChange = true;
                                                                $task6 = new Core.Clients.Client.$ctor1("Expense").PatchAsync(TMS.API.Models.Expense, this.GetPatchEntity(this.expenseEntity));
                                                                $step = 8;
                                                                if ($task6.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task6.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 8: {
                                                                $taskResult6 = $task6.getAwaitedResult();
                                                                Core.Extensions.ReflectionExt.ClearReferences(listViewItem);
                                                                $task7 = this.Approve$1(listViewItem);
                                                                $step = 9;
                                                                if ($task7.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task7.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 9: {
                                                                $task7.getAwaitedResult();
                                                                return;
                                                            }
                                                            default: {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }, arguments);

                                            $asyncBody();
                                        }));
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CheckContainerType: function (expense) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    containerTypes, 
                    containerTypeCodes, 
                    $t, 
                    containerTypeName, 
                    containers, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = new Core.Clients.Client.$ctor1("MasterData").GetRawList(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and ParentId eq 7565", null));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        containerTypes = $taskResult1;
                                        containerTypeCodes = ($t = TMS.API.Models.MasterData, System.Linq.Enumerable.from(containerTypes, $t).toDictionary(function (x) {
                                            return x.Id;
                                        }, null, System.Int32, $t));
                                        containerTypeName = System.Collections.Generic.CollectionExtensions.GetValueOrDefault(System.Int32, TMS.API.Models.MasterData, containerTypeCodes, System.Nullable.getValue(expense.ContainerTypeId));
                                        $task2 = new Core.Clients.Client.$ctor1("MasterData").GetRawList(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and (contains(Name, '40HC') or contains(Name, '20DC') or contains(Name, '45HC') or contains(Name, '50DC'))", null));
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        containers = $taskResult2;
                                        if (System.String.contains(containerTypeName.Description,"Cont 20")) {
                                            this.containerId = containers.Find(function (x) {
                                                return System.String.contains(x.Name,"20DC");
                                            }).Id;
                                        } else if (System.String.contains(containerTypeName.Description,"Cont 40")) {
                                            this.containerId = containers.Find(function (x) {
                                                return System.String.contains(x.Name,"40HC");
                                            }).Id;
                                        } else if (System.String.contains(containerTypeName.Description,"Cont 45")) {
                                            this.containerId = containers.Find(function (x) {
                                                return System.String.contains(x.Name,"45HC");
                                            }).Id;
                                        } else if (System.String.contains(containerTypeName.Description,"Cont 50")) {
                                            this.containerId = containers.Find(function (x) {
                                                return System.String.contains(x.Name,"50DC");
                                            }).Id;
                                        }
                                        $tcs.setResult(this.containerId);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CreateCommodityValue: function (expense) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    startDate1, 
                    endDate1, 
                    startDate2, 
                    endDate2, 
                    containerId, 
                    newCommodityValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        startDate1 = System.DateTime.create(System.DateTime.getYear(System.DateTime.getNow()), 1, 1);
                                        endDate1 = System.DateTime.create(System.DateTime.getYear(System.DateTime.getNow()), 6, 30);
                                        startDate2 = System.DateTime.create(System.DateTime.getYear(System.DateTime.getNow()), 7, 1);
                                        endDate2 = System.DateTime.create(System.DateTime.getYear(System.DateTime.getNow()), 12, 31);
                                        $task1 = this.CheckContainerType(expense);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        containerId = $taskResult1;
                                        newCommodityValue = new TMS.API.Models.CommodityValue();
                                        Core.Extensions.ReflectionExt.CopyPropFrom$1(newCommodityValue, expense);
                                        newCommodityValue.Id = 0;
                                        newCommodityValue.ContainerId = containerId;
                                        newCommodityValue.TotalPrice = System.Nullable.getValue(expense.CommodityValue);
                                        newCommodityValue.StartDate = System.DateTime.getDate(System.DateTime.getNow());
                                        newCommodityValue.Notes = "";
                                        newCommodityValue.Active = true;
                                        newCommodityValue.InsertedDate = System.DateTime.getDate(System.DateTime.getNow());
                                        newCommodityValue.CreatedBy = Core.Clients.Client.Token.UserId;
                                        if (System.DateTime.gte(System.DateTime.getDate(System.DateTime.getNow()), startDate1) && System.DateTime.lte(System.DateTime.getDate(System.DateTime.getNow()), endDate1)) {
                                            newCommodityValue.EndDate = endDate1;
                                        }
                                        if (System.DateTime.gte(System.DateTime.getDate(System.DateTime.getNow()), startDate2) && System.DateTime.lte(System.DateTime.getDate(System.DateTime.getNow()), endDate2)) {
                                            newCommodityValue.EndDate = endDate2;
                                        }
                                        $tcs.setResult(newCommodityValue);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            GetPatchEntity: function (expense) {
                var $t;
                var details = new (System.Collections.Generic.List$1(Core.ViewModels.PatchUpdateDetail)).ctor();
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = Core.Extensions.Utils.IdField, $t.Value = Bridge.toString(expense.Id), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "IsHasChange", $t.Value = System.Boolean.toString(expense.IsHasChange), $t));
                return ($t = new Core.ViewModels.PatchUpdate(), $t.Changes = details, $t);
            }
        }
    });

    Bridge.define("TMS.UI.Business.Manage.InsuranceFeesRateBL", {
        inherits: [Core.Components.Forms.TabEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "InsuranceFeesRate");
                this.Name = "InsuranceFeesRate List";
            }
        },
        methods: {
            EditInsuranceFeesRate: function (entity) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "InsuranceFeesRate Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Manage.InsuranceFeesRateEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Ch\u1ec9nh s\u1eeda t\u1ef7 l\u1ec7 ph\u00ed BH";
                                            instance.Entity = entity;
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            AddInsuranceFeesRate: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "InsuranceFeesRate Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Manage.InsuranceFeesRateEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Th\u00eam m\u1edbi t\u1ef7 l\u1ec7 ph\u00ed BH";
                                            instance.Entity = new TMS.API.Models.InsuranceFeesRate();
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            EditExtraInsuranceFeesRate: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "ExtraInsuranceFeesRate List", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Manage.ExtraInsuranceFeesRateBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "C\u1eadp nh\u1eadt t\u1ef7 l\u1ec7 ph\u00ed ph\u1ee5";
                                            instance.Entity = new TMS.API.Models.MasterData();
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("TMS.UI.Business.Manage.InsuranceFeesRateEditorBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "InsuranceFeesRate");
                this.Name = "InsuranceFeesRate Editor";
            }
        }
    });

    Bridge.define("TMS.UI.Business.Manage.InsuranceFeesUpdateDataBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        props: {
            expenseEntity: {
                get: function () {
                    return Bridge.as(this.Entity, TMS.API.Models.Expense);
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "Expense");
                this.Name = "InsuranceFees Update Data";
            }
        },
        methods: {
            UpdateDataFromTransportation: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    res, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        Core.Components.Spinner.AppendTo(this.Element, false, true, 30000);
                                        if (Bridge.equals(this.expenseEntity.FromDate, null)) {
                                            Core.Extensions.Toast.Warning("Vui l\u00f2ng nh\u1eadp t\u1eeb ng\u00e0y");
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        if (Bridge.equals(this.expenseEntity.ToDate, null)) {
                                            Core.Extensions.Toast.Warning("Vui l\u00f2ng nh\u1eadp \u0111\u1ebfn ng\u00e0y");
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        $task1 = new Core.Clients.Client.$ctor1("Expense").PostAsync(System.Boolean, this.Entity, "UpdateDataFromTransportation");
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        res = $taskResult1;
                                        if (res) {
                                            Core.Extensions.Toast.Success("\u0110\u00e3 c\u1eadp nh\u1eadt th\u00e0nh c\u00f4ng.");
                                        } else {
                                            Core.Extensions.Toast.Warning("\u0110\u00e3 c\u00f3 l\u1ed7i x\u1ea3y ra trong qu\u00e1 tr\u00ecnh x\u1eed l\u00fd.");
                                        }
                                        this.Dirty = false;
                                        this.Dispose();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            Cancel: function () {
                this.Dispose();
                Core.Components.Forms.PopupEditor.prototype.Cancel.call(this);
            },
            CancelWithoutAsk: function () {
                this.Dispose();
                Core.Components.Forms.PopupEditor.prototype.CancelWithoutAsk.call(this);
            }
        }
    });

    Bridge.define("TMS.UI.Business.Manage.InsuranceFeesViewChangeBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        props: {
            expenseEntity: {
                get: function () {
                    return Bridge.as(this.Entity, TMS.API.Models.Expense);
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "Expense");
                this.Name = "InsuranceFees View Change";
            }
        },
        methods: {
            SelectedCompare: function (expense) {
                this.CompareChanges(expense, this.expenseEntity);
            },
            CompareChanges: function (change, cutting) {
                var $t;
                if (change != null) {
                    var listItem = Bridge.Reflection.getMembers(Bridge.getType(change), 16, 28);
                    var content = Core.Components.Extensions.ComponentExt.FindComponentByName(Core.Components.Section, this, "Wrapper");
                    var gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(null, null);
                    var listViewItem = System.Linq.Enumerable.from(gridView.GetListViewItems(change), Core.Components.ListViewItem).firstOrDefault(null, null);
                    Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, content.FilterChildren$1(function (x) {
                        return true;
                    }), function (x) {
                        Core.Extensions.HtmlElementExtension.RemoveClass(x.ParentElement, "bg-warning");
                    });
                    Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, listViewItem.FilterChildren$1(function (x) {
                        return true;
                    }), function (x) {
                        Core.Extensions.HtmlElementExtension.RemoveClass(x.Element, "text-warning");
                    });
                    $t = Bridge.getEnumerator(listItem);
                    try {
                        while ($t.moveNext()) {
                            var item = { v : $t.Current };
                            var a1 = change[item.v.n];
                            var a2 = cutting[item.v.n];
                            if (a1 == null && a2 == null) {
                                continue;
                            }

                            if (a1 != null && a2 == null || a1 == null && a2 != null || a1 != null && a2 != null && !Bridge.referenceEquals(Bridge.toString(a1), Bridge.toString(a2))) {
                                Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, content.FilterChildren$1((function ($me, item) {
                                    return function (x) {
                                        return Bridge.referenceEquals(x.Name, item.v.n);
                                    };
                                })(this, item)), function (x) {
                                    Core.Extensions.HtmlElementExtension.AddClass(x.ParentElement, "bg-warning");
                                });
                                //listViewItem.FilterChildren(x => x.Name == item.Name).FirstOrDefault()?.Element?.AddClass("text-warning");
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                }
            },
            Cancel: function () {
                this.Dispose();
                Core.Components.Forms.PopupEditor.prototype.Cancel.call(this);
            },
            CancelWithoutAsk: function () {
                this.Dispose();
                Core.Components.Forms.PopupEditor.prototype.CancelWithoutAsk.call(this);
            }
        }
    });

    Bridge.define("TMS.UI.Business.Manage.ListShipBookBL", {
        inherits: [Core.Components.Forms.TabEditor],
        fields: {
            bodyhTMLElement: null
        },
        props: {
            idtb: {
                get: function () {
                    return "rp" + Bridge.getHashCode(this);
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "Transportation");
                this.Name = "List Ship Book";
                this.DOMContentLoaded = Bridge.fn.combine(this.DOMContentLoaded, Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.LoadReport();
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        const createResizableTable = function (table) {
                                            if (table == null) return;
                                            const cols = table.querySelectorAll('th');
                                            [].forEach.call(cols, function (col) {
                                                // Add a resizer element to the column
                                                const resizer = document.createElement('div');
                                                resizer.classList.add('resizer');

                                                // Set the height
                                                resizer.style.height = `100%`;

                                                col.appendChild(resizer);

                                                createResizableColumn(col, resizer);
                                            });
                                        };

                                        const createResizableColumn = function (col, resizer) {
                                            let x = 0;
                                            let w = 0;

                                            const mouseDownHandler = function (e) {
                                                e.preventDefault();
                                                x = e.clientX;

                                                const styles = window.getComputedStyle(col);
                                                w = parseInt(styles.width, 10);

                                                document.addEventListener('mousemove', mouseMoveHandler);
                                                document.addEventListener('mouseup', mouseUpHandler);

                                                resizer.classList.add('resizing');
                                            };

                                            const mouseMoveHandler = function (e) {
                                                e.preventDefault();
                                                const dx = e.clientX - x;
                                                col.style.width = `${w + dx}px`;
                                                col.style.minWidth = `${w + dx}px`;
                                                col.style.maxWidth = `0px`;
                                            };

                                            const mouseUpHandler = function () {
                                                resizer.classList.remove('resizing');
                                                document.removeEventListener('mousemove', mouseMoveHandler);
                                                document.removeEventListener('mouseup', mouseUpHandler);
                                            };

                                            resizer.addEventListener('mousedown', mouseDownHandler);
                                        };

                                        createResizableTable(document.getElementById(this.idtb));
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }));
            }
        },
        methods: {
            LoadReport: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    data, 
                    element, 
                    getReport, 
                    index, 
                    routeIds, 
                    brandShipId, 
                    lineIds, 
                    shipIds, 
                    containerTypeIds, 
                    policyIds, 
                    exportListIds, 
                    routeOdata, 
                    brandShipOdata, 
                    exportListOdata, 
                    lineOdata, 
                    shipOdata, 
                    containerTypeOdata, 
                    policyOdata, 
                    dirroute, 
                    $t, 
                    dirline, 
                    $t1, 
                    dirbrandShip, 
                    $t2, 
                    dirship, 
                    $t3, 
                    dircontainerType, 
                    $t4, 
                    direxportList, 
                    $t5, 
                    dirpolicy, 
                    $t6, 
                    html, 
                    $t7, 
                    item, 
                    route, 
                    $t8, 
                    brandShip, 
                    $t9, 
                    ship, 
                    $t10, 
                    containerType, 
                    $t11, 
                    policy, 
                    $t12, 
                    line, 
                    $t13, 
                    exportList, 
                    $t14, 
                    price, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2], $step);
                                switch ($step) {
                                    case 0: {
                                        data = Core.Components.Extensions.ComponentExt.FindComponentByName(Core.Components.Section, this, "Category");
                                        element = data.Element;
                                        element.innerHTML = "";
                                        Core.Components.Spinner.AppendTo(element);
                                        $task1 = new Core.Clients.Client.$ctor1("Transportation").PostAsync(System.Collections.Generic.List$1(TMS.API.ViewModels.TranGroupVM), this.Entity, "ReportGroupBy");
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        getReport = $taskResult1;
                                        index = 1;
                                        routeIds = System.Linq.Enumerable.from(getReport, TMS.API.ViewModels.TranGroupVM).where(function (x) {
                                            return x.RouteId != null;
                                        }).select(function (x) {
                                            return System.Nullable.getValue(x.RouteId);
                                        }).toList(System.Int32);
                                        brandShipId = System.Linq.Enumerable.from(getReport, TMS.API.ViewModels.TranGroupVM).where(function (x) {
                                            return x.BrandShipId != null;
                                        }).select(function (x) {
                                            return System.Nullable.getValue(x.BrandShipId);
                                        }).toList(System.Int32);
                                        lineIds = System.Linq.Enumerable.from(getReport, TMS.API.ViewModels.TranGroupVM).where(function (x) {
                                            return x.LineId != null;
                                        }).select(function (x) {
                                            return System.Nullable.getValue(x.LineId);
                                        }).toList(System.Int32);
                                        shipIds = System.Linq.Enumerable.from(getReport, TMS.API.ViewModels.TranGroupVM).where(function (x) {
                                            return x.ShipId != null;
                                        }).select(function (x) {
                                            return System.Nullable.getValue(x.ShipId);
                                        }).toList(System.Int32);
                                        containerTypeIds = System.Linq.Enumerable.from(getReport, TMS.API.ViewModels.TranGroupVM).where(function (x) {
                                            return x.ContainerTypeId != null;
                                        }).select(function (x) {
                                            return System.Nullable.getValue(x.ContainerTypeId);
                                        }).toList(System.Int32);
                                        policyIds = System.Linq.Enumerable.from(getReport, TMS.API.ViewModels.TranGroupVM).where(function (x) {
                                            return x.PolicyId != null;
                                        }).select(function (x) {
                                            return System.Nullable.getValue(x.PolicyId);
                                        }).toList(System.Int32);
                                        exportListIds = System.Linq.Enumerable.from(getReport, TMS.API.ViewModels.TranGroupVM).where(function (x) {
                                            return x.ExportListId != null;
                                        }).select(function (x) {
                                            return System.Nullable.getValue(x.ExportListId);
                                        }).toList(System.Int32);
                                        routeOdata = new Core.Clients.Client.$ctor1("Route").GetRawListById(TMS.API.Models.Route, routeIds);
                                        brandShipOdata = new Core.Clients.Client.$ctor1("Vendor").GetRawListById(TMS.API.Models.Vendor, brandShipId);
                                        exportListOdata = new Core.Clients.Client.$ctor1("Vendor").GetRawListById(TMS.API.Models.Vendor, exportListIds);
                                        lineOdata = new Core.Clients.Client.$ctor1("Route").GetRawListById(TMS.API.Models.Vendor, lineIds);
                                        shipOdata = new Core.Clients.Client.$ctor1("Ship").GetRawListById(TMS.API.Models.Ship, shipIds);
                                        containerTypeOdata = new Core.Clients.Client.$ctor1("MasterData").GetRawListById(TMS.API.Models.MasterData, containerTypeIds);
                                        policyOdata = new Core.Clients.Client.$ctor1("MasterData").GetRawListById(TMS.API.Models.MasterData, policyIds);
                                        $task2 = System.Threading.Tasks.Task.whenAll(routeOdata, brandShipOdata, lineOdata, shipOdata, containerTypeOdata, policyOdata, exportListOdata);
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $task2.getAwaitedResult();
                                        dirroute = ($t = TMS.API.Models.Route, System.Linq.Enumerable.from(routeOdata.getResult(), $t).toDictionary(function (x) {
                                            return x.Id;
                                        }, null, System.Int32, $t));
                                        dirline = ($t1 = TMS.API.Models.Vendor, System.Linq.Enumerable.from(lineOdata.getResult(), $t1).toDictionary(function (x) {
                                            return x.Id;
                                        }, null, System.Int32, $t1));
                                        dirbrandShip = ($t2 = TMS.API.Models.Vendor, System.Linq.Enumerable.from(brandShipOdata.getResult(), $t2).toDictionary(function (x) {
                                            return x.Id;
                                        }, null, System.Int32, $t2));
                                        dirship = ($t3 = TMS.API.Models.Ship, System.Linq.Enumerable.from(shipOdata.getResult(), $t3).toDictionary(function (x) {
                                            return x.Id;
                                        }, null, System.Int32, $t3));
                                        dircontainerType = ($t4 = TMS.API.Models.MasterData, System.Linq.Enumerable.from(containerTypeOdata.getResult(), $t4).toDictionary(function (x) {
                                            return x.Id;
                                        }, null, System.Int32, $t4));
                                        direxportList = ($t5 = TMS.API.Models.Vendor, System.Linq.Enumerable.from(exportListOdata.getResult(), $t5).toDictionary(function (x) {
                                            return x.Id;
                                        }, null, System.Int32, $t5));
                                        dirpolicy = ($t6 = TMS.API.Models.MasterData, System.Linq.Enumerable.from(policyOdata.getResult(), $t6).toDictionary(function (x) {
                                            return x.Id;
                                        }, null, System.Int32, $t6));
                                        html = Core.Components.Renderer.IText(Core.Components.Renderer.IText(Core.Components.Renderer.IText(Core.Components.Renderer.IText(Core.Components.Renderer.IText(Core.Components.Renderer.IText(Core.Components.Renderer.IText(Core.Components.Renderer.IText(Core.Components.Renderer.IText(Core.Components.Renderer.IText(Core.Components.Renderer.IText(Core.Components.Renderer.IText(Core.Components.Renderer.IText(Core.Components.Renderer.IText(Core.Components.Renderer.IText(Core.Components.Renderer.IText(Core.Components.Renderer.IText(Core.Components.Renderer.IText(Core.Components.Renderer.IText(Core.Components.Renderer.IText(Core.Components.Renderer.IText(Core.Components.Renderer.IText(Core.Components.Renderer.IText(Core.Components.Renderer.IText(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.MVVM.Html.Take(element).Div, "grid-wrapper sticky").Style$1("max-height: calc(100vh - 231px)").Id(this.idtb).Div, "table-wrapper").Table, "table").Thead.TRow.Th, "STT").End.Th.Style$1("width: 70px; min-width: 70px; max-width: 0px;"), "Th\u00e1ng").End.Th.Style$1("width: 70px; min-width: 70px; max-width: 0px;"), "N\u0103m").End.Th.Style$1("width: 200px; min-width: 200px; max-width: 0px;"), "List xu\u1ea5t").End.Th.Style$1("width: 200px; min-width: 200px; max-width: 0px;"), "Tuy\u1ebfn v\u1eadn chuy\u1ec3n").End.Th.Style$1("width: 200px; min-width: 200px; max-width: 0px;"), "H\u00e3ng t\u00e0u").End.Th.Style$1("width: 100px; min-width: 100px; max-width: 0px;"), "Line kh\u00e1c").End.Th.Style$1("width: 200px; min-width: 200px; max-width: 0px;"), "T\u00ean t\u00e0u").End.Th.Style$1("width: 100px; min-width: 100px; max-width: 0px;"), "S\u1ed1 chuy\u1ebfn").End.Th.Style$1("width: 100px; min-width: 100px; max-width: 0px;"), "Ng\u00e0y t\u00e0u ch\u1ea1y").End.Th.Style$1("width: 100px; min-width: 100px; max-width: 0px;"), "Lo\u1ea1i Container").End.Th.Style$1("width: 200px; min-width: 100px; max-width: 0px;"), "Ch\u00ednh s\u00e1ch").End.Th.Style$1("width: 100px; min-width: 100px; max-width: 0px;"), "S\u1ed1 l\u01b0\u1ee3ng").End.Th.Style$1("width: 100px; min-width: 100px; max-width: 0px;"), "\u0110\u01a1n gi\u00e1 c\u01b0\u1edbc t\u00e0u").End.Th.Style$1("width: 100px; min-width: 100px; max-width: 0px;"), "Th\u00e0nh ti\u1ec1n").End.Th.Style$1("width: 100px; min-width: 100px; max-width: 0px;"), "Ph\u00ed kh\u00e1c").End.Th.Style$1("width: 100px; min-width: 100px; max-width: 0px;"), "T\u1ed5ng c\u1ed9ng").End.Th.Style$1("width: 100px; min-width: 100px; max-width: 0px;"), "Ghi ch\u00fa Ch\u00ednh s\u00e1ch").End.Th.Style$1("width: 100px; min-width: 100px; max-width: 0px;"), "S\u1ed1 H.\u0110\u01a1n").End.Th.Style$1("width: 100px; min-width: 100px; max-width: 0px;"), "Ng\u00e0y H.\u0110\u01a1n").End.Th.Style$1("width: 100px; min-width: 100px; max-width: 0px;"), "Ng\u00e0y thanh to\u00e1n").End.Th.Style$1("width: 100px; min-width: 100px; max-width: 0px;"), "Ph\u01b0\u01a1ng th\u1ee9c thanh to\u00e1n").End.Th.Style$1("width: 100px; min-width: 100px; max-width: 0px;"), "Ghi ch\u00fa").End.Th.Style$1("width: 100px; min-width: 100px; max-width: 0px;"), "X\u00e1c nh\u1eadn").EndOf(Core.MVVM.ElementType.thead).TBody;
                                        $t7 = Bridge.getEnumerator(getReport);
                                        try {
                                            while ($t7.moveNext()) {
                                                item = $t7.Current;
                                                route = System.Collections.Generic.CollectionExtensions.GetValueOrDefault(System.Int32, TMS.API.Models.Route, dirroute, ($t8 = item.RouteId, $t8 != null ? $t8 : 0));
                                                brandShip = System.Collections.Generic.CollectionExtensions.GetValueOrDefault(System.Int32, TMS.API.Models.Vendor, dirbrandShip, ($t9 = item.BrandShipId, $t9 != null ? $t9 : 0));
                                                ship = System.Collections.Generic.CollectionExtensions.GetValueOrDefault(System.Int32, TMS.API.Models.Ship, dirship, ($t10 = item.ShipId, $t10 != null ? $t10 : 0));
                                                containerType = System.Collections.Generic.CollectionExtensions.GetValueOrDefault(System.Int32, TMS.API.Models.MasterData, dircontainerType, ($t11 = item.ContainerTypeId, $t11 != null ? $t11 : 0));
                                                policy = System.Collections.Generic.CollectionExtensions.GetValueOrDefault(System.Int32, TMS.API.Models.MasterData, dirpolicy, ($t12 = item.PolicyId, $t12 != null ? $t12 : 0));
                                                line = System.Collections.Generic.CollectionExtensions.GetValueOrDefault(System.Int32, TMS.API.Models.Vendor, dirline, ($t13 = item.LineId, $t13 != null ? $t13 : 0));
                                                exportList = System.Collections.Generic.CollectionExtensions.GetValueOrDefault(System.Int32, TMS.API.Models.Vendor, direxportList, ($t14 = item.ExportListId, $t14 != null ? $t14 : 0));
                                                price = item.ShipPrice.equalsT(System.Decimal(0)) ? item.ShipUnitPrice : item.ShipPrice;
                                                Core.Components.Renderer.IText(Core.Components.Renderer.IText(Core.Components.Renderer.IText(Core.Components.Renderer.IText(Core.Components.Renderer.IText(Core.Components.Renderer.IText(Core.Components.Renderer.IText(Core.Components.Renderer.IText(Core.Components.Renderer.IText(Core.Components.Renderer.IText(Core.Components.Renderer.IText(Core.Components.Renderer.IText(Core.Components.Renderer.ClassName(Core.Components.Renderer.IText(Core.Components.Renderer.ClassName(Core.Components.Renderer.IText(Core.Components.Renderer.ClassName(Core.Components.Renderer.IText(Core.Components.Renderer.ClassName(Core.Components.Renderer.IText(Core.Components.Renderer.ClassName(Core.Components.Renderer.IText(Core.Components.Renderer.ClassName(Core.Components.Renderer.IText(Core.Components.Renderer.ClassName(Core.Components.Renderer.IText(Core.Components.Renderer.ClassName(Core.Components.Renderer.IText(Core.Components.Renderer.ClassName(Core.Components.Renderer.IText(Core.Components.Renderer.ClassName(Core.Components.Renderer.IText(Core.Components.Renderer.ClassName(Core.Components.Renderer.IText(Core.Components.Renderer.ClassName(Core.Components.Renderer.IText(Core.Components.Renderer.ClassName(Core.Components.Renderer.IText(Core.Components.Renderer.ClassName(html.TRow.TData, "text-left"), Bridge.toString(index)).End.TData, "text-left"), System.Nullable.toString(item.Month, null)).End.TData, "text-left"), System.Nullable.toString(item.Year, null)).End.TData, "text-left"), exportList == null ? "" : exportList.Name).End.TData, "text-left"), route == null ? "" : route.Name).End.TData, "text-left"), brandShip == null ? "" : brandShip.Name).End.TData, "text-left"), line == null ? "" : line.Name).End.TData, "text-left"), ship == null ? "" : ship.Name).End.TData, "text-left"), item.Trip).End.TData, "text-left"), Bridge.equals(item.StartShip, null) ? "" : System.DateTime.format(System.Nullable.getValue(item.StartShip), "dd/MM/yyyy")).End.TData, "text-left"), containerType == null ? "" : containerType.Description).End.TData, "text-left"), policy == null ? "" : policy.Description).End.TData, "text-right"), System.Nullable.toString(item.Count, null)).End.TData, "text-right"), Bridge.Int.format(price, "N0")).End.TData, Bridge.Int.format((System.Decimal(System.Nullable.getValue(item.Count)).mul(price)), "N0")).End.TData, "").End.TData, "").End.TData, "").End.TData, "").End.TData, "").End.TData, "").End.TData, "").End.TData, "").End.TData, "").End.TData, "").EndOf(Core.MVVM.ElementType.tr);
                                                index = (index + 1) | 0;
                                            }
                                        } finally {
                                            if (Bridge.is($t7, System.IDisposable)) {
                                                $t7.System$IDisposable$Dispose();
                                            }
                                        }
                                        Core.Components.Spinner.Hide();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("TMS.UI.Business.Manage.ProductionReportFormBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        props: {
            EReportGroupVM: {
                get: function () {
                    return Bridge.as(this.Entity, TMS.API.ViewModels.ReportGroupVM);
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "Transportation");
                this.Name = "Production Report";
                this.Entity = new TMS.API.ViewModels.ReportGroupVM();
            }
        },
        methods: {
            ExportExcel: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    path, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.IsFormValid();
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        if (!$taskResult1) {
                                            $step = 2;
                                            continue;
                                        } 
                                        $step = 3;
                                        continue;
                                    }
                                    case 2: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    case 3: {
                                        $task2 = new Core.Clients.Client.$ctor1("Transportation").PostAsync(System.String, this.EReportGroupVM, "ExportProductionReport");
                                        $step = 4;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        path = $taskResult2;
                                        Core.Clients.Client.Download(System.String.format("/excel/Download/{0}", [Core.Extensions.Utils.EncodeSpecialChar(path)]));
                                        Core.Extensions.Toast.Success("Xu\u1ea5t file th\u00e0nh c\u00f4ng");
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("TMS.UI.Business.Manage.QuotationUpdateEditorBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        props: {
            QuotationUpdateEntity: {
                get: function () {
                    return Bridge.as(this.Entity, TMS.API.Models.QuotationUpdate);
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "QuotationUpdate");
                this.Name = "Quotation Update Editor";
            }
        },
        methods: {
            SaveChanges: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    confirmDialog, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.IsFormValid();
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        if (!$taskResult1) {
                                            $step = 2;
                                            continue;
                                        } 
                                        $step = 3;
                                        continue;
                                    }
                                    case 2: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    case 3: {
                                        confirmDialog = ($t = new Core.Components.Forms.ConfirmDialog(), $t.Content = "B\u1ea1n c\u00f3 ch\u1eafc ch\u1eafn mu\u1ed1n chi\u1ec1u ch\u1ec9nh gi\u00e1?", $t);
                                        confirmDialog.YesConfirmed = Bridge.fn.combine(confirmDialog.YesConfirmed, Bridge.fn.bind(this, function () {
                                            var $step = 0,
                                                $task1, 
                                                $taskResult1, 
                                                $jumpFromFinally, 
                                                rs, 
                                                $asyncBody = Bridge.fn.bind(this, function () {
                                                    for (;;) {
                                                        $step = System.Array.min([0,1], $step);
                                                        switch ($step) {
                                                            case 0: {
                                                                $task1 = new Core.Clients.Client.$ctor1("QuotationUpdate").PostAsync(System.Boolean, this.QuotationUpdateEntity, System.String.format("QuotationUpdate", null));
                                                                $step = 1;
                                                                if ($task1.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task1.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 1: {
                                                                $taskResult1 = $task1.getAwaitedResult();
                                                                rs = $taskResult1;
                                                                if (rs) {
                                                                    Core.Extensions.Toast.Success("C\u1eadp nh\u1eadt gi\u00e1 th\u00e0nh c\u00f4ng");
                                                                    this.Dirty = false;
                                                                    this.Dispose();
                                                                }
                                                                return;
                                                            }
                                                            default: {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }, arguments);

                                            $asyncBody();
                                        }));
                                        this.AddChild(confirmDialog);
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("TMS.UI.Business.Manage.TransportationListBL", {
        inherits: [Core.Components.Forms.TabEditor],
        fields: {
            openPopup: false,
            gridViewExpense: null,
            selected: null,
            _expensePopup: null,
            containerId: 0,
            commodityAwaiter: 0
        },
        ctors: {
            init: function () {
                this.containerId = 0;
            },
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "Transportation");
                this.Name = "Transportation List";
            }
        },
        methods: {
            ViewCheckFee: function (entity) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenTab$1(this, "CheckFee Editor" + entity.Id, "CheckFee Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Manage.CheckFeeEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.TabEditor);
                                            instance.Title = "Ki\u1ec3m tra ph\u00ed \u0111\u00f3ng h\u00e0ng";
                                            instance.Icon = "fal fa-sitemap mr-1";
                                            instance.Entity = entity;
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ExportCheckFeeSelected: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "CheckFee Form", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Manage.CheckFeeFormBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Xu\u1ea5t b\u1ea3ng k\u00ea";
                                            instance.Entity = new TMS.API.Models.CheckFeeHistory();
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CheckFee: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    routeIds, 
                    closingId, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        routeIds = Core.Clients.LocalStorage.GetItem(System.Collections.Generic.List$1(System.Int32), "RouteCheckFeeClosing");
                                        closingId = Core.Clients.LocalStorage.GetItem(System.Int32, "ClosingIdCheckFeeClosing");
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "CheckFee Form", function () {
                                            var $t;
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Manage.CheckFeeFormBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Ki\u1ec3m tra b\u1ea3ng k\u00ea";
                                            instance.Entity = ($t = new TMS.API.Models.CheckFeeHistory(), $t.RouteIds = routeIds, $t.FromDate = Core.Clients.LocalStorage.GetItem(System.String, "FromDateCheckFeeClosing") == null ? Bridge.getDefaultValue(System.DateTime) : System.DateTime.parse(Core.Clients.LocalStorage.GetItem(System.String, "FromDateCheckFeeClosing")), $t.ToDate = Core.Clients.LocalStorage.GetItem(System.String, "ToDateCheckFeeClosing") == null ? Bridge.getDefaultValue(System.DateTime) : System.DateTime.parse(Core.Clients.LocalStorage.GetItem(System.String, "ToDateCheckFeeClosing")), $t.ClosingId = closingId, $t.TypeId = 1, $t);
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ProductionReport: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Production Report", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Manage.ProductionReportFormBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "B\u00e1o c\u00e1o s\u1ea3n l\u01b0\u1ee3ng";
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            EditTransportation: function (entity) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    gridView, 
                    gridView1, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        this.selected = entity;
                                        gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this, function (x) {
                                            return Bridge.referenceEquals(x.GuiInfo.RefName, "Transportation");
                                        }), Core.Components.GridView).firstOrDefault(null, null);
                                        gridView1 = Core.Components.Extensions.ComponentExt.FindComponentByName(Core.Components.GridView, this.TabEditor, "Expense");
                                        if (this._expensePopup != null && gridView1 != null) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        this._expensePopup != null ? this._expensePopup.Dispose() : null;
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(gridView, "Transportation Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Manage.TransportationEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Xem chi ph\u00ed";
                                            instance.Entity = entity;
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        this._expensePopup = $taskResult1;
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ReloadExpense: function (entity) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    gridView1, 
                    gridView, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        this.selected = entity;
                                        gridView1 = Core.Components.Extensions.ComponentExt.FindComponentByName(Core.Components.GridView, this.TabEditor, "Expense");
                                        if (this._expensePopup == null || gridView1 == null) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        this._expensePopup != null ? this._expensePopup.Dispose() : null;
                                        gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this, function (x) {
                                            return Bridge.referenceEquals(x.GuiInfo.RefName, "Transportation");
                                        }), Core.Components.GridView).firstOrDefault(null, null);
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(gridView, "Transportation Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Manage.TransportationEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Xem chi ph\u00ed";
                                            instance.Entity = entity;
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        this._expensePopup = $taskResult1;
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ViewAllotment: function (allotment) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Allotment Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Manage.AllotmentEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Chi ti\u1ebft";
                                            instance.Entity = allotment;
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            Allotment: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    gridView, 
                    selected, 
                    fees, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2], $step);
                                switch ($step) {
                                    case 0: {
                                        gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                                            return Bridge.referenceEquals(x.GuiInfo.RefName, "Transportation");
                                        }, null);
                                        $task1 = gridView.GetRealTimeSelectedRows();
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        selected = System.Linq.Enumerable.from(($taskResult1)).select(function (x) { return Bridge.cast(x, TMS.API.Models.Transportation); }).where(function (x) {
                                            return x.Id > 0;
                                        }).toList(TMS.API.Models.Transportation);
                                        if (Core.Extensions.IEnumerableExtensions.Nothing(TMS.API.Models.Transportation, selected)) {
                                            Core.Extensions.Toast.Warning("Vui l\u00f2ng ch\u1ecdn cont c\u1ea7n ph\u00e2n b\u1ed5");
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        fees = System.Linq.Enumerable.from(selected, TMS.API.Models.Transportation).select(function (x) {
                                            var $t;
                                            return ($t = new TMS.API.Models.Expense(), $t.ExpenseTypeId = null, $t.UnitPrice = System.Decimal(0), $t.Quantity = System.Decimal(1), $t.TotalPriceAfterTax = System.Decimal(0), $t.TotalPriceBeforeTax = System.Decimal(0), $t.Vat = System.Decimal(0), $t.ContainerNo = x.ContainerNo, $t.SealNo = x.SealNo, $t.BossId = x.BossId, $t.CommodityId = x.CommodityId, $t.ClosingDate = x.ClosingDate, $t.ReturnDate = x.ReturnDate, $t.TransportationId = x.Id, $t);
                                        }).toList(TMS.API.Models.Expense);
                                        $task2 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Allotment Editor", function () {
                                            var $t;
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Manage.AllotmentEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Ph\u00e2n b\u1ed5 chi ph\u00ed \u0111\u00f3ng h\u00e0ng";
                                            instance.Entity = ($t = new TMS.API.Models.Allotment(), $t.UnitPrice = System.Decimal(0), $t.Expense = fees, $t);
                                            return instance;
                                        }, false, false);
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CheckQuotationTransportation: function () {
                var gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                        return Bridge.referenceEquals(x.GuiInfo.RefName, "Transportation");
                    }, null);
                if (gridView == null) {
                    return;
                }
                gridView.BodyContextMenuShow = Bridge.fn.combine(gridView.BodyContextMenuShow, Bridge.fn.bind(this, function () {
                    var $t;
                    var menus = new (System.Collections.Generic.List$1(Core.Components.Forms.ContextMenuItem)).ctor();
                    menus.clear();
                    menus.add(($t = new Core.Components.Forms.ContextMenuItem(), $t.Icon = "fas fa-pen", $t.Text = "C\u1eadp nh\u1eadt gi\u00e1", $t.Click = Bridge.fn.cacheBind(this, this.UpdateQuotation), $t));
                    menus.add(($t = new Core.Components.Forms.ContextMenuItem(), $t.Icon = "fal fa-binoculars", $t.Text = "Xem booking", $t.Click = Bridge.fn.cacheBind(this, this.ViewBooking), $t));
                    menus.add(($t = new Core.Components.Forms.ContextMenuItem(), $t.Icon = (this.Icon = "fal fa-download", "fal fa-download"), $t.Text = "T\u1ea3i \u0111\u00ednh k\u00e8m", $t.Click = Bridge.fn.cacheBind(this, this.DownLoadPackingList), $t));
                    menus.add(($t = new Core.Components.Forms.ContextMenuItem(), $t.Icon = "fas fa-pen", $t.Text = "C\u1eadp nh\u1eadt ph\u00ed", $t.MenuItems = Bridge.fn.bind(this, function (_o1) {
                            var $t1;
                            _o1.add(($t1 = new Core.Components.Forms.ContextMenuItem(), $t1.Text = "C\u1eadp c\u01b0\u1edbc t\u00e0u", $t1.Click = Bridge.fn.cacheBind(this, this.UpdateShipQuotation), $t1));
                            _o1.add(($t1 = new Core.Components.Forms.ContextMenuItem(), $t1.Text = "C\u1eadp ph\u00ed n\u00e2ng", $t1.Click = Bridge.fn.cacheBind(this, this.UpdateLiftQuotation), $t1));
                            _o1.add(($t1 = new Core.Components.Forms.ContextMenuItem(), $t1.Text = "C\u1eadp ph\u00ed h\u1ea1", $t1.Click = Bridge.fn.cacheBind(this, this.UpdateLadingQuotation), $t1));
                            return _o1;
                        })(new (System.Collections.Generic.List$1(Core.Components.Forms.ContextMenuItem)).ctor()), $t));
                    Core.Components.Forms.ContextMenu.Instance.MenuItems = menus;
                }));
                var listViewItems = System.Linq.Enumerable.from(gridView.RowData.Data).select(function (x) { return Bridge.cast(x, TMS.API.Models.Transportation); }).toList(TMS.API.Models.Transportation);
                listViewItems.ForEach(function (x) {
                    var listViewItem = System.Linq.Enumerable.from(gridView.GetListViewItems(x), Core.Components.ListViewItem).firstOrDefault(null, null);
                    if (listViewItem == null) {
                        return;
                    }
                    Core.Extensions.HtmlElementExtension.RemoveClass(listViewItem.Element, "bg-host");
                    var bookingId = System.Linq.Enumerable.from(listViewItem.FilterChildren(Core.Components.EditableComponent, function (y) {
                            return Bridge.referenceEquals(y.GuiInfo.FieldName, "BookingId");
                        }), Core.Components.EditableComponent).firstOrDefault(null, null);
                    bookingId.Disabled = false;
                    if (!x.IsHost) {
                        Core.Extensions.HtmlElementExtension.AddClass(listViewItem.Element, "bg-host");
                    }
                    if (!x.IsBooking) {
                        bookingId.Disabled = true;
                    }
                });
            },
            DownLoadPackingList: function (arg) {
                var gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                        return Bridge.referenceEquals(x.GuiInfo.FieldName, "Transportation");
                    }, null);
                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $task2, 
                        $taskResult2, 
                        $task3, 
                        $taskResult3, 
                        $task4, 
                        $taskResult4, 
                        $task5, 
                        $taskResult5, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        selected, 
                        coord, 
                        booking, 
                        booking1, 
                        newPath, 
                        $t, 
                        path, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,10,12], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = gridView.GetRealTimeSelectedRows();
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            selected = System.Linq.Enumerable.from(($taskResult1), System.Object).firstOrDefault(null, null);
                                            coord = Bridge.cast(selected, TMS.API.Models.Transportation);
                                            $task2 = new Core.Clients.Client.$ctor1("Booking").FirstOrDefaultAsync(TMS.API.Models.Booking, System.String.format("?$filter=Active eq true and Id eq {0}", [Bridge.box(coord.BookingId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]));
                                            $step = 2;
                                            if ($task2.isCompleted()) {
                                                continue;
                                            }
                                            $task2.continue($asyncBody);
                                            return;
                                        }
                                        case 2: {
                                            $taskResult2 = $task2.getAwaitedResult();
                                            booking = $taskResult2;
                                            if (booking == null || Core.Extensions.StringExt.IsNullOrWhiteSpace(booking.Files)) {
                                                $step = 3;
                                                continue;
                                            } else  {
                                                $step = 8;
                                                continue;
                                            }
                                        }
                                        case 3: {
                                            $task3 = new Core.Clients.Client.$ctor1("Booking").FirstOrDefaultAsync(TMS.API.Models.Booking, System.String.format("?$filter=Active eq true and BrandShipId eq {0} and ShipId eq {1} and Trip eq '{2}' and (Files ne null or Files ne '') and contains(Files,'    ')", Bridge.box(coord.BrandShipId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), Bridge.box(coord.ShipId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), coord.Trip));
                                            $step = 4;
                                            if ($task3.isCompleted()) {
                                                continue;
                                            }
                                            $task3.continue($asyncBody);
                                            return;
                                        }
                                        case 4: {
                                            $taskResult3 = $task3.getAwaitedResult();
                                            booking = $taskResult3;
                                            if (booking == null || Core.Extensions.StringExt.IsNullOrWhiteSpace(booking.Files)) {
                                                $step = 5;
                                                continue;
                                            } 
                                            $step = 7;
                                            continue;
                                        }
                                        case 5: {
                                            $task4 = new Core.Clients.Client.$ctor1("Booking").FirstOrDefaultAsync(TMS.API.Models.Booking, System.String.format("?$filter=Active eq true and BrandShipId eq {0} and ShipId eq {1} and Trip eq '{2}' and Files ne null or Files ne ''", Bridge.box(coord.BrandShipId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), Bridge.box(coord.ShipId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), coord.Trip));
                                            $step = 6;
                                            if ($task4.isCompleted()) {
                                                continue;
                                            }
                                            $task4.continue($asyncBody);
                                            return;
                                        }
                                        case 6: {
                                            $taskResult4 = $task4.getAwaitedResult();
                                            booking = $taskResult4;
                                            $step = 7;
                                            continue;
                                        }
                                        case 7: {
                                            $step = 12;
                                            continue;
                                        }
                                        case 8: {
                                            if (!System.String.contains(booking.Files,"    ")) {
                                                $step = 9;
                                                continue;
                                            } 
                                            $step = 11;
                                            continue;
                                        }
                                        case 9: {
                                            $task5 = new Core.Clients.Client.$ctor1("Booking").FirstOrDefaultAsync(TMS.API.Models.Booking, System.String.format("?$filter=Active eq true and BrandShipId eq {0} and ShipId eq {1} and Trip eq '{2}' and (Files ne null or Files ne '') and contains(Files,'    ')", Bridge.box(coord.BrandShipId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), Bridge.box(coord.ShipId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), coord.Trip));
                                            $step = 10;
                                            if ($task5.isCompleted()) {
                                                continue;
                                            }
                                            $task5.continue($asyncBody);
                                            return;
                                        }
                                        case 10: {
                                            $taskResult5 = $task5.getAwaitedResult();
                                            booking1 = $taskResult5;
                                            if (booking1 != null && System.String.contains(booking1.Files,"    ")) {
                                                booking = booking1;
                                            }
                                            $step = 11;
                                            continue;
                                        }

                                        case 12: {
                                            if (Core.Extensions.StringExt.IsNullOrWhiteSpace(booking.Files)) {
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            newPath = System.Linq.Enumerable.from(booking.Files.split("    "), System.String).where(function (x) {
                                                return Core.Extensions.StringExt.HasAnyChar(x);
                                            }).distinct().toList(System.String);
                                            $t = Bridge.getEnumerator(newPath);
                                            try {
                                                while ($t.moveNext()) {
                                                    path = $t.Current;
                                                    Core.Clients.Client.Download(Core.Extensions.Utils.EncodeSpecialChar(path));
                                                }
                                            } finally {
                                                if (Bridge.is($t, System.IDisposable)) {
                                                    $t.System$IDisposable$Dispose();
                                                }
                                            }
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            ViewBooking: function (arg) {
                var gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                        return Bridge.referenceEquals(x.GuiInfo.FieldName, "Transportation");
                    }, null);

                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $task2, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        selected, 
                        brandShipIds, 
                        shipIds, 
                        startShips, 
                        fe, 
                        gridView1, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1,2], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = gridView.GetRealTimeSelectedRows();
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            selected = $taskResult1;
                                            if (Core.Extensions.IEnumerableExtensions.Nothing(System.Object, selected)) {
                                                selected = gridView.RowData.Data;
                                            }
                                            brandShipIds = System.Linq.Enumerable.from(System.Linq.Enumerable.from(selected).select(function (x) { return Bridge.cast(x, TMS.API.Models.Transportation); }).toList(TMS.API.Models.Transportation), TMS.API.Models.Transportation).where(function (x) {
                                                return x.BrandShipId != null;
                                            }).select(function (x) {
                                                return x.BrandShipId;
                                            }).distinct().toList(System.Int32);
                                            shipIds = System.Linq.Enumerable.from(System.Linq.Enumerable.from(selected).select(function (x) { return Bridge.cast(x, TMS.API.Models.Transportation); }).toList(TMS.API.Models.Transportation), TMS.API.Models.Transportation).where(function (x) {
                                                return x.ShipId != null;
                                            }).select(function (x) {
                                                return x.ShipId;
                                            }).distinct().toList(System.Int32);
                                            startShips = System.Linq.Enumerable.from(System.Linq.Enumerable.from(selected).select(function (x) { return Bridge.cast(x, TMS.API.Models.Transportation); }).toList(TMS.API.Models.Transportation), TMS.API.Models.Transportation).where(function (x) {
                                                return !Bridge.equals(x.StartShip, null);
                                            }).select(function (x) {
                                                return x.StartShip;
                                            }).distinct().toList(System.DateTime);
                                            fe = System.Linq.Enumerable.from(Core.Components.Forms.TabEditor.Tabs, Core.Components.Forms.TabEditor).where(function (x) {
                                                return Bridge.referenceEquals(x.Name, "Booking List");
                                            }).firstOrDefault(null, null);
                                            if (fe == null) {
                                                Core.Extensions.Toast.Warning("Vui l\u00f2ng m\u1edf m\u00e0n h\u00ecnh booking");
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            gridView1 = System.Linq.Enumerable.from(fe.FilterChildren(Core.Components.GridView), Core.Components.GridView).firstOrDefault(function (x) {
                                                return x.GuiInfo.Id === 15759;
                                            }, null);
                                            if (gridView1 == null) {
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            gridView1.CellSelected.clear();
                                            gridView1.AdvSearchVM.Conditions.clear();
                                            gridView1.ListViewSearch.EntityVM.StartDate = null;
                                            gridView1.ListViewSearch.EntityVM.EndDate = null;
                                            brandShipIds.ForEach(function (x) {
                                                var $t;
                                                gridView1.CellSelected.add(($t = new Core.Models.CellSelected(), $t.FieldName = "BrandShipId", $t.FieldText = "H\u00e3ng t\u00e0u", $t.ComponentType = "Dropdown", $t.Value = System.Nullable.toString(x, null), $t.ValueText = System.Nullable.toString(x, null), $t.Operator = "in", $t.OperatorText = "Ch\u1ee9a", $t.IsSearch = false, $t.Logic = Core.Enums.LogicOperation.And, $t));
                                            });
                                            shipIds.ForEach(function (x) {
                                                var $t;
                                                gridView1.CellSelected.add(($t = new Core.Models.CellSelected(), $t.FieldName = "ShipId", $t.FieldText = "T\u00e0u", $t.ComponentType = "Dropdown", $t.Value = System.Nullable.toString(x, null), $t.ValueText = System.Nullable.toString(x, null), $t.Operator = "in", $t.OperatorText = "Ch\u1ee9a", $t.IsSearch = false, $t.Logic = Core.Enums.LogicOperation.And, $t));
                                            });
                                            startShips.ForEach(function (x) {
                                                var $t;
                                                gridView1.CellSelected.add(($t = new Core.Models.CellSelected(), $t.FieldName = "StartShip", $t.FieldText = "T\u00e0u", $t.ComponentType = "Datepicker", $t.Value = System.Nullable.toString(x, function ($t) { return System.DateTime.format($t); }), $t.ValueText = System.Nullable.toString(x, function ($t) { return System.DateTime.format($t); }), $t.Operator = "in", $t.OperatorText = "Ch\u1ee9a", $t.IsSearch = false, $t.Logic = Core.Enums.LogicOperation.And, $t));
                                            });
                                            fe.Focus();
                                            $task2 = gridView1.ActionFilter();
                                            $step = 2;
                                            if ($task2.isCompleted()) {
                                                continue;
                                            }
                                            $task2.continue($asyncBody);
                                            return;
                                        }
                                        case 2: {
                                            $task2.getAwaitedResult();
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            ViewTransportationPlan: function (arg) {
                var gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                        return Bridge.referenceEquals(x.GuiInfo.FieldName, "Transportation");
                    }, null);

                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $task2, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        selected, 
                        coords, 
                        fe, 
                        gridView1, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1,2], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = gridView.GetRealTimeSelectedRows();
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            selected = $taskResult1;
                                            if (Core.Extensions.IEnumerableExtensions.Nothing(System.Object, selected)) {
                                                selected = gridView.RowData.Data;
                                            }
                                            coords = System.Linq.Enumerable.from(System.Linq.Enumerable.from(selected).select(function (x) { return Bridge.cast(x, TMS.API.Models.Transportation); }).toList(TMS.API.Models.Transportation), TMS.API.Models.Transportation).select(function (x) {
                                                return x.TransportationPlanId;
                                            }).distinct().toList(System.Int32);
                                            fe = System.Linq.Enumerable.from(Core.Components.Forms.TabEditor.Tabs, Core.Components.Forms.TabEditor).where(function (x) {
                                                return Bridge.referenceEquals(x.Name, "Transportation Plan List");
                                            }).firstOrDefault(null, null);
                                            if (fe == null) {
                                                Core.Extensions.Toast.Warning("Vui l\u00f2ng m\u1edf m\u00e0n h\u00ecnh k\u1ebf ho\u1ea1ch v\u1eadn chuy\u00ean");
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            gridView1 = System.Linq.Enumerable.from(fe.FilterChildren(Core.Components.GridView), Core.Components.GridView).firstOrDefault(function (x) {
                                                return x.GuiInfo.Id === 15768;
                                            }, null);
                                            if (gridView1 == null) {
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            gridView1.CellSelected.clear();
                                            gridView1.AdvSearchVM.Conditions.clear();
                                            coords.ForEach(function (x) {
                                                var $t;
                                                gridView1.CellSelected.add(($t = new Core.Models.CellSelected(), $t.FieldName = "Id", $t.FieldText = "M\u00e3 s\u1ed1", $t.ComponentType = "Number", $t.Value = System.Nullable.toString(x, null), $t.ValueText = System.Nullable.toString(x, null), $t.Operator = "in", $t.OperatorText = "Ch\u1ee9a", $t.IsSearch = false, $t.Logic = Core.Enums.LogicOperation.Or, $t));
                                            });
                                            fe.Focus();
                                            $task2 = gridView1.ActionFilter();
                                            $step = 2;
                                            if ($task2.isCompleted()) {
                                                continue;
                                            }
                                            $task2.continue($asyncBody);
                                            return;
                                        }
                                        case 2: {
                                            $task2.getAwaitedResult();
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            UpdateQuotation: function (arg) {
                var gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                        return Bridge.referenceEquals(x.GuiInfo.RefName, "Transportation");
                    }, null);
                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $task2, 
                        $taskResult2, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        selected, 
                        coords, 
                        quotation, 
                        $t, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1,2], $step);
                                    switch ($step) {
                                        case 0: {
                                            selected = gridView.LastListViewItem;
                                            if (selected == null) {
                                                Core.Extensions.Toast.Warning("Vui l\u00f2ng ch\u1ecdn cont c\u1ea7n c\u1eadp nh\u1eadt gi\u00e1!");
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            coords = Bridge.unbox(selected.Entity);
                                            if (coords.ClosingId == null) {
                                                Core.Extensions.Toast.Warning("Vui l\u00f2ng nh\u1eadp nh\u00e0 xe");
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            $task1 = new Core.Clients.Client.$ctor1("Quotation").FirstOrDefaultAsync(TMS.API.Models.Quotation, (System.String.format("?$filter=TypeId eq 7592 ", null) || "") + (System.String.format("and BossId eq {0} ", [Bridge.box(coords.BossId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]) || "") + (System.String.format("and ContainerTypeId eq {0} ", [Bridge.box(coords.ContainerTypeId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]) || "") + (System.String.format("and LocationId eq {0} ", [Bridge.box(coords.ReceivedId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]) || "") + (System.String.format("and StartDate le {0} ", [Core.Extensions.DateTimeExt.ToOdataFormat(System.Nullable.getValue(coords.ClosingDate))]) || "") + (System.String.format("and PackingId eq {0}&$orderby=StartDate desc", [Bridge.box(coords.ClosingId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]) || ""));
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            quotation = $taskResult1;
                                            if (quotation == null) {
                                                quotation = ($t = new TMS.API.Models.Quotation(), $t.TypeId = 7592, $t.BossId = coords.BossId, $t.ContainerTypeId = coords.ContainerTypeId, $t.LocationId = coords.ReceivedId, $t.StartDate = coords.ClosingDate, $t.PackingId = coords.ClosingId, $t);
                                            }
                                            $task2 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Quotation Editor", function () {
                                                var type = Bridge.Reflection.getType("TMS.UI.Business.Settings.QuotationEditorBL");
                                                var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                                instance.Title = "Ch\u1ec9nh s\u1eeda b\u1ea3ng gi\u00e1 \u0111\u00f3ng h\u00e0ng";
                                                instance.Entity = quotation;
                                                return instance;
                                            }, false, false);
                                            $step = 2;
                                            if ($task2.isCompleted()) {
                                                continue;
                                            }
                                            $task2.continue($asyncBody);
                                            return;
                                        }
                                        case 2: {
                                            $taskResult2 = $task2.getAwaitedResult();
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            UpdateShipQuotation: function (arg) {
                var gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                        return Bridge.referenceEquals(x.GuiInfo.FieldName, "Transportation");
                    }, null);

                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $task2, 
                        $taskResult2, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        selected, 
                        coords, 
                        quotation, 
                        $t, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1,2], $step);
                                    switch ($step) {
                                        case 0: {
                                            selected = gridView.LastListViewItem;
                                            if (selected == null) {
                                                Core.Extensions.Toast.Warning("Vui l\u00f2ng ch\u1ecdn cont c\u1ea7n c\u1eadp nh\u1eadt gi\u00e1!");
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            coords = Bridge.unbox(selected.Entity);
                                            if (coords.BrandShipId == null || coords.RouteId == null || coords.ContainerTypeId == null) {
                                                Core.Extensions.Toast.Warning("Vui l\u00f2ng nh\u1eadp \u0111\u1ea7y \u0111\u1ee7 th\u00f4ng tin");
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            $task1 = new Core.Clients.Client.$ctor1("Quotation").FirstOrDefaultAsync(TMS.API.Models.Quotation, (System.String.format("?$filter=TypeId eq 7598 ", null) || "") + (System.String.format("and RouteId eq {0} ", [Bridge.box(coords.RouteId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]) || "") + (System.String.format("and PackingId eq {0} ", [Bridge.box(coords.BrandShipId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]) || "") + (System.String.format("and ContainerTypeId eq {0} ", [Bridge.box(coords.ContainerTypeId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]) || "") + (System.String.format("and cast(StartDate,Edm.DateTimeOffset) le {0}&$orderby=StartDate desc", [Core.Extensions.DateTimeExt.ToOdataFormat(System.Nullable.getValue(coords.ClosingDate))]) || ""));
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            quotation = $taskResult1;
                                            if (quotation == null) {
                                                quotation = ($t = new TMS.API.Models.Quotation(), $t.TypeId = 7598, $t.RouteId = coords.RouteId, $t.PackingId = coords.BrandShipId, $t.ContainerTypeId = coords.ContainerTypeId, $t.StartDate = coords.ClosingDate, $t);
                                            }
                                            $task2 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Quotation Editor", function () {
                                                var type = Bridge.Reflection.getType("TMS.UI.Business.Settings.QuotationEditorBL");
                                                var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                                instance.Title = "Ch\u1ec9nh s\u1eeda b\u1ea3ng gi\u00e1 c\u01b0\u1edbc t\u00e0u";
                                                instance.Entity = quotation;
                                                return instance;
                                            }, false, false);
                                            $step = 2;
                                            if ($task2.isCompleted()) {
                                                continue;
                                            }
                                            $task2.continue($asyncBody);
                                            return;
                                        }
                                        case 2: {
                                            $taskResult2 = $task2.getAwaitedResult();
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            UpdateLiftQuotation: function (arg) {
                var gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                        return Bridge.referenceEquals(x.GuiInfo.FieldName, "Transportation");
                    }, null);

                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $task2, 
                        $taskResult2, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        selected, 
                        coords, 
                        quotation, 
                        $t, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1,2], $step);
                                    switch ($step) {
                                        case 0: {
                                            selected = gridView.LastListViewItem;
                                            if (selected == null) {
                                                Core.Extensions.Toast.Warning("Vui l\u00f2ng ch\u1ecdn cont c\u1ea7n c\u1eadp nh\u1eadt gi\u00e1!");
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            coords = Bridge.unbox(selected.Entity);
                                            if (coords.PickupEmptyId == null || coords.ContainerTypeId == null) {
                                                Core.Extensions.Toast.Warning("Vui l\u00f2ng nh\u1eadp \u0111\u1ea7y \u0111\u1ee7 th\u00f4ng tin");
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            $task1 = new Core.Clients.Client.$ctor1("Quotation").FirstOrDefaultAsync(TMS.API.Models.Quotation, (System.String.format("?$filter=TypeId eq 7594 ", null) || "") + (System.String.format("and ContainerTypeId eq {0} ", [Bridge.box(coords.ContainerTypeId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]) || "") + (System.String.format("and LocationId eq {0} ", [Bridge.box(coords.PickupEmptyId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]) || "") + (System.String.format("and StartDate le {0}&$orderby=StartDate desc", [Core.Extensions.DateTimeExt.ToOdataFormat(System.Nullable.getValue(coords.ClosingDate))]) || ""));
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            quotation = $taskResult1;
                                            if (quotation == null) {
                                                quotation = ($t = new TMS.API.Models.Quotation(), $t.TypeId = 7594, $t.LocationId = coords.PickupEmptyId, $t.ContainerTypeId = coords.ContainerTypeId, $t.StartDate = coords.ClosingDate, $t);
                                            }
                                            $task2 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Quotation Editor", function () {
                                                var type = Bridge.Reflection.getType("TMS.UI.Business.Settings.QuotationEditorBL");
                                                var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                                instance.Title = "Ch\u1ec9nh s\u1eeda b\u1ea3ng gi\u00e1 n\u00e2ng \u0111\u00f3ng h\u00e0ng";
                                                instance.Entity = quotation;
                                                return instance;
                                            }, false, false);
                                            $step = 2;
                                            if ($task2.isCompleted()) {
                                                continue;
                                            }
                                            $task2.continue($asyncBody);
                                            return;
                                        }
                                        case 2: {
                                            $taskResult2 = $task2.getAwaitedResult();
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            UpdateLadingQuotation: function (arg) {
                var gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                        return Bridge.referenceEquals(x.GuiInfo.FieldName, "Transportation");
                    }, null);

                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $task2, 
                        $taskResult2, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        selected, 
                        coords, 
                        quotation, 
                        $t, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1,2], $step);
                                    switch ($step) {
                                        case 0: {
                                            selected = gridView.LastListViewItem;
                                            if (selected == null) {
                                                Core.Extensions.Toast.Warning("Vui l\u00f2ng ch\u1ecdn cont c\u1ea7n c\u1eadp nh\u1eadt gi\u00e1!");
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            coords = Bridge.unbox(selected.Entity);
                                            if (coords.PortLoadingId == null || coords.ContainerTypeId == null) {
                                                Core.Extensions.Toast.Warning("Vui l\u00f2ng nh\u1eadp \u0111\u1ea7y \u0111\u1ee7 th\u00f4ng tin");
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            $task1 = new Core.Clients.Client.$ctor1("Quotation").FirstOrDefaultAsync(TMS.API.Models.Quotation, (System.String.format("?$filter=TypeId eq 7596 ", null) || "") + (System.String.format("and ContainerTypeId eq {0} ", [Bridge.box(coords.ContainerTypeId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]) || "") + (System.String.format("and LocationId eq {0} ", [Bridge.box(coords.PortLoadingId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]) || "") + (System.String.format("and StartDate le {0}&$orderby=StartDate desc", [Core.Extensions.DateTimeExt.ToOdataFormat(System.Nullable.getValue(coords.ClosingDate))]) || ""));
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            quotation = $taskResult1;
                                            if (quotation == null) {
                                                quotation = ($t = new TMS.API.Models.Quotation(), $t.TypeId = 7596, $t.LocationId = coords.PortLoadingId, $t.ContainerTypeId = coords.ContainerTypeId, $t.StartDate = coords.ClosingDate, $t);
                                            }
                                            $task2 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Quotation Editor", function () {
                                                var type = Bridge.Reflection.getType("TMS.UI.Business.Settings.QuotationEditorBL");
                                                var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                                instance.Title = "Ch\u1ec9nh s\u1eeda b\u1ea3ng gi\u00e1 h\u1ea1 \u0111\u00f3ng h\u00e0ng";
                                                instance.Entity = quotation;
                                                return instance;
                                            }, false, false);
                                            $step = 2;
                                            if ($task2.isCompleted()) {
                                                continue;
                                            }
                                            $task2.continue($asyncBody);
                                            return;
                                        }
                                        case 2: {
                                            $taskResult2 = $task2.getAwaitedResult();
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            ChangeBackgroudColor: function (listViewItems) {
                var gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                        return Bridge.referenceEquals(x.GuiInfo.FieldName, "Transportation");
                    }, null);
                if (gridView == null) {
                    return;
                }
                listViewItems.ForEach(function (x) {
                    var listViewItem = System.Linq.Enumerable.from(gridView.GetListViewItems(x), Core.Components.ListViewItem).firstOrDefault(null, null);
                    if (listViewItem == null) {
                        return;
                    }
                    Core.Extensions.HtmlElementExtension.RemoveClass(listViewItem.Element, "bg-red");
                    Core.Extensions.HtmlElementExtension.RemoveClass(listViewItem.Element, "bg-red1");
                    if (!Bridge.equals(x.DemDate, null) && !Bridge.equals(x.ReturnDate, null) && System.DateTime.gt(System.DateTime.getDate(System.Convert.toDateTime(Bridge.box(System.Nullable.getValue(x.ReturnDate), System.DateTime, System.DateTime.format))), System.DateTime.getDate(System.Convert.toDateTime(Bridge.box(System.Nullable.getValue(x.DemDate), System.DateTime, System.DateTime.format))))) {
                        if (listViewItem != null && !Core.Extensions.HtmlElementExtension.HasClass(listViewItem.Element, "bg-red1")) {
                            Core.Extensions.HtmlElementExtension.RemoveClass(listViewItem.Element, "bg-red");
                            Core.Extensions.HtmlElementExtension.AddClass(listViewItem.Element, "bg-red1");
                        }
                    } else if (!Bridge.equals(x.DemDate, null) && !Bridge.equals(x.ReturnDate, null) && System.DateTime.lt(System.DateTime.getDate(System.Convert.toDateTime(Bridge.box(System.Nullable.getValue(x.ReturnDate), System.DateTime, System.DateTime.format))), System.DateTime.getDate(System.Convert.toDateTime(Bridge.box(System.Nullable.getValue(x.DemDate), System.DateTime, System.DateTime.format))))) {
                        if (listViewItem != null && Core.Extensions.HtmlElementExtension.HasClass(listViewItem.Element, "bg-red1")) {
                            Core.Extensions.HtmlElementExtension.RemoveClass(listViewItem.Element, "bg-red1");
                        }
                    } else {
                        Core.Extensions.HtmlElementExtension.RemoveClass(listViewItem.Element, "bg-red");
                        Core.Extensions.HtmlElementExtension.RemoveClass(listViewItem.Element, "bg-red1");
                    }
                });
            },
            CheckReturnDate: function (transportationPlan) {
                var $t;
                var gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(null, null);
                if (!Bridge.equals(transportationPlan.ReturnDate, null) && !Bridge.equals(transportationPlan.ShipDate, null) && System.DateTime.lt(System.DateTime.getDate(System.Nullable.getValue(transportationPlan.ReturnDate)), System.DateTime.getDate(System.Nullable.getValue(transportationPlan.ShipDate)))) {
                    var confirmDialog = ($t = new Core.Components.Forms.ConfirmDialog(), $t.Content = "Ng\u00e0y tr\u1ea3 h\u00e0ng ph\u1ea3i b\u1eb1ng ho\u1eb7c l\u1edbn h\u01a1n ng\u00e0y t\u00e0u c\u1eadp?", $t);
                    confirmDialog.NoConfirmed = Bridge.fn.combine(confirmDialog.NoConfirmed, Bridge.fn.bind(this, function () {
                        var $step = 0,
                            $task1, 
                            $jumpFromFinally, 
                            listViewItem, 
                            updated, 
                            $t1, 
                            $asyncBody = Bridge.fn.bind(this, function () {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            transportationPlan.ReturnDate = transportationPlan.ShipDate;
                                            listViewItem = System.Linq.Enumerable.from(gridView.GetListViewItems(transportationPlan), Core.Components.ListViewItem).firstOrDefault(null, null);
                                            listViewItem.UpdateView();
                                            updated = ($t1 = Core.Components.Datepicker, System.Linq.Enumerable.from(listViewItem.FilterChildren(Core.Components.Datepicker, function (x) {
                                                return Bridge.referenceEquals(x.GuiInfo.FieldName, "ReturnDate") || Bridge.referenceEquals(x.GuiInfo.FieldName, "ShipDate");
                                            }), $t1).toList($t1));
                                            updated.ForEach(function (x) {
                                                x.Dirty = true;
                                            });
                                            $task1 = listViewItem.PatchUpdate();
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            return;
                                        }
                                        default: {
                                            return;
                                        }
                                    }
                                }
                            }, arguments);

                        $asyncBody();
                    }));
                    this.AddChild(confirmDialog);
                }
            },
            ReturnGoods: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Return TransportationPlan Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Manage.ReturnTransportationPlanEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Tr\u1ea3 h\u00e0ng";
                                            instance.Entity = new TMS.API.Models.Transportation();
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            GetPathEntity: function (transportation) {
                var $t;
                var details = new (System.Collections.Generic.List$1(Core.ViewModels.PatchUpdateDetail)).ctor();
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = Core.Extensions.Utils.IdField, $t.Value = Bridge.toString(transportation.Id), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "IsReturn", $t.Value = System.Boolean.toString((true)), $t));
                return ($t = new Core.ViewModels.PatchUpdate(), $t.Changes = details, $t);
            },
            SetStartShip: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Set Start Ship", Bridge.fn.bind(this, function () {
                                            var $t;
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Manage.SetStartShipBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "C\u1eadp nh\u1eadt ng\u00e0y t\u00e0u c\u1eadp";
                                            instance.Entity = ($t = new TMS.API.Models.Transportation(), $t.ShipId = this.selected == null ? null : this.selected.ShipId, $t.BrandShipId = this.selected == null ? null : this.selected.BrandShipId, $t.Trip = this.selected == null ? null : this.selected.Trip, $t.RouteIds = this.selected == null ? null : Bridge.fn.bind(this, function (_o1) {
                                                _o1.add(System.Nullable.getValue(this.selected.RouteId));
                                                return _o1;
                                            })(new (System.Collections.Generic.List$1(System.Int32)).ctor()), $t);
                                            return instance;
                                        }), false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            UpdateStartShip: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Update Start Ship", Bridge.fn.bind(this, function () {
                                            var $t;
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Manage.UpdateStartShipBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Ch\u1ec9nh s\u1eeda ng\u00e0y t\u00e0u c\u1eadp";
                                            instance.Entity = ($t = new TMS.API.Models.Transportation(), $t.ShipId = this.selected == null ? null : this.selected.ShipId, $t.Trip = this.selected == null ? null : this.selected.Trip, $t.PortLiftId = this.selected == null ? null : this.selected.PortLiftId, $t.ShipDate = this.selected == null ? null : this.selected.ShipDate, $t.RouteIds = this.selected == null ? null : Bridge.fn.bind(this, function (_o1) {
                                                _o1.add(System.Nullable.getValue(this.selected.RouteId));
                                                return _o1;
                                            })(new (System.Collections.Generic.List$1(System.Int32)).ctor()), $t);
                                            return instance;
                                        }), false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CheckAndReturnTransportation: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    gridView, 
                    selecteds, 
                    selected, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(null, null);
                                        $task1 = gridView.GetRealTimeSelectedRows();
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        selecteds = System.Linq.Enumerable.from(($taskResult1)).select(function (x) { return Bridge.cast(x, TMS.API.Models.Transportation); }).toList(TMS.API.Models.Transportation);
                                        selected = System.Linq.Enumerable.from(selecteds, TMS.API.Models.Transportation).firstOrDefault(null, null);
                                        if (System.Linq.Enumerable.from(selecteds, TMS.API.Models.Transportation).count() > 1) {
                                            Core.Extensions.Toast.Warning("Ch\u1ec9 \u0111\u01b0\u1ee3c ch\u1ecdn m\u1ed9t danh s\u00e1ch v\u1eadn chuy\u1ec3n");
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        if (selected == null) {
                                            Core.Extensions.Toast.Warning("Vui l\u00f2ng ch\u1ecdn danh s\u00e1ch v\u1eadn chuy\u1ec3n");
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        $tcs.setResult(selected);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CheckContainerType: function (expense) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    containerTypes, 
                    containerTypeCodes, 
                    $t, 
                    containerTypeName, 
                    containers, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = new Core.Clients.Client.$ctor1("MasterData").GetRawList(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and ParentId eq 7565", null));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        containerTypes = $taskResult1;
                                        containerTypeCodes = ($t = TMS.API.Models.MasterData, System.Linq.Enumerable.from(containerTypes, $t).toDictionary(function (x) {
                                            return x.Id;
                                        }, null, System.Int32, $t));
                                        containerTypeName = System.Collections.Generic.CollectionExtensions.GetValueOrDefault(System.Int32, TMS.API.Models.MasterData, containerTypeCodes, System.Nullable.getValue(expense.ContainerTypeId));
                                        $task2 = new Core.Clients.Client.$ctor1("MasterData").GetRawList(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and (contains(Name, '40HC') or contains(Name, '20DC') or contains(Name, '45HC') or contains(Name, '50DC'))", null));
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        containers = $taskResult2;
                                        if (System.String.contains(containerTypeName.Description,"Cont 20")) {
                                            this.containerId = containers.Find(function (x) {
                                                return System.String.contains(x.Name,"20DC");
                                            }).Id;
                                        } else if (System.String.contains(containerTypeName.Description,"Cont 40")) {
                                            this.containerId = containers.Find(function (x) {
                                                return System.String.contains(x.Name,"40HC");
                                            }).Id;
                                        } else if (System.String.contains(containerTypeName.Description,"Cont 45")) {
                                            this.containerId = containers.Find(function (x) {
                                                return System.String.contains(x.Name,"45HC");
                                            }).Id;
                                        } else if (System.String.contains(containerTypeName.Description,"Cont 50")) {
                                            this.containerId = containers.Find(function (x) {
                                                return System.String.contains(x.Name,"50DC");
                                            }).Id;
                                        }
                                        $tcs.setResult(this.containerId);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CreateCommodityValue: function (expense, totalPrice) {
                var startDate1 = System.DateTime.create(System.DateTime.getYear(System.DateTime.getNow()), 1, 1);
                var endDate1 = System.DateTime.create(System.DateTime.getYear(System.DateTime.getNow()), 6, 30);
                var startDate2 = System.DateTime.create(System.DateTime.getYear(System.DateTime.getNow()), 7, 1);
                var endDate2 = System.DateTime.create(System.DateTime.getYear(System.DateTime.getNow()), 12, 31);
                var newCommodityValue = new TMS.API.Models.CommodityValue();
                Core.Extensions.ReflectionExt.CopyPropFrom$1(newCommodityValue, expense);
                newCommodityValue.Id = 0;
                newCommodityValue.ContainerId = this.containerId;
                newCommodityValue.TotalPrice = totalPrice;
                newCommodityValue.Notes = expense.CommodityValueNotes;
                newCommodityValue.Active = true;
                newCommodityValue.InsertedDate = System.DateTime.getDate(System.DateTime.getNow());
                newCommodityValue.StartDate = System.DateTime.getDate(System.DateTime.getNow());
                newCommodityValue.CreatedBy = Core.Clients.Client.Token.UserId;
                if (System.DateTime.gte(System.DateTime.getDate(System.DateTime.getNow()), startDate1) && System.DateTime.lte(System.DateTime.getDate(System.DateTime.getNow()), endDate1)) {
                    newCommodityValue.EndDate = endDate1;
                }
                if (System.DateTime.gte(System.DateTime.getDate(System.DateTime.getNow()), startDate2) && System.DateTime.lte(System.DateTime.getDate(System.DateTime.getNow()), endDate2)) {
                    newCommodityValue.EndDate = endDate2;
                }
                return newCommodityValue;
            },
            CalcTax: function (expense) {
                var grid = Core.Components.Extensions.ComponentExt.FindComponentByName(Core.Components.GridView, this, "Expense");
                var listViewItem = System.Linq.Enumerable.from(grid.GetListViewItems(expense), Core.Components.ListViewItem).firstOrDefault(null, null);
                expense.TotalPriceBeforeTax = expense.UnitPrice.mul(expense.Quantity);
                expense.TotalPriceAfterTax = expense.TotalPriceBeforeTax.add(expense.TotalPriceBeforeTax.mul(expense.Vat).div(System.Decimal(100)));
                if (listViewItem != null) {
                    listViewItem.UpdateView();
                    var updated = listViewItem.FilterChildren$1(function (x) {
                        return Bridge.referenceEquals(x.GuiInfo.FieldName, "TotalPriceBeforeTax") || Bridge.referenceEquals(x.GuiInfo.FieldName, "TotalPriceAfterTax");
                    });
                    Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, updated, function (x) {
                        x.Dirty = true;
                    });
                }
            },
            UpdateCommodityValue: function (expense) {
                window.clearTimeout(this.commodityAwaiter);
                this.commodityAwaiter = window.setTimeout(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.UpdateCommodityAsync(expense);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }), 500);
                this.CalcTax(expense);
            },
            UpdateCommodityAsync: function (expense) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $task3, 
                    $taskResult3, 
                    $task4, 
                    $taskResult4, 
                    $task5, 
                    $taskResult5, 
                    $task6, 
                    $task7, 
                    $task8, 
                    $taskResult8, 
                    $task9, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    expenseType, 
                    containerId, 
                    commodityValueDB, 
                    boss, 
                    confirm, 
                    $t, 
                    confirm1, 
                    gridView, 
                    masterDataDB, 
                    vat, 
                    listViewItem, 
                    updated, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,10,11,12,13,15,16,17,19], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = new Core.Clients.Client.$ctor1("MasterData").FirstOrDefaultAsync(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and ParentId eq 7577 and Id eq {0}", [Bridge.box(expense.ExpenseTypeId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        expenseType = $taskResult1;
                                        if (System.String.contains(expenseType.Name,"B\u1ea3o hi\u1ec3m") === false && System.String.contains(expenseType.Name,"BH SOC") === false) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        if (expense.BossId != null && System.Nullable.gt(expense.BossId, 0) && expense.CommodityId != null && System.Nullable.gt(expense.CommodityId, 0) && expense.ContainerTypeId != null && System.Nullable.gt(expense.ContainerTypeId, 0)) {
                                            $step = 2;
                                            continue;
                                        } 
                                        $step = 19;
                                        continue;
                                    }
                                    case 2: {
                                        $task2 = this.CheckContainerType(expense);
                                        $step = 3;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        containerId = $taskResult2;
                                        $task3 = new Core.Clients.Client.$ctor1("CommodityValue").FirstOrDefaultAsync(TMS.API.Models.CommodityValue, System.String.format("?$filter=Active eq true and BossId eq {0} and CommodityId eq {1} and ContainerId eq {2}", Bridge.box(expense.BossId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), Bridge.box(expense.CommodityId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), Bridge.box(containerId, System.Int32)));
                                        $step = 4;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        commodityValueDB = $taskResult3;
                                        $task4 = new Core.Clients.Client.$ctor1("Vendor").FirstOrDefaultAsync(TMS.API.Models.Vendor, System.String.format("?$filter=Active eq true and Id eq {0}", [Bridge.box(expense.BossId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]));
                                        $step = 5;
                                        if ($task4.isCompleted()) {
                                            continue;
                                        }
                                        $task4.continue($asyncBody);
                                        return;
                                    }
                                    case 5: {
                                        $taskResult4 = $task4.getAwaitedResult();
                                        boss = $taskResult4;
                                        if (commodityValueDB == null) {
                                            $step = 6;
                                            continue;
                                        } else  {
                                            $step = 7;
                                            continue;
                                        }
                                    }
                                    case 6: {
                                        confirm = ($t = new Core.Components.Forms.ConfirmDialog(), $t.Content = "B\u1ea1n c\u00f3 mu\u1ed1n l\u01b0u gi\u00e1 tr\u1ecb n\u00e0y v\u00e0o b\u1ea3ng GTHH kh\u00f4ng?", $t);
                                        confirm.Render();
                                        confirm.YesConfirmed = Bridge.fn.combine(confirm.YesConfirmed, Bridge.fn.bind(this, function () {
                                            var $step = 0,
                                                $task1, 
                                                $taskResult1, 
                                                $jumpFromFinally, 
                                                newCommodityValue, 
                                                $asyncBody = Bridge.fn.bind(this, function () {
                                                    for (;;) {
                                                        $step = System.Array.min([0,1], $step);
                                                        switch ($step) {
                                                            case 0: {
                                                                newCommodityValue = this.CreateCommodityValue(expense, System.Nullable.getValue(expense.CommodityValue));
                                                                newCommodityValue.SaleId = boss.UserId;
                                                                newCommodityValue.CreatedBy = Core.Clients.Client.Token.UserId;
                                                                $task1 = new Core.Clients.Client.$ctor1("CommodityValue").CreateAsync$1(newCommodityValue);
                                                                $step = 1;
                                                                if ($task1.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task1.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 1: {
                                                                $taskResult1 = $task1.getAwaitedResult();
                                                                return;
                                                            }
                                                            default: {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }, arguments);

                                            $asyncBody();
                                        }));
                                        $step = 18;
                                        continue;
                                    }
                                    case 7: {
                                        if (System.Nullable.liftne("ne", expense.CommodityValue, commodityValueDB.TotalPrice)) {
                                            confirm1 = ($t = new Core.Components.Forms.ConfirmDialog(), $t.Content = "B\u1ea1n c\u00f3 mu\u1ed1n l\u01b0u gi\u00e1 tr\u1ecb n\u00e0y v\u00e0o b\u1ea3ng GTHH kh\u00f4ng?", $t);
                                            confirm1.Render();
                                            confirm1.YesConfirmed = Bridge.fn.combine(confirm1.YesConfirmed, Bridge.fn.bind(this, function () {
                                                var $step = 0,
                                                    $task1, 
                                                    $taskResult1, 
                                                    $task2, 
                                                    $taskResult2, 
                                                    $jumpFromFinally, 
                                                    newCommodityValue, 
                                                    $asyncBody = Bridge.fn.bind(this, function () {
                                                        for (;;) {
                                                            $step = System.Array.min([0,1,2], $step);
                                                            switch ($step) {
                                                                case 0: {
                                                                    commodityValueDB.EndDate = System.DateTime.getDate(System.DateTime.getNow());
                                                                    commodityValueDB.Active = false;
                                                                    $task1 = new Core.Clients.Client.$ctor1("CommodityValue").PatchAsync(System.Object, this.GetPatchEntity(commodityValueDB));
                                                                    $step = 1;
                                                                    if ($task1.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task1.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 1: {
                                                                    $taskResult1 = $task1.getAwaitedResult();
                                                                    newCommodityValue = this.CreateCommodityValue(expense, System.Nullable.getValue(expense.CommodityValue));
                                                                    newCommodityValue.StartDate = System.DateTime.getDate(System.DateTime.getNow());
                                                                    $task2 = new Core.Clients.Client.$ctor1("CommodityValue").CreateAsync$1(newCommodityValue);
                                                                    $step = 2;
                                                                    if ($task2.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task2.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 2: {
                                                                    $taskResult2 = $task2.getAwaitedResult();
                                                                    return;
                                                                }
                                                                default: {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }, arguments);

                                                $asyncBody();
                                            }));
                                        }
                                        gridView = Core.Components.Extensions.ComponentExt.FindComponentByName(Core.Components.GridView, this, "Expense");
                                        $task5 = new Core.Clients.Client.$ctor1("MasterData").FirstOrDefaultAsync(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and Id eq 11685", null));
                                        $step = 8;
                                        if ($task5.isCompleted()) {
                                            continue;
                                        }
                                        $task5.continue($asyncBody);
                                        return;
                                    }
                                    case 8: {
                                        $taskResult5 = $task5.getAwaitedResult();
                                        masterDataDB = $taskResult5;
                                        vat = System.Decimal(masterDataDB.Name);
                                        if (System.String.contains(expenseType.Name,"B\u1ea3o hi\u1ec3m")) {
                                            $step = 9;
                                            continue;
                                        } else  {
                                            $step = 11;
                                            continue;
                                        }
                                    }
                                    case 9: {
                                        $task6 = this.CalcInsuranceFees(expense, false);
                                        $step = 10;
                                        if ($task6.isCompleted()) {
                                            continue;
                                        }
                                        $task6.continue($asyncBody);
                                        return;
                                    }
                                    case 10: {
                                        $task6.getAwaitedResult();
                                        $step = 15;
                                        continue;
                                    }
                                    case 11: {
                                        if (System.String.contains(expenseType.Name,"BH SOC")) {
                                            $step = 12;
                                            continue;
                                        } 
                                        $step = 14;
                                        continue;
                                    }
                                    case 12: {
                                        $task7 = this.CalcInsuranceFees(expense, true);
                                        $step = 13;
                                        if ($task7.isCompleted()) {
                                            continue;
                                        }
                                        $task7.continue($asyncBody);
                                        return;
                                    }
                                    case 13: {
                                        $task7.getAwaitedResult();
                                        $step = 14;
                                        continue;
                                    }

                                    case 15: {
                                        $task8 = new Core.Clients.Client.$ctor1("Expense").PatchAsync(System.Object, this.GetPatchEntity$1(expense));
                                        $step = 16;
                                        if ($task8.isCompleted()) {
                                            continue;
                                        }
                                        $task8.continue($asyncBody);
                                        return;
                                    }
                                    case 16: {
                                        $taskResult8 = $task8.getAwaitedResult();
                                        listViewItem = System.Linq.Enumerable.from(gridView.GetListViewItems(expense), Core.Components.ListViewItem).firstOrDefault(null, null);
                                        listViewItem.UpdateView();
                                        updated = ($t = Core.Components.Number, System.Linq.Enumerable.from(listViewItem.FilterChildren(Core.Components.Number, function (x) {
                                            return Bridge.referenceEquals(x.GuiInfo.FieldName, "CommodityValue") || Bridge.referenceEquals(x.GuiInfo.FieldName, "TotalPriceBeforeTax") || Bridge.referenceEquals(x.GuiInfo.FieldName, "TotalPriceAfterTax");
                                        }), $t).toList($t));
                                        updated.ForEach(function (x) {
                                            x.Dirty = true;
                                        });
                                        $task9 = listViewItem.PatchUpdate();
                                        $step = 17;
                                        if ($task9.isCompleted()) {
                                            continue;
                                        }
                                        $task9.continue($asyncBody);
                                        return;
                                    }
                                    case 17: {
                                        $task9.getAwaitedResult();
                                        $step = 18;
                                        continue;
                                    }

                                    case 19: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            UpdateCombinationFee: function (transportation) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    gridView, 
                    listViewItem, 
                    quotation, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4], $step);
                                switch ($step) {
                                    case 0: {
                                        if (transportation.BrandShipId == null) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        gridView = Core.Components.Extensions.ComponentExt.FindComponentByName(Core.Components.GridView, this, "Transportation");
                                        listViewItem = System.Linq.Enumerable.from(gridView.GetListViewItems(transportation), Core.Components.ListViewItem).firstOrDefault(null, null);
                                        if (transportation.IsEmptyCombination || transportation.IsClosingCustomer) {
                                            $step = 1;
                                            continue;
                                        } else  {
                                            $step = 3;
                                            continue;
                                        }
                                    }
                                    case 1: {
                                        $task1 = new Core.Clients.Client.$ctor1("Quotation").FirstOrDefaultAsync(TMS.API.Models.Quotation, System.String.format("?$filter=Active eq true and TypeId eq 12071 and PackingId eq {0}", [Bridge.box(transportation.BrandShipId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]));
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        quotation = $taskResult1;
                                        transportation.CombinationFee = quotation == null ? Bridge.getDefaultValue(System.Decimal) : quotation.UnitPrice;
                                        $step = 4;
                                        continue;
                                    }
                                    case 3: {
                                        transportation.CombinationFee = System.Decimal(0);
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        listViewItem.UpdateView();
                                        Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, listViewItem.FilterChildren$1(function (x) {
                                            return Bridge.referenceEquals(x.GuiInfo.FieldName, "CombinationFee");
                                        }), function (x) {
                                            x.Dirty = true;
                                        });
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            BookingChange: function (transportation, booking) {
                var gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                        return Bridge.referenceEquals(x.GuiInfo.FieldName, "Transportation");
                    }, null);
                var listViewItem = System.Linq.Enumerable.from(gridView.GetListViewItems(transportation), Core.Components.ListViewItem).firstOrDefault(null, null);
                transportation.ShipId = booking == null ? null : booking.ShipId;
                transportation.BrandShipId = booking == null ? null : booking.BrandShipId;
                transportation.Trip = booking == null ? null : booking.Trip;
                transportation.StartShip = booking == null ? null : booking.StartShip;
                transportation.PickupEmptyId = booking == null ? null : booking.PickupEmptyId;
                transportation.PortLoadingId = booking == null ? null : booking.PortLoadingId;
                transportation.LineId = booking == null ? null : booking.LineId;
                transportation.PolicyId = booking == null ? null : transportation.PolicyId;
                transportation.ShipPolicyPrice = booking == null ? System.Decimal(0) : transportation.ShipPolicyPrice;
                transportation.ShipUnitPrice = booking == null ? System.Decimal.lift(null) : transportation.ShipUnitPrice;
                listViewItem.UpdateView$1(true);
                Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, listViewItem.FilterChildren$1(function (x) {
                    return Bridge.referenceEquals(x.GuiInfo.FieldName, "ShipId") || Bridge.referenceEquals(x.GuiInfo.FieldName, "PolicyId") || Bridge.referenceEquals(x.GuiInfo.FieldName, "BrandShipId") || Bridge.referenceEquals(x.GuiInfo.FieldName, "Trip") || Bridge.referenceEquals(x.GuiInfo.FieldName, "LineId") || Bridge.referenceEquals(x.GuiInfo.FieldName, "StartShip") || Bridge.referenceEquals(x.GuiInfo.FieldName, "PortLoadingId") || Bridge.referenceEquals(x.GuiInfo.FieldName, "PickupEmptyId") || Bridge.referenceEquals(x.GuiInfo.FieldName, "ShipUnitPrice") || Bridge.referenceEquals(x.GuiInfo.FieldName, "ShipPrice") || Bridge.referenceEquals(x.GuiInfo.FieldName, "ShipPolicyPrice");
                }), function (x) {
                    x.Dirty = true;
                });
            },
            AfterPatchUpdateTransportation: function (transportation, patchUpdate, listViewItem) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $task3, 
                    $taskResult3, 
                    $task4, 
                    $taskResult4, 
                    $task5, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    startShip, 
                    listpolicy, 
                    components, 
                    operators, 
                    componentrs, 
                    operatorrs, 
                    query, 
                    rs, 
                    data, 
                    index, 
                    $t, 
                    item, 
                    detail, 
                    $t1, 
                    build, 
                    checks, 
                    data1, 
                    $t2, 
                    item1, 
                    indexOfShip, 
                    indexOf, 
                    tranShip, 
                    index1, 
                    $t3, 
                    item2, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,10], $step);
                                switch ($step) {
                                    case 0: {
                                        if (transportation.BookingId == null) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        if (System.Linq.Enumerable.from(patchUpdate.Changes, Core.ViewModels.PatchUpdateDetail).any(function (x) {
                                            return Bridge.referenceEquals(x.Field, "ContainerTypeId") || Bridge.referenceEquals(x.Field, "BossId") || Bridge.referenceEquals(x.Field, "Weight") || Bridge.referenceEquals(x.Field, "CommodityId") || Bridge.referenceEquals(x.Field, "StartShip") || Bridge.referenceEquals(x.Field, "ShipId") || Bridge.referenceEquals(x.Field, "BookingId") || Bridge.referenceEquals(x.Field, "RouteId");
                                        })) {
                                            $step = 1;
                                            continue;
                                        } 
                                        $step = 10;
                                        continue;
                                    }
                                    case 1: {
                                        transportation.StartShip = System.Convert.toDateTime(Bridge.box(transportation.StartShip, System.DateTime, System.Nullable.toStringFn(System.DateTime.format), System.Nullable.getHashCode));
                                        startShip = Core.Extensions.DateTimeExt.ToOdataFormat(System.Nullable.getValue(transportation.StartShip));
                                        $task1 = new Core.Clients.Client.$ctor1("SettingPolicy").GetRawList(TMS.API.Models.SettingPolicy, System.String.format("?$expand=SettingPolicyDetail&$filter=ExportListId eq {0} and BrandShipId eq {1} and StartDate lt {2} and (EndDate gt {3} or EndDate eq null) and TypeId eq 1&$orderby=UnitPrice desc", Bridge.box(transportation.ExportListId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), Bridge.box(transportation.BrandShipId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), startShip, startShip));
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        listpolicy = $taskResult1;
                                        if (Core.Extensions.IEnumerableExtensions.Nothing(TMS.API.Models.SettingPolicy, listpolicy)) {
                                            Core.Extensions.Toast.Success("Kh\u00f4ng t\u00ecm th\u1ea5y ch\u00ednh s\u00e1ch");
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        Core.Extensions.Toast.Warning("H\u1ec7 th\u1ed1ng \u0111ang l\u1ea5y ch\u00ednh s\u00e1ch h\u00e3ng t\u00e0u");
                                        components = new Core.Clients.Client.$ctor1("GridPolicy").GetRawList(TMS.API.Models.GridPolicy, "?$filter=ComponentId eq 16016");
                                        operators = new Core.Clients.Client.$ctor1("MasterData").GetRawList(TMS.API.Models.MasterData, "?$filter=Parent/Name eq 'Operator'");
                                        if (Bridge.equals(transportation.StartShip, null)) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        $task2 = System.Threading.Tasks.Task.whenAll(components, operators);
                                        $step = 3;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $task2.getAwaitedResult();
                                        componentrs = components.getResult();
                                        operatorrs = operators.getResult();
                                        query = new (System.Collections.Generic.List$1(System.String)).ctor();
                                        rs = System.Linq.Enumerable.from(listpolicy, TMS.API.Models.SettingPolicy).selectMany(function (item) {
                                            var $t;
                                            var detail = ($t = TMS.API.Models.SettingPolicyDetail, System.Linq.Enumerable.from(item.SettingPolicyDetail, $t).toList($t));
                                            var build = System.Linq.Enumerable.from(detail, TMS.API.Models.SettingPolicyDetail).groupBy(function (z) {
                                                return z.ComponentId;
                                            }).selectMany(function (y) {
                                                var group = System.Linq.Enumerable.from(y.toList(TMS.API.Models.SettingPolicyDetail), TMS.API.Models.SettingPolicyDetail).select(function (l) {
                                                    var $t1;
                                                    var component = System.Linq.Enumerable.from(componentrs, TMS.API.Models.GridPolicy).firstOrDefault(function (k) {
                                                        return System.Nullable.eq(k.Id, l.ComponentId);
                                                    }, null);
                                                    if (component == null) {
                                                        return null;
                                                    }
                                                    var ope = System.Linq.Enumerable.from(operatorrs, TMS.API.Models.MasterData).firstOrDefault(function (k) {
                                                        return System.Nullable.eq(k.Id, l.OperatorId);
                                                    }, null);
                                                    if (Bridge.referenceEquals(component.ComponentType, "Dropdown") || Bridge.referenceEquals(component.ComponentType, "SearchEntry")) {
                                                        var format = System.String.replaceAll(($t1 = component.FormatCell.split("}"))[System.Array.index(0, $t1)], "{", "");
                                                        if (Bridge.referenceEquals(component.FieldName, "CommodityId")) {
                                                            return new Core.Clients.Client.$ctor1(component.RefName).GetRawList(System.Object, System.String.format(System.String.format("?$expand=InverseParent&$filter={0}", [ope.Name]), format, l.Value), false, false, false, component.RefName);
                                                        } else {
                                                            return new Core.Clients.Client.$ctor1(component.RefName).GetRawList(System.Object, System.String.format(System.String.format("?$select=Id&$filter={0}", [ope.Name]), format, l.Value), false, false, false, component.RefName);
                                                        }
                                                    } else {
                                                        return null;
                                                    }
                                                });
                                                return group;
                                            }).toList(System.Threading.Tasks.Task$1(System.Collections.Generic.List$1(System.Object)));
                                            return build;
                                        }).where(function (x) {
                                            return x != null;
                                        }).toList(System.Threading.Tasks.Task$1(System.Collections.Generic.List$1(System.Object)));
                                        if (Core.Extensions.IEnumerableExtensions.Nothing(System.Threading.Tasks.Task$1(System.Collections.Generic.List$1(System.Object)), rs)) {
                                            Core.Extensions.Toast.Success("Kh\u00f4ng t\u00ecm th\u1ea5y ch\u00ednh s\u00e1ch");
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        $task3 = System.Threading.Tasks.Task.whenAll(rs);
                                        $step = 4;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        data = $taskResult3;
                                        if (Core.Extensions.IEnumerableExtensions.Nothing(System.Collections.Generic.List$1(System.Object), data)) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        index = 0;
                                        $t = Bridge.getEnumerator(listpolicy);
                                        try {
                                            while ($t.moveNext()) {
                                                item = $t.Current;
                                                detail = ($t1 = TMS.API.Models.SettingPolicyDetail, System.Linq.Enumerable.from(item.SettingPolicyDetail, $t1).toList($t1));
                                                build = System.Linq.Enumerable.from(detail, TMS.API.Models.SettingPolicyDetail).groupBy(function (z) {
                                                    return z.ComponentId;
                                                }).select(function (y) {
                                                    var listAnd = new (System.Collections.Generic.List$1(System.String)).ctor();
                                                    var group = System.Linq.Enumerable.from(y.toList(TMS.API.Models.SettingPolicyDetail), TMS.API.Models.SettingPolicyDetail).select(function (l) {
                                                        var $t2;
                                                        var component = System.Linq.Enumerable.from(componentrs, TMS.API.Models.GridPolicy).firstOrDefault(function (k) {
                                                            return System.Nullable.eq(k.Id, l.ComponentId);
                                                        }, null);
                                                        if (component == null) {
                                                            return null;
                                                        }
                                                        var ope = System.Linq.Enumerable.from(operatorrs, TMS.API.Models.MasterData).firstOrDefault(function (k) {
                                                            return System.Nullable.eq(k.Id, l.OperatorId);
                                                        }, null);
                                                        if (Bridge.referenceEquals(component.ComponentType, "Dropdown") || Bridge.referenceEquals(component.ComponentType, "SearchEntry")) {
                                                            var rsdynamic = data[System.Array.index(index, data)];
                                                            index = (index + 1) | 0;
                                                            if (System.Linq.Enumerable.from(rsdynamic, System.Object).any()) {
                                                                var ids = "";
                                                                if (Bridge.referenceEquals(component.FieldName, "CommodityId")) {
                                                                    var listMasterData = System.Linq.Enumerable.from(rsdynamic, System.Object).select(function (x) {
                                                                        var $t2;
                                                                        return ($t2 = new TMS.API.Models.MasterData(), $t2.Id = x.Id, $t2.ParentId = x.ParentId, $t2.InverseParent = x.InverseParent, $t2);
                                                                    }).toList(TMS.API.Models.MasterData);
                                                                    var child = System.Linq.Enumerable.from(listMasterData, TMS.API.Models.MasterData).where(function (x) {
                                                                        return System.Linq.Enumerable.from(x.InverseParent, TMS.API.Models.MasterData).any();
                                                                    }).selectMany(function (x) {
                                                                        return x.InverseParent;
                                                                    }).toList(TMS.API.Models.MasterData);
                                                                    if (System.Linq.Enumerable.from(child, TMS.API.Models.MasterData).any()) {
                                                                        var childIds = System.Linq.Enumerable.from(child, TMS.API.Models.MasterData).select(function (x) {
                                                                            return x.Id;
                                                                        }).toList(System.Int32);
                                                                        ids = Core.Extensions.IEnumerableExtensions.Combine(System.Int32, System.Linq.Enumerable.from(System.Linq.Enumerable.from(listMasterData, TMS.API.Models.MasterData).select(function (x) {
                                                                            return x.Id;
                                                                        }).select(function (x) {{ return Bridge.cast(x, System.Int32); }}).toList(System.Int32), System.Int32).union(System.Linq.Enumerable.from(listMasterData, TMS.API.Models.MasterData).where(function (x) {
                                                                            return x.ParentId != null;
                                                                        }).select(function (x) {
                                                                            return x.ParentId;
                                                                        }).select(function (x) {{ return Bridge.cast(x, System.Int32); }}).toList(System.Int32)).union(childIds));
                                                                    } else {
                                                                        ids = Core.Extensions.IEnumerableExtensions.Combine(System.Int32, System.Linq.Enumerable.from(System.Linq.Enumerable.from(listMasterData, TMS.API.Models.MasterData).select(function (x) {
                                                                            return x.Id;
                                                                        }).select(function (x) {{ return Bridge.cast(x, System.Int32); }}).toList(System.Int32), System.Int32).union(System.Linq.Enumerable.from(listMasterData, TMS.API.Models.MasterData).where(function (x) {
                                                                            return x.ParentId != null;
                                                                        }).select(function (x) {
                                                                            return x.ParentId;
                                                                        }).select(function (x) {{ return Bridge.cast(x, System.Int32); }}).toList(System.Int32)).where(function (x) {
                                                                            return x > 0;
                                                                        }));
                                                                    }
                                                                } else {
                                                                    ids = Core.Extensions.IEnumerableExtensions.Combine(System.Int32, System.Linq.Enumerable.from(rsdynamic, System.Object).select(function (x) {
                                                                        return x.Id;
                                                                    }).select(function (x) {{ return Bridge.cast(x, System.Int32); }}).where(function (x) {
                                                                        return x > 0;
                                                                    }));
                                                                }
                                                                var format = System.String.replaceAll(($t2 = component.FormatCell.split("}"))[System.Array.index(0, $t2)], "{", "");
                                                                if (Bridge.referenceEquals(ope.Description, "Ch\u1ee9a") || Bridge.referenceEquals(ope.Description, "B\u1eb1ng")) {
                                                                    return System.String.format("{0} in ({1})", component.FieldName, ids);
                                                                } else {
                                                                    return System.String.format("{0} in ({1}) eq false", component.FieldName, ids);
                                                                }
                                                            } else {
                                                                return null;
                                                            }
                                                        } else {
                                                            listAnd.add(System.String.format("{0}", [System.String.format(ope.Name, component.FieldName, l.Value)]));
                                                            return null;
                                                        }
                                                    }).where(function (x) {
                                                        return !Bridge.referenceEquals(x, "()") && !Core.Extensions.StringExt.IsNullOrWhiteSpace(x);
                                                    }).toList(System.String);
                                                    return ((group.Count === 0 ? "" : System.String.format("({0})", [Core.Extensions.IEnumerableExtensions.Combine(System.String, System.Linq.Enumerable.from(group, System.String).where(function (x) {
                                                        return !Bridge.referenceEquals(x, "()") && !Core.Extensions.StringExt.IsNullOrWhiteSpace(x);
                                                    }), " or ")])) || "") + ((listAnd.Count === 0 ? "" : System.String.format(" {0}", [Core.Extensions.IEnumerableExtensions.Combine(System.String, System.Linq.Enumerable.from(listAnd, System.String).where(function (x) {
                                                        return !Core.Extensions.StringExt.IsNullOrWhiteSpace(x);
                                                    }), " and ")])) || "");
                                                }).toList(System.String);
                                                query.add(Core.Extensions.IEnumerableExtensions.Combine(System.String, System.Linq.Enumerable.from(build, System.String).where(function (x) {
                                                    return !Bridge.referenceEquals(x, "()") && !Core.Extensions.StringExt.IsNullOrWhiteSpace(x);
                                                }), " and "));
                                            }
                                        } finally {
                                            if (Bridge.is($t, System.IDisposable)) {
                                                $t.System$IDisposable$Dispose();
                                            }
                                        }
                                        checks = System.Linq.Enumerable.from(query, System.String).where(function (x) {
                                            return !Core.Extensions.StringExt.IsNullOrWhiteSpace(x);
                                        }).select(function (x) {
                                            return new Core.Clients.Client.$ctor1("Transportation").FirstOrDefaultAsync(TMS.API.Models.Transportation, System.String.format("?$select=Id&$filter=Active eq true and Id eq {0} and {1}", Bridge.box(transportation.Id, System.Int32), x));
                                        }).toList(System.Threading.Tasks.Task$1(TMS.API.Models.Transportation));
                                        data1 = new (System.Collections.Generic.List$1(TMS.API.Models.Transportation)).ctor();
                                        $t2 = Bridge.getEnumerator(checks);
                                        $step = 5;
                                        continue;
                                    }
                                    case 5: {
                                        if ($t2.moveNext()) {
                                            item1 = $t2.Current;
                                            $step = 6;
                                            continue;
                                        }
                                        $step = 8;
                                        continue;
                                    }
                                    case 6: {
                                        $task4 = item1;
                                        $step = 7;
                                        if ($task4.isCompleted()) {
                                            continue;
                                        }
                                        $task4.continue($asyncBody);
                                        return;
                                    }
                                    case 7: {
                                        $taskResult4 = $task4.getAwaitedResult();
                                        data1.add($taskResult4);
                                        $step = 5;
                                        continue;
                                    }
                                    case 8: {
                                        indexOfShip = Core.Extensions.IEnumerableExtensions.IndexOf(TMS.API.Models.SettingPolicy, listpolicy, function (x) {
                                            return x.CheckAll;
                                        });
                                        indexOf = Core.Extensions.IEnumerableExtensions.IndexOf(TMS.API.Models.Transportation, data1, function (x) {
                                            return x != null;
                                        });
                                        if (indexOf === -1) {
                                            transportation.PolicyId = null;
                                            transportation.ShipPolicyPrice = System.Decimal.lift(null);
                                        } else {
                                            if (indexOfShip > 0) {
                                                tranShip = data1.getItem(indexOfShip);
                                                if (tranShip != null) {
                                                    transportation.PolicyId = listpolicy.getItem(indexOfShip).PolicyId;
                                                    transportation.ShipPolicyPrice = listpolicy.getItem(indexOfShip).UnitPrice;
                                                    index1 = 0;
                                                    $t3 = Bridge.getEnumerator(data1);
                                                    try {
                                                        while ($t3.moveNext()) {
                                                            item2 = $t3.Current;
                                                            if (index1 !== indexOfShip && item2 != null) {
                                                                transportation.ShipPolicyPrice = System.Nullable.lift2("add", transportation.ShipPolicyPrice, listpolicy.getItem(index1).UnitPrice);
                                                                break;
                                                            }
                                                            index1 = (index1 + 1) | 0;
                                                        }
                                                    } finally {
                                                        if (Bridge.is($t3, System.IDisposable)) {
                                                            $t3.System$IDisposable$Dispose();
                                                        }
                                                    }
                                                } else {
                                                    transportation.PolicyId = listpolicy.getItem(indexOf).PolicyId;
                                                    transportation.ShipPolicyPrice = listpolicy.getItem(indexOf).UnitPrice;
                                                }
                                            } else {
                                                transportation.PolicyId = listpolicy.getItem(indexOf).PolicyId;
                                                transportation.ShipPolicyPrice = listpolicy.getItem(indexOf).UnitPrice;
                                            }
                                        }
                                        transportation.ShipPrice = (System.Nullable.lifteq("equals", transportation.ShipUnitPriceQuotation, System.Decimal.lift(null)) ? Bridge.getDefaultValue(System.Decimal) : System.Nullable.getValue(transportation.ShipUnitPriceQuotation)).sub((System.Nullable.lifteq("equals", transportation.ShipPolicyPrice, System.Decimal.lift(null)) ? Bridge.getDefaultValue(System.Decimal) : System.Nullable.getValue(transportation.ShipPolicyPrice)));
                                        listViewItem.UpdateView$1(true);
                                        Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, listViewItem.FilterChildren$1(function (x) {
                                            return Bridge.referenceEquals(x.GuiInfo.FieldName, "PolicyId") || Bridge.referenceEquals(x.GuiInfo.FieldName, "ShipPolicyPrice");
                                        }), function (x) {
                                            x.Dirty = true;
                                        });
                                        $task5 = listViewItem.PatchUpdate(true);
                                        $step = 9;
                                        if ($task5.isCompleted()) {
                                            continue;
                                        }
                                        $task5.continue($asyncBody);
                                        return;
                                    }
                                    case 9: {
                                        $task5.getAwaitedResult();
                                        Core.Extensions.Toast.Success("\u0110\u00e3 \u00e1p d\u1ee5ng ch\u00ednh s\u00e1ch");
                                        $step = 10;
                                        continue;
                                    }
                                    case 10: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            SetPolicyTransportationType: function (transportation) {
                var $step = 0,
                    $task1, 
                    $task2, 
                    $taskResult2, 
                    $task3, 
                    $taskResult3, 
                    $task4, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    gridView, 
                    listViewItem, 
                    components, 
                    operators, 
                    settingPolicys, 
                    listpolicy, 
                    componentrs, 
                    operatorrs, 
                    query, 
                    rs, 
                    data, 
                    index, 
                    $t, 
                    item, 
                    detail, 
                    $t1, 
                    build, 
                    str, 
                    check, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,10,11], $step);
                                switch ($step) {
                                    case 0: {
                                        gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                                            return Bridge.referenceEquals(x.GuiInfo.FieldName, "Transportation");
                                        }, null);
                                        listViewItem = System.Linq.Enumerable.from(gridView.GetListViewItems(transportation), Core.Components.ListViewItem).firstOrDefault(null, null);
                                        if (transportation.RouteId != null || transportation.ClosingId != null) {
                                            $step = 1;
                                            continue;
                                        } 
                                        $step = 11;
                                        continue;
                                    }
                                    case 1: {
                                        transportation.TransportationTypeId = null;
                                        components = new Core.Clients.Client.$ctor1("GridPolicy").GetRawList(TMS.API.Models.GridPolicy, "?$filter=Id in (20347, 20342)");
                                        operators = new Core.Clients.Client.$ctor1("MasterData").GetRawList(TMS.API.Models.MasterData, "?$filter=Parent/Name eq 'Operator'");
                                        settingPolicys = new Core.Clients.Client.$ctor1("SettingPolicy").GetRawList(TMS.API.Models.SettingPolicy, System.String.format("?$orderby=Id asc&$expand=SettingPolicyDetail&$filter=TypeId eq 2", null));
                                        $task1 = System.Threading.Tasks.Task.whenAll(components, operators, settingPolicys);
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $task1.getAwaitedResult();
                                        listpolicy = settingPolicys.getResult();
                                        componentrs = components.getResult();
                                        operatorrs = operators.getResult();
                                        query = new (System.Collections.Generic.List$1(System.String)).ctor();
                                        rs = System.Linq.Enumerable.from(listpolicy, TMS.API.Models.SettingPolicy).selectMany(function (item) {
                                            var $t;
                                            var detail = ($t = TMS.API.Models.SettingPolicyDetail, System.Linq.Enumerable.from(item.SettingPolicyDetail, $t).toList($t));
                                            var build = System.Linq.Enumerable.from(detail, TMS.API.Models.SettingPolicyDetail).groupBy(function (z) {
                                                return z.ComponentId;
                                            }).selectMany(function (y) {
                                                var group = System.Linq.Enumerable.from(y.toList(TMS.API.Models.SettingPolicyDetail), TMS.API.Models.SettingPolicyDetail).select(function (l) {
                                                    var $t1;
                                                    var component = System.Linq.Enumerable.from(componentrs, TMS.API.Models.GridPolicy).firstOrDefault(function (k) {
                                                        return System.Nullable.eq(k.Id, l.ComponentId);
                                                    }, null);
                                                    if (component == null) {
                                                        return null;
                                                    }
                                                    var ope = System.Linq.Enumerable.from(operatorrs, TMS.API.Models.MasterData).firstOrDefault(function (k) {
                                                        return System.Nullable.eq(k.Id, l.OperatorId);
                                                    }, null);
                                                    if (Bridge.referenceEquals(component.ComponentType, "Dropdown") || Bridge.referenceEquals(component.ComponentType, "SearchEntry")) {
                                                        var format = System.String.replaceAll(($t1 = component.FormatCell.split("}"))[System.Array.index(0, $t1)], "{", "");
                                                        return new Core.Clients.Client.$ctor1(component.RefName).GetRawList(System.Object, System.String.format(System.String.format("?$select=Id&$filter={0}", [ope.Name]), format, l.Value), false, false, false, component.RefName);
                                                    } else {
                                                        return null;
                                                    }
                                                });
                                                return group;
                                            }).toList(System.Threading.Tasks.Task$1(System.Collections.Generic.List$1(System.Object)));
                                            return build;
                                        }).where(function (x) {
                                            return x != null;
                                        }).toList(System.Threading.Tasks.Task$1(System.Collections.Generic.List$1(System.Object)));
                                        $task2 = System.Threading.Tasks.Task.whenAll(rs);
                                        $step = 3;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        data = $taskResult2;
                                        index = 0;
                                        if (Core.Extensions.IEnumerableExtensions.Nothing(System.Collections.Generic.List$1(System.Object), data)) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        $t = Bridge.getEnumerator(listpolicy);
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        if ($t.moveNext()) {
                                            item = $t.Current;
                                            $step = 5;
                                            continue;
                                        }
                                        $step = 9;
                                        continue;
                                    }
                                    case 5: {
                                        detail = ($t1 = TMS.API.Models.SettingPolicyDetail, System.Linq.Enumerable.from(item.SettingPolicyDetail, $t1).toList($t1));
                                        build = System.Linq.Enumerable.from(detail, TMS.API.Models.SettingPolicyDetail).groupBy(function (z) {
                                            return z.ComponentId;
                                        }).select(function (y) {
                                            var listAnd = new (System.Collections.Generic.List$1(System.String)).ctor();
                                            var group = System.Linq.Enumerable.from(y.toList(TMS.API.Models.SettingPolicyDetail), TMS.API.Models.SettingPolicyDetail).select(function (l) {
                                                var $t2;
                                                var component = System.Linq.Enumerable.from(componentrs, TMS.API.Models.GridPolicy).firstOrDefault(function (k) {
                                                    return System.Nullable.eq(k.Id, l.ComponentId);
                                                }, null);
                                                if (component == null) {
                                                    return null;
                                                }
                                                var ope = System.Linq.Enumerable.from(operatorrs, TMS.API.Models.MasterData).firstOrDefault(function (k) {
                                                    return System.Nullable.eq(k.Id, l.OperatorId);
                                                }, null);
                                                if (Bridge.referenceEquals(component.ComponentType, "Dropdown") || Bridge.referenceEquals(component.ComponentType, "SearchEntry")) {
                                                    var rsdynamic = data[System.Array.index(index, data)];
                                                    index = (index + 1) | 0;
                                                    if (System.Linq.Enumerable.from(rsdynamic, System.Object).any()) {
                                                        var ids = Core.Extensions.IEnumerableExtensions.Combine(System.Int32, System.Linq.Enumerable.from(rsdynamic, System.Object).select(function (x) {
                                                            return x.Id;
                                                        }).select(function (x) {{ return Bridge.cast(x, System.Int32); }}));
                                                        var format = System.String.replaceAll(($t2 = component.FormatCell.split("}"))[System.Array.index(0, $t2)], "{", "");
                                                        if (Bridge.referenceEquals(ope.Description, "Ch\u1ee9a") || Bridge.referenceEquals(ope.Description, "B\u1eb1ng")) {
                                                            return System.String.format("{0} in ({1})", component.FieldName, ids);
                                                        } else {
                                                            return System.String.format("{0} in ({1}) eq false", component.FieldName, ids);
                                                        }
                                                    } else {
                                                        return null;
                                                    }
                                                } else {
                                                    listAnd.add(System.String.format("{0}", [System.String.format(ope.Name, component.FieldName, l.Value)]));
                                                    return null;
                                                }
                                            }).where(function (x) {
                                                return !Bridge.referenceEquals(x, "()") && !Core.Extensions.StringExt.IsNullOrWhiteSpace(x);
                                            }).toList(System.String);
                                            return ((group.Count === 0 ? "" : System.String.format("({0})", [Core.Extensions.IEnumerableExtensions.Combine(System.String, System.Linq.Enumerable.from(group, System.String).where(function (x) {
                                                return !Bridge.referenceEquals(x, "()") && !Core.Extensions.StringExt.IsNullOrWhiteSpace(x);
                                            }), " or ")])) || "") + ((listAnd.Count === 0 ? "" : System.String.format(" {0}", [Core.Extensions.IEnumerableExtensions.Combine(System.String, System.Linq.Enumerable.from(listAnd, System.String).where(function (x) {
                                                return !Core.Extensions.StringExt.IsNullOrWhiteSpace(x);
                                            }), " and ")])) || "");
                                        }).toList(System.String);
                                        str = Core.Extensions.IEnumerableExtensions.Combine(System.String, System.Linq.Enumerable.from(build, System.String).where(function (x) {
                                            return !Bridge.referenceEquals(x, "()") && !Core.Extensions.StringExt.IsNullOrWhiteSpace(x);
                                        }), " or ");
                                        query.add(str);
                                        check = null;
                                        if (!System.String.isNullOrWhiteSpace(str)) {
                                            $step = 6;
                                            continue;
                                        } 
                                        $step = 8;
                                        continue;
                                    }
                                    case 6: {
                                        $task3 = new Core.Clients.Client.$ctor1("Transportation").FirstOrDefaultAsync(TMS.API.Models.Transportation, System.String.format("?$filter=Active eq true and Id eq {0} and ({1})", Bridge.box(transportation.Id, System.Int32), str));
                                        $step = 7;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 7: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        check = $taskResult3;
                                        $step = 8;
                                        continue;
                                    }
                                    case 8: {
                                        if (check != null) {
                                            transportation.TransportationTypeId = item.TransportationTypeId;
                                        }
                                        $step = 4;
                                        continue;
                                    }
                                    case 9: {
                                        $task4 = this.ActionAnalysis(transportation);
                                        $step = 10;
                                        if ($task4.isCompleted()) {
                                            continue;
                                        }
                                        $task4.continue($asyncBody);
                                        return;
                                    }
                                    case 10: {
                                        $task4.getAwaitedResult();
                                        $step = 11;
                                        continue;
                                    }
                                    case 11: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ActionAnalysis: function (transportation) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $task3, 
                    $taskResult3, 
                    $task4, 
                    $taskResult4, 
                    $task5, 
                    $task6, 
                    $taskResult6, 
                    $task7, 
                    $taskResult7, 
                    $task8, 
                    $taskResult8, 
                    $task9, 
                    $taskResult9, 
                    $task10, 
                    $taskResult10, 
                    $task11, 
                    $taskResult11, 
                    $task12, 
                    $task13, 
                    $taskResult13, 
                    $task14, 
                    $taskResult14, 
                    $task15, 
                    $taskResult15, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    expenseType, 
                    expense, 
                    commodityValue, 
                    newCommodityValue, 
                    history, 
                    res, 
                    expenseSOC, 
                    expenseTypeSOC, 
                    commodityValue1, 
                    history1, 
                    res1, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,30], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = new Core.Clients.Client.$ctor1("MasterData").FirstOrDefaultAsync(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and ParentId eq 7577 and contains(Name, 'B\u1ea3o hi\u1ec3m')", null));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        expenseType = $taskResult1;
                                        $task2 = new Core.Clients.Client.$ctor1("Expense").FirstOrDefaultAsync(TMS.API.Models.Expense, System.String.format("?$filter=Active eq true and TransportationId eq {0} and ExpenseTypeId eq {1} and RequestChangeId eq null", Bridge.box(transportation.Id, System.Int32), Bridge.box(expenseType.Id, System.Int32)));
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        expense = $taskResult2;
                                        if (expense == null || transportation.TransportationTypeId == null) {
                                            $step = 3;
                                            continue;
                                        } else  {
                                            $step = 4;
                                            continue;
                                        }
                                    }
                                    case 3: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    case 4: {
                                        if (expense.IsPurchasedInsurance === false) {
                                            $step = 5;
                                            continue;
                                        } else  {
                                            $step = 10;
                                            continue;
                                        }
                                    }
                                    case 5: {
                                        expense.TransportationTypeId = transportation.TransportationTypeId;
                                        expense.CommodityId = transportation.CommodityId;
                                        expense.ContainerTypeId = transportation.ContainerTypeId;
                                        $task3 = this.CheckContainerType(expense);
                                        $step = 6;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 6: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        this.containerId = $taskResult3;
                                        $task4 = new Core.Clients.Client.$ctor1("CommodityValue").FirstOrDefaultAsync(TMS.API.Models.CommodityValue, System.String.format("?$filter=Active eq true and BossId eq {0} and CommodityId eq {1} and ContainerId eq {2}", Bridge.box(expense.BossId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), Bridge.box(expense.CommodityId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), Bridge.box(this.containerId, System.Int32)));
                                        $step = 7;
                                        if ($task4.isCompleted()) {
                                            continue;
                                        }
                                        $task4.continue($asyncBody);
                                        return;
                                    }
                                    case 7: {
                                        $taskResult4 = $task4.getAwaitedResult();
                                        commodityValue = $taskResult4;
                                        if (commodityValue != null) {
                                            expense.CommodityValue = commodityValue.TotalPrice;
                                            expense.IsWet = commodityValue.IsWet;
                                            expense.IsBought = commodityValue.IsBought;
                                            expense.JourneyId = commodityValue.JourneyId;
                                            expense.CustomerTypeId = commodityValue.CustomerTypeId;
                                        } else {
                                            newCommodityValue = this.CreateCommodityValue(expense, System.Nullable.getValue(expense.CommodityValue));
                                        }
                                        $task5 = this.CalcInsuranceFees(expense, false);
                                        $step = 8;
                                        if ($task5.isCompleted()) {
                                            continue;
                                        }
                                        $task5.continue($asyncBody);
                                        return;
                                    }
                                    case 8: {
                                        $task5.getAwaitedResult();
                                        $task6 = new Core.Clients.Client.$ctor1("Expense").UpdateAsync(TMS.API.Models.Expense, expense);
                                        $step = 9;
                                        if ($task6.isCompleted()) {
                                            continue;
                                        }
                                        $task6.continue($asyncBody);
                                        return;
                                    }
                                    case 9: {
                                        $taskResult6 = $task6.getAwaitedResult();
                                        $step = 15;
                                        continue;
                                    }
                                    case 10: {
                                        history = new TMS.API.Models.Expense();
                                        Core.Extensions.ReflectionExt.CopyPropFrom$1(history, expense);
                                        history.Id = 0;
                                        history.StatusId = Core.Enums.ApprovalStatusEnum.New;
                                        history.RequestChangeId = expense.Id;
                                        $task7 = new Core.Clients.Client.$ctor1("Expense").CreateAsync(TMS.API.Models.Expense, history);
                                        $step = 11;
                                        if ($task7.isCompleted()) {
                                            continue;
                                        }
                                        $task7.continue($asyncBody);
                                        return;
                                    }
                                    case 11: {
                                        $taskResult7 = $task7.getAwaitedResult();
                                        res = $taskResult7;
                                        if (res != null) {
                                            $step = 12;
                                            continue;
                                        } 
                                        $step = 14;
                                        continue;
                                    }
                                    case 12: {
                                        expense.TransportationTypeId = transportation.TransportationTypeId;
                                        expense.CommodityId = transportation.CommodityId;
                                        expense.ContainerTypeId = transportation.ContainerTypeId;
                                        $task8 = new Core.Clients.Client.$ctor1("Expense").UpdateAsync(TMS.API.Models.Expense, expense);
                                        $step = 13;
                                        if ($task8.isCompleted()) {
                                            continue;
                                        }
                                        $task8.continue($asyncBody);
                                        return;
                                    }
                                    case 13: {
                                        $taskResult8 = $task8.getAwaitedResult();
                                        $step = 14;
                                        continue;
                                    }

                                    case 15: {
                                        expenseSOC = null;
                                        if (transportation.SocId != null) {
                                            $step = 16;
                                            continue;
                                        } 
                                        $step = 29;
                                        continue;
                                    }
                                    case 16: {
                                        $task9 = new Core.Clients.Client.$ctor1("MasterData").FirstOrDefaultAsync(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and ParentId eq 7577 and contains(Name, 'BH SOC')", null));
                                        $step = 17;
                                        if ($task9.isCompleted()) {
                                            continue;
                                        }
                                        $task9.continue($asyncBody);
                                        return;
                                    }
                                    case 17: {
                                        $taskResult9 = $task9.getAwaitedResult();
                                        expenseTypeSOC = $taskResult9;
                                        $task10 = new Core.Clients.Client.$ctor1("Expense").FirstOrDefaultAsync(TMS.API.Models.Expense, System.String.format("?$filter=Active eq true and TransportationId eq {0} and ExpenseTypeId eq {1} and RequestChangeId eq null", Bridge.box(transportation.Id, System.Int32), Bridge.box(expenseTypeSOC.Id, System.Int32)));
                                        $step = 18;
                                        if ($task10.isCompleted()) {
                                            continue;
                                        }
                                        $task10.continue($asyncBody);
                                        return;
                                    }
                                    case 18: {
                                        $taskResult10 = $task10.getAwaitedResult();
                                        expenseSOC = $taskResult10;
                                        expenseSOC.TransportationTypeId = expense.TransportationTypeId;
                                        expenseSOC.ContainerTypeId = expense.ContainerTypeId;
                                        if (expenseSOC.IsPurchasedInsurance === false) {
                                            $step = 19;
                                            continue;
                                        } else  {
                                            $step = 23;
                                            continue;
                                        }
                                    }
                                    case 19: {
                                        $task11 = new Core.Clients.Client.$ctor1("CommodityValue").FirstOrDefaultAsync(TMS.API.Models.CommodityValue, System.String.format("?$filter=Active eq true and BossId eq {0} and CommodityId eq {1} and ContainerId eq {2}", Bridge.box(expenseSOC.BossId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), Bridge.box(expenseSOC.CommodityId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), Bridge.box(this.containerId, System.Int32)));
                                        $step = 20;
                                        if ($task11.isCompleted()) {
                                            continue;
                                        }
                                        $task11.continue($asyncBody);
                                        return;
                                    }
                                    case 20: {
                                        $taskResult11 = $task11.getAwaitedResult();
                                        commodityValue1 = $taskResult11;
                                        if (commodityValue1 != null) {
                                            expenseSOC.CommodityValue = commodityValue1.TotalPrice;
                                            expenseSOC.JourneyId = commodityValue1.JourneyId;
                                            expenseSOC.CustomerTypeId = commodityValue1.CustomerTypeId;
                                        }
                                        $task12 = this.CalcInsuranceFees(expenseSOC, true);
                                        $step = 21;
                                        if ($task12.isCompleted()) {
                                            continue;
                                        }
                                        $task12.continue($asyncBody);
                                        return;
                                    }
                                    case 21: {
                                        $task12.getAwaitedResult();
                                        $task13 = new Core.Clients.Client.$ctor1("Expense").UpdateAsync(TMS.API.Models.Expense, expenseSOC);
                                        $step = 22;
                                        if ($task13.isCompleted()) {
                                            continue;
                                        }
                                        $task13.continue($asyncBody);
                                        return;
                                    }
                                    case 22: {
                                        $taskResult13 = $task13.getAwaitedResult();
                                        $step = 28;
                                        continue;
                                    }
                                    case 23: {
                                        history1 = new TMS.API.Models.Expense();
                                        Core.Extensions.ReflectionExt.CopyPropFrom$1(history1, expense);
                                        history1.Id = 0;
                                        history1.StatusId = Core.Enums.ApprovalStatusEnum.New;
                                        history1.RequestChangeId = expense.Id;
                                        $task14 = new Core.Clients.Client.$ctor1("Expense").CreateAsync(TMS.API.Models.Expense, history1);
                                        $step = 24;
                                        if ($task14.isCompleted()) {
                                            continue;
                                        }
                                        $task14.continue($asyncBody);
                                        return;
                                    }
                                    case 24: {
                                        $taskResult14 = $task14.getAwaitedResult();
                                        res1 = $taskResult14;
                                        if (res1 != null) {
                                            $step = 25;
                                            continue;
                                        } 
                                        $step = 27;
                                        continue;
                                    }
                                    case 25: {
                                        expense.TransportationTypeId = transportation.TransportationTypeId;
                                        expense.CommodityId = transportation.CommodityId;
                                        expense.ContainerTypeId = transportation.ContainerTypeId;
                                        $task15 = new Core.Clients.Client.$ctor1("Expense").UpdateAsync(TMS.API.Models.Expense, expense);
                                        $step = 26;
                                        if ($task15.isCompleted()) {
                                            continue;
                                        }
                                        $task15.continue($asyncBody);
                                        return;
                                    }
                                    case 26: {
                                        $taskResult15 = $task15.getAwaitedResult();
                                        $step = 27;
                                        continue;
                                    }



                                    case 30: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CalcInsuranceFees: function (expense, isSOC) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $task3, 
                    $taskResult3, 
                    $task4, 
                    $taskResult4, 
                    $task5, 
                    $taskResult5, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    isSubRatio, 
                    journeyId, 
                    insuranceFeesRateDB, 
                    getContainerType, 
                    insuranceFeesRateColdDB, 
                    extraInsuranceFeesRateDB, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,17,18,19], $step);
                                switch ($step) {
                                    case 0: {
                                        if (expense.TransportationTypeId == null || expense.JourneyId == null) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        isSubRatio = false;
                                        if (((expense.IsWet || expense.SteamingTerms || expense.BreakTerms) && expense.IsBought === false) || (expense.IsBought && expense.IsWet)) {
                                            isSubRatio = true;
                                        }
                                        journeyId = expense.JourneyId == null ? "" : "and JourneyId eq " + (System.Nullable.toString(expense.JourneyId, null) || "");
                                        insuranceFeesRateDB = null;
                                        if (expense.IsBought) {
                                            $step = 1;
                                            continue;
                                        } else  {
                                            $step = 3;
                                            continue;
                                        }
                                    }
                                    case 1: {
                                        $task1 = new Core.Clients.Client.$ctor1("InsuranceFeesRate").FirstOrDefaultAsync(TMS.API.Models.InsuranceFeesRate, (System.String.format("?$filter=Active eq true ", null) || "") + (System.String.format(" and TransportationTypeId eq {0} ", [Bridge.box(expense.TransportationTypeId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]) || "") + (System.String.format(" {0} ", [journeyId]) || "") + (System.String.format(" and IsBought eq {0} ", [System.Boolean.toString(expense.IsBought).toLowerCase()]) || "") + (System.String.format(" and IsSOC eq {0}", [System.Boolean.toString(isSOC).toLowerCase()]) || "") + (System.String.format(" and IsSubRatio eq {0}", [System.Boolean.toString(isSubRatio).toLowerCase()]) || ""));
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        insuranceFeesRateDB = $taskResult1;
                                        $step = 5;
                                        continue;
                                    }
                                    case 3: {
                                        $task2 = new Core.Clients.Client.$ctor1("InsuranceFeesRate").FirstOrDefaultAsync(TMS.API.Models.InsuranceFeesRate, (System.String.format("?$filter=Active eq true ", null) || "") + (System.String.format(" and TransportationTypeId eq {0} ", [Bridge.box(expense.TransportationTypeId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]) || "") + (System.String.format(" {0} ", [journeyId]) || "") + (System.String.format(" and IsBought eq {0} ", [System.Boolean.toString(expense.IsBought).toLowerCase()]) || "") + (System.String.format(" and IsSOC eq {0}", [System.Boolean.toString(isSOC).toLowerCase()]) || ""));
                                        $step = 4;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        insuranceFeesRateDB = $taskResult2;
                                        $step = 5;
                                        continue;
                                    }
                                    case 5: {
                                        if (insuranceFeesRateDB != null) {
                                            $step = 6;
                                            continue;
                                        } else  {
                                            $step = 18;
                                            continue;
                                        }
                                    }
                                    case 6: {
                                        if (System.Nullable.eq(expense.ExpenseTypeId, 15981)) {
                                            $step = 7;
                                            continue;
                                        } else  {
                                            $step = 8;
                                            continue;
                                        }
                                    }
                                    case 7: {
                                        expense.InsuranceFeeRate = insuranceFeesRateDB.Rate;
                                        $step = 17;
                                        continue;
                                    }
                                    case 8: {
                                        $task3 = new Core.Clients.Client.$ctor1("MasterData").FirstOrDefaultAsync(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and Id eq {0}", [Bridge.box(expense.ContainerTypeId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]));
                                        $step = 9;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 9: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        getContainerType = $taskResult3;
                                        if (getContainerType != null && System.String.contains(getContainerType.Description.toLowerCase(),"l\u1ea1nh") && System.Nullable.eq(insuranceFeesRateDB.TransportationTypeId, 11673) && System.Nullable.eq(insuranceFeesRateDB.JourneyId, 12114)) {
                                            $step = 10;
                                            continue;
                                        } else  {
                                            $step = 12;
                                            continue;
                                        }
                                    }
                                    case 10: {
                                        $task4 = new Core.Clients.Client.$ctor1("MasterData").FirstOrDefaultAsync(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and Id eq 25391", null));
                                        $step = 11;
                                        if ($task4.isCompleted()) {
                                            continue;
                                        }
                                        $task4.continue($asyncBody);
                                        return;
                                    }
                                    case 11: {
                                        $taskResult4 = $task4.getAwaitedResult();
                                        insuranceFeesRateColdDB = $taskResult4;
                                        expense.InsuranceFeeRate = insuranceFeesRateColdDB != null ? System.Decimal(insuranceFeesRateColdDB.Name) : System.Decimal(0);
                                        $step = 13;
                                        continue;
                                    }
                                    case 12: {
                                        expense.InsuranceFeeRate = insuranceFeesRateDB.Rate;
                                        $step = 13;
                                        continue;
                                    }
                                    case 13: {
                                        if (insuranceFeesRateDB.IsSubRatio && insuranceFeesRateDB.IsSubRatio && expense.IsBought === false) {
                                            $step = 14;
                                            continue;
                                        } 
                                        $step = 16;
                                        continue;
                                    }
                                    case 14: {
                                        $task5 = new Core.Clients.Client.$ctor1("MasterData").GetRawList(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and ParentId eq 25374", null));
                                        $step = 15;
                                        if ($task5.isCompleted()) {
                                            continue;
                                        }
                                        $task5.continue($asyncBody);
                                        return;
                                    }
                                    case 15: {
                                        $taskResult5 = $task5.getAwaitedResult();
                                        extraInsuranceFeesRateDB = $taskResult5;
                                        extraInsuranceFeesRateDB.ForEach(function (x) {
                                            var prop = System.Linq.Enumerable.from(Bridge.Reflection.getMembers(Bridge.getType(expense), 16, 28), System.Reflection.PropertyInfo).where(function (y) {
                                                return Bridge.referenceEquals(y.n, x.Name) && System.Boolean.parse(Bridge.toString(Bridge.Reflection.midel(y.g, expense).apply(null, null)));
                                            }).firstOrDefault(null, null);
                                            if (prop != null) {
                                                expense.InsuranceFeeRate = System.Nullable.lift2("add", expense.InsuranceFeeRate, System.Decimal(x.Code));
                                            }
                                        });
                                        $step = 16;
                                        continue;
                                    }

                                    case 17: {
                                        $step = 19;
                                        continue;
                                    }
                                    case 18: {
                                        expense.InsuranceFeeRate = System.Decimal(0);
                                        expense.TotalPriceBeforeTax = System.Decimal(0);
                                        expense.TotalPriceAfterTax = System.Decimal(0);
                                        $step = 19;
                                        continue;
                                    }
                                    case 19: {
                                        if (insuranceFeesRateDB != null && System.Nullable.eq(insuranceFeesRateDB.IsVAT, true)) {
                                            this.CalcInsuranceFeeNoVAT(expense);
                                        } else if (insuranceFeesRateDB != null && System.Nullable.eq(insuranceFeesRateDB.IsVAT, false)) {
                                            this.CalcInsuranceFee(expense);
                                        }
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CreateExpenseSOC: function (transportation) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $task3, 
                    $taskResult3, 
                    $task4, 
                    $taskResult4, 
                    $task5, 
                    $taskResult5, 
                    $task6, 
                    $taskResult6, 
                    $task7, 
                    $taskResult7, 
                    $task8, 
                    $task9, 
                    $taskResult9, 
                    $task10, 
                    $taskResult10, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    expenseTypeSOC, 
                    expense, 
                    expenseType, 
                    containerId, 
                    commodity, 
                    commodityValue, 
                    expenseSOC, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = new Core.Clients.Client.$ctor1("MasterData").FirstOrDefaultAsync(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and ParentId eq 7577 and contains(Name, 'BH SOC')", null));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        expenseTypeSOC = $taskResult1;
                                        $task2 = new Core.Clients.Client.$ctor1("Expense").FirstOrDefaultAsync(TMS.API.Models.Expense, System.String.format("?$filter=Active eq true and TransportationId eq {0} and ExpenseTypeId eq {1} and RequestChangeId eq null", Bridge.box(transportation.Id, System.Int32), Bridge.box(expenseTypeSOC.Id, System.Int32)));
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        expense = $taskResult2;
                                        if (expense == null && transportation.SocId != null) {
                                            $step = 3;
                                            continue;
                                        } else  {
                                            $step = 11;
                                            continue;
                                        }
                                    }
                                    case 3: {
                                        $task3 = new Core.Clients.Client.$ctor1("MasterData").FirstOrDefaultAsync(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and ParentId eq 7577 and contains(Name, 'B\u1ea3o hi\u1ec3m')", null));
                                        $step = 4;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        expenseType = $taskResult3;
                                        $task4 = new Core.Clients.Client.$ctor1("Expense").FirstOrDefaultAsync(TMS.API.Models.Expense, System.String.format("?$filter=Active eq true and TransportationId eq {0} and ExpenseTypeId eq {1} and RequestChangeId eq null", Bridge.box(transportation.Id, System.Int32), Bridge.box(expenseType.Id, System.Int32)));
                                        $step = 5;
                                        if ($task4.isCompleted()) {
                                            continue;
                                        }
                                        $task4.continue($asyncBody);
                                        return;
                                    }
                                    case 5: {
                                        $taskResult4 = $task4.getAwaitedResult();
                                        expense = $taskResult4;
                                        $task5 = this.CheckContainerType(expense);
                                        $step = 6;
                                        if ($task5.isCompleted()) {
                                            continue;
                                        }
                                        $task5.continue($asyncBody);
                                        return;
                                    }
                                    case 6: {
                                        $taskResult5 = $task5.getAwaitedResult();
                                        containerId = $taskResult5;
                                        $task6 = new Core.Clients.Client.$ctor1("MasterData").FirstOrDefaultAsync(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and ParentId ne 7651 and contains(Path, '7651') and contains(Description, 'V\u1ecf r\u1ed7ng')", null));
                                        $step = 7;
                                        if ($task6.isCompleted()) {
                                            continue;
                                        }
                                        $task6.continue($asyncBody);
                                        return;
                                    }
                                    case 7: {
                                        $taskResult6 = $task6.getAwaitedResult();
                                        commodity = $taskResult6;
                                        $task7 = new Core.Clients.Client.$ctor1("CommodityValue").FirstOrDefaultAsync(TMS.API.Models.CommodityValue, System.String.format("?$filter=Active eq true and CommodityId eq {0} and ContainerId eq {1}", Bridge.box(commodity.Id, System.Int32), Bridge.box(containerId, System.Int32)));
                                        $step = 8;
                                        if ($task7.isCompleted()) {
                                            continue;
                                        }
                                        $task7.continue($asyncBody);
                                        return;
                                    }
                                    case 8: {
                                        $taskResult7 = $task7.getAwaitedResult();
                                        commodityValue = $taskResult7;
                                        expenseSOC = new TMS.API.Models.Expense();
                                        Core.Extensions.ReflectionExt.CopyPropFrom$1(expenseSOC, expense);
                                        expenseSOC.Id = 0;
                                        expenseSOC.CommodityId = commodity.Id; // vá» rá»ng
                                        expenseSOC.ExpenseTypeId = expenseTypeSOC.Id; //SOC
                                        expenseSOC.IsWet = false;
                                        expenseSOC.IsBought = false;
                                        expenseSOC.SteamingTerms = false;
                                        expenseSOC.BreakTerms = false;
                                        expenseSOC.CommodityValue = commodityValue.TotalPrice;
                                        expenseSOC.JourneyId = 12114;
                                        $task8 = this.CalcInsuranceFees(expenseSOC, true);
                                        $step = 9;
                                        if ($task8.isCompleted()) {
                                            continue;
                                        }
                                        $task8.continue($asyncBody);
                                        return;
                                    }
                                    case 9: {
                                        $task8.getAwaitedResult();
                                        $task9 = new Core.Clients.Client.$ctor1("Expense").CreateAsync(TMS.API.Models.Expense, expenseSOC);
                                        $step = 10;
                                        if ($task9.isCompleted()) {
                                            continue;
                                        }
                                        $task9.continue($asyncBody);
                                        return;
                                    }
                                    case 10: {
                                        $taskResult9 = $task9.getAwaitedResult();
                                        $step = 18;
                                        continue;
                                    }
                                    case 11: {
                                        if (expense != null) {
                                            $step = 12;
                                            continue;
                                        } else  {
                                            $step = 16;
                                            continue;
                                        }
                                    }
                                    case 12: {
                                        if (transportation.SocId == null) {
                                            $step = 13;
                                            continue;
                                        } 
                                        $step = 15;
                                        continue;
                                    }
                                    case 13: {
                                        $task10 = new Core.Clients.Client.$ctor1("Expense").HardDeleteAsync$1(expense.Id);
                                        $step = 14;
                                        if ($task10.isCompleted()) {
                                            continue;
                                        }
                                        $task10.continue($asyncBody);
                                        return;
                                    }
                                    case 14: {
                                        $taskResult10 = $task10.getAwaitedResult();
                                        $step = 15;
                                        continue;
                                    }
                                    case 15: {
                                        $step = 17;
                                        continue;
                                    }
                                    case 16: {
                                        $tcs.setResult(null);
                                        return;
                                    }

                                    case 18: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CalcInsuranceFee: function (expense) {
                expense.TotalPriceBeforeTax = System.Nullable.getValue(expense.InsuranceFeeRate).mul(System.Nullable.getValue(expense.CommodityValue)).div(System.Decimal(100));
                expense.TotalPriceAfterTax = expense.TotalPriceBeforeTax.add(System.Decimal.toDecimalPlaces(expense.TotalPriceBeforeTax.mul(expense.Vat).div(System.Decimal(100)), 0, 6));
            },
            CalcInsuranceFeeNoVAT: function (expense) {
                expense.TotalPriceAfterTax = System.Nullable.getValue(expense.InsuranceFeeRate).mul(System.Nullable.getValue(expense.CommodityValue)).div(System.Decimal(100));
                expense.TotalPriceBeforeTax = System.Decimal.toDecimalPlaces(expense.TotalPriceAfterTax.div(System.Decimal(1.1, 1)), 0, 6);
            },
            GetPatchEntity: function (commodityValue) {
                var $t;
                var details = new (System.Collections.Generic.List$1(Core.ViewModels.PatchUpdateDetail)).ctor();
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = Core.Extensions.Utils.IdField, $t.Value = Bridge.toString(commodityValue.Id), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "Active", $t.Value = System.Boolean.toString(commodityValue.Active), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "EndDate", $t.Value = Bridge.equals(commodityValue.EndDate, null) ? "" : System.Nullable.toString(commodityValue.EndDate, function ($t) { return System.DateTime.format($t); }), $t));
                return ($t = new Core.ViewModels.PatchUpdate(), $t.Changes = details, $t);
            },
            GetPatchEntity$1: function (expense) {
                var $t;
                var details = new (System.Collections.Generic.List$1(Core.ViewModels.PatchUpdateDetail)).ctor();
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = Core.Extensions.Utils.IdField, $t.Value = Bridge.toString(expense.Id), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "CommodityValue", $t.Value = System.Nullable.lifteq("equals", expense.CommodityValue, System.Decimal.lift(null)) ? "" : expense.CommodityValue.toString(), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "TotalPriceAfterTax", $t.Value = expense.TotalPriceAfterTax.toString(), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "TotalPriceBeforeTax", $t.Value = expense.TotalPriceBeforeTax.toString(), $t));
                return ($t = new Core.ViewModels.PatchUpdate(), $t.Changes = details, $t);
            },
            BeforePatchUpdateTransportation: function (transportation, patchUpdate) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    gridView, 
                    tran, 
                    checkLock, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4], $step);
                                switch ($step) {
                                    case 0: {
                                        gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                                            return Bridge.referenceEquals(x.GuiInfo.FieldName, "Transportation");
                                        }, null);
                                        if (gridView == null) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        if (System.Linq.Enumerable.from(patchUpdate.Changes, Core.ViewModels.PatchUpdateDetail).any(function (x) {
                                            return Bridge.referenceEquals(x.Field, "ContainerNo") && !Core.Extensions.StringExt.IsNullOrWhiteSpace(x.Value);
                                        })) {
                                            $step = 1;
                                            continue;
                                        } 
                                        $step = 3;
                                        continue;
                                    }
                                    case 1: {
                                        $task1 = this.Client.FirstOrDefaultAsync(TMS.API.Models.Transportation, System.String.format("?$top=1&$select=ClosingDate&$filter=ContainerNo eq '{0}' and Id ne {1}", System.Linq.Enumerable.from(patchUpdate.Changes, Core.ViewModels.PatchUpdateDetail).firstOrDefault(function (x) {
                                            return Bridge.referenceEquals(x.Field, "ContainerNo");
                                        }, null).Value, Bridge.box(transportation.Id, System.Int32)));
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        tran = $taskResult1;
                                        if (tran != null) {
                                            if ((System.DateTime.subdd(System.Nullable.getValue(tran.ClosingDate), System.Nullable.getValue(transportation.ClosingDate))).getDays() < 7) {
                                                Core.Extensions.Toast.Warning("S\u1ed1 cont b\u1ea1n ch\u1ecdn \u0111\u00e3 \u0111\u00f3ng h\u00e0ng ch\u01b0a \u0111\u01b0\u1ee3c 7 ng\u00e0y");
                                            }
                                        }
                                        $step = 3;
                                        continue;
                                    }
                                    case 3: {
                                        checkLock = new TMS.UI.Business.Manage.TransportationListAccountantBL();
                                        $task2 = checkLock.RequestUnClosing(transportation, patchUpdate);
                                        $step = 4;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $task2.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            LockShipTransportation: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    gridView, 
                    listViewItems, 
                    confirm, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                                            return Bridge.referenceEquals(x.GuiInfo.FieldName, "Transportation");
                                        }, null);
                                        if (gridView == null) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        $task1 = gridView.GetRealTimeSelectedRows();
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        listViewItems = System.Linq.Enumerable.from(($taskResult1)).select(function (x) { return Bridge.cast(x, TMS.API.Models.Transportation); }).where(function (x) {
                                            return x.LockShip === false;
                                        }).toList(TMS.API.Models.Transportation);
                                        if (listViewItems.Count <= 0) {
                                            listViewItems = System.Linq.Enumerable.from(gridView.RowData.Data).select(function (x) { return Bridge.cast(x, TMS.API.Models.Transportation); }).where(function (x) {
                                                return x.LockShip === false;
                                            }).toList(TMS.API.Models.Transportation);
                                        }
                                        if (listViewItems.Count <= 0) {
                                            Core.Extensions.Toast.Warning("Kh\u00f4ng DSVC n\u00e0o c\u1ea7n kh\u00f3a");
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        confirm = ($t = new Core.Components.Forms.ConfirmDialog(), $t.Content = "B\u1ea1n c\u00f3 ch\u1eafc ch\u1eafn mu\u1ed1n kh\u00f3a " + listViewItems.Count + " DSVC ?", $t);
                                        confirm.Render();
                                        confirm.YesConfirmed = Bridge.fn.combine(confirm.YesConfirmed, Bridge.fn.bind(this, function () {
                                            var $step = 0,
                                                $task1, 
                                                $taskResult1, 
                                                $task2, 
                                                $task3, 
                                                $taskResult3, 
                                                $task4, 
                                                $jumpFromFinally, 
                                                checks, 
                                                confirmRequest, 
                                                $t1, 
                                                transportationNoLock, 
                                                res, 
                                                res1, 
                                                $asyncBody = Bridge.fn.bind(this, function () {
                                                    for (;;) {
                                                        $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,11], $step);
                                                        switch ($step) {
                                                            case 0: {
                                                                checks = System.Linq.Enumerable.from(listViewItems, TMS.API.Models.Transportation).where(function (x) {
                                                                    return x.IsLocked;
                                                                }).toList(TMS.API.Models.Transportation);
                                                                if (checks.Count > 0) {
                                                                    $step = 1;
                                                                    continue;
                                                                } else  {
                                                                    $step = 6;
                                                                    continue;
                                                                }
                                                            }
                                                            case 1: {
                                                                confirmRequest = ($t1 = new Core.Components.Forms.ConfirmDialog(), $t1.NeedAnswer = true, $t1.ComType = "Textbox", $t1.Content = (System.String.format("\u0110\u00e3 c\u00f3 {0} DSVC b\u1ecb kh\u00f3a (H\u1ec7 th\u1ed1ng). B\u1ea1n c\u00f3 mu\u1ed1n g\u1eedi y\u00eau c\u1ea7u m\u1edf kh\u00f3a kh\u00f4ng?<br />", [Bridge.box(checks.Count, System.Int32)]) || "") + "H\u00e3y nh\u1eadp l\u00fd do", $t1);
                                                                confirmRequest.Render();
                                                                confirmRequest.YesConfirmed = Bridge.fn.combine(confirmRequest.YesConfirmed, Bridge.fn.bind(this, function () {
                                                                    var $step = 0,
                                                                        $task1, 
                                                                        $taskResult1, 
                                                                        $jumpFromFinally, 
                                                                        $t2, 
                                                                        item, 
                                                                        $t3, 
                                                                        $asyncBody = Bridge.fn.bind(this, function () {
                                                                            for (;;) {
                                                                                $step = System.Array.min([0,1,2,3,4], $step);
                                                                                switch ($step) {
                                                                                    case 0: {
                                                                                        $t2 = Bridge.getEnumerator(checks);
                                                                                        $step = 1;
                                                                                        continue;
                                                                                    }
                                                                                    case 1: {
                                                                                        if ($t2.moveNext()) {
                                                                                            item = $t2.Current;
                                                                                            $step = 2;
                                                                                            continue;
                                                                                        }
                                                                                        $step = 4;
                                                                                        continue;
                                                                                    }
                                                                                    case 2: {
                                                                                        item.ReasonUnLockAll = ($t3 = confirmRequest.Textbox) != null ? $t3.Text : null;
                                                                                        $task1 = new Core.Clients.Client.$ctor1("Transportation").PostAsync(TMS.API.Models.Transportation, item, "RequestUnLockAll");
                                                                                        $step = 3;
                                                                                        if ($task1.isCompleted()) {
                                                                                            continue;
                                                                                        }
                                                                                        $task1.continue($asyncBody);
                                                                                        return;
                                                                                    }
                                                                                    case 3: {
                                                                                        $taskResult1 = $task1.getAwaitedResult();
                                                                                        $step = 1;
                                                                                        continue;
                                                                                    }
                                                                                    case 4: {
                                                                                        return;
                                                                                    }
                                                                                    default: {
                                                                                        return;
                                                                                    }
                                                                                }
                                                                            }
                                                                        }, arguments);

                                                                    $asyncBody();
                                                                }));
                                                                transportationNoLock = System.Linq.Enumerable.from(listViewItems, TMS.API.Models.Transportation).where(function (x) {
                                                                    return x.IsLocked === false;
                                                                }).toList(TMS.API.Models.Transportation);
                                                                $task1 = new Core.Clients.Client.$ctor1("Transportation").PostAsync(System.Boolean, transportationNoLock, "LockShipTransportation");
                                                                $step = 2;
                                                                if ($task1.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task1.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 2: {
                                                                $taskResult1 = $task1.getAwaitedResult();
                                                                res = $taskResult1;
                                                                if (res) {
                                                                    $step = 3;
                                                                    continue;
                                                                } 
                                                                $step = 5;
                                                                continue;
                                                            }
                                                            case 3: {
                                                                $task2 = gridView.ApplyFilter(true);
                                                                $step = 4;
                                                                if ($task2.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task2.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 4: {
                                                                $task2.getAwaitedResult();
                                                                $step = 5;
                                                                continue;
                                                            }
                                                            case 5: {
                                                                $step = 11;
                                                                continue;
                                                            }
                                                            case 6: {
                                                                $task3 = new Core.Clients.Client.$ctor1("Transportation").PostAsync(System.Boolean, listViewItems, "LockShipTransportation");
                                                                $step = 7;
                                                                if ($task3.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task3.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 7: {
                                                                $taskResult3 = $task3.getAwaitedResult();
                                                                res1 = $taskResult3;
                                                                if (res1) {
                                                                    $step = 8;
                                                                    continue;
                                                                } 
                                                                $step = 10;
                                                                continue;
                                                            }
                                                            case 8: {
                                                                $task4 = gridView.ApplyFilter(true);
                                                                $step = 9;
                                                                if ($task4.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task4.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 9: {
                                                                $task4.getAwaitedResult();
                                                                $step = 10;
                                                                continue;
                                                            }

                                                            case 11: {
                                                                return;
                                                            }
                                                            default: {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }, arguments);

                                            $asyncBody();
                                        }));
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            UnLockShipTransportation: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    gridView, 
                    listViewItems, 
                    confirm, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                                            return Bridge.referenceEquals(x.GuiInfo.FieldName, "Transportation");
                                        }, null);
                                        if (gridView == null) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        $task1 = gridView.GetRealTimeSelectedRows();
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        listViewItems = System.Linq.Enumerable.from(($taskResult1)).select(function (x) { return Bridge.cast(x, TMS.API.Models.Transportation); }).where(function (x) {
                                            return x.LockShip;
                                        }).toList(TMS.API.Models.Transportation);
                                        if (listViewItems.Count <= 0) {
                                            Core.Extensions.Toast.Warning("Kh\u00f4ng DSVC n\u00e0o c\u1ea7n m\u1edf kh\u00f3a");
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        confirm = ($t = new Core.Components.Forms.ConfirmDialog(), $t.Content = "B\u1ea1n c\u00f3 ch\u1eafc ch\u1eafn mu\u1ed1n m\u1edf kh\u00f3a " + listViewItems.Count + " DSVC ?", $t);
                                        confirm.Render();
                                        confirm.YesConfirmed = Bridge.fn.combine(confirm.YesConfirmed, Bridge.fn.bind(this, function () {
                                            var $step = 0,
                                                $task1, 
                                                $task2, 
                                                $task3, 
                                                $task4, 
                                                $jumpFromFinally, 
                                                checks, 
                                                confirmRequest, 
                                                $t1, 
                                                transportationNoLock, 
                                                $asyncBody = Bridge.fn.bind(this, function () {
                                                    for (;;) {
                                                        $step = System.Array.min([0,1,2,3,4,5,6,7], $step);
                                                        switch ($step) {
                                                            case 0: {
                                                                checks = System.Linq.Enumerable.from(listViewItems, TMS.API.Models.Transportation).where(function (x) {
                                                                    return x.IsLocked;
                                                                }).toList(TMS.API.Models.Transportation);
                                                                if (checks.Count > 0) {
                                                                    $step = 1;
                                                                    continue;
                                                                } else  {
                                                                    $step = 4;
                                                                    continue;
                                                                }
                                                            }
                                                            case 1: {
                                                                confirmRequest = ($t1 = new Core.Components.Forms.ConfirmDialog(), $t1.NeedAnswer = true, $t1.ComType = "Textbox", $t1.Content = (System.String.format("\u0110\u00e3 c\u00f3 {0} DSVC b\u1ecb kh\u00f3a (H\u1ec7 th\u1ed1ng). B\u1ea1n c\u00f3 mu\u1ed1n g\u1eedi y\u00eau c\u1ea7u m\u1edf kh\u00f3a kh\u00f4ng?<br />", [Bridge.box(checks.Count, System.Int32)]) || "") + "H\u00e3y nh\u1eadp l\u00fd do", $t1);
                                                                confirmRequest.Render();
                                                                confirmRequest.YesConfirmed = Bridge.fn.combine(confirmRequest.YesConfirmed, Bridge.fn.bind(this, function () {
                                                                    var $step = 0,
                                                                        $task1, 
                                                                        $taskResult1, 
                                                                        $jumpFromFinally, 
                                                                        $t2, 
                                                                        item, 
                                                                        $t3, 
                                                                        $asyncBody = Bridge.fn.bind(this, function () {
                                                                            for (;;) {
                                                                                $step = System.Array.min([0,1,2,3,4], $step);
                                                                                switch ($step) {
                                                                                    case 0: {
                                                                                        $t2 = Bridge.getEnumerator(checks);
                                                                                        $step = 1;
                                                                                        continue;
                                                                                    }
                                                                                    case 1: {
                                                                                        if ($t2.moveNext()) {
                                                                                            item = $t2.Current;
                                                                                            $step = 2;
                                                                                            continue;
                                                                                        }
                                                                                        $step = 4;
                                                                                        continue;
                                                                                    }
                                                                                    case 2: {
                                                                                        item.ReasonUnLockAll = ($t3 = confirmRequest.Textbox) != null ? $t3.Text : null;
                                                                                        $task1 = new Core.Clients.Client.$ctor1("Transportation").PostAsync(TMS.API.Models.Transportation, item, "RequestUnLockAll");
                                                                                        $step = 3;
                                                                                        if ($task1.isCompleted()) {
                                                                                            continue;
                                                                                        }
                                                                                        $task1.continue($asyncBody);
                                                                                        return;
                                                                                    }
                                                                                    case 3: {
                                                                                        $taskResult1 = $task1.getAwaitedResult();
                                                                                        $step = 1;
                                                                                        continue;
                                                                                    }
                                                                                    case 4: {
                                                                                        return;
                                                                                    }
                                                                                    default: {
                                                                                        return;
                                                                                    }
                                                                                }
                                                                            }
                                                                        }, arguments);

                                                                    $asyncBody();
                                                                }));
                                                                transportationNoLock = System.Linq.Enumerable.from(listViewItems, TMS.API.Models.Transportation).where(function (x) {
                                                                    return x.LockShip === false;
                                                                }).toList(TMS.API.Models.Transportation);
                                                                $task1 = this.UnLockShipTransportationNoCheck(transportationNoLock);
                                                                $step = 2;
                                                                if ($task1.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task1.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 2: {
                                                                $task1.getAwaitedResult();
                                                                $task2 = gridView.ApplyFilter(true);
                                                                $step = 3;
                                                                if ($task2.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task2.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 3: {
                                                                $task2.getAwaitedResult();
                                                                $step = 7;
                                                                continue;
                                                            }
                                                            case 4: {
                                                                $task3 = this.UnLockShipTransportationNoCheck(listViewItems);
                                                                $step = 5;
                                                                if ($task3.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task3.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 5: {
                                                                $task3.getAwaitedResult();
                                                                $task4 = gridView.ApplyFilter(true);
                                                                $step = 6;
                                                                if ($task4.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task4.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 6: {
                                                                $task4.getAwaitedResult();
                                                                $step = 7;
                                                                continue;
                                                            }
                                                            case 7: {
                                                                return;
                                                            }
                                                            default: {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }, arguments);

                                            $asyncBody();
                                        }));
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            UnLockShipTransportationNoCheck: function (transportations) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    checkRequests, 
                    confirmRequets, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,7], $step);
                                switch ($step) {
                                    case 0: {
                                        checkRequests = System.Linq.Enumerable.from(transportations, TMS.API.Models.Transportation).where(function (x) {
                                            return x.IsRequestUnLockShip;
                                        }).toList(TMS.API.Models.Transportation);
                                        if (checkRequests.Count > 0) {
                                            $step = 1;
                                            continue;
                                        } else  {
                                            $step = 3;
                                            continue;
                                        }
                                    }
                                    case 1: {
                                        confirmRequets = ($t = new Core.Components.Forms.ConfirmDialog(), $t.Content = System.String.format("C\u00f3 {0} DSVC c\u1ea7n duy\u1ec7t b\u1ea1n c\u00f3 mu\u1ed1n duy\u1ec7t m\u1edf kh\u00f3a to\u00e0n b\u1ed9 kh\u00f4ng ?", [Bridge.box(checkRequests.Count, System.Int32)]), $t);
                                        confirmRequets.Render();
                                        confirmRequets.YesConfirmed = Bridge.fn.combine(confirmRequets.YesConfirmed, Bridge.fn.bind(this, function () {
                                            var $step = 0,
                                                $task1, 
                                                $taskResult1, 
                                                $jumpFromFinally, 
                                                $asyncBody = Bridge.fn.bind(this, function () {
                                                    for (;;) {
                                                        $step = System.Array.min([0,1], $step);
                                                        switch ($step) {
                                                            case 0: {
                                                                $task1 = new Core.Clients.Client.$ctor1("Transportation").PostAsync(System.Boolean, checkRequests, "ApproveUnLockShip");
                                                                $step = 1;
                                                                if ($task1.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task1.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 1: {
                                                                $taskResult1 = $task1.getAwaitedResult();
                                                                return;
                                                            }
                                                            default: {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }, arguments);

                                            $asyncBody();
                                        }));
                                        $task1 = new Core.Clients.Client.$ctor1("Transportation").PostAsync(System.Boolean, System.Linq.Enumerable.from(transportations, TMS.API.Models.Transportation).where(function (x) {
                                            return x.IsRequestUnLockShip === false;
                                        }), "UnLockShipTransportation");
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $step = 7;
                                        continue;
                                    }
                                    case 3: {
                                        if (checkRequests.Count <= 0) {
                                            $step = 4;
                                            continue;
                                        } 
                                        $step = 6;
                                        continue;
                                    }
                                    case 4: {
                                        $task2 = new Core.Clients.Client.$ctor1("Transportation").PostAsync(System.Boolean, transportations, "UnLockShipTransportation");
                                        $step = 5;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 5: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        $step = 6;
                                        continue;
                                    }

                                    case 7: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("TMS.UI.Business.Manage.ReturnTransportationPlanEditorBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        fields: {
            gridView: null
        },
        props: {
            TransportationEntity: {
                get: function () {
                    return Bridge.as(this.Entity, TMS.API.Models.Transportation);
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "Transportation");
                this.Name = "Return TransportationPlan Editor";
            }
        },
        methods: {
            Search: function () {

            }
        }
    });

    Bridge.define("TMS.UI.Business.Manage.SetStartShipBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        props: {
            TransportationEntity: {
                get: function () {
                    return Bridge.as(this.Entity, TMS.API.Models.Transportation);
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "Transportation");
                this.Name = "Set Start Ship";
            }
        },
        methods: {
            ApplyChanges: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $task3, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    transportations, 
                    gridTran, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.IsFormValid();
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        if (!$taskResult1) {
                                            $step = 2;
                                            continue;
                                        } 
                                        $step = 3;
                                        continue;
                                    }
                                    case 2: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    case 3: {
                                        if (Core.Extensions.IEnumerableExtensions.Nothing(System.Int32, this.TransportationEntity.RouteIds)) {
                                            Core.Extensions.Toast.Warning("Vui l\u00f2ng ch\u1ecdn tuy\u1ebfn \u0111\u01b0\u1eddng c\u1ea7n c\u1eadp");
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        $task2 = new Core.Clients.Client.$ctor1("Transportation").PostAsync(System.Int32, this.TransportationEntity, System.String.format("SetStartShip", null));
                                        $step = 4;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        transportations = $taskResult2;
                                        Core.Extensions.Toast.Success(System.String.format("C\u1eadp nh\u1eadt ng\u00e0y t\u00e0u c\u1eadp th\u00e0nh c\u00f4ng {0} cont", [Bridge.box(transportations, System.Int32)]));
                                        this.Dirty = false;
                                        gridTran = Core.Components.Extensions.ComponentExt.FindComponentByName(Core.Components.GridView, this.ParentForm, "Transportation");
                                        $task3 = (gridTran != null ? gridTran.ApplyFilter(true) : null);
                                        $step = 5;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 5: {
                                        $task3.getAwaitedResult();
                                        this.Dispose();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ChangeShip: function (transportation, ship) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    trans, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = new Core.Clients.Client.$ctor1("Transportation").FirstOrDefaultAsync(TMS.API.Models.Transportation, System.String.format("?$filter=Active eq true and {0} eq {1}  and ShipDate eq null", "ShipId", Bridge.box(this.TransportationEntity.ShipId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        trans = $taskResult1;
                                        this.TransportationEntity.Trip = trans.Trip;
                                        this.UpdateView$1(false, ["Trip"]);
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("TMS.UI.Business.Manage.SpecialCustomerBL", {
        inherits: [Core.Components.Forms.TabEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "Vendor");
                this.Name = "SpecialCustomer List";
            }
        },
        methods: {
            EditSpecialCustomer: function (entity) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "SpecialCustomer Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Manage.SpecialCustomerEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Ch\u1ec9nh s\u1eeda kh\u00e1ch h\u00e0ng \u0111\u1eb7c bi\u1ec7t";
                                            instance.Entity = entity;
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            AddSpecialCustomer: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "SpecialCustomer Editor", function () {
                                            var $t;
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Manage.SpecialCustomerEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Th\u00eam m\u1edbi kh\u00e1ch h\u00e0ng \u0111\u1eb7c bi\u1ec7t";
                                            instance.Entity = ($t = new TMS.API.Models.Vendor(), $t.TypeId = 12095, $t.ReturnRate = System.Decimal(0), $t);
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("TMS.UI.Business.Manage.SpecialCustomerEditorBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "Vendor");
                this.Name = "SpecialCustomer Editor";
            }
        }
    });

    Bridge.define("TMS.UI.Business.Manage.TeusEditorBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        props: {
            teus: {
                get: function () {
                    return Bridge.as(this.Entity, TMS.API.Models.Teus);
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "Teus");
                this.Name = "Teus Editor";
            }
        }
    });

    Bridge.define("TMS.UI.Business.Manage.TeusListBL", {
        inherits: [Core.Components.Forms.TabEditor],
        fields: {
            gridView: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "Teus");
                this.Name = "Teus List";
            }
        },
        methods: {
            EditTeus: function (entity) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Teus Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Manage.TeusEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Ch\u1ec9nh s\u1eeda Teus";
                                            instance.Entity = entity;
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            AddTeus: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Teus Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Manage.TeusEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Th\u00eam m\u1edbi Teus";
                                            instance.Entity = new TMS.API.Models.Teus();
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CalcTeus: function (Teus) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        this.gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(null, null);
                                        if (Teus.Teus20Using.gt(Teus.Teus20)) {
                                            Core.Extensions.Toast.Warning("S\u1ed1 teus20 \u0111\u00f3ng kh\u00f4ng \u0111\u01b0\u1ee3c l\u1edbn h\u01a1n s\u1ed1 teus c\u1ea5p");
                                            Teus.Teus20Using = Teus.Teus20;
                                        }
                                        if (System.Convert.toDecimal(Teus.Teus40Using).gt(System.Convert.toDecimal(Teus.Teus40))) {
                                            Core.Extensions.Toast.Warning("S\u1ed1 teus40 \u0111\u00f3ng kh\u00f4ng \u0111\u01b0\u1ee3c l\u1edbn h\u01a1n s\u1ed1 teus c\u1ea5p");
                                            Teus.Teus40Using = Teus.Teus40;
                                        }
                                        Teus.Teus20Remain = Teus.Teus20.sub(Teus.Teus20Using);
                                        Teus.Teus40Remain = Teus.Teus40.sub(Teus.Teus40Using);
                                        $task1 = this.gridView.AddOrUpdateRow(Teus);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("TMS.UI.Business.Manage.TransportationContractEditorBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "TransportationContract");
                this.Name = "TransportationContract Editor";
            }
        }
    });

    Bridge.define("TMS.UI.Business.Manage.TransportationContractListBL", {
        inherits: [Core.Components.Forms.TabEditor],
        fields: {
            _uploader: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "TransportationContract");
                this.Name = "TransportationContract List";
                this.DOMContentLoaded = Bridge.fn.combine(this.DOMContentLoaded, Bridge.fn.bind(this, function () {
                    Core.MVVM.Html.Take$1("Body").Form.Attr$1("method", "POST").Attr$1("enctype", "multipart/form-data").Display$1(false).Input.Event$1("change", Bridge.fn.bind(this, function (ev) {
                        var $step = 0,
                            $task1, 
                            $jumpFromFinally, 
                            $asyncBody = Bridge.fn.bind(this, function () {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = this.SelectedExcel(ev);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            return;
                                        }
                                        default: {
                                            return;
                                        }
                                    }
                                }
                            }, arguments);

                        $asyncBody();
                    })).Type$1("file").Id(System.String.format("id_{0}", [Bridge.box(Bridge.getHashCode(this), System.Int32)])).Attr$1("name", "fileImport").Attr$1("accept", ".xlsx");
                    this._uploader = Bridge.as(Core.MVVM.Html.Context, HTMLInputElement);
                }));
            }
        },
        methods: {
            EditTransportationContract: function (entity) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "TransportationContract Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Manage.TransportationContractEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Ch\u1ec9nh s\u1eeda k\u1ebf ho\u1ea1ch v\u1eadn chuy\u1ec3n";
                                            instance.Entity = entity;
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            AddTransportationContract: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "TransportationContract Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Manage.TransportationContractEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Th\u00eam m\u1edbi k\u1ebf ho\u1ea1ch v\u1eadn chuy\u1ec3n";
                                            instance.Entity = new TMS.API.Models.TransportationContract();
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            SelectedExcel: function (e) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    files, 
                    uploadForm, 
                    formData, 
                    response, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        files = Bridge.as(e.target.files, FileList);
                                        if (Core.Extensions.IEnumerableExtensions.Nothing(File, files)) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        uploadForm = Bridge.as(this._uploader.parentElement, HTMLFormElement);
                                        formData = new FormData(uploadForm);
                                        $task1 = this.Client.SubmitAsync(System.Collections.Generic.List$1(TMS.API.Models.TransportationContract), ($t = new Core.Clients.XHRWrapper(), $t.FormData = formData, $t.Url = "ImportExcel", $t.Method = Core.Enums.HttpMethod.POST, $t.ResponseMimeType = Core.Extensions.Utils.GetMimeType("xlsx"), $t));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        response = $taskResult1;
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ImportExcel: function () {
                this._uploader.click();
            }
        }
    });

    Bridge.define("TMS.UI.Business.Manage.TransportationEditorBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        fields: {
            gridView: null
        },
        props: {
            TransportationEntity: {
                get: function () {
                    return Bridge.as(this.Entity, TMS.API.Models.Transportation);
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "Transportation");
                this.Name = "Transportation Editor";
            }
        },
        methods: {
            BeforeCreatedExpense: function (expense) {
                if (this.TransportationEntity == null) {
                    Core.Extensions.Toast.Warning("Vui l\u00f2ng ch\u1ecdn cont c\u1ea7n nh\u1eadp");
                    return;
                }
                expense.ContainerNo = this.TransportationEntity.ContainerNo;
                expense.SealNo = this.TransportationEntity.SealNo;
                expense.BossId = this.TransportationEntity.BossId;
                expense.CommodityId = this.TransportationEntity.CommodityId;
                expense.ContainerTypeId = this.TransportationEntity.ContainerTypeId;
                expense.RouteId = this.TransportationEntity.RouteId;
                expense.YearText = this.TransportationEntity.YearText;
                expense.MonthText = this.TransportationEntity.MonthText;
                expense.TransportationId = this.TransportationEntity.Id;
                expense.Id = 0;
                expense.Quantity = System.Decimal(1);
            },
            AfterCreatedExpense: function (expense, patchUpdate, listViewItem1) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $task3, 
                    $taskResult3, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    transportations, 
                    expenseTypeIds, 
                    expenseTypes, 
                    notTotal, 
                    $t, 
                    item, 
                    details, 
                    expenses, 
                    $t1, 
                    itemDetail, 
                    expenseTypeThisIds, 
                    totalThisValue, 
                    $t2, 
                    path, 
                    $t3, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = new Core.Clients.Client.$ctor1("Transportation").GetRawList(TMS.API.Models.Transportation, System.String.format("?$expand=Expense&$filter=Active eq true and Id in ({0})", [([Bridge.box(this.TransportationEntity.Id, System.Int32)]).join(",")]));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        transportations = $taskResult1;
                                        expenseTypeIds = System.Linq.Enumerable.from(transportations, TMS.API.Models.Transportation).selectMany(function (x) {
                                            return x.Expense;
                                        }).where(function (x) {
                                            return x.ExpenseTypeId != null;
                                        }).select(function (x) {
                                            return System.Nullable.getValue(x.ExpenseTypeId);
                                        }).distinct().toList(System.Int32);
                                        $task2 = new Core.Clients.Client.$ctor1("MasterData").GetRawListById(TMS.API.Models.MasterData, expenseTypeIds);
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        expenseTypes = $taskResult2;
                                        notTotal = System.Linq.Enumerable.from(expenseTypes, TMS.API.Models.MasterData).where(function (x) {
                                            return Core.Extensions.StringExt.IsNullOrWhiteSpace(x.Additional);
                                        }).select(function (x) {
                                            return x.Id;
                                        }).toList(System.Int32);
                                        $t = Bridge.getEnumerator(transportations);
                                        $step = 3;
                                        continue;
                                    }
                                    case 3: {
                                        if ($t.moveNext()) {
                                            item = { v : $t.Current };
                                            $step = 4;
                                            continue;
                                        }
                                        $step = 6;
                                        continue;
                                    }
                                    case 4: {
                                        details = (function ($me, item) {
                                            return function (_o1) {
                                                var $t1;
                                                _o1.add(($t1 = new Core.ViewModels.PatchUpdateDetail(), $t1.Field = Core.Extensions.Utils.IdField, $t1.Value = Bridge.toString(item.v.Id), $t1));
                                                return _o1;
                                            };
                                        })(this, item)(new (System.Collections.Generic.List$1(Core.ViewModels.PatchUpdateDetail)).ctor());
                                        expenses = item.v.Expense;
                                        $t1 = Bridge.getEnumerator(System.Linq.Enumerable.from(expenseTypes, TMS.API.Models.MasterData).select(function (x) {
                                            return x.Additional;
                                        }).distinct().toList(System.String));
                                        try {
                                            while ($t1.moveNext()) {
                                                itemDetail = { v : $t1.Current };
                                                expenseTypeThisIds = { v : System.Linq.Enumerable.from(expenseTypes, TMS.API.Models.MasterData).where((function ($me, itemDetail) {
                                                    return function (x) {
                                                        return Bridge.referenceEquals(x.Additional, itemDetail.v);
                                                    };
                                                })(this, itemDetail)).select(function (x) {
                                                    return x.Id;
                                                }).distinct().toList(System.Int32) };
                                                totalThisValue = System.Linq.Enumerable.from(expenses, TMS.API.Models.Expense).where((function ($me, expenseTypeThisIds) {
                                                    return function (x) {
                                                        return expenseTypeThisIds.v.contains(System.Nullable.getValue(x.ExpenseTypeId));
                                                    };
                                                })(this, expenseTypeThisIds)).sum(function (x) {
                                                    return x.TotalPriceAfterTax;
                                                }, System.Decimal.Zero);
                                                details.add(($t2 = new Core.ViewModels.PatchUpdateDetail(), $t2.Field = itemDetail.v, $t2.Value = totalThisValue.toString(), $t2));
                                            }
                                        } finally {
                                            if (Bridge.is($t1, System.IDisposable)) {
                                                $t1.System$IDisposable$Dispose();
                                            }
                                        }
                                        path = ($t2 = new Core.ViewModels.PatchUpdate(), $t2.Changes = ($t3 = Core.ViewModels.PatchUpdateDetail, System.Linq.Enumerable.from(Core.Extensions.BridgeExt.DistinctBy(Core.ViewModels.PatchUpdateDetail, System.String, System.Linq.Enumerable.from(details, Core.ViewModels.PatchUpdateDetail).where(function (x) {
                                            return x.Field != null && !Bridge.referenceEquals(x.Field, "null") && !Bridge.referenceEquals(x.Field, "");
                                        }), function (x) {
                                            return x.Field;
                                        }), $t3).toList($t3)), $t2);
                                        $task3 = new Core.Clients.Client.$ctor1("Transportation").PatchAsync(TMS.API.Models.Transportation, path, "", "true", false, false);
                                        $step = 5;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 5: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        $step = 3;
                                        continue;
                                    }
                                    case 6: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CalcTax: function (expense) {
                var grid = Core.Components.Extensions.ComponentExt.FindComponentByName(Core.Components.GridView, this, "Expense");
                var listViewItem = System.Linq.Enumerable.from(grid.GetListViewItems(expense), Core.Components.ListViewItem).firstOrDefault(null, null);
                expense.TotalPriceBeforeTax = expense.UnitPrice.mul(expense.Quantity);
                expense.TotalPriceAfterTax = expense.TotalPriceBeforeTax.add(expense.TotalPriceBeforeTax.mul(expense.Vat).div(System.Decimal(100)));
                if (listViewItem != null) {
                    listViewItem.UpdateView();
                    var updated = listViewItem.FilterChildren$1(function (x) {
                        return Bridge.referenceEquals(x.GuiInfo.FieldName, "TotalPriceBeforeTax") || Bridge.referenceEquals(x.GuiInfo.FieldName, "TotalPriceAfterTax");
                    });
                    Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, updated, function (x) {
                        x.Dirty = true;
                    });
                }
            }
        }
    });

    Bridge.define("TMS.UI.Business.Manage.TransportationListAccountantBL", {
        inherits: [Core.Components.Forms.TabEditor],
        fields: {
            selected: null,
            updateRevenue: 0
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "Transportation");
                this.Name = "Transportation List Accountant";
            }
        },
        methods: {
            ReloadMenu: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    gridView, 
                    $t, 
                    featurePolicy, 
                    menus, 
                    grid, 
                    grid1, 
                    grid2, 
                    grid3, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        gridView = ($t = Core.Components.GridView, System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), $t).toList($t));
                                        if (gridView == null) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        $task1 = this.CheckRoleList();
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        featurePolicy = $taskResult1;
                                        menus = new (System.Collections.Generic.List$1(Core.Components.Forms.ContextMenuItem)).ctor();
                                        if (System.Linq.Enumerable.from(gridView, Core.Components.GridView).any(function (x) {
                                            return Bridge.referenceEquals(x.Name, "TransportationAccountant");
                                        })) {
                                            grid = System.Linq.Enumerable.from(gridView, Core.Components.GridView).where(function (x) {
                                                return Bridge.referenceEquals(x.Name, "TransportationAccountant");
                                            }).firstOrDefault(null, null);
                                            grid.BodyContextMenuShow = Bridge.fn.combine(grid.BodyContextMenuShow, Bridge.fn.bind(this, function () {
                                                var $t1;
                                                if (System.Linq.Enumerable.from(featurePolicy, TMS.API.Models.FeaturePolicy).where(function (x) {
                                                    return x.RecordId === 18111;
                                                }).any()) {
                                                    menus.add(($t1 = new Core.Components.Forms.ContextMenuItem(), $t1.Icon = "fal fa-ballot-check", $t1.Text = "Nh\u1eadp \u0111\u1ed3ng lo\u1ea1t DT", $t1.Click = Bridge.fn.cacheBind(this, this.ImportRevenueSimultaneous), $t1));
                                                }
                                                if (System.Linq.Enumerable.from(featurePolicy, TMS.API.Models.FeaturePolicy).where(function (x) {
                                                    return x.RecordId === 17758;
                                                }).any()) {
                                                    menus.add(($t1 = new Core.Components.Forms.ContextMenuItem(), $t1.Icon = "fas fa-tasks-alt mr-1", $t1.Text = "H\u1ec7 th\u1ed1ng", $t1.MenuItems = Bridge.fn.bind(this, function (_o1) {
                                                        var $t2;
                                                        _o1.add(($t2 = new Core.Components.Forms.ContextMenuItem(), $t2.Text = "Kh\u00f3a h\u1ec7 th\u1ed1ng", $t2.Click = Bridge.fn.cacheBind(this, this.LockAllTransportation), $t2));
                                                        _o1.add(($t2 = new Core.Components.Forms.ContextMenuItem(), $t2.Text = "M\u1edf kh\u00f3a h\u1ec7 th\u1ed1ng", $t2.Click = Bridge.fn.cacheBind(this, this.UnLockAllTransportation), $t2));
                                                        return _o1;
                                                    })(new (System.Collections.Generic.List$1(Core.Components.Forms.ContextMenuItem)).ctor()), $t1));
                                                }
                                                if (System.Linq.Enumerable.from(featurePolicy, TMS.API.Models.FeaturePolicy).where(function (x) {
                                                    return x.RecordId === 17752;
                                                }).any()) {
                                                    menus.add(($t1 = new Core.Components.Forms.ContextMenuItem(), $t1.Icon = "fas fa-tasks-alt mr-1", $t1.Text = "Khai th\u00e1c", $t1.MenuItems = Bridge.fn.bind(this, function (_o2) {
                                                        var $t2;
                                                        _o2.add(($t2 = new Core.Components.Forms.ContextMenuItem(), $t2.Text = "Kh\u00f3a khai th\u00e1c", $t2.Click = Bridge.fn.cacheBind(this, this.LockTransportation), $t2));
                                                        _o2.add(($t2 = new Core.Components.Forms.ContextMenuItem(), $t2.Text = "M\u1edf kh\u00f3a khai th\u00e1c", $t2.Click = Bridge.fn.cacheBind(this, this.UnLockTransportation), $t2));
                                                        return _o2;
                                                    })(new (System.Collections.Generic.List$1(Core.Components.Forms.ContextMenuItem)).ctor()), $t1));
                                                }
                                                if (System.Linq.Enumerable.from(featurePolicy, TMS.API.Models.FeaturePolicy).where(function (x) {
                                                    return x.RecordId === 17756;
                                                }).any()) {
                                                    menus.add(($t1 = new Core.Components.Forms.ContextMenuItem(), $t1.Icon = "fas fa-tasks-alt mr-1", $t1.Text = "K\u1ebf to\u00e1n", $t1.MenuItems = Bridge.fn.bind(this, function (_o3) {
                                                        var $t2;
                                                        _o3.add(($t2 = new Core.Components.Forms.ContextMenuItem(), $t2.Text = "Kh\u00f3a k\u1ebf to\u00e1n", $t2.Click = Bridge.fn.cacheBind(this, this.LockAccountantTransportation), $t2));
                                                        _o3.add(($t2 = new Core.Components.Forms.ContextMenuItem(), $t2.Text = "M\u1edf kh\u00f3a k\u1ebf to\u00e1n", $t2.Click = Bridge.fn.cacheBind(this, this.UnLockAccountantTransportation), $t2));
                                                        return _o3;
                                                    })(new (System.Collections.Generic.List$1(Core.Components.Forms.ContextMenuItem)).ctor()), $t1));
                                                }
                                                if (System.Linq.Enumerable.from(featurePolicy, TMS.API.Models.FeaturePolicy).where(function (x) {
                                                    return x.RecordId === 18142;
                                                }).any()) {
                                                    menus.add(($t1 = new Core.Components.Forms.ContextMenuItem(), $t1.Icon = "fas fa-tasks-alt mr-1", $t1.Text = "Doanh thu", $t1.MenuItems = Bridge.fn.bind(this, function (_o4) {
                                                        var $t2;
                                                        _o4.add(($t2 = new Core.Components.Forms.ContextMenuItem(), $t2.Text = "Kh\u00f3a doanh thu", $t2.Click = Bridge.fn.cacheBind(this, this.LockRevenueTransportation), $t2));
                                                        _o4.add(($t2 = new Core.Components.Forms.ContextMenuItem(), $t2.Text = "M\u1edf kh\u00f3a doanh thu", $t2.Click = Bridge.fn.cacheBind(this, this.UnLockRevenueTransportation), $t2));
                                                        return _o4;
                                                    })(new (System.Collections.Generic.List$1(Core.Components.Forms.ContextMenuItem)).ctor()), $t1));
                                                }
                                                Core.Components.Forms.ContextMenu.Instance.MenuItems = menus;
                                            }));
                                        } else if (System.Linq.Enumerable.from(gridView, Core.Components.GridView).any(function (x) {
                                            return Bridge.referenceEquals(x.Name, "TransportationUnLockAll");
                                        })) {
                                            grid1 = System.Linq.Enumerable.from(gridView, Core.Components.GridView).where(function (x) {
                                                return Bridge.referenceEquals(x.Name, "TransportationUnLockAll");
                                            }).firstOrDefault(null, null);
                                            grid1.BodyContextMenuShow = Bridge.fn.combine(grid1.BodyContextMenuShow, Bridge.fn.bind(this, function () {
                                                var $t1;
                                                if (System.Linq.Enumerable.from(featurePolicy, TMS.API.Models.FeaturePolicy).where(function (x) {
                                                    return x.RecordId === 17749;
                                                }).any()) {
                                                    menus.add(($t1 = new Core.Components.Forms.ContextMenuItem(), $t1.Icon = "fas fa-thumbs-up mr-1", $t1.Text = "Duy\u1ec7t m\u1edf kh\u00f3a", $t1.Click = Bridge.fn.cacheBind(this, this.ApproveUnLockAll), $t1));
                                                    menus.add(($t1 = new Core.Components.Forms.ContextMenuItem(), $t1.Icon = "fas fa-thumbs-down mr-1", $t1.Text = "H\u1ee7y m\u1edf kh\u00f3a", $t1.Click = Bridge.fn.cacheBind(this, this.RejectUnLockAll), $t1));
                                                }
                                                Core.Components.Forms.ContextMenu.Instance.MenuItems = menus;
                                            }));
                                        } else if (System.Linq.Enumerable.from(gridView, Core.Components.GridView).any(function (x) {
                                            return Bridge.referenceEquals(x.Name, "TransportationUnLock");
                                        })) {
                                            grid2 = System.Linq.Enumerable.from(gridView, Core.Components.GridView).where(function (x) {
                                                return Bridge.referenceEquals(x.Name, "TransportationUnLock");
                                            }).firstOrDefault(null, null);
                                            grid2.BodyContextMenuShow = Bridge.fn.combine(grid2.BodyContextMenuShow, Bridge.fn.bind(this, function () {
                                                var $t1;
                                                if (System.Linq.Enumerable.from(featurePolicy, TMS.API.Models.FeaturePolicy).where(function (x) {
                                                    return x.RecordId === 17718;
                                                }).any()) {
                                                    menus.add(($t1 = new Core.Components.Forms.ContextMenuItem(), $t1.Icon = "fas fa-thumbs-up mr-1", $t1.Text = "Duy\u1ec7t m\u1edf kh\u00f3a", $t1.Click = Bridge.fn.cacheBind(this, this.ApproveUnLock), $t1));
                                                    menus.add(($t1 = new Core.Components.Forms.ContextMenuItem(), $t1.Icon = "fas fa-thumbs-down mr-1", $t1.Text = "H\u1ee7y m\u1edf kh\u00f3a", $t1.Click = Bridge.fn.cacheBind(this, this.RejectUnLock), $t1));
                                                }
                                                Core.Components.Forms.ContextMenu.Instance.MenuItems = menus;
                                            }));
                                        } else if (System.Linq.Enumerable.from(gridView, Core.Components.GridView).any(function (x) {
                                            return Bridge.referenceEquals(x.Name, "TransportationUnLockAccountant");
                                        })) {
                                            grid3 = System.Linq.Enumerable.from(gridView, Core.Components.GridView).where(function (x) {
                                                return Bridge.referenceEquals(x.Name, "TransportationUnLockAccountant");
                                            }).firstOrDefault(null, null);
                                            grid3.BodyContextMenuShow = Bridge.fn.combine(grid3.BodyContextMenuShow, Bridge.fn.bind(this, function () {
                                                var $t1;
                                                if (System.Linq.Enumerable.from(featurePolicy, TMS.API.Models.FeaturePolicy).where(function (x) {
                                                    return x.RecordId === 17724;
                                                }).any()) {
                                                    menus.add(($t1 = new Core.Components.Forms.ContextMenuItem(), $t1.Icon = "fas fa-thumbs-up mr-1", $t1.Text = "Duy\u1ec7t m\u1edf kh\u00f3a", $t1.Click = Bridge.fn.cacheBind(this, this.ApproveUnLockAccountant), $t1));
                                                    menus.add(($t1 = new Core.Components.Forms.ContextMenuItem(), $t1.Icon = "fas fa-thumbs-down mr-1", $t1.Text = "H\u1ee7y m\u1edf kh\u00f3a", $t1.Click = Bridge.fn.cacheBind(this, this.RejectUnLockAccountant), $t1));
                                                }
                                                Core.Components.Forms.ContextMenu.Instance.MenuItems = menus;
                                            }));
                                        } else {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ImportRevenueSimultaneous: function (arg) {
                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        gridView, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                                                return Bridge.referenceEquals(x.GuiInfo.FieldName, "TransportationAccountant") || Bridge.referenceEquals(x.GuiInfo.FieldName, "Revenue");
                                            }, null);
                                            if (gridView == null) {
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Import Revenue Simultaneous", function () {
                                                var type = Bridge.Reflection.getType("TMS.UI.Business.Accountant.ImportRevenueSimultaneousBL");
                                                var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                                instance.Title = "Nh\u1eadp \u0111\u1ed3ng lo\u1ea1t doanh thu";
                                                instance.Entity = new TMS.API.Models.Revenue();
                                                return instance;
                                            }, false, false);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            ReloadExpense: function (transportation) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    grid, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        grid = Core.Components.Extensions.ComponentExt.FindComponentByName(Core.Components.GridView, this, "Expense");
                                        grid.DataSourceFilter = System.String.format("?$filter=Active eq true and TransportationId eq {0} and ((ExpenseTypeId in (15981, 15939) eq false) or IsPurchasedInsurance eq true) and RequestChangeId eq null", [Bridge.box(transportation.Id, System.Int32)]);
                                        this.selected = transportation;
                                        $task1 = grid.ApplyFilter(true);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            MessageConfirmLockOrUnLock: function (transportation, patch) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    grid, 
                    confirm, 
                    $t, 
                    confirm1, 
                    confirm2, 
                    confirm3, 
                    confirm4, 
                    confirm5, 
                    confirm6, 
                    confirm7, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,13], $step);
                                switch ($step) {
                                    case 0: {
                                        grid = Core.Components.Extensions.ComponentExt.FindComponentByName(Core.Components.GridView, this, "TransportationAccountant");
                                        if (System.Linq.Enumerable.from(patch.Changes, Core.ViewModels.PatchUpdateDetail).any(function (x) {
                                            return Bridge.referenceEquals(x.Field, "IsLocked");
                                        })) {
                                            $step = 1;
                                            continue;
                                        } else  {
                                            $step = 2;
                                            continue;
                                        }
                                    }
                                    case 1: {
                                        if (transportation.IsLocked) {
                                            confirm = ($t = new Core.Components.Forms.ConfirmDialog(), $t.Content = "B\u1ea1n c\u00f3 ch\u1eafc ch\u1eafn mu\u1ed1n kh\u00f3a h\u1ec7 th\u1ed1ng ?", $t);
                                            confirm.Render();
                                            confirm.NoConfirmed = Bridge.fn.combine(confirm.NoConfirmed, Bridge.fn.bind(this, function () {
                                                var $step = 0,
                                                    $task1, 
                                                    $taskResult1, 
                                                    $jumpFromFinally, 
                                                    listViewItem, 
                                                    $asyncBody = Bridge.fn.bind(this, function () {
                                                        for (;;) {
                                                            $step = System.Array.min([0,1], $step);
                                                            switch ($step) {
                                                                case 0: {
                                                                    transportation.IsLocked = false;
                                                                    $task1 = new Core.Clients.Client.$ctor1("Transportation").PatchAsync(TMS.API.Models.Transportation, this.GetPatchIsLockedEntity(transportation), "", "true", false, false);
                                                                    $step = 1;
                                                                    if ($task1.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task1.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 1: {
                                                                    $taskResult1 = $task1.getAwaitedResult();
                                                                    listViewItem = System.Linq.Enumerable.from(grid.GetListViewItems(transportation), Core.Components.ListViewItem).firstOrDefault(null, null);
                                                                    listViewItem.UpdateView$1(false, ["IsLocked"]);
                                                                    return;
                                                                }
                                                                default: {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }, arguments);

                                                $asyncBody();
                                            }));
                                        } else {
                                            confirm1 = ($t = new Core.Components.Forms.ConfirmDialog(), $t.Content = "B\u1ea1n c\u00f3 ch\u1eafc ch\u1eafn mu\u1ed1n m\u1edf kh\u00f3a h\u1ec7 th\u1ed1ng ?", $t);
                                            confirm1.Render();
                                            confirm1.YesConfirmed = Bridge.fn.combine(confirm1.YesConfirmed, Bridge.fn.bind(this, function () {
                                                var $step = 0,
                                                    $task1, 
                                                    $taskResult1, 
                                                    $jumpFromFinally, 
                                                    checkRequests, 
                                                    confirmRequets, 
                                                    $t1, 
                                                    $asyncBody = Bridge.fn.bind(this, function () {
                                                        for (;;) {
                                                            $step = System.Array.min([0,1], $step);
                                                            switch ($step) {
                                                                case 0: {
                                                                    $task1 = new Core.Clients.Client.$ctor1("TransportationRequest").GetRawList(TMS.API.Models.TransportationRequest, System.String.format("?$filter=Active eq true and TransportationId eq {0} and IsRequestUnLockAll eq true", [Bridge.box(transportation.Id, System.Int32)]));
                                                                    $step = 1;
                                                                    if ($task1.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task1.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 1: {
                                                                    $taskResult1 = $task1.getAwaitedResult();
                                                                    checkRequests = $taskResult1;
                                                                    if (checkRequests.Count > 0) {
                                                                        confirmRequets = ($t1 = new Core.Components.Forms.ConfirmDialog(), $t1.Content = System.String.format("Cont n\u00e0y c\u00f3 y\u00eau c\u1ea7n duy\u1ec7t b\u1ea1n c\u00f3 mu\u1ed1n duy\u1ec7t m\u1edf kh\u00f3a kh\u00f4ng ?", null), $t1);
                                                                        confirmRequets.Render();
                                                                        confirmRequets.YesConfirmed = Bridge.fn.combine(confirmRequets.YesConfirmed, Bridge.fn.bind(this, function () {
                                                                            var $step = 0,
                                                                                $task1, 
                                                                                $taskResult1, 
                                                                                $jumpFromFinally, 
                                                                                trans, 
                                                                                $asyncBody = Bridge.fn.bind(this, function () {
                                                                                    for (;;) {
                                                                                        $step = System.Array.min([0,1], $step);
                                                                                        switch ($step) {
                                                                                            case 0: {
                                                                                                trans = new (System.Collections.Generic.List$1(TMS.API.Models.Transportation)).ctor();
                                                                                                trans.add(transportation);
                                                                                                $task1 = new Core.Clients.Client.$ctor1("Transportation").PostAsync(System.Boolean, trans, "ApproveUnLockAll");
                                                                                                $step = 1;
                                                                                                if ($task1.isCompleted()) {
                                                                                                    continue;
                                                                                                }
                                                                                                $task1.continue($asyncBody);
                                                                                                return;
                                                                                            }
                                                                                            case 1: {
                                                                                                $taskResult1 = $task1.getAwaitedResult();
                                                                                                return;
                                                                                            }
                                                                                            default: {
                                                                                                return;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }, arguments);

                                                                            $asyncBody();
                                                                        }));
                                                                        confirmRequets.NoConfirmed = Bridge.fn.combine(confirmRequets.NoConfirmed, Bridge.fn.bind(this, function () {
                                                                            var $step = 0,
                                                                                $task1, 
                                                                                $taskResult1, 
                                                                                $jumpFromFinally, 
                                                                                listViewItem, 
                                                                                $asyncBody = Bridge.fn.bind(this, function () {
                                                                                    for (;;) {
                                                                                        $step = System.Array.min([0,1], $step);
                                                                                        switch ($step) {
                                                                                            case 0: {
                                                                                                transportation.IsLocked = true;
                                                                                                $task1 = new Core.Clients.Client.$ctor1("Transportation").PatchAsync(TMS.API.Models.Transportation, this.GetPatchIsLockedEntity(transportation), "", "true", false, false);
                                                                                                $step = 1;
                                                                                                if ($task1.isCompleted()) {
                                                                                                    continue;
                                                                                                }
                                                                                                $task1.continue($asyncBody);
                                                                                                return;
                                                                                            }
                                                                                            case 1: {
                                                                                                $taskResult1 = $task1.getAwaitedResult();
                                                                                                listViewItem = System.Linq.Enumerable.from(grid.GetListViewItems(transportation), Core.Components.ListViewItem).firstOrDefault(null, null);
                                                                                                listViewItem.UpdateView$1(false, ["IsLocked"]);
                                                                                                return;
                                                                                            }
                                                                                            default: {
                                                                                                return;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }, arguments);

                                                                            $asyncBody();
                                                                        }));
                                                                    }
                                                                    return;
                                                                }
                                                                default: {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }, arguments);

                                                $asyncBody();
                                            }));
                                            confirm1.NoConfirmed = Bridge.fn.combine(confirm1.NoConfirmed, Bridge.fn.bind(this, function () {
                                                var $step = 0,
                                                    $task1, 
                                                    $taskResult1, 
                                                    $jumpFromFinally, 
                                                    listViewItem, 
                                                    $asyncBody = Bridge.fn.bind(this, function () {
                                                        for (;;) {
                                                            $step = System.Array.min([0,1], $step);
                                                            switch ($step) {
                                                                case 0: {
                                                                    transportation.IsLocked = true;
                                                                    $task1 = new Core.Clients.Client.$ctor1("Transportation").PatchAsync(TMS.API.Models.Transportation, this.GetPatchIsLockedEntity(transportation), "", "true", false, false);
                                                                    $step = 1;
                                                                    if ($task1.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task1.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 1: {
                                                                    $taskResult1 = $task1.getAwaitedResult();
                                                                    listViewItem = System.Linq.Enumerable.from(grid.GetListViewItems(transportation), Core.Components.ListViewItem).firstOrDefault(null, null);
                                                                    listViewItem.UpdateView$1(false, ["IsLocked"]);
                                                                    return;
                                                                }
                                                                default: {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }, arguments);

                                                $asyncBody();
                                            }));
                                        }
                                        $step = 13;
                                        continue;
                                    }
                                    case 2: {
                                        if (System.Linq.Enumerable.from(patch.Changes, Core.ViewModels.PatchUpdateDetail).any(function (x) {
                                            return Bridge.referenceEquals(x.Field, "IsSubmit");
                                        })) {
                                            $step = 3;
                                            continue;
                                        } else  {
                                            $step = 4;
                                            continue;
                                        }
                                    }
                                    case 3: {
                                        if (transportation.IsSubmit) {
                                            confirm2 = ($t = new Core.Components.Forms.ConfirmDialog(), $t.Content = "B\u1ea1n c\u00f3 ch\u1eafc ch\u1eafn mu\u1ed1n kh\u00f3a k\u1ebf to\u00e1n ?", $t);
                                            confirm2.Render();
                                            confirm2.YesConfirmed = Bridge.fn.combine(confirm2.YesConfirmed, Bridge.fn.bind(this, function () {
                                                var $step = 0,
                                                    $task1, 
                                                    $jumpFromFinally, 
                                                    $asyncBody = Bridge.fn.bind(this, function () {
                                                        for (;;) {
                                                            $step = System.Array.min([0,1], $step);
                                                            switch ($step) {
                                                                case 0: {
                                                                    $task1 = this.RequestUnClosing(transportation, patch);
                                                                    $step = 1;
                                                                    if ($task1.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task1.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 1: {
                                                                    $task1.getAwaitedResult();
                                                                    return;
                                                                }
                                                                default: {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }, arguments);

                                                $asyncBody();
                                            }));
                                            confirm2.NoConfirmed = Bridge.fn.combine(confirm2.NoConfirmed, Bridge.fn.bind(this, function () {
                                                var $step = 0,
                                                    $task1, 
                                                    $taskResult1, 
                                                    $jumpFromFinally, 
                                                    listViewItem, 
                                                    $asyncBody = Bridge.fn.bind(this, function () {
                                                        for (;;) {
                                                            $step = System.Array.min([0,1], $step);
                                                            switch ($step) {
                                                                case 0: {
                                                                    transportation.IsSubmit = false;
                                                                    $task1 = new Core.Clients.Client.$ctor1("Transportation").PatchAsync(TMS.API.Models.Transportation, this.GetPatchIsSubmitEntity(transportation), "", "true", false, false);
                                                                    $step = 1;
                                                                    if ($task1.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task1.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 1: {
                                                                    $taskResult1 = $task1.getAwaitedResult();
                                                                    listViewItem = System.Linq.Enumerable.from(grid.GetListViewItems(transportation), Core.Components.ListViewItem).firstOrDefault(null, null);
                                                                    listViewItem.UpdateView$1(false, ["IsSubmit"]);
                                                                    return;
                                                                }
                                                                default: {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }, arguments);

                                                $asyncBody();
                                            }));
                                        } else {
                                            confirm3 = ($t = new Core.Components.Forms.ConfirmDialog(), $t.Content = "B\u1ea1n c\u00f3 ch\u1eafc ch\u1eafn mu\u1ed1n m\u1edf kh\u00f3a k\u1ebf to\u00e1n ?", $t);
                                            confirm3.Render();
                                            confirm3.YesConfirmed = Bridge.fn.combine(confirm3.YesConfirmed, Bridge.fn.bind(this, function () {
                                                var $step = 0,
                                                    $task1, 
                                                    $task2, 
                                                    $taskResult2, 
                                                    $jumpFromFinally, 
                                                    checkRequests, 
                                                    confirmRequets, 
                                                    $t1, 
                                                    $asyncBody = Bridge.fn.bind(this, function () {
                                                        for (;;) {
                                                            $step = System.Array.min([0,1,2,3,4,5], $step);
                                                            switch ($step) {
                                                                case 0: {
                                                                    if (transportation.IsLocked) {
                                                                        $step = 1;
                                                                        continue;
                                                                    } else  {
                                                                        $step = 3;
                                                                        continue;
                                                                    }
                                                                }
                                                                case 1: {
                                                                    $task1 = this.RequestUnClosing(transportation, patch);
                                                                    $step = 2;
                                                                    if ($task1.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task1.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 2: {
                                                                    $task1.getAwaitedResult();
                                                                    $step = 5;
                                                                    continue;
                                                                }
                                                                case 3: {
                                                                    $task2 = new Core.Clients.Client.$ctor1("TransportationRequest").GetRawList(TMS.API.Models.TransportationRequest, System.String.format("?$filter=Active eq true and TransportationId eq {0} and IsRequestUnLockAccountant eq true", [Bridge.box(transportation.Id, System.Int32)]));
                                                                    $step = 4;
                                                                    if ($task2.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task2.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 4: {
                                                                    $taskResult2 = $task2.getAwaitedResult();
                                                                    checkRequests = $taskResult2;
                                                                    if (checkRequests.Count > 0) {
                                                                        confirmRequets = ($t1 = new Core.Components.Forms.ConfirmDialog(), $t1.Content = System.String.format("Cont n\u00e0y c\u00f3 y\u00eau c\u1ea7n duy\u1ec7t b\u1ea1n c\u00f3 mu\u1ed1n duy\u1ec7t m\u1edf kh\u00f3a kh\u00f4ng ?", null), $t1);
                                                                        confirmRequets.Render();
                                                                        confirmRequets.YesConfirmed = Bridge.fn.combine(confirmRequets.YesConfirmed, Bridge.fn.bind(this, function () {
                                                                            var $step = 0,
                                                                                $task1, 
                                                                                $taskResult1, 
                                                                                $jumpFromFinally, 
                                                                                trans, 
                                                                                $asyncBody = Bridge.fn.bind(this, function () {
                                                                                    for (;;) {
                                                                                        $step = System.Array.min([0,1], $step);
                                                                                        switch ($step) {
                                                                                            case 0: {
                                                                                                trans = new (System.Collections.Generic.List$1(TMS.API.Models.Transportation)).ctor();
                                                                                                trans.add(transportation);
                                                                                                $task1 = new Core.Clients.Client.$ctor1("Transportation").PostAsync(System.Boolean, trans, "ApproveUnLockAccountantTransportation");
                                                                                                $step = 1;
                                                                                                if ($task1.isCompleted()) {
                                                                                                    continue;
                                                                                                }
                                                                                                $task1.continue($asyncBody);
                                                                                                return;
                                                                                            }
                                                                                            case 1: {
                                                                                                $taskResult1 = $task1.getAwaitedResult();
                                                                                                return;
                                                                                            }
                                                                                            default: {
                                                                                                return;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }, arguments);

                                                                            $asyncBody();
                                                                        }));
                                                                        confirmRequets.NoConfirmed = Bridge.fn.combine(confirmRequets.NoConfirmed, Bridge.fn.bind(this, function () {
                                                                            var $step = 0,
                                                                                $task1, 
                                                                                $taskResult1, 
                                                                                $jumpFromFinally, 
                                                                                listViewItem, 
                                                                                $asyncBody = Bridge.fn.bind(this, function () {
                                                                                    for (;;) {
                                                                                        $step = System.Array.min([0,1], $step);
                                                                                        switch ($step) {
                                                                                            case 0: {
                                                                                                transportation.IsSubmit = true;
                                                                                                $task1 = new Core.Clients.Client.$ctor1("Transportation").PatchAsync(TMS.API.Models.Transportation, this.GetPatchIsSubmitEntity(transportation), "", "true", false, false);
                                                                                                $step = 1;
                                                                                                if ($task1.isCompleted()) {
                                                                                                    continue;
                                                                                                }
                                                                                                $task1.continue($asyncBody);
                                                                                                return;
                                                                                            }
                                                                                            case 1: {
                                                                                                $taskResult1 = $task1.getAwaitedResult();
                                                                                                listViewItem = System.Linq.Enumerable.from(grid.GetListViewItems(transportation), Core.Components.ListViewItem).firstOrDefault(null, null);
                                                                                                listViewItem.UpdateView$1(false, ["IsSubmit"]);
                                                                                                return;
                                                                                            }
                                                                                            default: {
                                                                                                return;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }, arguments);

                                                                            $asyncBody();
                                                                        }));
                                                                    }
                                                                    $step = 5;
                                                                    continue;
                                                                }
                                                                case 5: {
                                                                    return;
                                                                }
                                                                default: {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }, arguments);

                                                $asyncBody();
                                            }));
                                            confirm3.NoConfirmed = Bridge.fn.combine(confirm3.NoConfirmed, Bridge.fn.bind(this, function () {
                                                var $step = 0,
                                                    $task1, 
                                                    $taskResult1, 
                                                    $jumpFromFinally, 
                                                    listViewItem, 
                                                    $asyncBody = Bridge.fn.bind(this, function () {
                                                        for (;;) {
                                                            $step = System.Array.min([0,1], $step);
                                                            switch ($step) {
                                                                case 0: {
                                                                    transportation.IsSubmit = true;
                                                                    $task1 = new Core.Clients.Client.$ctor1("Transportation").PatchAsync(TMS.API.Models.Transportation, this.GetPatchIsSubmitEntity(transportation), "", "true", false, false);
                                                                    $step = 1;
                                                                    if ($task1.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task1.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 1: {
                                                                    $taskResult1 = $task1.getAwaitedResult();
                                                                    listViewItem = System.Linq.Enumerable.from(grid.GetListViewItems(transportation), Core.Components.ListViewItem).firstOrDefault(null, null);
                                                                    listViewItem.UpdateView$1(false, ["IsSubmit"]);
                                                                    return;
                                                                }
                                                                default: {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }, arguments);

                                                $asyncBody();
                                            }));
                                        }
                                        $step = 12;
                                        continue;
                                    }
                                    case 4: {
                                        if (System.Linq.Enumerable.from(patch.Changes, Core.ViewModels.PatchUpdateDetail).any(function (x) {
                                            return Bridge.referenceEquals(x.Field, "IsKt");
                                        })) {
                                            $step = 5;
                                            continue;
                                        } else  {
                                            $step = 6;
                                            continue;
                                        }
                                    }
                                    case 5: {
                                        if (transportation.IsKt) {
                                            confirm4 = ($t = new Core.Components.Forms.ConfirmDialog(), $t.Content = "B\u1ea1n c\u00f3 ch\u1eafc ch\u1eafn mu\u1ed1n kh\u00f3a khai th\u00e1c ?", $t);
                                            confirm4.Render();
                                            confirm4.YesConfirmed = Bridge.fn.combine(confirm4.YesConfirmed, Bridge.fn.bind(this, function () {
                                                var $step = 0,
                                                    $task1, 
                                                    $jumpFromFinally, 
                                                    $asyncBody = Bridge.fn.bind(this, function () {
                                                        for (;;) {
                                                            $step = System.Array.min([0,1], $step);
                                                            switch ($step) {
                                                                case 0: {
                                                                    $task1 = this.RequestUnClosing(transportation, patch);
                                                                    $step = 1;
                                                                    if ($task1.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task1.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 1: {
                                                                    $task1.getAwaitedResult();
                                                                    return;
                                                                }
                                                                default: {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }, arguments);

                                                $asyncBody();
                                            }));
                                            confirm4.NoConfirmed = Bridge.fn.combine(confirm4.NoConfirmed, Bridge.fn.bind(this, function () {
                                                var $step = 0,
                                                    $task1, 
                                                    $taskResult1, 
                                                    $jumpFromFinally, 
                                                    listViewItem, 
                                                    $asyncBody = Bridge.fn.bind(this, function () {
                                                        for (;;) {
                                                            $step = System.Array.min([0,1], $step);
                                                            switch ($step) {
                                                                case 0: {
                                                                    transportation.IsKt = false;
                                                                    $task1 = new Core.Clients.Client.$ctor1("Transportation").PatchAsync(TMS.API.Models.Transportation, this.GetPatchIsKtEntity(transportation), "", "true", false, false);
                                                                    $step = 1;
                                                                    if ($task1.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task1.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 1: {
                                                                    $taskResult1 = $task1.getAwaitedResult();
                                                                    listViewItem = System.Linq.Enumerable.from(grid.GetListViewItems(transportation), Core.Components.ListViewItem).firstOrDefault(null, null);
                                                                    listViewItem.UpdateView$1(false, ["IsKt"]);
                                                                    return;
                                                                }
                                                                default: {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }, arguments);

                                                $asyncBody();
                                            }));
                                        } else {
                                            confirm5 = ($t = new Core.Components.Forms.ConfirmDialog(), $t.Content = "B\u1ea1n c\u00f3 ch\u1eafc ch\u1eafn mu\u1ed1n m\u1edf kh\u00f3a khai th\u00e1c ?", $t);
                                            confirm5.Render();
                                            confirm5.YesConfirmed = Bridge.fn.combine(confirm5.YesConfirmed, Bridge.fn.bind(this, function () {
                                                var $step = 0,
                                                    $task1, 
                                                    $task2, 
                                                    $taskResult2, 
                                                    $jumpFromFinally, 
                                                    checkRequests, 
                                                    confirmRequets, 
                                                    $t1, 
                                                    $asyncBody = Bridge.fn.bind(this, function () {
                                                        for (;;) {
                                                            $step = System.Array.min([0,1,2,3,4,5], $step);
                                                            switch ($step) {
                                                                case 0: {
                                                                    if (transportation.IsLocked) {
                                                                        $step = 1;
                                                                        continue;
                                                                    } else  {
                                                                        $step = 3;
                                                                        continue;
                                                                    }
                                                                }
                                                                case 1: {
                                                                    $task1 = this.RequestUnClosing(transportation, patch);
                                                                    $step = 2;
                                                                    if ($task1.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task1.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 2: {
                                                                    $task1.getAwaitedResult();
                                                                    $step = 5;
                                                                    continue;
                                                                }
                                                                case 3: {
                                                                    $task2 = new Core.Clients.Client.$ctor1("TransportationRequest").GetRawList(TMS.API.Models.TransportationRequest, System.String.format("?$filter=Active eq true and TransportationId eq {0} and IsRequestUnLockExploit eq true", [Bridge.box(transportation.Id, System.Int32)]));
                                                                    $step = 4;
                                                                    if ($task2.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task2.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 4: {
                                                                    $taskResult2 = $task2.getAwaitedResult();
                                                                    checkRequests = $taskResult2;
                                                                    if (checkRequests.Count > 0) {
                                                                        confirmRequets = ($t1 = new Core.Components.Forms.ConfirmDialog(), $t1.Content = System.String.format("Cont n\u00e0y c\u00f3 y\u00eau c\u1ea7n duy\u1ec7t b\u1ea1n c\u00f3 mu\u1ed1n duy\u1ec7t m\u1edf kh\u00f3a kh\u00f4ng ?", null), $t1);
                                                                        confirmRequets.Render();
                                                                        confirmRequets.YesConfirmed = Bridge.fn.combine(confirmRequets.YesConfirmed, Bridge.fn.bind(this, function () {
                                                                            var $step = 0,
                                                                                $task1, 
                                                                                $taskResult1, 
                                                                                $jumpFromFinally, 
                                                                                trans, 
                                                                                $asyncBody = Bridge.fn.bind(this, function () {
                                                                                    for (;;) {
                                                                                        $step = System.Array.min([0,1], $step);
                                                                                        switch ($step) {
                                                                                            case 0: {
                                                                                                trans = new (System.Collections.Generic.List$1(TMS.API.Models.Transportation)).ctor();
                                                                                                trans.add(transportation);
                                                                                                $task1 = new Core.Clients.Client.$ctor1("Transportation").PostAsync(System.Boolean, trans, "ApproveUnLockTransportation");
                                                                                                $step = 1;
                                                                                                if ($task1.isCompleted()) {
                                                                                                    continue;
                                                                                                }
                                                                                                $task1.continue($asyncBody);
                                                                                                return;
                                                                                            }
                                                                                            case 1: {
                                                                                                $taskResult1 = $task1.getAwaitedResult();
                                                                                                return;
                                                                                            }
                                                                                            default: {
                                                                                                return;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }, arguments);

                                                                            $asyncBody();
                                                                        }));
                                                                        confirmRequets.NoConfirmed = Bridge.fn.combine(confirmRequets.NoConfirmed, Bridge.fn.bind(this, function () {
                                                                            var $step = 0,
                                                                                $task1, 
                                                                                $taskResult1, 
                                                                                $jumpFromFinally, 
                                                                                listViewItem, 
                                                                                $asyncBody = Bridge.fn.bind(this, function () {
                                                                                    for (;;) {
                                                                                        $step = System.Array.min([0,1], $step);
                                                                                        switch ($step) {
                                                                                            case 0: {
                                                                                                transportation.IsKt = true;
                                                                                                $task1 = new Core.Clients.Client.$ctor1("Transportation").PatchAsync(TMS.API.Models.Transportation, this.GetPatchIsKtEntity(transportation), "", "true", false, false);
                                                                                                $step = 1;
                                                                                                if ($task1.isCompleted()) {
                                                                                                    continue;
                                                                                                }
                                                                                                $task1.continue($asyncBody);
                                                                                                return;
                                                                                            }
                                                                                            case 1: {
                                                                                                $taskResult1 = $task1.getAwaitedResult();
                                                                                                listViewItem = System.Linq.Enumerable.from(grid.GetListViewItems(transportation), Core.Components.ListViewItem).firstOrDefault(null, null);
                                                                                                listViewItem.UpdateView$1(false, ["IsKt"]);
                                                                                                return;
                                                                                            }
                                                                                            default: {
                                                                                                return;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }, arguments);

                                                                            $asyncBody();
                                                                        }));
                                                                    }
                                                                    $step = 5;
                                                                    continue;
                                                                }
                                                                case 5: {
                                                                    return;
                                                                }
                                                                default: {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }, arguments);

                                                $asyncBody();
                                            }));
                                            confirm5.NoConfirmed = Bridge.fn.combine(confirm5.NoConfirmed, Bridge.fn.bind(this, function () {
                                                var $step = 0,
                                                    $task1, 
                                                    $taskResult1, 
                                                    $jumpFromFinally, 
                                                    listViewItem, 
                                                    $asyncBody = Bridge.fn.bind(this, function () {
                                                        for (;;) {
                                                            $step = System.Array.min([0,1], $step);
                                                            switch ($step) {
                                                                case 0: {
                                                                    transportation.IsKt = true;
                                                                    $task1 = new Core.Clients.Client.$ctor1("Transportation").PatchAsync(TMS.API.Models.Transportation, this.GetPatchIsKtEntity(transportation), "", "true", false, false);
                                                                    $step = 1;
                                                                    if ($task1.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task1.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 1: {
                                                                    $taskResult1 = $task1.getAwaitedResult();
                                                                    listViewItem = System.Linq.Enumerable.from(grid.GetListViewItems(transportation), Core.Components.ListViewItem).firstOrDefault(null, null);
                                                                    listViewItem.UpdateView$1(false, ["IsKt"]);
                                                                    return;
                                                                }
                                                                default: {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }, arguments);

                                                $asyncBody();
                                            }));
                                        }
                                        $step = 11;
                                        continue;
                                    }
                                    case 6: {
                                        if (System.Linq.Enumerable.from(patch.Changes, Core.ViewModels.PatchUpdateDetail).any(function (x) {
                                            return Bridge.referenceEquals(x.Field, "IsLockedRevenue");
                                        })) {
                                            $step = 7;
                                            continue;
                                        } else  {
                                            $step = 8;
                                            continue;
                                        }
                                    }
                                    case 7: {
                                        if (transportation.IsLockedRevenue) {
                                            confirm6 = ($t = new Core.Components.Forms.ConfirmDialog(), $t.Content = "B\u1ea1n c\u00f3 ch\u1eafc ch\u1eafn mu\u1ed1n kh\u00f3a doanh thu ?", $t);
                                            confirm6.Render();
                                            confirm6.YesConfirmed = Bridge.fn.combine(confirm6.YesConfirmed, Bridge.fn.bind(this, function () {
                                                var $step = 0,
                                                    $task1, 
                                                    $jumpFromFinally, 
                                                    $asyncBody = Bridge.fn.bind(this, function () {
                                                        for (;;) {
                                                            $step = System.Array.min([0,1], $step);
                                                            switch ($step) {
                                                                case 0: {
                                                                    $task1 = this.RequestUnClosing(transportation, patch);
                                                                    $step = 1;
                                                                    if ($task1.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task1.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 1: {
                                                                    $task1.getAwaitedResult();
                                                                    return;
                                                                }
                                                                default: {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }, arguments);

                                                $asyncBody();
                                            }));
                                            confirm6.NoConfirmed = Bridge.fn.combine(confirm6.NoConfirmed, Bridge.fn.bind(this, function () {
                                                var $step = 0,
                                                    $task1, 
                                                    $taskResult1, 
                                                    $jumpFromFinally, 
                                                    listViewItem, 
                                                    $asyncBody = Bridge.fn.bind(this, function () {
                                                        for (;;) {
                                                            $step = System.Array.min([0,1], $step);
                                                            switch ($step) {
                                                                case 0: {
                                                                    transportation.IsLockedRevenue = false;
                                                                    $task1 = new Core.Clients.Client.$ctor1("Transportation").PatchAsync(TMS.API.Models.Transportation, this.GetPatchIsLockedRevenueEntity(transportation), "", "true", false, false);
                                                                    $step = 1;
                                                                    if ($task1.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task1.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 1: {
                                                                    $taskResult1 = $task1.getAwaitedResult();
                                                                    listViewItem = System.Linq.Enumerable.from(grid.GetListViewItems(transportation), Core.Components.ListViewItem).firstOrDefault(null, null);
                                                                    listViewItem.UpdateView$1(false, ["IsLockedRevenue"]);
                                                                    return;
                                                                }
                                                                default: {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }, arguments);

                                                $asyncBody();
                                            }));
                                        } else {
                                            confirm7 = ($t = new Core.Components.Forms.ConfirmDialog(), $t.Content = "B\u1ea1n c\u00f3 ch\u1eafc ch\u1eafn mu\u1ed1n m\u1edf kh\u00f3a doanh thu ?", $t);
                                            confirm7.Render();
                                            confirm7.YesConfirmed = Bridge.fn.combine(confirm7.YesConfirmed, Bridge.fn.bind(this, function () {
                                                var $step = 0,
                                                    $task1, 
                                                    $jumpFromFinally, 
                                                    $asyncBody = Bridge.fn.bind(this, function () {
                                                        for (;;) {
                                                            $step = System.Array.min([0,1], $step);
                                                            switch ($step) {
                                                                case 0: {
                                                                    $task1 = this.RequestUnClosing(transportation, patch);
                                                                    $step = 1;
                                                                    if ($task1.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task1.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 1: {
                                                                    $task1.getAwaitedResult();
                                                                    return;
                                                                }
                                                                default: {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }, arguments);

                                                $asyncBody();
                                            }));
                                            confirm7.NoConfirmed = Bridge.fn.combine(confirm7.NoConfirmed, Bridge.fn.bind(this, function () {
                                                var $step = 0,
                                                    $task1, 
                                                    $taskResult1, 
                                                    $jumpFromFinally, 
                                                    listViewItem, 
                                                    $asyncBody = Bridge.fn.bind(this, function () {
                                                        for (;;) {
                                                            $step = System.Array.min([0,1], $step);
                                                            switch ($step) {
                                                                case 0: {
                                                                    transportation.IsLockedRevenue = true;
                                                                    $task1 = new Core.Clients.Client.$ctor1("Transportation").PatchAsync(TMS.API.Models.Transportation, this.GetPatchIsLockedRevenueEntity(transportation), "", "true", false, false);
                                                                    $step = 1;
                                                                    if ($task1.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task1.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 1: {
                                                                    $taskResult1 = $task1.getAwaitedResult();
                                                                    listViewItem = System.Linq.Enumerable.from(grid.GetListViewItems(transportation), Core.Components.ListViewItem).firstOrDefault(null, null);
                                                                    listViewItem.UpdateView$1(false, ["IsLockedRevenue"]);
                                                                    return;
                                                                }
                                                                default: {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }, arguments);

                                                $asyncBody();
                                            }));
                                        }
                                        $step = 10;
                                        continue;
                                    }
                                    case 8: {
                                        $task1 = this.RequestUnClosing(transportation, patch);
                                        $step = 9;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 9: {
                                        $task1.getAwaitedResult();
                                        $step = 10;
                                        continue;
                                    }



                                    case 13: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            RequestUnClosing: function (transportation, patch) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    tran, 
                    confirm, 
                    $t, 
                    confirm1, 
                    confirm2, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3], $step);
                                switch ($step) {
                                    case 0: {
                                        if (transportation.IsLocked === false && transportation.IsKt === false && transportation.IsSubmit === false && transportation.LockShip === false) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        if (System.Linq.Enumerable.from(patch.Changes, Core.ViewModels.PatchUpdateDetail).any(function (x) {
                                            return !Bridge.referenceEquals(x.Field, "Notes") && !Bridge.referenceEquals(x.Field, "Id") && !Bridge.referenceEquals(x.Field, "ExportListReturnId") && !Bridge.referenceEquals(x.Field, "UserReturnId") && !Bridge.referenceEquals(x.Field, "IsLocked");
                                        })) {
                                            $step = 1;
                                            continue;
                                        } 
                                        $step = 3;
                                        continue;
                                    }
                                    case 1: {
                                        $task1 = new Core.Clients.Client.$ctor1("Transportation").FirstOrDefaultAsync(TMS.API.Models.Transportation, System.String.format("?$filter=Active eq true and Id eq {0}", [Bridge.box(transportation.Id, System.Int32)]));
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        tran = $taskResult1;
                                        if (tran.IsLocked) {
                                            confirm = ($t = new Core.Components.Forms.ConfirmDialog(), $t.NeedAnswer = true, $t.ComType = "Textbox", $t.Content = (System.String.format("DSVC n\u00e0y \u0111\u00e3 b\u1ecb kh\u00f3a (H\u1ec7 th\u1ed1ng). B\u1ea1n c\u00f3 mu\u1ed1n g\u1eedi y\u00eau c\u1ea7u m\u1edf kh\u00f3a kh\u00f4ng?<br />", null) || "") + "H\u00e3y nh\u1eadp l\u00fd do", $t);
                                            confirm.Render();
                                            confirm.YesConfirmed = Bridge.fn.combine(confirm.YesConfirmed, Bridge.fn.bind(this, function () {
                                                var $step = 0,
                                                    $task1, 
                                                    $taskResult1, 
                                                    $jumpFromFinally, 
                                                    $t1, 
                                                    $asyncBody = Bridge.fn.bind(this, function () {
                                                        for (;;) {
                                                            $step = System.Array.min([0,1], $step);
                                                            switch ($step) {
                                                                case 0: {
                                                                    transportation.ReasonUnLockAll = ($t1 = confirm.Textbox) != null ? $t1.Text : null;
                                                                    $task1 = new Core.Clients.Client.$ctor1("Transportation").PostAsync(TMS.API.Models.Transportation, transportation, "RequestUnLockAll");
                                                                    $step = 1;
                                                                    if ($task1.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task1.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 1: {
                                                                    $taskResult1 = $task1.getAwaitedResult();
                                                                    return;
                                                                }
                                                                default: {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }, arguments);

                                                $asyncBody();
                                            }));
                                        }
                                        if (System.Linq.Enumerable.from(patch.Changes, Core.ViewModels.PatchUpdateDetail).any(function (x) {
                                            return Bridge.referenceEquals(x.Field, "ShipPrice") || Bridge.referenceEquals(x.Field, "PolicyId") || Bridge.referenceEquals(x.Field, "RouteId") || Bridge.referenceEquals(x.Field, "BrandShipId") || Bridge.referenceEquals(x.Field, "ShipId") || Bridge.referenceEquals(x.Field, "Trip") || Bridge.referenceEquals(x.Field, "StartShip") || Bridge.referenceEquals(x.Field, "ContainerTypeId") || Bridge.referenceEquals(x.Field, "BookingId");
                                        })) {
                                            if (transportation.LockShip) {
                                                confirm1 = ($t = new Core.Components.Forms.ConfirmDialog(), $t.NeedAnswer = true, $t.ComType = "Textbox", $t.Content = (System.String.format("DSVC n\u00e0y \u0111\u00e3 b\u1ecb kh\u00f3a (C\u01b0\u1edbc t\u00e0u). B\u1ea1n c\u00f3 mu\u1ed1n g\u1eedi y\u00eau c\u1ea7u m\u1edf kh\u00f3a kh\u00f4ng?<br />", null) || "") + "H\u00e3y nh\u1eadp l\u00fd do", $t);
                                                confirm1.Render();
                                                confirm1.YesConfirmed = Bridge.fn.combine(confirm1.YesConfirmed, Bridge.fn.bind(this, function () {
                                                    var $step = 0,
                                                        $task1, 
                                                        $taskResult1, 
                                                        $jumpFromFinally, 
                                                        $t1, 
                                                        $asyncBody = Bridge.fn.bind(this, function () {
                                                            for (;;) {
                                                                $step = System.Array.min([0,1], $step);
                                                                switch ($step) {
                                                                    case 0: {
                                                                        transportation.ReasonUnLockShip = ($t1 = confirm1.Textbox) != null ? $t1.Text : null;
                                                                        $task1 = new Core.Clients.Client.$ctor1("Transportation").PostAsync(TMS.API.Models.Transportation, transportation, "RequestUnLockShip");
                                                                        $step = 1;
                                                                        if ($task1.isCompleted()) {
                                                                            continue;
                                                                        }
                                                                        $task1.continue($asyncBody);
                                                                        return;
                                                                    }
                                                                    case 1: {
                                                                        $taskResult1 = $task1.getAwaitedResult();
                                                                        return;
                                                                    }
                                                                    default: {
                                                                        return;
                                                                    }
                                                                }
                                                            }
                                                        }, arguments);

                                                    $asyncBody();
                                                }));
                                            }
                                        }
                                        if (System.Linq.Enumerable.from(patch.Changes, Core.ViewModels.PatchUpdateDetail).any(function (x) {
                                            return Bridge.referenceEquals(x.Field, "MonthText") || Bridge.referenceEquals(x.Field, "YearText") || Bridge.referenceEquals(x.Field, "ExportListId") || Bridge.referenceEquals(x.Field, "RouteId") || Bridge.referenceEquals(x.Field, "ShipId") || Bridge.referenceEquals(x.Field, "Trip") || Bridge.referenceEquals(x.Field, "ClosingDate") || Bridge.referenceEquals(x.Field, "StartShip") || Bridge.referenceEquals(x.Field, "ContainerTypeId") || Bridge.referenceEquals(x.Field, "ContainerNo") || Bridge.referenceEquals(x.Field, "SealNo") || Bridge.referenceEquals(x.Field, "BossId") || Bridge.referenceEquals(x.Field, "UserId") || Bridge.referenceEquals(x.Field, "CommodityId") || Bridge.referenceEquals(x.Field, "Cont20") || Bridge.referenceEquals(x.Field, "Cont40") || Bridge.referenceEquals(x.Field, "Weight") || Bridge.referenceEquals(x.Field, "ReceivedId") || Bridge.referenceEquals(x.Field, "FreeText2") || Bridge.referenceEquals(x.Field, "ShipDate") || Bridge.referenceEquals(x.Field, "ReturnDate") || Bridge.referenceEquals(x.Field, "ReturnId") || Bridge.referenceEquals(x.Field, "FreeText3");
                                        })) {
                                            if (transportation.IsKt) {
                                                confirm2 = ($t = new Core.Components.Forms.ConfirmDialog(), $t.NeedAnswer = true, $t.ComType = "Textbox", $t.Content = (System.String.format("DSVC n\u00e0y \u0111\u00e3 b\u1ecb kh\u00f3a (Khai th\u00e1c). B\u1ea1n c\u00f3 mu\u1ed1n g\u1eedi y\u00eau c\u1ea7u m\u1edf kh\u00f3a kh\u00f4ng?<br />", null) || "") + "H\u00e3y nh\u1eadp l\u00fd do", $t);
                                                confirm2.Render();
                                                confirm2.YesConfirmed = Bridge.fn.combine(confirm2.YesConfirmed, Bridge.fn.bind(this, function () {
                                                    var $step = 0,
                                                        $task1, 
                                                        $taskResult1, 
                                                        $jumpFromFinally, 
                                                        $t1, 
                                                        $asyncBody = Bridge.fn.bind(this, function () {
                                                            for (;;) {
                                                                $step = System.Array.min([0,1], $step);
                                                                switch ($step) {
                                                                    case 0: {
                                                                        transportation.ReasonUnLockExploit = ($t1 = confirm2.Textbox) != null ? $t1.Text : null;
                                                                        $task1 = new Core.Clients.Client.$ctor1("Transportation").PostAsync(TMS.API.Models.Transportation, transportation, "RequestUnLock");
                                                                        $step = 1;
                                                                        if ($task1.isCompleted()) {
                                                                            continue;
                                                                        }
                                                                        $task1.continue($asyncBody);
                                                                        return;
                                                                    }
                                                                    case 1: {
                                                                        $taskResult1 = $task1.getAwaitedResult();
                                                                        return;
                                                                    }
                                                                    default: {
                                                                        return;
                                                                    }
                                                                }
                                                            }
                                                        }, arguments);

                                                    $asyncBody();
                                                }));
                                            }
                                        }
                                        $step = 3;
                                        continue;
                                    }
                                    case 3: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            RequestUnClosingRevenue: function (revenue, patch) {
                var $t;
                if (this.selected.IsLocked === false) {
                    if (System.Linq.Enumerable.from(patch.Changes, Core.ViewModels.PatchUpdateDetail).any(function (x) {
                            return Bridge.referenceEquals(x.Field, "Vat") || Bridge.referenceEquals(x.Field, "TotalPrice");
                        }) && this.selected.IsLockedRevenue === false) {
                        if (revenue.UserUpdate2 != null && System.Nullable.neq(revenue.UserUpdate2, 0) && System.Nullable.neq(revenue.UserUpdate2, Core.Clients.Client.Token.UserId) && System.Linq.Enumerable.from(Core.Clients.Client.Token.RoleIds, System.Int32).where(function (x) {
                                return x === 46 || x === 8;
                            }).any() === false) {
                            Core.Extensions.Toast.Warning("B\u1ea1n kh\u00f4ng c\u00f3 quy\u1ec1n ch\u1ec9nh s\u1eeda d\u1eef li\u1ec7u c\u1ee7a user kh\u00e1c.");
                            return;
                        }
                    }
                    if (System.Linq.Enumerable.from(patch.Changes, Core.ViewModels.PatchUpdateDetail).any(function (x) {
                            return Bridge.referenceEquals(x.Field, "InvoinceNo") || Bridge.referenceEquals(x.Field, "InvoinceDate");
                        }) && this.selected.IsLockedRevenue === false && System.Linq.Enumerable.from(Core.Clients.Client.Token.RoleIds, System.Int32).where(function (x) {
                            return x === 46 || x === 8;
                        }).any() === false) {
                        Core.Extensions.Toast.Warning("B\u1ea1n kh\u00f4ng c\u00f3 quy\u1ec1n ch\u1ec9nh s\u1eeda d\u1eef li\u1ec7u c\u1ee7a c\u1ed9t n\u00e0y.");
                        return;
                    }
                    if (this.selected.IsSubmit) {
                        if (System.Linq.Enumerable.from(patch.Changes, Core.ViewModels.PatchUpdateDetail).any(function (x) {
                                return Bridge.referenceEquals(x.Field, "Name") || Bridge.referenceEquals(x.Field, "LotNo") || Bridge.referenceEquals(x.Field, "LotDate") || Bridge.referenceEquals(x.Field, "UnitPriceAfterTax") || Bridge.referenceEquals(x.Field, "UnitPriceBeforeTax") || Bridge.referenceEquals(x.Field, "ReceivedPrice") || Bridge.referenceEquals(x.Field, "CollectOnBehaftPrice") || Bridge.referenceEquals(x.Field, "NotePayment") || Bridge.referenceEquals(x.Field, "Note") || Bridge.referenceEquals(x.Field, "RevenueAdjustment");
                            })) {
                            if (this.selected.IsSubmit) {
                                var confirm = ($t = new Core.Components.Forms.ConfirmDialog(), $t.NeedAnswer = true, $t.ComType = "Textbox", $t.Content = (System.String.format("DSVC n\u00e0y \u0111\u00e3 b\u1ecb kh\u00f3a (K\u1ebf to\u00e1n). B\u1ea1n c\u00f3 mu\u1ed1n g\u1eedi y\u00eau c\u1ea7u m\u1edf kh\u00f3a kh\u00f4ng?<br />", null) || "") + "H\u00e3y nh\u1eadp l\u00fd do", $t);
                                confirm.Render();
                                confirm.YesConfirmed = Bridge.fn.combine(confirm.YesConfirmed, Bridge.fn.bind(this, function () {
                                    var $step = 0,
                                        $task1, 
                                        $taskResult1, 
                                        $jumpFromFinally, 
                                        $t1, 
                                        $asyncBody = Bridge.fn.bind(this, function () {
                                            for (;;) {
                                                $step = System.Array.min([0,1], $step);
                                                switch ($step) {
                                                    case 0: {
                                                        this.selected.ReasonUnLockAccountant = ($t1 = confirm.Textbox) != null ? $t1.Text : null;
                                                        $task1 = new Core.Clients.Client.$ctor1("Transportation").PostAsync(TMS.API.Models.Transportation, this.selected, "RequestUnLockAccountant");
                                                        $step = 1;
                                                        if ($task1.isCompleted()) {
                                                            continue;
                                                        }
                                                        $task1.continue($asyncBody);
                                                        return;
                                                    }
                                                    case 1: {
                                                        $taskResult1 = $task1.getAwaitedResult();
                                                        return;
                                                    }
                                                    default: {
                                                        return;
                                                    }
                                                }
                                            }
                                        }, arguments);

                                    $asyncBody();
                                }));
                            }
                        }
                    }
                } else {
                    var confirm1 = ($t = new Core.Components.Forms.ConfirmDialog(), $t.NeedAnswer = true, $t.ComType = "Textbox", $t.Content = (System.String.format("DSVC n\u00e0y \u0111\u00e3 b\u1ecb kh\u00f3a (H\u1ec7 th\u1ed1ng). B\u1ea1n c\u00f3 mu\u1ed1n g\u1eedi y\u00eau c\u1ea7u m\u1edf kh\u00f3a kh\u00f4ng?<br />", null) || "") + "H\u00e3y nh\u1eadp l\u00fd do", $t);
                    confirm1.Render();
                    confirm1.YesConfirmed = Bridge.fn.combine(confirm1.YesConfirmed, Bridge.fn.bind(this, function () {
                        var $step = 0,
                            $task1, 
                            $taskResult1, 
                            $jumpFromFinally, 
                            $t1, 
                            $asyncBody = Bridge.fn.bind(this, function () {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            this.selected.ReasonUnLockAll = ($t1 = confirm1.Textbox) != null ? $t1.Text : null;
                                            $task1 = new Core.Clients.Client.$ctor1("Transportation").PostAsync(TMS.API.Models.Transportation, this.selected, "RequestUnLockAll");
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            return;
                                        }
                                        default: {
                                            return;
                                        }
                                    }
                                }
                            }, arguments);

                        $asyncBody();
                    }));
                }
            },
            ApproveUnLock: function (arg) {
                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $task2, 
                        $taskResult2, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        gridView, 
                        ids, 
                        $t, 
                        tranRequests, 
                        tranIds, 
                        transportations, 
                        confirm, 
                        $t1, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1,2], $step);
                                    switch ($step) {
                                        case 0: {
                                            gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                                                return Bridge.referenceEquals(x.GuiInfo.FieldName, "TransportationUnLock");
                                            }, null);
                                            if (gridView == null) {
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            ids = ($t = System.Int32, System.Linq.Enumerable.from(gridView.SelectedIds, $t).toList($t));
                                            $task1 = new Core.Clients.Client.$ctor1("TransportationRequest").GetRawList(TMS.API.Models.TransportationRequest, System.String.format("?$filter=Active eq true and Id in ({0}) and IsRequestUnLockExploit eq true", [Core.Extensions.IEnumerableExtensions.Combine(System.Int32, ids)]));
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            tranRequests = $taskResult1;
                                            tranIds = System.Linq.Enumerable.from(tranRequests, TMS.API.Models.TransportationRequest).select(function (x) {
                                                return x.TransportationId;
                                            }).toList(System.Int32);
                                            $task2 = new Core.Clients.Client.$ctor1("Transportation").GetRawList(TMS.API.Models.Transportation, System.String.format("?$filter=Active eq true and Id in ({0}) and IsKt eq true", [Core.Extensions.IEnumerableExtensions.Combine(System.Nullable$1(System.Int32), tranIds)]));
                                            $step = 2;
                                            if ($task2.isCompleted()) {
                                                continue;
                                            }
                                            $task2.continue($asyncBody);
                                            return;
                                        }
                                        case 2: {
                                            $taskResult2 = $task2.getAwaitedResult();
                                            transportations = $taskResult2;
                                            if (transportations.Count <= 0) {
                                                Core.Extensions.Toast.Warning("Kh\u00f4ng c\u00f3 cont n\u00e0o b\u1ecb kh\u00f3a !!!");
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            confirm = ($t1 = new Core.Components.Forms.ConfirmDialog(), $t1.Content = System.String.format("B\u1ea1n c\u00f3 ch\u1eafc ch\u1eafn mu\u1ed1n m\u1edf kh\u00f3a cho {0} cont kh\u00f4ng?", [Bridge.box(transportations.Count, System.Int32)]), $t1);
                                            confirm.Render();
                                            confirm.YesConfirmed = Bridge.fn.combine(confirm.YesConfirmed, Bridge.fn.bind(this, function () {
                                                var $step = 0,
                                                    $task1, 
                                                    $taskResult1, 
                                                    $task2, 
                                                    $task3, 
                                                    $taskResult3, 
                                                    $task4, 
                                                    $jumpFromFinally, 
                                                    checks, 
                                                    confirmRequest, 
                                                    $t2, 
                                                    transportationNoLock, 
                                                    res, 
                                                    res1, 
                                                    $asyncBody = Bridge.fn.bind(this, function () {
                                                        for (;;) {
                                                            $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,10,11,13], $step);
                                                            switch ($step) {
                                                                case 0: {
                                                                    checks = System.Linq.Enumerable.from(transportations, TMS.API.Models.Transportation).where(function (x) {
                                                                        return x.IsLocked;
                                                                    }).toList(TMS.API.Models.Transportation);
                                                                    if (checks.Count > 0) {
                                                                        $step = 1;
                                                                        continue;
                                                                    } else  {
                                                                        $step = 7;
                                                                        continue;
                                                                    }
                                                                }
                                                                case 1: {
                                                                    confirmRequest = ($t2 = new Core.Components.Forms.ConfirmDialog(), $t2.NeedAnswer = true, $t2.ComType = "Textbox", $t2.Content = (System.String.format("\u0110\u00e3 c\u00f3 {0} DSVC b\u1ecb kh\u00f3a (H\u1ec7 th\u1ed1ng). B\u1ea1n c\u00f3 mu\u1ed1n g\u1eedi y\u00eau c\u1ea7u m\u1edf kh\u00f3a kh\u00f4ng?<br />", [Bridge.box(checks.Count, System.Int32)]) || "") + "H\u00e3y nh\u1eadp l\u00fd do", $t2);
                                                                    confirmRequest.Render();
                                                                    confirmRequest.YesConfirmed = Bridge.fn.combine(confirmRequest.YesConfirmed, Bridge.fn.bind(this, function () {
                                                                        var $step = 0,
                                                                            $task1, 
                                                                            $taskResult1, 
                                                                            $jumpFromFinally, 
                                                                            $t3, 
                                                                            item, 
                                                                            $t4, 
                                                                            $asyncBody = Bridge.fn.bind(this, function () {
                                                                                for (;;) {
                                                                                    $step = System.Array.min([0,1,2,3,4], $step);
                                                                                    switch ($step) {
                                                                                        case 0: {
                                                                                            $t3 = Bridge.getEnumerator(checks);
                                                                                            $step = 1;
                                                                                            continue;
                                                                                        }
                                                                                        case 1: {
                                                                                            if ($t3.moveNext()) {
                                                                                                item = $t3.Current;
                                                                                                $step = 2;
                                                                                                continue;
                                                                                            }
                                                                                            $step = 4;
                                                                                            continue;
                                                                                        }
                                                                                        case 2: {
                                                                                            item.ReasonUnLockAll = ($t4 = confirmRequest.Textbox) != null ? $t4.Text : null;
                                                                                            $task1 = new Core.Clients.Client.$ctor1("Transportation").PostAsync(TMS.API.Models.Transportation, item, "RequestUnLockAll");
                                                                                            $step = 3;
                                                                                            if ($task1.isCompleted()) {
                                                                                                continue;
                                                                                            }
                                                                                            $task1.continue($asyncBody);
                                                                                            return;
                                                                                        }
                                                                                        case 3: {
                                                                                            $taskResult1 = $task1.getAwaitedResult();
                                                                                            $step = 1;
                                                                                            continue;
                                                                                        }
                                                                                        case 4: {
                                                                                            return;
                                                                                        }
                                                                                        default: {
                                                                                            return;
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }, arguments);

                                                                        $asyncBody();
                                                                    }));
                                                                    transportationNoLock = System.Linq.Enumerable.from(transportations, TMS.API.Models.Transportation).where(function (x) {
                                                                        return x.IsLocked === false;
                                                                    }).toList(TMS.API.Models.Transportation);
                                                                    $task1 = new Core.Clients.Client.$ctor1("Transportation").PostAsync(System.Boolean, transportationNoLock, "ApproveUnLockTransportation");
                                                                    $step = 2;
                                                                    if ($task1.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task1.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 2: {
                                                                    $taskResult1 = $task1.getAwaitedResult();
                                                                    res = $taskResult1;
                                                                    if (res) {
                                                                        $step = 3;
                                                                        continue;
                                                                    } else  {
                                                                        $step = 5;
                                                                        continue;
                                                                    }
                                                                }
                                                                case 3: {
                                                                    $task2 = gridView.ApplyFilter(true);
                                                                    $step = 4;
                                                                    if ($task2.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task2.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 4: {
                                                                    $task2.getAwaitedResult();
                                                                    Core.Extensions.Toast.Success("M\u1edf kh\u00f3a th\u00e0nh c\u00f4ng");
                                                                    $step = 6;
                                                                    continue;
                                                                }
                                                                case 5: {
                                                                    Core.Extensions.Toast.Warning("\u0110\u00e3 c\u00f3 l\u1ed7i x\u1ea3y ra");
                                                                    $step = 6;
                                                                    continue;
                                                                }
                                                                case 6: {
                                                                    $step = 13;
                                                                    continue;
                                                                }
                                                                case 7: {
                                                                    $task3 = new Core.Clients.Client.$ctor1("Transportation").PostAsync(System.Boolean, transportations, "ApproveUnLockTransportation");
                                                                    $step = 8;
                                                                    if ($task3.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task3.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 8: {
                                                                    $taskResult3 = $task3.getAwaitedResult();
                                                                    res1 = $taskResult3;
                                                                    if (res1) {
                                                                        $step = 9;
                                                                        continue;
                                                                    } else  {
                                                                        $step = 11;
                                                                        continue;
                                                                    }
                                                                }
                                                                case 9: {
                                                                    $task4 = gridView.ApplyFilter(true);
                                                                    $step = 10;
                                                                    if ($task4.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task4.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 10: {
                                                                    $task4.getAwaitedResult();
                                                                    Core.Extensions.Toast.Success("M\u1edf kh\u00f3a th\u00e0nh c\u00f4ng");
                                                                    $step = 12;
                                                                    continue;
                                                                }
                                                                case 11: {
                                                                    Core.Extensions.Toast.Warning("\u0110\u00e3 c\u00f3 l\u1ed7i x\u1ea3y ra");
                                                                    $step = 12;
                                                                    continue;
                                                                }

                                                                case 13: {
                                                                    return;
                                                                }
                                                                default: {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }, arguments);

                                                $asyncBody();
                                            }));
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            ApproveUnLockAccountant: function (arg) {
                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $task2, 
                        $taskResult2, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        gridView, 
                        ids, 
                        $t, 
                        tranRequests, 
                        tranIds, 
                        transportations, 
                        confirm, 
                        $t1, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1,2], $step);
                                    switch ($step) {
                                        case 0: {
                                            gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                                                return Bridge.referenceEquals(x.GuiInfo.FieldName, "TransportationUnLockAccountant");
                                            }, null);
                                            if (gridView == null) {
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            ids = ($t = System.Int32, System.Linq.Enumerable.from(gridView.SelectedIds, $t).toList($t));
                                            $task1 = new Core.Clients.Client.$ctor1("TransportationRequest").GetRawList(TMS.API.Models.TransportationRequest, System.String.format("?$filter=Active eq true and Id in ({0}) and IsRequestUnLockAccountant eq true", [Core.Extensions.IEnumerableExtensions.Combine(System.Int32, ids)]));
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            tranRequests = $taskResult1;
                                            tranIds = System.Linq.Enumerable.from(tranRequests, TMS.API.Models.TransportationRequest).select(function (x) {
                                                return x.TransportationId;
                                            }).toList(System.Int32);
                                            $task2 = new Core.Clients.Client.$ctor1("Transportation").GetRawList(TMS.API.Models.Transportation, System.String.format("?$filter=Active eq true and Id in ({0}) and IsSubmit eq true", [Core.Extensions.IEnumerableExtensions.Combine(System.Nullable$1(System.Int32), tranIds)]));
                                            $step = 2;
                                            if ($task2.isCompleted()) {
                                                continue;
                                            }
                                            $task2.continue($asyncBody);
                                            return;
                                        }
                                        case 2: {
                                            $taskResult2 = $task2.getAwaitedResult();
                                            transportations = $taskResult2;
                                            if (transportations.Count <= 0) {
                                                Core.Extensions.Toast.Warning("Kh\u00f4ng c\u00f3 cont n\u00e0o b\u1ecb kh\u00f3a !!!");
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            confirm = ($t1 = new Core.Components.Forms.ConfirmDialog(), $t1.Content = System.String.format("B\u1ea1n c\u00f3 ch\u1eafc ch\u1eafn mu\u1ed1n m\u1edf kh\u00f3a cho {0} cont kh\u00f4ng?", [Bridge.box(transportations.Count, System.Int32)]), $t1);
                                            confirm.Render();
                                            confirm.YesConfirmed = Bridge.fn.combine(confirm.YesConfirmed, Bridge.fn.bind(this, function () {
                                                var $step = 0,
                                                    $task1, 
                                                    $taskResult1, 
                                                    $task2, 
                                                    $task3, 
                                                    $taskResult3, 
                                                    $task4, 
                                                    $jumpFromFinally, 
                                                    checks, 
                                                    confirmRequest, 
                                                    $t2, 
                                                    transportationNoLock, 
                                                    res, 
                                                    res1, 
                                                    $asyncBody = Bridge.fn.bind(this, function () {
                                                        for (;;) {
                                                            $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,10,11,13], $step);
                                                            switch ($step) {
                                                                case 0: {
                                                                    checks = System.Linq.Enumerable.from(transportations, TMS.API.Models.Transportation).where(function (x) {
                                                                        return x.IsLocked;
                                                                    }).toList(TMS.API.Models.Transportation);
                                                                    if (checks.Count > 0) {
                                                                        $step = 1;
                                                                        continue;
                                                                    } else  {
                                                                        $step = 7;
                                                                        continue;
                                                                    }
                                                                }
                                                                case 1: {
                                                                    confirmRequest = ($t2 = new Core.Components.Forms.ConfirmDialog(), $t2.NeedAnswer = true, $t2.ComType = "Textbox", $t2.Content = (System.String.format("\u0110\u00e3 c\u00f3 {0} DSVC b\u1ecb kh\u00f3a (H\u1ec7 th\u1ed1ng). B\u1ea1n c\u00f3 mu\u1ed1n g\u1eedi y\u00eau c\u1ea7u m\u1edf kh\u00f3a kh\u00f4ng?<br />", [Bridge.box(checks.Count, System.Int32)]) || "") + "H\u00e3y nh\u1eadp l\u00fd do", $t2);
                                                                    confirmRequest.Render();
                                                                    confirmRequest.YesConfirmed = Bridge.fn.combine(confirmRequest.YesConfirmed, Bridge.fn.bind(this, function () {
                                                                        var $step = 0,
                                                                            $task1, 
                                                                            $taskResult1, 
                                                                            $jumpFromFinally, 
                                                                            $t3, 
                                                                            item, 
                                                                            $t4, 
                                                                            $asyncBody = Bridge.fn.bind(this, function () {
                                                                                for (;;) {
                                                                                    $step = System.Array.min([0,1,2,3,4], $step);
                                                                                    switch ($step) {
                                                                                        case 0: {
                                                                                            $t3 = Bridge.getEnumerator(checks);
                                                                                            $step = 1;
                                                                                            continue;
                                                                                        }
                                                                                        case 1: {
                                                                                            if ($t3.moveNext()) {
                                                                                                item = $t3.Current;
                                                                                                $step = 2;
                                                                                                continue;
                                                                                            }
                                                                                            $step = 4;
                                                                                            continue;
                                                                                        }
                                                                                        case 2: {
                                                                                            item.ReasonUnLockAll = ($t4 = confirmRequest.Textbox) != null ? $t4.Text : null;
                                                                                            $task1 = new Core.Clients.Client.$ctor1("Transportation").PostAsync(TMS.API.Models.Transportation, item, "RequestUnLockAll");
                                                                                            $step = 3;
                                                                                            if ($task1.isCompleted()) {
                                                                                                continue;
                                                                                            }
                                                                                            $task1.continue($asyncBody);
                                                                                            return;
                                                                                        }
                                                                                        case 3: {
                                                                                            $taskResult1 = $task1.getAwaitedResult();
                                                                                            $step = 1;
                                                                                            continue;
                                                                                        }
                                                                                        case 4: {
                                                                                            return;
                                                                                        }
                                                                                        default: {
                                                                                            return;
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }, arguments);

                                                                        $asyncBody();
                                                                    }));
                                                                    transportationNoLock = System.Linq.Enumerable.from(transportations, TMS.API.Models.Transportation).where(function (x) {
                                                                        return x.IsLocked === false;
                                                                    }).toList(TMS.API.Models.Transportation);
                                                                    $task1 = new Core.Clients.Client.$ctor1("Transportation").PostAsync(System.Boolean, transportationNoLock, "ApproveUnLockAccountantTransportation");
                                                                    $step = 2;
                                                                    if ($task1.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task1.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 2: {
                                                                    $taskResult1 = $task1.getAwaitedResult();
                                                                    res = $taskResult1;
                                                                    if (res) {
                                                                        $step = 3;
                                                                        continue;
                                                                    } else  {
                                                                        $step = 5;
                                                                        continue;
                                                                    }
                                                                }
                                                                case 3: {
                                                                    $task2 = gridView.ApplyFilter(true);
                                                                    $step = 4;
                                                                    if ($task2.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task2.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 4: {
                                                                    $task2.getAwaitedResult();
                                                                    Core.Extensions.Toast.Success("M\u1edf kh\u00f3a th\u00e0nh c\u00f4ng");
                                                                    $step = 6;
                                                                    continue;
                                                                }
                                                                case 5: {
                                                                    Core.Extensions.Toast.Warning("\u0110\u00e3 c\u00f3 l\u1ed7i x\u1ea3y ra");
                                                                    $step = 6;
                                                                    continue;
                                                                }
                                                                case 6: {
                                                                    $step = 13;
                                                                    continue;
                                                                }
                                                                case 7: {
                                                                    $task3 = new Core.Clients.Client.$ctor1("Transportation").PostAsync(System.Boolean, transportations, "ApproveUnLockAccountantTransportation");
                                                                    $step = 8;
                                                                    if ($task3.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task3.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 8: {
                                                                    $taskResult3 = $task3.getAwaitedResult();
                                                                    res1 = $taskResult3;
                                                                    if (res1) {
                                                                        $step = 9;
                                                                        continue;
                                                                    } else  {
                                                                        $step = 11;
                                                                        continue;
                                                                    }
                                                                }
                                                                case 9: {
                                                                    $task4 = gridView.ApplyFilter(true);
                                                                    $step = 10;
                                                                    if ($task4.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task4.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 10: {
                                                                    $task4.getAwaitedResult();
                                                                    Core.Extensions.Toast.Success("M\u1edf kh\u00f3a th\u00e0nh c\u00f4ng");
                                                                    $step = 12;
                                                                    continue;
                                                                }
                                                                case 11: {
                                                                    Core.Extensions.Toast.Warning("\u0110\u00e3 c\u00f3 l\u1ed7i x\u1ea3y ra");
                                                                    $step = 12;
                                                                    continue;
                                                                }

                                                                case 13: {
                                                                    return;
                                                                }
                                                                default: {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }, arguments);

                                                $asyncBody();
                                            }));
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            ApproveUnLockAll: function (arg) {
                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $task2, 
                        $taskResult2, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        gridView, 
                        ids, 
                        $t, 
                        tranRequests, 
                        tranIds, 
                        transportations, 
                        confirm, 
                        $t1, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1,2], $step);
                                    switch ($step) {
                                        case 0: {
                                            gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                                                return Bridge.referenceEquals(x.GuiInfo.FieldName, "TransportationUnLockAll");
                                            }, null);
                                            if (gridView == null) {
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            ids = ($t = System.Int32, System.Linq.Enumerable.from(gridView.SelectedIds, $t).toList($t));
                                            $task1 = new Core.Clients.Client.$ctor1("TransportationRequest").GetRawList(TMS.API.Models.TransportationRequest, System.String.format("?$filter=Active eq true and Id in ({0}) and IsRequestUnLockAll eq true", [Core.Extensions.IEnumerableExtensions.Combine(System.Int32, ids)]));
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            tranRequests = $taskResult1;
                                            tranIds = System.Linq.Enumerable.from(tranRequests, TMS.API.Models.TransportationRequest).select(function (x) {
                                                return x.TransportationId;
                                            }).toList(System.Int32);
                                            $task2 = new Core.Clients.Client.$ctor1("Transportation").GetRawList(TMS.API.Models.Transportation, System.String.format("?$filter=Active eq true and Id in ({0}) and IsLocked eq true", [Core.Extensions.IEnumerableExtensions.Combine(System.Nullable$1(System.Int32), tranIds)]));
                                            $step = 2;
                                            if ($task2.isCompleted()) {
                                                continue;
                                            }
                                            $task2.continue($asyncBody);
                                            return;
                                        }
                                        case 2: {
                                            $taskResult2 = $task2.getAwaitedResult();
                                            transportations = $taskResult2;
                                            if (transportations.Count <= 0) {
                                                Core.Extensions.Toast.Warning("Kh\u00f4ng c\u00f3 cont n\u00e0o b\u1ecb kh\u00f3a !!!");
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            confirm = ($t1 = new Core.Components.Forms.ConfirmDialog(), $t1.Content = System.String.format("B\u1ea1n c\u00f3 ch\u1eafc ch\u1eafn mu\u1ed1n m\u1edf kh\u00f3a cho {0} DSVC kh\u00f4ng?", [Bridge.box(transportations.Count, System.Int32)]), $t1);
                                            confirm.Render();
                                            confirm.YesConfirmed = Bridge.fn.combine(confirm.YesConfirmed, Bridge.fn.bind(this, function () {
                                                var $step = 0,
                                                    $task1, 
                                                    $taskResult1, 
                                                    $task2, 
                                                    $jumpFromFinally, 
                                                    res, 
                                                    $asyncBody = Bridge.fn.bind(this, function () {
                                                        for (;;) {
                                                            $step = System.Array.min([0,1,2,3,4,5], $step);
                                                            switch ($step) {
                                                                case 0: {
                                                                    $task1 = new Core.Clients.Client.$ctor1("Transportation").PostAsync(System.Boolean, transportations, "ApproveUnLockAll");
                                                                    $step = 1;
                                                                    if ($task1.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task1.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 1: {
                                                                    $taskResult1 = $task1.getAwaitedResult();
                                                                    res = $taskResult1;
                                                                    if (res) {
                                                                        $step = 2;
                                                                        continue;
                                                                    } else  {
                                                                        $step = 4;
                                                                        continue;
                                                                    }
                                                                }
                                                                case 2: {
                                                                    $task2 = gridView.ApplyFilter(true);
                                                                    $step = 3;
                                                                    if ($task2.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task2.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 3: {
                                                                    $task2.getAwaitedResult();
                                                                    Core.Extensions.Toast.Success("M\u1edf kh\u00f3a th\u00e0nh c\u00f4ng");
                                                                    $step = 5;
                                                                    continue;
                                                                }
                                                                case 4: {
                                                                    Core.Extensions.Toast.Warning("\u0110\u00e3 c\u00f3 l\u1ed7i x\u1ea3y ra");
                                                                    $step = 5;
                                                                    continue;
                                                                }
                                                                case 5: {
                                                                    return;
                                                                }
                                                                default: {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }, arguments);

                                                $asyncBody();
                                            }));
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            RejectUnLock: function (arg) {
                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $task2, 
                        $taskResult2, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        gridView, 
                        ids, 
                        $t, 
                        tranRequests, 
                        tranIds, 
                        transportations, 
                        confirm, 
                        $t1, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1,2], $step);
                                    switch ($step) {
                                        case 0: {
                                            gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                                                return Bridge.referenceEquals(x.GuiInfo.FieldName, "TransportationUnLock");
                                            }, null);
                                            if (gridView == null) {
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            ids = ($t = System.Int32, System.Linq.Enumerable.from(gridView.SelectedIds, $t).toList($t));
                                            $task1 = new Core.Clients.Client.$ctor1("TransportationRequest").GetRawList(TMS.API.Models.TransportationRequest, System.String.format("?$filter=Active eq true and Id in ({0}) and IsRequestUnLockExploit eq true", [Core.Extensions.IEnumerableExtensions.Combine(System.Int32, ids)]));
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            tranRequests = $taskResult1;
                                            tranIds = System.Linq.Enumerable.from(tranRequests, TMS.API.Models.TransportationRequest).select(function (x) {
                                                return x.TransportationId;
                                            }).toList(System.Int32);
                                            $task2 = new Core.Clients.Client.$ctor1("Transportation").GetRawList(TMS.API.Models.Transportation, System.String.format("?$filter=Active eq true and Id in ({0}) and IsKt eq true", [Core.Extensions.IEnumerableExtensions.Combine(System.Nullable$1(System.Int32), tranIds)]));
                                            $step = 2;
                                            if ($task2.isCompleted()) {
                                                continue;
                                            }
                                            $task2.continue($asyncBody);
                                            return;
                                        }
                                        case 2: {
                                            $taskResult2 = $task2.getAwaitedResult();
                                            transportations = $taskResult2;
                                            if (transportations.Count <= 0) {
                                                Core.Extensions.Toast.Warning("Kh\u00f4ng c\u00f3 cont n\u00e0o b\u1ecb kh\u00f3a !!!");
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            confirm = ($t1 = new Core.Components.Forms.ConfirmDialog(), $t1.NeedAnswer = true, $t1.ComType = "Textbox", $t1.Content = (System.String.format("B\u1ea1n c\u00f3 ch\u1eafc ch\u1eafn mu\u1ed1n h\u1ee7y y\u00eau c\u1ea7u cho {0} cont kh\u00f4ng??<br />", [Bridge.box(transportations.Count, System.Int32)]) || "") + "H\u00e3y nh\u1eadp l\u00fd do", $t1);
                                            confirm.Render();
                                            confirm.YesConfirmed = Bridge.fn.combine(confirm.YesConfirmed, Bridge.fn.bind(this, function () {
                                                var $step = 0,
                                                    $task1, 
                                                    $taskResult1, 
                                                    $task2, 
                                                    $taskResult2, 
                                                    $task3, 
                                                    $task4, 
                                                    $taskResult4, 
                                                    $task5, 
                                                    $jumpFromFinally, 
                                                    checks, 
                                                    confirmRequest, 
                                                    $t2, 
                                                    transportationNoLock, 
                                                    res, 
                                                    res1, 
                                                    $asyncBody = Bridge.fn.bind(this, function () {
                                                        for (;;) {
                                                            $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,10,11,12,14], $step);
                                                            switch ($step) {
                                                                case 0: {
                                                                    tranRequests.ForEach(function (x) {
                                                                        var $t2;
                                                                        x.ReasonReject = ($t2 = confirm.Textbox) != null ? $t2.Text : null;
                                                                    });
                                                                    $task1 = new Core.Clients.Client.$ctor1("TransportationRequest").BulkUpdateAsync(TMS.API.Models.TransportationRequest, tranRequests);
                                                                    $step = 1;
                                                                    if ($task1.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task1.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 1: {
                                                                    $taskResult1 = $task1.getAwaitedResult();
                                                                    checks = System.Linq.Enumerable.from(transportations, TMS.API.Models.Transportation).where(function (x) {
                                                                        return x.IsLocked;
                                                                    }).toList(TMS.API.Models.Transportation);
                                                                    if (checks.Count > 0) {
                                                                        $step = 2;
                                                                        continue;
                                                                    } else  {
                                                                        $step = 8;
                                                                        continue;
                                                                    }
                                                                }
                                                                case 2: {
                                                                    confirmRequest = ($t2 = new Core.Components.Forms.ConfirmDialog(), $t2.NeedAnswer = true, $t2.ComType = "Textbox", $t2.Content = (System.String.format("\u0110\u00e3 c\u00f3 {0} DSVC b\u1ecb kh\u00f3a (H\u1ec7 th\u1ed1ng). B\u1ea1n c\u00f3 mu\u1ed1n g\u1eedi y\u00eau c\u1ea7u m\u1edf kh\u00f3a kh\u00f4ng?<br />", [Bridge.box(checks.Count, System.Int32)]) || "") + "H\u00e3y nh\u1eadp l\u00fd do", $t2);
                                                                    confirmRequest.Render();
                                                                    confirmRequest.YesConfirmed = Bridge.fn.combine(confirmRequest.YesConfirmed, Bridge.fn.bind(this, function () {
                                                                        var $step = 0,
                                                                            $task1, 
                                                                            $taskResult1, 
                                                                            $jumpFromFinally, 
                                                                            $t3, 
                                                                            item, 
                                                                            $t4, 
                                                                            $asyncBody = Bridge.fn.bind(this, function () {
                                                                                for (;;) {
                                                                                    $step = System.Array.min([0,1,2,3,4], $step);
                                                                                    switch ($step) {
                                                                                        case 0: {
                                                                                            $t3 = Bridge.getEnumerator(checks);
                                                                                            $step = 1;
                                                                                            continue;
                                                                                        }
                                                                                        case 1: {
                                                                                            if ($t3.moveNext()) {
                                                                                                item = $t3.Current;
                                                                                                $step = 2;
                                                                                                continue;
                                                                                            }
                                                                                            $step = 4;
                                                                                            continue;
                                                                                        }
                                                                                        case 2: {
                                                                                            item.ReasonUnLockAll = ($t4 = confirmRequest.Textbox) != null ? $t4.Text : null;
                                                                                            $task1 = new Core.Clients.Client.$ctor1("Transportation").PostAsync(TMS.API.Models.Transportation, item, "RequestUnLockAll");
                                                                                            $step = 3;
                                                                                            if ($task1.isCompleted()) {
                                                                                                continue;
                                                                                            }
                                                                                            $task1.continue($asyncBody);
                                                                                            return;
                                                                                        }
                                                                                        case 3: {
                                                                                            $taskResult1 = $task1.getAwaitedResult();
                                                                                            $step = 1;
                                                                                            continue;
                                                                                        }
                                                                                        case 4: {
                                                                                            return;
                                                                                        }
                                                                                        default: {
                                                                                            return;
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }, arguments);

                                                                        $asyncBody();
                                                                    }));
                                                                    transportationNoLock = System.Linq.Enumerable.from(transportations, TMS.API.Models.Transportation).where(function (x) {
                                                                        return x.IsLocked === false;
                                                                    }).toList(TMS.API.Models.Transportation);
                                                                    $task2 = new Core.Clients.Client.$ctor1("Transportation").PostAsync(System.Boolean, transportationNoLock, "RejectUnLockTransportation");
                                                                    $step = 3;
                                                                    if ($task2.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task2.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 3: {
                                                                    $taskResult2 = $task2.getAwaitedResult();
                                                                    res = $taskResult2;
                                                                    if (res) {
                                                                        $step = 4;
                                                                        continue;
                                                                    } else  {
                                                                        $step = 6;
                                                                        continue;
                                                                    }
                                                                }
                                                                case 4: {
                                                                    $task3 = gridView.ApplyFilter(true);
                                                                    $step = 5;
                                                                    if ($task3.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task3.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 5: {
                                                                    $task3.getAwaitedResult();
                                                                    Core.Extensions.Toast.Success("H\u1ee7y y\u00eau c\u1ea7u th\u00e0nh c\u00f4ng");
                                                                    $step = 7;
                                                                    continue;
                                                                }
                                                                case 6: {
                                                                    Core.Extensions.Toast.Warning("\u0110\u00e3 c\u00f3 l\u1ed7i x\u1ea3y ra");
                                                                    $step = 7;
                                                                    continue;
                                                                }
                                                                case 7: {
                                                                    $step = 14;
                                                                    continue;
                                                                }
                                                                case 8: {
                                                                    $task4 = new Core.Clients.Client.$ctor1("Transportation").PostAsync(System.Boolean, transportations, "RejectUnLockTransportation");
                                                                    $step = 9;
                                                                    if ($task4.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task4.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 9: {
                                                                    $taskResult4 = $task4.getAwaitedResult();
                                                                    res1 = $taskResult4;
                                                                    if (res1) {
                                                                        $step = 10;
                                                                        continue;
                                                                    } else  {
                                                                        $step = 12;
                                                                        continue;
                                                                    }
                                                                }
                                                                case 10: {
                                                                    $task5 = gridView.ApplyFilter(true);
                                                                    $step = 11;
                                                                    if ($task5.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task5.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 11: {
                                                                    $task5.getAwaitedResult();
                                                                    Core.Extensions.Toast.Success("H\u1ee7y y\u00eau c\u1ea7u th\u00e0nh c\u00f4ng");
                                                                    $step = 13;
                                                                    continue;
                                                                }
                                                                case 12: {
                                                                    Core.Extensions.Toast.Warning("\u0110\u00e3 c\u00f3 l\u1ed7i x\u1ea3y ra");
                                                                    $step = 13;
                                                                    continue;
                                                                }

                                                                case 14: {
                                                                    return;
                                                                }
                                                                default: {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }, arguments);

                                                $asyncBody();
                                            }));
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            RejectUnLockAccountant: function (arg) {
                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $task2, 
                        $taskResult2, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        gridView, 
                        ids, 
                        $t, 
                        tranRequests, 
                        tranIds, 
                        transportations, 
                        confirm, 
                        $t1, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1,2], $step);
                                    switch ($step) {
                                        case 0: {
                                            gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                                                return Bridge.referenceEquals(x.GuiInfo.FieldName, "TransportationUnLockAccountant");
                                            }, null);
                                            if (gridView == null) {
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            ids = ($t = System.Int32, System.Linq.Enumerable.from(gridView.SelectedIds, $t).toList($t));
                                            $task1 = new Core.Clients.Client.$ctor1("TransportationRequest").GetRawList(TMS.API.Models.TransportationRequest, System.String.format("?$filter=Active eq true and Id in ({0}) and IsRequestUnLockAccountant eq true", [Core.Extensions.IEnumerableExtensions.Combine(System.Int32, ids)]));
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            tranRequests = $taskResult1;
                                            tranIds = System.Linq.Enumerable.from(tranRequests, TMS.API.Models.TransportationRequest).select(function (x) {
                                                return x.TransportationId;
                                            }).toList(System.Int32);
                                            $task2 = new Core.Clients.Client.$ctor1("Transportation").GetRawList(TMS.API.Models.Transportation, System.String.format("?$filter=Active eq true and Id in ({0}) and IsSubmit eq true", [Core.Extensions.IEnumerableExtensions.Combine(System.Nullable$1(System.Int32), tranIds)]));
                                            $step = 2;
                                            if ($task2.isCompleted()) {
                                                continue;
                                            }
                                            $task2.continue($asyncBody);
                                            return;
                                        }
                                        case 2: {
                                            $taskResult2 = $task2.getAwaitedResult();
                                            transportations = $taskResult2;
                                            if (transportations.Count <= 0) {
                                                Core.Extensions.Toast.Warning("Kh\u00f4ng c\u00f3 cont n\u00e0o b\u1ecb kh\u00f3a !!!");
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            confirm = ($t1 = new Core.Components.Forms.ConfirmDialog(), $t1.NeedAnswer = true, $t1.ComType = "Textbox", $t1.Content = (System.String.format("B\u1ea1n c\u00f3 ch\u1eafc ch\u1eafn mu\u1ed1n h\u1ee7y y\u00eau c\u1ea7u cho {0} cont kh\u00f4ng??<br />", [Bridge.box(transportations.Count, System.Int32)]) || "") + "H\u00e3y nh\u1eadp l\u00fd do", $t1);
                                            confirm.Render();
                                            confirm.YesConfirmed = Bridge.fn.combine(confirm.YesConfirmed, Bridge.fn.bind(this, function () {
                                                var $step = 0,
                                                    $task1, 
                                                    $taskResult1, 
                                                    $task2, 
                                                    $taskResult2, 
                                                    $task3, 
                                                    $task4, 
                                                    $taskResult4, 
                                                    $task5, 
                                                    $jumpFromFinally, 
                                                    checks, 
                                                    confirmRequest, 
                                                    $t2, 
                                                    transportationNoLock, 
                                                    res, 
                                                    res1, 
                                                    $asyncBody = Bridge.fn.bind(this, function () {
                                                        for (;;) {
                                                            $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,10,11,12,14], $step);
                                                            switch ($step) {
                                                                case 0: {
                                                                    tranRequests.ForEach(function (x) {
                                                                        var $t2;
                                                                        x.ReasonReject = ($t2 = confirm.Textbox) != null ? $t2.Text : null;
                                                                    });
                                                                    $task1 = new Core.Clients.Client.$ctor1("TransportationRequest").BulkUpdateAsync(TMS.API.Models.TransportationRequest, tranRequests);
                                                                    $step = 1;
                                                                    if ($task1.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task1.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 1: {
                                                                    $taskResult1 = $task1.getAwaitedResult();
                                                                    checks = System.Linq.Enumerable.from(transportations, TMS.API.Models.Transportation).where(function (x) {
                                                                        return x.IsLocked;
                                                                    }).toList(TMS.API.Models.Transportation);
                                                                    if (checks.Count > 0) {
                                                                        $step = 2;
                                                                        continue;
                                                                    } else  {
                                                                        $step = 8;
                                                                        continue;
                                                                    }
                                                                }
                                                                case 2: {
                                                                    confirmRequest = ($t2 = new Core.Components.Forms.ConfirmDialog(), $t2.NeedAnswer = true, $t2.ComType = "Textbox", $t2.Content = (System.String.format("\u0110\u00e3 c\u00f3 {0} DSVC b\u1ecb kh\u00f3a (H\u1ec7 th\u1ed1ng). B\u1ea1n c\u00f3 mu\u1ed1n g\u1eedi y\u00eau c\u1ea7u m\u1edf kh\u00f3a kh\u00f4ng?<br />", [Bridge.box(checks.Count, System.Int32)]) || "") + "H\u00e3y nh\u1eadp l\u00fd do", $t2);
                                                                    confirmRequest.Render();
                                                                    confirmRequest.YesConfirmed = Bridge.fn.combine(confirmRequest.YesConfirmed, Bridge.fn.bind(this, function () {
                                                                        var $step = 0,
                                                                            $task1, 
                                                                            $taskResult1, 
                                                                            $jumpFromFinally, 
                                                                            $t3, 
                                                                            item, 
                                                                            $t4, 
                                                                            $asyncBody = Bridge.fn.bind(this, function () {
                                                                                for (;;) {
                                                                                    $step = System.Array.min([0,1,2,3,4], $step);
                                                                                    switch ($step) {
                                                                                        case 0: {
                                                                                            $t3 = Bridge.getEnumerator(checks);
                                                                                            $step = 1;
                                                                                            continue;
                                                                                        }
                                                                                        case 1: {
                                                                                            if ($t3.moveNext()) {
                                                                                                item = $t3.Current;
                                                                                                $step = 2;
                                                                                                continue;
                                                                                            }
                                                                                            $step = 4;
                                                                                            continue;
                                                                                        }
                                                                                        case 2: {
                                                                                            item.ReasonUnLockAll = ($t4 = confirmRequest.Textbox) != null ? $t4.Text : null;
                                                                                            $task1 = new Core.Clients.Client.$ctor1("Transportation").PostAsync(TMS.API.Models.Transportation, item, "RequestUnLockAll");
                                                                                            $step = 3;
                                                                                            if ($task1.isCompleted()) {
                                                                                                continue;
                                                                                            }
                                                                                            $task1.continue($asyncBody);
                                                                                            return;
                                                                                        }
                                                                                        case 3: {
                                                                                            $taskResult1 = $task1.getAwaitedResult();
                                                                                            $step = 1;
                                                                                            continue;
                                                                                        }
                                                                                        case 4: {
                                                                                            return;
                                                                                        }
                                                                                        default: {
                                                                                            return;
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }, arguments);

                                                                        $asyncBody();
                                                                    }));
                                                                    transportationNoLock = System.Linq.Enumerable.from(transportations, TMS.API.Models.Transportation).where(function (x) {
                                                                        return x.IsLocked === false;
                                                                    }).toList(TMS.API.Models.Transportation);
                                                                    $task2 = new Core.Clients.Client.$ctor1("Transportation").PostAsync(System.Boolean, transportationNoLock, "RejectUnLockAccountantTransportation");
                                                                    $step = 3;
                                                                    if ($task2.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task2.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 3: {
                                                                    $taskResult2 = $task2.getAwaitedResult();
                                                                    res = $taskResult2;
                                                                    if (res) {
                                                                        $step = 4;
                                                                        continue;
                                                                    } else  {
                                                                        $step = 6;
                                                                        continue;
                                                                    }
                                                                }
                                                                case 4: {
                                                                    $task3 = gridView.ApplyFilter(true);
                                                                    $step = 5;
                                                                    if ($task3.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task3.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 5: {
                                                                    $task3.getAwaitedResult();
                                                                    Core.Extensions.Toast.Success("H\u1ee7y y\u00eau c\u1ea7u th\u00e0nh c\u00f4ng");
                                                                    $step = 7;
                                                                    continue;
                                                                }
                                                                case 6: {
                                                                    Core.Extensions.Toast.Warning("\u0110\u00e3 c\u00f3 l\u1ed7i x\u1ea3y ra");
                                                                    $step = 7;
                                                                    continue;
                                                                }
                                                                case 7: {
                                                                    $step = 14;
                                                                    continue;
                                                                }
                                                                case 8: {
                                                                    $task4 = new Core.Clients.Client.$ctor1("Transportation").PostAsync(System.Boolean, transportations, "RejectUnLockAccountantTransportation");
                                                                    $step = 9;
                                                                    if ($task4.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task4.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 9: {
                                                                    $taskResult4 = $task4.getAwaitedResult();
                                                                    res1 = $taskResult4;
                                                                    if (res1) {
                                                                        $step = 10;
                                                                        continue;
                                                                    } else  {
                                                                        $step = 12;
                                                                        continue;
                                                                    }
                                                                }
                                                                case 10: {
                                                                    $task5 = gridView.ApplyFilter(true);
                                                                    $step = 11;
                                                                    if ($task5.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task5.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 11: {
                                                                    $task5.getAwaitedResult();
                                                                    Core.Extensions.Toast.Success("H\u1ee7y y\u00eau c\u1ea7u th\u00e0nh c\u00f4ng");
                                                                    $step = 13;
                                                                    continue;
                                                                }
                                                                case 12: {
                                                                    Core.Extensions.Toast.Warning("\u0110\u00e3 c\u00f3 l\u1ed7i x\u1ea3y ra");
                                                                    $step = 13;
                                                                    continue;
                                                                }

                                                                case 14: {
                                                                    return;
                                                                }
                                                                default: {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }, arguments);

                                                $asyncBody();
                                            }));
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            RejectUnLockAll: function (arg) {
                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $task2, 
                        $taskResult2, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        gridView, 
                        ids, 
                        $t, 
                        tranRequests, 
                        tranIds, 
                        transportations, 
                        confirm, 
                        $t1, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1,2], $step);
                                    switch ($step) {
                                        case 0: {
                                            gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                                                return Bridge.referenceEquals(x.GuiInfo.FieldName, "TransportationUnLockAll");
                                            }, null);
                                            if (gridView == null) {
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            ids = ($t = System.Int32, System.Linq.Enumerable.from(gridView.SelectedIds, $t).toList($t));
                                            $task1 = new Core.Clients.Client.$ctor1("TransportationRequest").GetRawList(TMS.API.Models.TransportationRequest, System.String.format("?$filter=Active eq true and Id in ({0}) and IsRequestUnLockAll eq true", [Core.Extensions.IEnumerableExtensions.Combine(System.Int32, ids)]));
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            tranRequests = $taskResult1;
                                            tranIds = System.Linq.Enumerable.from(tranRequests, TMS.API.Models.TransportationRequest).select(function (x) {
                                                return x.TransportationId;
                                            }).toList(System.Int32);
                                            $task2 = new Core.Clients.Client.$ctor1("Transportation").GetRawList(TMS.API.Models.Transportation, System.String.format("?$filter=Active eq true and Id in ({0}) and IsLocked eq true", [Core.Extensions.IEnumerableExtensions.Combine(System.Nullable$1(System.Int32), tranIds)]));
                                            $step = 2;
                                            if ($task2.isCompleted()) {
                                                continue;
                                            }
                                            $task2.continue($asyncBody);
                                            return;
                                        }
                                        case 2: {
                                            $taskResult2 = $task2.getAwaitedResult();
                                            transportations = $taskResult2;
                                            if (transportations.Count <= 0) {
                                                Core.Extensions.Toast.Warning("Kh\u00f4ng c\u00f3 cont n\u00e0o b\u1ecb kh\u00f3a !!!");
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            confirm = ($t1 = new Core.Components.Forms.ConfirmDialog(), $t1.NeedAnswer = true, $t1.ComType = "Textbox", $t1.Content = (System.String.format("B\u1ea1n c\u00f3 ch\u1eafc ch\u1eafn mu\u1ed1n h\u1ee7y y\u00eau c\u1ea7u cho {0} cont kh\u00f4ng??<br />", [Bridge.box(transportations.Count, System.Int32)]) || "") + "H\u00e3y nh\u1eadp l\u00fd do", $t1);
                                            confirm.Render();
                                            confirm.YesConfirmed = Bridge.fn.combine(confirm.YesConfirmed, Bridge.fn.bind(this, function () {
                                                var $step = 0,
                                                    $task1, 
                                                    $taskResult1, 
                                                    $task2, 
                                                    $taskResult2, 
                                                    $task3, 
                                                    $jumpFromFinally, 
                                                    res, 
                                                    $asyncBody = Bridge.fn.bind(this, function () {
                                                        for (;;) {
                                                            $step = System.Array.min([0,1,2,3,4,5,6], $step);
                                                            switch ($step) {
                                                                case 0: {
                                                                    tranRequests.ForEach(function (x) {
                                                                        var $t2;
                                                                        x.ReasonReject = ($t2 = confirm.Textbox) != null ? $t2.Text : null;
                                                                    });
                                                                    $task1 = new Core.Clients.Client.$ctor1("TransportationRequest").BulkUpdateAsync(TMS.API.Models.TransportationRequest, tranRequests);
                                                                    $step = 1;
                                                                    if ($task1.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task1.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 1: {
                                                                    $taskResult1 = $task1.getAwaitedResult();
                                                                    $task2 = new Core.Clients.Client.$ctor1("Transportation").PostAsync(System.Boolean, transportations, "RejectUnLockAll");
                                                                    $step = 2;
                                                                    if ($task2.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task2.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 2: {
                                                                    $taskResult2 = $task2.getAwaitedResult();
                                                                    res = $taskResult2;
                                                                    if (res) {
                                                                        $step = 3;
                                                                        continue;
                                                                    } else  {
                                                                        $step = 5;
                                                                        continue;
                                                                    }
                                                                }
                                                                case 3: {
                                                                    $task3 = gridView.ApplyFilter(true);
                                                                    $step = 4;
                                                                    if ($task3.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task3.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 4: {
                                                                    $task3.getAwaitedResult();
                                                                    Core.Extensions.Toast.Success("H\u1ee7y y\u00eau c\u1ea7u th\u00e0nh c\u00f4ng");
                                                                    $step = 6;
                                                                    continue;
                                                                }
                                                                case 5: {
                                                                    Core.Extensions.Toast.Warning("\u0110\u00e3 c\u00f3 l\u1ed7i x\u1ea3y ra");
                                                                    $step = 6;
                                                                    continue;
                                                                }
                                                                case 6: {
                                                                    return;
                                                                }
                                                                default: {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }, arguments);

                                                $asyncBody();
                                            }));
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            LockTransportation: function (arg) {
                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        gridView, 
                        ids, 
                        $t, 
                        listViewItems, 
                        confirm, 
                        $t1, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                                                return Bridge.referenceEquals(x.GuiInfo.FieldName, "TransportationAccountant");
                                            }, null);
                                            if (gridView == null) {
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            ids = ($t = System.Int32, System.Linq.Enumerable.from(gridView.SelectedIds, $t).toList($t));
                                            $task1 = new Core.Clients.Client.$ctor1("Transportation").GetRawList(TMS.API.Models.Transportation, System.String.format("?$filter=Active eq true and Id in ({0}) and IsKt eq false", [Core.Extensions.IEnumerableExtensions.Combine(System.Int32, ids)]));
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            listViewItems = $taskResult1;
                                            if (listViewItems.Count <= 0) {
                                                Core.Extensions.Toast.Warning("Kh\u00f4ng DSVC n\u00e0o c\u1ea7n kh\u00f3a");
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            confirm = ($t1 = new Core.Components.Forms.ConfirmDialog(), $t1.Content = "B\u1ea1n c\u00f3 ch\u1eafc ch\u1eafn mu\u1ed1n kh\u00f3a " + listViewItems.Count + " DSVC ?", $t1);
                                            confirm.Render();
                                            confirm.YesConfirmed = Bridge.fn.combine(confirm.YesConfirmed, Bridge.fn.bind(this, function () {
                                                var $step = 0,
                                                    $task1, 
                                                    $taskResult1, 
                                                    $task2, 
                                                    $task3, 
                                                    $taskResult3, 
                                                    $task4, 
                                                    $jumpFromFinally, 
                                                    checks, 
                                                    confirmRequest, 
                                                    $t2, 
                                                    transportationNoLock, 
                                                    res, 
                                                    res1, 
                                                    $asyncBody = Bridge.fn.bind(this, function () {
                                                        for (;;) {
                                                            $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,10,11,13], $step);
                                                            switch ($step) {
                                                                case 0: {
                                                                    checks = System.Linq.Enumerable.from(listViewItems, TMS.API.Models.Transportation).where(function (x) {
                                                                        return x.IsLocked;
                                                                    }).toList(TMS.API.Models.Transportation);
                                                                    if (checks.Count > 0) {
                                                                        $step = 1;
                                                                        continue;
                                                                    } else  {
                                                                        $step = 7;
                                                                        continue;
                                                                    }
                                                                }
                                                                case 1: {
                                                                    confirmRequest = ($t2 = new Core.Components.Forms.ConfirmDialog(), $t2.NeedAnswer = true, $t2.ComType = "Textbox", $t2.Content = (System.String.format("\u0110\u00e3 c\u00f3 {0} DSVC b\u1ecb kh\u00f3a (H\u1ec7 th\u1ed1ng). B\u1ea1n c\u00f3 mu\u1ed1n g\u1eedi y\u00eau c\u1ea7u m\u1edf kh\u00f3a kh\u00f4ng?<br />", [Bridge.box(checks.Count, System.Int32)]) || "") + "H\u00e3y nh\u1eadp l\u00fd do", $t2);
                                                                    confirmRequest.Render();
                                                                    confirmRequest.YesConfirmed = Bridge.fn.combine(confirmRequest.YesConfirmed, Bridge.fn.bind(this, function () {
                                                                        var $step = 0,
                                                                            $task1, 
                                                                            $taskResult1, 
                                                                            $jumpFromFinally, 
                                                                            $t3, 
                                                                            item, 
                                                                            $t4, 
                                                                            $asyncBody = Bridge.fn.bind(this, function () {
                                                                                for (;;) {
                                                                                    $step = System.Array.min([0,1,2,3,4], $step);
                                                                                    switch ($step) {
                                                                                        case 0: {
                                                                                            $t3 = Bridge.getEnumerator(checks);
                                                                                            $step = 1;
                                                                                            continue;
                                                                                        }
                                                                                        case 1: {
                                                                                            if ($t3.moveNext()) {
                                                                                                item = $t3.Current;
                                                                                                $step = 2;
                                                                                                continue;
                                                                                            }
                                                                                            $step = 4;
                                                                                            continue;
                                                                                        }
                                                                                        case 2: {
                                                                                            item.ReasonUnLockAll = ($t4 = confirmRequest.Textbox) != null ? $t4.Text : null;
                                                                                            $task1 = new Core.Clients.Client.$ctor1("Transportation").PostAsync(TMS.API.Models.Transportation, item, "RequestUnLockAll");
                                                                                            $step = 3;
                                                                                            if ($task1.isCompleted()) {
                                                                                                continue;
                                                                                            }
                                                                                            $task1.continue($asyncBody);
                                                                                            return;
                                                                                        }
                                                                                        case 3: {
                                                                                            $taskResult1 = $task1.getAwaitedResult();
                                                                                            $step = 1;
                                                                                            continue;
                                                                                        }
                                                                                        case 4: {
                                                                                            return;
                                                                                        }
                                                                                        default: {
                                                                                            return;
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }, arguments);

                                                                        $asyncBody();
                                                                    }));
                                                                    transportationNoLock = System.Linq.Enumerable.from(listViewItems, TMS.API.Models.Transportation).where(function (x) {
                                                                        return x.IsLocked === false;
                                                                    }).toList(TMS.API.Models.Transportation);
                                                                    $task1 = new Core.Clients.Client.$ctor1("Transportation").PostAsync(System.Boolean, transportationNoLock, "LockTransportation");
                                                                    $step = 2;
                                                                    if ($task1.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task1.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 2: {
                                                                    $taskResult1 = $task1.getAwaitedResult();
                                                                    res = $taskResult1;
                                                                    if (res) {
                                                                        $step = 3;
                                                                        continue;
                                                                    } else  {
                                                                        $step = 5;
                                                                        continue;
                                                                    }
                                                                }
                                                                case 3: {
                                                                    $task2 = gridView.ApplyFilter(true);
                                                                    $step = 4;
                                                                    if ($task2.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task2.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 4: {
                                                                    $task2.getAwaitedResult();
                                                                    $step = 6;
                                                                    continue;
                                                                }
                                                                case 5: {
                                                                    Core.Extensions.Toast.Warning("\u0110\u00e3 c\u00f3 l\u1ed7i x\u1ea3y ra");
                                                                    $step = 6;
                                                                    continue;
                                                                }
                                                                case 6: {
                                                                    $step = 13;
                                                                    continue;
                                                                }
                                                                case 7: {
                                                                    $task3 = new Core.Clients.Client.$ctor1("Transportation").PostAsync(System.Boolean, listViewItems, "LockTransportation");
                                                                    $step = 8;
                                                                    if ($task3.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task3.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 8: {
                                                                    $taskResult3 = $task3.getAwaitedResult();
                                                                    res1 = $taskResult3;
                                                                    if (res1) {
                                                                        $step = 9;
                                                                        continue;
                                                                    } else  {
                                                                        $step = 11;
                                                                        continue;
                                                                    }
                                                                }
                                                                case 9: {
                                                                    $task4 = gridView.ApplyFilter(true);
                                                                    $step = 10;
                                                                    if ($task4.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task4.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 10: {
                                                                    $task4.getAwaitedResult();
                                                                    $step = 12;
                                                                    continue;
                                                                }
                                                                case 11: {
                                                                    Core.Extensions.Toast.Warning("\u0110\u00e3 c\u00f3 l\u1ed7i x\u1ea3y ra");
                                                                    $step = 12;
                                                                    continue;
                                                                }

                                                                case 13: {
                                                                    return;
                                                                }
                                                                default: {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }, arguments);

                                                $asyncBody();
                                            }));
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            LockAccountantTransportation: function (arg) {
                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        gridView, 
                        ids, 
                        $t, 
                        listViewItems, 
                        confirm, 
                        $t1, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                                                return Bridge.referenceEquals(x.GuiInfo.FieldName, "TransportationAccountant");
                                            }, null);
                                            if (gridView == null) {
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            ids = ($t = System.Int32, System.Linq.Enumerable.from(gridView.SelectedIds, $t).toList($t));
                                            $task1 = new Core.Clients.Client.$ctor1("Transportation").GetRawList(TMS.API.Models.Transportation, System.String.format("?$filter=Active eq true and Id in ({0}) and IsSubmit eq false", [Core.Extensions.IEnumerableExtensions.Combine(System.Int32, ids)]));
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            listViewItems = $taskResult1;
                                            if (listViewItems.Count <= 0) {
                                                Core.Extensions.Toast.Warning("Kh\u00f4ng DSVC n\u00e0o c\u1ea7n kh\u00f3a");
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            confirm = ($t1 = new Core.Components.Forms.ConfirmDialog(), $t1.Content = "B\u1ea1n c\u00f3 ch\u1eafc ch\u1eafn mu\u1ed1n kh\u00f3a " + listViewItems.Count + " DSVC ?", $t1);
                                            confirm.Render();
                                            confirm.YesConfirmed = Bridge.fn.combine(confirm.YesConfirmed, Bridge.fn.bind(this, function () {
                                                var $step = 0,
                                                    $task1, 
                                                    $taskResult1, 
                                                    $task2, 
                                                    $task3, 
                                                    $taskResult3, 
                                                    $task4, 
                                                    $jumpFromFinally, 
                                                    checks, 
                                                    confirmRequest, 
                                                    $t2, 
                                                    transportationNoLock, 
                                                    res, 
                                                    res1, 
                                                    $asyncBody = Bridge.fn.bind(this, function () {
                                                        for (;;) {
                                                            $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,10,11,13], $step);
                                                            switch ($step) {
                                                                case 0: {
                                                                    checks = System.Linq.Enumerable.from(listViewItems, TMS.API.Models.Transportation).where(function (x) {
                                                                        return x.IsLocked;
                                                                    }).toList(TMS.API.Models.Transportation);
                                                                    if (checks.Count > 0) {
                                                                        $step = 1;
                                                                        continue;
                                                                    } else  {
                                                                        $step = 7;
                                                                        continue;
                                                                    }
                                                                }
                                                                case 1: {
                                                                    confirmRequest = ($t2 = new Core.Components.Forms.ConfirmDialog(), $t2.NeedAnswer = true, $t2.ComType = "Textbox", $t2.Content = (System.String.format("\u0110\u00e3 c\u00f3 {0} DSVC b\u1ecb kh\u00f3a (H\u1ec7 th\u1ed1ng). B\u1ea1n c\u00f3 mu\u1ed1n g\u1eedi y\u00eau c\u1ea7u m\u1edf kh\u00f3a kh\u00f4ng?<br />", [Bridge.box(checks.Count, System.Int32)]) || "") + "H\u00e3y nh\u1eadp l\u00fd do", $t2);
                                                                    confirmRequest.Render();
                                                                    confirmRequest.YesConfirmed = Bridge.fn.combine(confirmRequest.YesConfirmed, Bridge.fn.bind(this, function () {
                                                                        var $step = 0,
                                                                            $task1, 
                                                                            $taskResult1, 
                                                                            $jumpFromFinally, 
                                                                            $t3, 
                                                                            item, 
                                                                            $t4, 
                                                                            $asyncBody = Bridge.fn.bind(this, function () {
                                                                                for (;;) {
                                                                                    $step = System.Array.min([0,1,2,3,4], $step);
                                                                                    switch ($step) {
                                                                                        case 0: {
                                                                                            $t3 = Bridge.getEnumerator(checks);
                                                                                            $step = 1;
                                                                                            continue;
                                                                                        }
                                                                                        case 1: {
                                                                                            if ($t3.moveNext()) {
                                                                                                item = $t3.Current;
                                                                                                $step = 2;
                                                                                                continue;
                                                                                            }
                                                                                            $step = 4;
                                                                                            continue;
                                                                                        }
                                                                                        case 2: {
                                                                                            item.ReasonUnLockAll = ($t4 = confirmRequest.Textbox) != null ? $t4.Text : null;
                                                                                            $task1 = new Core.Clients.Client.$ctor1("Transportation").PostAsync(TMS.API.Models.Transportation, item, "RequestUnLockAll");
                                                                                            $step = 3;
                                                                                            if ($task1.isCompleted()) {
                                                                                                continue;
                                                                                            }
                                                                                            $task1.continue($asyncBody);
                                                                                            return;
                                                                                        }
                                                                                        case 3: {
                                                                                            $taskResult1 = $task1.getAwaitedResult();
                                                                                            $step = 1;
                                                                                            continue;
                                                                                        }
                                                                                        case 4: {
                                                                                            return;
                                                                                        }
                                                                                        default: {
                                                                                            return;
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }, arguments);

                                                                        $asyncBody();
                                                                    }));
                                                                    transportationNoLock = System.Linq.Enumerable.from(listViewItems, TMS.API.Models.Transportation).where(function (x) {
                                                                        return x.IsLocked === false;
                                                                    }).toList(TMS.API.Models.Transportation);
                                                                    $task1 = new Core.Clients.Client.$ctor1("Transportation").PostAsync(System.Boolean, transportationNoLock, "LockAccountantTransportation");
                                                                    $step = 2;
                                                                    if ($task1.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task1.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 2: {
                                                                    $taskResult1 = $task1.getAwaitedResult();
                                                                    res = $taskResult1;
                                                                    if (res) {
                                                                        $step = 3;
                                                                        continue;
                                                                    } else  {
                                                                        $step = 5;
                                                                        continue;
                                                                    }
                                                                }
                                                                case 3: {
                                                                    $task2 = gridView.ApplyFilter(true);
                                                                    $step = 4;
                                                                    if ($task2.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task2.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 4: {
                                                                    $task2.getAwaitedResult();
                                                                    $step = 6;
                                                                    continue;
                                                                }
                                                                case 5: {
                                                                    Core.Extensions.Toast.Warning("\u0110\u00e3 c\u00f3 l\u1ed7i x\u1ea3y ra");
                                                                    $step = 6;
                                                                    continue;
                                                                }
                                                                case 6: {
                                                                    $step = 13;
                                                                    continue;
                                                                }
                                                                case 7: {
                                                                    $task3 = new Core.Clients.Client.$ctor1("Transportation").PostAsync(System.Boolean, listViewItems, "LockAccountantTransportation");
                                                                    $step = 8;
                                                                    if ($task3.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task3.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 8: {
                                                                    $taskResult3 = $task3.getAwaitedResult();
                                                                    res1 = $taskResult3;
                                                                    if (res1) {
                                                                        $step = 9;
                                                                        continue;
                                                                    } else  {
                                                                        $step = 11;
                                                                        continue;
                                                                    }
                                                                }
                                                                case 9: {
                                                                    $task4 = gridView.ApplyFilter(true);
                                                                    $step = 10;
                                                                    if ($task4.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task4.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 10: {
                                                                    $task4.getAwaitedResult();
                                                                    $step = 12;
                                                                    continue;
                                                                }
                                                                case 11: {
                                                                    Core.Extensions.Toast.Warning("\u0110\u00e3 c\u00f3 l\u1ed7i x\u1ea3y ra");
                                                                    $step = 12;
                                                                    continue;
                                                                }

                                                                case 13: {
                                                                    return;
                                                                }
                                                                default: {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }, arguments);

                                                $asyncBody();
                                            }));
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            LockAllTransportation: function (arg) {
                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        gridView, 
                        ids, 
                        $t, 
                        listViewItems, 
                        confirm, 
                        $t1, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                                                return Bridge.referenceEquals(x.GuiInfo.FieldName, "TransportationAccountant");
                                            }, null);
                                            if (gridView == null) {
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            ids = ($t = System.Int32, System.Linq.Enumerable.from(gridView.SelectedIds, $t).toList($t));
                                            $task1 = new Core.Clients.Client.$ctor1("Transportation").GetRawList(TMS.API.Models.Transportation, System.String.format("?$filter=Active eq true and Id in ({0}) and IsLocked eq false", [Core.Extensions.IEnumerableExtensions.Combine(System.Int32, ids)]));
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            listViewItems = $taskResult1;
                                            if (listViewItems.Count <= 0) {
                                                Core.Extensions.Toast.Warning("Kh\u00f4ng DSVC n\u00e0o c\u1ea7n kh\u00f3a");
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            confirm = ($t1 = new Core.Components.Forms.ConfirmDialog(), $t1.Content = "B\u1ea1n c\u00f3 ch\u1eafc ch\u1eafn mu\u1ed1n kh\u00f3a " + listViewItems.Count + " DSVC ?", $t1);
                                            confirm.Render();
                                            confirm.YesConfirmed = Bridge.fn.combine(confirm.YesConfirmed, Bridge.fn.bind(this, function () {
                                                var $step = 0,
                                                    $task1, 
                                                    $taskResult1, 
                                                    $task2, 
                                                    $jumpFromFinally, 
                                                    res, 
                                                    $asyncBody = Bridge.fn.bind(this, function () {
                                                        for (;;) {
                                                            $step = System.Array.min([0,1,2,3,4,5], $step);
                                                            switch ($step) {
                                                                case 0: {
                                                                    $task1 = new Core.Clients.Client.$ctor1("Transportation").PostAsync(System.Boolean, listViewItems, "LockAllTransportation");
                                                                    $step = 1;
                                                                    if ($task1.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task1.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 1: {
                                                                    $taskResult1 = $task1.getAwaitedResult();
                                                                    res = $taskResult1;
                                                                    if (res) {
                                                                        $step = 2;
                                                                        continue;
                                                                    } else  {
                                                                        $step = 4;
                                                                        continue;
                                                                    }
                                                                }
                                                                case 2: {
                                                                    $task2 = gridView.ApplyFilter(true);
                                                                    $step = 3;
                                                                    if ($task2.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task2.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 3: {
                                                                    $task2.getAwaitedResult();
                                                                    $step = 5;
                                                                    continue;
                                                                }
                                                                case 4: {
                                                                    Core.Extensions.Toast.Warning("\u0110\u00e3 c\u00f3 l\u1ed7i x\u1ea3y ra");
                                                                    $step = 5;
                                                                    continue;
                                                                }
                                                                case 5: {
                                                                    return;
                                                                }
                                                                default: {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }, arguments);

                                                $asyncBody();
                                            }));
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            LockRevenueTransportation: function (arg) {
                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        gridView, 
                        ids, 
                        $t, 
                        listViewItems, 
                        confirm, 
                        $t1, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                                                return Bridge.referenceEquals(x.GuiInfo.FieldName, "TransportationAccountant");
                                            }, null);
                                            if (gridView == null) {
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            ids = ($t = System.Int32, System.Linq.Enumerable.from(gridView.SelectedIds, $t).toList($t));
                                            $task1 = new Core.Clients.Client.$ctor1("Transportation").GetRawList(TMS.API.Models.Transportation, System.String.format("?$filter=Active eq true and Id in ({0}) and IsLockedRevenue eq false", [Core.Extensions.IEnumerableExtensions.Combine(System.Int32, ids)]));
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            listViewItems = $taskResult1;
                                            if (listViewItems.Count <= 0) {
                                                Core.Extensions.Toast.Warning("Kh\u00f4ng DSVC n\u00e0o c\u1ea7n kh\u00f3a");
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            confirm = ($t1 = new Core.Components.Forms.ConfirmDialog(), $t1.Content = "B\u1ea1n c\u00f3 ch\u1eafc ch\u1eafn mu\u1ed1n kh\u00f3a " + listViewItems.Count + " DSVC ?", $t1);
                                            confirm.Render();
                                            confirm.YesConfirmed = Bridge.fn.combine(confirm.YesConfirmed, Bridge.fn.bind(this, function () {
                                                var $step = 0,
                                                    $task1, 
                                                    $taskResult1, 
                                                    $task2, 
                                                    $task3, 
                                                    $taskResult3, 
                                                    $task4, 
                                                    $jumpFromFinally, 
                                                    checks, 
                                                    confirmRequest, 
                                                    $t2, 
                                                    transportationNoLock, 
                                                    res, 
                                                    res1, 
                                                    $asyncBody = Bridge.fn.bind(this, function () {
                                                        for (;;) {
                                                            $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,10,11,13], $step);
                                                            switch ($step) {
                                                                case 0: {
                                                                    checks = System.Linq.Enumerable.from(listViewItems, TMS.API.Models.Transportation).where(function (x) {
                                                                        return x.IsLocked;
                                                                    }).toList(TMS.API.Models.Transportation);
                                                                    if (checks.Count > 0) {
                                                                        $step = 1;
                                                                        continue;
                                                                    } else  {
                                                                        $step = 7;
                                                                        continue;
                                                                    }
                                                                }
                                                                case 1: {
                                                                    confirmRequest = ($t2 = new Core.Components.Forms.ConfirmDialog(), $t2.NeedAnswer = true, $t2.ComType = "Textbox", $t2.Content = (System.String.format("\u0110\u00e3 c\u00f3 {0} DSVC b\u1ecb kh\u00f3a (H\u1ec7 th\u1ed1ng). B\u1ea1n c\u00f3 mu\u1ed1n g\u1eedi y\u00eau c\u1ea7u m\u1edf kh\u00f3a kh\u00f4ng?<br />", [Bridge.box(checks.Count, System.Int32)]) || "") + "H\u00e3y nh\u1eadp l\u00fd do", $t2);
                                                                    confirmRequest.Render();
                                                                    confirmRequest.YesConfirmed = Bridge.fn.combine(confirmRequest.YesConfirmed, Bridge.fn.bind(this, function () {
                                                                        var $step = 0,
                                                                            $task1, 
                                                                            $taskResult1, 
                                                                            $jumpFromFinally, 
                                                                            $t3, 
                                                                            item, 
                                                                            $t4, 
                                                                            $asyncBody = Bridge.fn.bind(this, function () {
                                                                                for (;;) {
                                                                                    $step = System.Array.min([0,1,2,3,4], $step);
                                                                                    switch ($step) {
                                                                                        case 0: {
                                                                                            $t3 = Bridge.getEnumerator(checks);
                                                                                            $step = 1;
                                                                                            continue;
                                                                                        }
                                                                                        case 1: {
                                                                                            if ($t3.moveNext()) {
                                                                                                item = $t3.Current;
                                                                                                $step = 2;
                                                                                                continue;
                                                                                            }
                                                                                            $step = 4;
                                                                                            continue;
                                                                                        }
                                                                                        case 2: {
                                                                                            item.ReasonUnLockAll = ($t4 = confirmRequest.Textbox) != null ? $t4.Text : null;
                                                                                            $task1 = new Core.Clients.Client.$ctor1("Transportation").PostAsync(TMS.API.Models.Transportation, item, "RequestUnLockAll");
                                                                                            $step = 3;
                                                                                            if ($task1.isCompleted()) {
                                                                                                continue;
                                                                                            }
                                                                                            $task1.continue($asyncBody);
                                                                                            return;
                                                                                        }
                                                                                        case 3: {
                                                                                            $taskResult1 = $task1.getAwaitedResult();
                                                                                            $step = 1;
                                                                                            continue;
                                                                                        }
                                                                                        case 4: {
                                                                                            return;
                                                                                        }
                                                                                        default: {
                                                                                            return;
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }, arguments);

                                                                        $asyncBody();
                                                                    }));
                                                                    transportationNoLock = System.Linq.Enumerable.from(listViewItems, TMS.API.Models.Transportation).where(function (x) {
                                                                        return x.IsLocked === false;
                                                                    }).toList(TMS.API.Models.Transportation);
                                                                    $task1 = new Core.Clients.Client.$ctor1("Transportation").PostAsync(System.Boolean, transportationNoLock, "LockRevenueTransportation");
                                                                    $step = 2;
                                                                    if ($task1.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task1.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 2: {
                                                                    $taskResult1 = $task1.getAwaitedResult();
                                                                    res = $taskResult1;
                                                                    if (res) {
                                                                        $step = 3;
                                                                        continue;
                                                                    } else  {
                                                                        $step = 5;
                                                                        continue;
                                                                    }
                                                                }
                                                                case 3: {
                                                                    $task2 = gridView.ApplyFilter(true);
                                                                    $step = 4;
                                                                    if ($task2.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task2.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 4: {
                                                                    $task2.getAwaitedResult();
                                                                    $step = 6;
                                                                    continue;
                                                                }
                                                                case 5: {
                                                                    Core.Extensions.Toast.Warning("\u0110\u00e3 c\u00f3 l\u1ed7i x\u1ea3y ra");
                                                                    $step = 6;
                                                                    continue;
                                                                }
                                                                case 6: {
                                                                    $step = 13;
                                                                    continue;
                                                                }
                                                                case 7: {
                                                                    $task3 = new Core.Clients.Client.$ctor1("Transportation").PostAsync(System.Boolean, listViewItems, "LockRevenueTransportation");
                                                                    $step = 8;
                                                                    if ($task3.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task3.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 8: {
                                                                    $taskResult3 = $task3.getAwaitedResult();
                                                                    res1 = $taskResult3;
                                                                    if (res1) {
                                                                        $step = 9;
                                                                        continue;
                                                                    } else  {
                                                                        $step = 11;
                                                                        continue;
                                                                    }
                                                                }
                                                                case 9: {
                                                                    $task4 = gridView.ApplyFilter(true);
                                                                    $step = 10;
                                                                    if ($task4.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task4.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 10: {
                                                                    $task4.getAwaitedResult();
                                                                    $step = 12;
                                                                    continue;
                                                                }
                                                                case 11: {
                                                                    Core.Extensions.Toast.Warning("\u0110\u00e3 c\u00f3 l\u1ed7i x\u1ea3y ra");
                                                                    $step = 12;
                                                                    continue;
                                                                }

                                                                case 13: {
                                                                    return;
                                                                }
                                                                default: {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }, arguments);

                                                $asyncBody();
                                            }));
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            UnLockTransportation: function (arg) {
                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        gridView, 
                        ids, 
                        $t, 
                        listViewItems, 
                        confirm, 
                        $t1, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                                                return Bridge.referenceEquals(x.GuiInfo.FieldName, "TransportationAccountant");
                                            }, null);
                                            if (gridView == null) {
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            ids = ($t = System.Int32, System.Linq.Enumerable.from(gridView.SelectedIds, $t).toList($t));
                                            $task1 = new Core.Clients.Client.$ctor1("Transportation").GetRawList(TMS.API.Models.Transportation, System.String.format("?$filter=Active eq true and Id in ({0}) and IsKt eq true", [Core.Extensions.IEnumerableExtensions.Combine(System.Int32, ids)]));
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            listViewItems = $taskResult1;
                                            if (listViewItems.Count <= 0) {
                                                Core.Extensions.Toast.Warning("Kh\u00f4ng DSVC n\u00e0o c\u1ea7n m\u1edf kh\u00f3a");
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            confirm = ($t1 = new Core.Components.Forms.ConfirmDialog(), $t1.Content = "B\u1ea1n c\u00f3 ch\u1eafc ch\u1eafn mu\u1ed1n m\u1edf kh\u00f3a " + listViewItems.Count + " DSVC ?", $t1);
                                            confirm.Render();
                                            confirm.YesConfirmed = Bridge.fn.combine(confirm.YesConfirmed, Bridge.fn.bind(this, function () {
                                                var $step = 0,
                                                    $task1, 
                                                    $task2, 
                                                    $task3, 
                                                    $task4, 
                                                    $jumpFromFinally, 
                                                    checks, 
                                                    confirmRequest, 
                                                    $t2, 
                                                    transportationNoLock, 
                                                    $asyncBody = Bridge.fn.bind(this, function () {
                                                        for (;;) {
                                                            $step = System.Array.min([0,1,2,3,4,5,6,7], $step);
                                                            switch ($step) {
                                                                case 0: {
                                                                    checks = System.Linq.Enumerable.from(listViewItems, TMS.API.Models.Transportation).where(function (x) {
                                                                        return x.IsLocked;
                                                                    }).toList(TMS.API.Models.Transportation);
                                                                    if (checks.Count > 0) {
                                                                        $step = 1;
                                                                        continue;
                                                                    } else  {
                                                                        $step = 4;
                                                                        continue;
                                                                    }
                                                                }
                                                                case 1: {
                                                                    confirmRequest = ($t2 = new Core.Components.Forms.ConfirmDialog(), $t2.NeedAnswer = true, $t2.ComType = "Textbox", $t2.Content = (System.String.format("\u0110\u00e3 c\u00f3 {0} DSVC b\u1ecb kh\u00f3a (H\u1ec7 th\u1ed1ng). B\u1ea1n c\u00f3 mu\u1ed1n g\u1eedi y\u00eau c\u1ea7u m\u1edf kh\u00f3a kh\u00f4ng?<br />", [Bridge.box(checks.Count, System.Int32)]) || "") + "H\u00e3y nh\u1eadp l\u00fd do", $t2);
                                                                    confirmRequest.Render();
                                                                    confirmRequest.YesConfirmed = Bridge.fn.combine(confirmRequest.YesConfirmed, Bridge.fn.bind(this, function () {
                                                                        var $step = 0,
                                                                            $task1, 
                                                                            $taskResult1, 
                                                                            $jumpFromFinally, 
                                                                            $t3, 
                                                                            item, 
                                                                            $t4, 
                                                                            $asyncBody = Bridge.fn.bind(this, function () {
                                                                                for (;;) {
                                                                                    $step = System.Array.min([0,1,2,3,4], $step);
                                                                                    switch ($step) {
                                                                                        case 0: {
                                                                                            $t3 = Bridge.getEnumerator(checks);
                                                                                            $step = 1;
                                                                                            continue;
                                                                                        }
                                                                                        case 1: {
                                                                                            if ($t3.moveNext()) {
                                                                                                item = $t3.Current;
                                                                                                $step = 2;
                                                                                                continue;
                                                                                            }
                                                                                            $step = 4;
                                                                                            continue;
                                                                                        }
                                                                                        case 2: {
                                                                                            item.ReasonUnLockAll = ($t4 = confirmRequest.Textbox) != null ? $t4.Text : null;
                                                                                            $task1 = new Core.Clients.Client.$ctor1("Transportation").PostAsync(TMS.API.Models.Transportation, item, "RequestUnLockAll");
                                                                                            $step = 3;
                                                                                            if ($task1.isCompleted()) {
                                                                                                continue;
                                                                                            }
                                                                                            $task1.continue($asyncBody);
                                                                                            return;
                                                                                        }
                                                                                        case 3: {
                                                                                            $taskResult1 = $task1.getAwaitedResult();
                                                                                            $step = 1;
                                                                                            continue;
                                                                                        }
                                                                                        case 4: {
                                                                                            return;
                                                                                        }
                                                                                        default: {
                                                                                            return;
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }, arguments);

                                                                        $asyncBody();
                                                                    }));
                                                                    transportationNoLock = System.Linq.Enumerable.from(listViewItems, TMS.API.Models.Transportation).where(function (x) {
                                                                        return x.IsLocked === false;
                                                                    }).toList(TMS.API.Models.Transportation);
                                                                    $task1 = this.UnLockTransportationNoCheck(transportationNoLock);
                                                                    $step = 2;
                                                                    if ($task1.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task1.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 2: {
                                                                    $task1.getAwaitedResult();
                                                                    $task2 = gridView.ApplyFilter(true);
                                                                    $step = 3;
                                                                    if ($task2.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task2.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 3: {
                                                                    $task2.getAwaitedResult();
                                                                    $step = 7;
                                                                    continue;
                                                                }
                                                                case 4: {
                                                                    $task3 = this.UnLockTransportationNoCheck(listViewItems);
                                                                    $step = 5;
                                                                    if ($task3.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task3.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 5: {
                                                                    $task3.getAwaitedResult();
                                                                    $task4 = gridView.ApplyFilter(true);
                                                                    $step = 6;
                                                                    if ($task4.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task4.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 6: {
                                                                    $task4.getAwaitedResult();
                                                                    $step = 7;
                                                                    continue;
                                                                }
                                                                case 7: {
                                                                    return;
                                                                }
                                                                default: {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }, arguments);

                                                $asyncBody();
                                            }));
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            UnLockAccountantTransportation: function (arg) {
                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        gridView, 
                        ids, 
                        $t, 
                        listViewItems, 
                        confirm, 
                        $t1, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                                                return Bridge.referenceEquals(x.GuiInfo.FieldName, "TransportationAccountant");
                                            }, null);
                                            if (gridView == null) {
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            ids = ($t = System.Int32, System.Linq.Enumerable.from(gridView.SelectedIds, $t).toList($t));
                                            $task1 = new Core.Clients.Client.$ctor1("Transportation").GetRawList(TMS.API.Models.Transportation, System.String.format("?$filter=Active eq true and Id in ({0}) and IsSubmit eq true", [Core.Extensions.IEnumerableExtensions.Combine(System.Int32, ids)]));
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            listViewItems = $taskResult1;
                                            if (listViewItems.Count <= 0) {
                                                Core.Extensions.Toast.Warning("Kh\u00f4ng DSVC n\u00e0o c\u1ea7n m\u1edf kh\u00f3a");
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            confirm = ($t1 = new Core.Components.Forms.ConfirmDialog(), $t1.Content = "B\u1ea1n c\u00f3 ch\u1eafc ch\u1eafn mu\u1ed1n m\u1edf kh\u00f3a " + listViewItems.Count + " DSVC ?", $t1);
                                            confirm.Render();
                                            confirm.YesConfirmed = Bridge.fn.combine(confirm.YesConfirmed, Bridge.fn.bind(this, function () {
                                                var $step = 0,
                                                    $task1, 
                                                    $task2, 
                                                    $task3, 
                                                    $task4, 
                                                    $jumpFromFinally, 
                                                    checks, 
                                                    confirmRequest, 
                                                    $t2, 
                                                    transportationNoLock, 
                                                    $asyncBody = Bridge.fn.bind(this, function () {
                                                        for (;;) {
                                                            $step = System.Array.min([0,1,2,3,4,5,6,7], $step);
                                                            switch ($step) {
                                                                case 0: {
                                                                    checks = System.Linq.Enumerable.from(listViewItems, TMS.API.Models.Transportation).where(function (x) {
                                                                        return x.IsLocked;
                                                                    }).toList(TMS.API.Models.Transportation);
                                                                    if (checks.Count > 0) {
                                                                        $step = 1;
                                                                        continue;
                                                                    } else  {
                                                                        $step = 4;
                                                                        continue;
                                                                    }
                                                                }
                                                                case 1: {
                                                                    confirmRequest = ($t2 = new Core.Components.Forms.ConfirmDialog(), $t2.NeedAnswer = true, $t2.ComType = "Textbox", $t2.Content = (System.String.format("\u0110\u00e3 c\u00f3 {0} DSVC b\u1ecb kh\u00f3a (H\u1ec7 th\u1ed1ng). B\u1ea1n c\u00f3 mu\u1ed1n g\u1eedi y\u00eau c\u1ea7u m\u1edf kh\u00f3a kh\u00f4ng?<br />", [Bridge.box(checks.Count, System.Int32)]) || "") + "H\u00e3y nh\u1eadp l\u00fd do", $t2);
                                                                    confirmRequest.Render();
                                                                    confirmRequest.YesConfirmed = Bridge.fn.combine(confirmRequest.YesConfirmed, Bridge.fn.bind(this, function () {
                                                                        var $step = 0,
                                                                            $task1, 
                                                                            $taskResult1, 
                                                                            $jumpFromFinally, 
                                                                            $t3, 
                                                                            item, 
                                                                            $t4, 
                                                                            $asyncBody = Bridge.fn.bind(this, function () {
                                                                                for (;;) {
                                                                                    $step = System.Array.min([0,1,2,3,4], $step);
                                                                                    switch ($step) {
                                                                                        case 0: {
                                                                                            $t3 = Bridge.getEnumerator(checks);
                                                                                            $step = 1;
                                                                                            continue;
                                                                                        }
                                                                                        case 1: {
                                                                                            if ($t3.moveNext()) {
                                                                                                item = $t3.Current;
                                                                                                $step = 2;
                                                                                                continue;
                                                                                            }
                                                                                            $step = 4;
                                                                                            continue;
                                                                                        }
                                                                                        case 2: {
                                                                                            item.ReasonUnLockAll = ($t4 = confirmRequest.Textbox) != null ? $t4.Text : null;
                                                                                            $task1 = new Core.Clients.Client.$ctor1("Transportation").PostAsync(TMS.API.Models.Transportation, item, "RequestUnLockAll");
                                                                                            $step = 3;
                                                                                            if ($task1.isCompleted()) {
                                                                                                continue;
                                                                                            }
                                                                                            $task1.continue($asyncBody);
                                                                                            return;
                                                                                        }
                                                                                        case 3: {
                                                                                            $taskResult1 = $task1.getAwaitedResult();
                                                                                            $step = 1;
                                                                                            continue;
                                                                                        }
                                                                                        case 4: {
                                                                                            return;
                                                                                        }
                                                                                        default: {
                                                                                            return;
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }, arguments);

                                                                        $asyncBody();
                                                                    }));
                                                                    transportationNoLock = System.Linq.Enumerable.from(listViewItems, TMS.API.Models.Transportation).where(function (x) {
                                                                        return x.IsLocked === false;
                                                                    }).toList(TMS.API.Models.Transportation);
                                                                    $task1 = this.UnLockAccountantTransportationNoCheck(transportationNoLock);
                                                                    $step = 2;
                                                                    if ($task1.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task1.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 2: {
                                                                    $task1.getAwaitedResult();
                                                                    $task2 = gridView.ApplyFilter(true);
                                                                    $step = 3;
                                                                    if ($task2.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task2.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 3: {
                                                                    $task2.getAwaitedResult();
                                                                    $step = 7;
                                                                    continue;
                                                                }
                                                                case 4: {
                                                                    $task3 = this.UnLockAccountantTransportationNoCheck(listViewItems);
                                                                    $step = 5;
                                                                    if ($task3.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task3.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 5: {
                                                                    $task3.getAwaitedResult();
                                                                    $task4 = gridView.ApplyFilter(true);
                                                                    $step = 6;
                                                                    if ($task4.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task4.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 6: {
                                                                    $task4.getAwaitedResult();
                                                                    $step = 7;
                                                                    continue;
                                                                }
                                                                case 7: {
                                                                    return;
                                                                }
                                                                default: {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }, arguments);

                                                $asyncBody();
                                            }));
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            UnLockAllTransportation: function (arg) {
                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        gridView, 
                        ids, 
                        $t, 
                        listViewItems, 
                        confirm, 
                        $t1, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                                                return Bridge.referenceEquals(x.GuiInfo.FieldName, "TransportationAccountant");
                                            }, null);
                                            if (gridView == null) {
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            ids = ($t = System.Int32, System.Linq.Enumerable.from(gridView.SelectedIds, $t).toList($t));
                                            $task1 = new Core.Clients.Client.$ctor1("Transportation").GetRawList(TMS.API.Models.Transportation, System.String.format("?$filter=Active eq true and Id in ({0}) and IsLocked eq true", [Core.Extensions.IEnumerableExtensions.Combine(System.Int32, ids)]));
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            listViewItems = $taskResult1;
                                            if (listViewItems.Count <= 0) {
                                                Core.Extensions.Toast.Warning("Kh\u00f4ng DSVC n\u00e0o c\u1ea7n m\u1edf kh\u00f3a");
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            confirm = ($t1 = new Core.Components.Forms.ConfirmDialog(), $t1.Content = "B\u1ea1n c\u00f3 ch\u1eafc ch\u1eafn mu\u1ed1n m\u1edf kh\u00f3a " + listViewItems.Count + " DSVC ?", $t1);
                                            confirm.Render();
                                            confirm.YesConfirmed = Bridge.fn.combine(confirm.YesConfirmed, Bridge.fn.bind(this, function () {
                                                var $step = 0,
                                                    $task1, 
                                                    $taskResult1, 
                                                    $task2, 
                                                    $taskResult2, 
                                                    $task3, 
                                                    $task4, 
                                                    $taskResult4, 
                                                    $task5, 
                                                    $jumpFromFinally, 
                                                    checkRequests, 
                                                    confirmRequets, 
                                                    $t2, 
                                                    res, 
                                                    res1, 
                                                    $asyncBody = Bridge.fn.bind(this, function () {
                                                        for (;;) {
                                                            $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,10,11,12,13,16], $step);
                                                            switch ($step) {
                                                                case 0: {
                                                                    $task1 = new Core.Clients.Client.$ctor1("TransportationRequest").GetRawList(TMS.API.Models.TransportationRequest, System.String.format("?$filter=Active eq true and TransportationId in ({0}) and IsRequestUnLockAll eq true", [Core.Extensions.IEnumerableExtensions.Combine(System.Int32, System.Linq.Enumerable.from(listViewItems, TMS.API.Models.Transportation).select(function (x) {
                                                                        return x.Id;
                                                                    }))]));
                                                                    $step = 1;
                                                                    if ($task1.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task1.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 1: {
                                                                    $taskResult1 = $task1.getAwaitedResult();
                                                                    checkRequests = $taskResult1;
                                                                    if (checkRequests.Count > 0) {
                                                                        $step = 2;
                                                                        continue;
                                                                    } else  {
                                                                        $step = 8;
                                                                        continue;
                                                                    }
                                                                }
                                                                case 2: {
                                                                    confirmRequets = ($t2 = new Core.Components.Forms.ConfirmDialog(), $t2.Content = System.String.format("C\u00f3 {0} y\u00eau c\u1ea7u c\u1ea7n duy\u1ec7t b\u1ea1n c\u00f3 mu\u1ed1n duy\u1ec7t m\u1edf kh\u00f3a to\u00e0n b\u1ed9 kh\u00f4ng ?", [Bridge.box(checkRequests.Count, System.Int32)]), $t2);
                                                                    confirmRequets.Render();
                                                                    confirmRequets.YesConfirmed = Bridge.fn.combine(confirmRequets.YesConfirmed, Bridge.fn.bind(this, function () {
                                                                        var $step = 0,
                                                                            $task1, 
                                                                            $taskResult1, 
                                                                            $task2, 
                                                                            $jumpFromFinally, 
                                                                            rs, 
                                                                            $asyncBody = Bridge.fn.bind(this, function () {
                                                                                for (;;) {
                                                                                    $step = System.Array.min([0,1,2,3,4,5], $step);
                                                                                    switch ($step) {
                                                                                        case 0: {
                                                                                            $task1 = new Core.Clients.Client.$ctor1("Transportation").PostAsync(System.Boolean, listViewItems, "ApproveUnLockAll");
                                                                                            $step = 1;
                                                                                            if ($task1.isCompleted()) {
                                                                                                continue;
                                                                                            }
                                                                                            $task1.continue($asyncBody);
                                                                                            return;
                                                                                        }
                                                                                        case 1: {
                                                                                            $taskResult1 = $task1.getAwaitedResult();
                                                                                            rs = $taskResult1;
                                                                                            if (rs) {
                                                                                                $step = 2;
                                                                                                continue;
                                                                                            } else  {
                                                                                                $step = 4;
                                                                                                continue;
                                                                                            }
                                                                                        }
                                                                                        case 2: {
                                                                                            $task2 = gridView.ApplyFilter(true);
                                                                                            $step = 3;
                                                                                            if ($task2.isCompleted()) {
                                                                                                continue;
                                                                                            }
                                                                                            $task2.continue($asyncBody);
                                                                                            return;
                                                                                        }
                                                                                        case 3: {
                                                                                            $task2.getAwaitedResult();
                                                                                            $step = 5;
                                                                                            continue;
                                                                                        }
                                                                                        case 4: {
                                                                                            Core.Extensions.Toast.Warning("\u0110\u00e3 c\u00f3 l\u1ed7i x\u1ea3y ra");
                                                                                            $step = 5;
                                                                                            continue;
                                                                                        }
                                                                                        case 5: {
                                                                                            return;
                                                                                        }
                                                                                        default: {
                                                                                            return;
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }, arguments);

                                                                        $asyncBody();
                                                                    }));
                                                                    $task2 = new Core.Clients.Client.$ctor1("Transportation").PostAsync(System.Boolean, System.Linq.Enumerable.from(listViewItems, TMS.API.Models.Transportation).where(function (x) {
                                                                        return x.IsRequestUnLockAll === false;
                                                                    }), "UnLockAllTransportation");
                                                                    $step = 3;
                                                                    if ($task2.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task2.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 3: {
                                                                    $taskResult2 = $task2.getAwaitedResult();
                                                                    res = $taskResult2;
                                                                    if (res) {
                                                                        $step = 4;
                                                                        continue;
                                                                    } else  {
                                                                        $step = 6;
                                                                        continue;
                                                                    }
                                                                }
                                                                case 4: {
                                                                    $task3 = gridView.ApplyFilter(true);
                                                                    $step = 5;
                                                                    if ($task3.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task3.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 5: {
                                                                    $task3.getAwaitedResult();
                                                                    $step = 7;
                                                                    continue;
                                                                }
                                                                case 6: {
                                                                    Core.Extensions.Toast.Warning("\u0110\u00e3 c\u00f3 l\u1ed7i x\u1ea3y ra");
                                                                    $step = 7;
                                                                    continue;
                                                                }
                                                                case 7: {
                                                                    $step = 16;
                                                                    continue;
                                                                }
                                                                case 8: {
                                                                    if (checkRequests.Count <= 0) {
                                                                        $step = 9;
                                                                        continue;
                                                                    } 
                                                                    $step = 15;
                                                                    continue;
                                                                }
                                                                case 9: {
                                                                    $task4 = new Core.Clients.Client.$ctor1("Transportation").PostAsync(System.Boolean, listViewItems, "UnLockAllTransportation");
                                                                    $step = 10;
                                                                    if ($task4.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task4.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 10: {
                                                                    $taskResult4 = $task4.getAwaitedResult();
                                                                    res1 = $taskResult4;
                                                                    if (res1) {
                                                                        $step = 11;
                                                                        continue;
                                                                    } else  {
                                                                        $step = 13;
                                                                        continue;
                                                                    }
                                                                }
                                                                case 11: {
                                                                    $task5 = gridView.ApplyFilter(true);
                                                                    $step = 12;
                                                                    if ($task5.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task5.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 12: {
                                                                    $task5.getAwaitedResult();
                                                                    $step = 14;
                                                                    continue;
                                                                }
                                                                case 13: {
                                                                    Core.Extensions.Toast.Warning("\u0110\u00e3 c\u00f3 l\u1ed7i x\u1ea3y ra");
                                                                    $step = 14;
                                                                    continue;
                                                                }


                                                                case 16: {
                                                                    return;
                                                                }
                                                                default: {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }, arguments);

                                                $asyncBody();
                                            }));
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            UnLockRevenueTransportation: function (arg) {
                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        gridView, 
                        ids, 
                        $t, 
                        listViewItems, 
                        confirm, 
                        $t1, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                                                return Bridge.referenceEquals(x.GuiInfo.FieldName, "TransportationAccountant");
                                            }, null);
                                            if (gridView == null) {
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            ids = ($t = System.Int32, System.Linq.Enumerable.from(gridView.SelectedIds, $t).toList($t));
                                            $task1 = new Core.Clients.Client.$ctor1("Transportation").GetRawList(TMS.API.Models.Transportation, System.String.format("?$filter=Active eq true and Id in ({0}) and IsLockedRevenue eq true", [Core.Extensions.IEnumerableExtensions.Combine(System.Int32, ids)]));
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            listViewItems = $taskResult1;
                                            if (listViewItems.Count <= 0) {
                                                Core.Extensions.Toast.Warning("Kh\u00f4ng DSVC n\u00e0o c\u1ea7n m\u1edf kh\u00f3a");
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            confirm = ($t1 = new Core.Components.Forms.ConfirmDialog(), $t1.Content = "B\u1ea1n c\u00f3 ch\u1eafc ch\u1eafn mu\u1ed1n m\u1edf kh\u00f3a " + listViewItems.Count + " DSVC ?", $t1);
                                            confirm.Render();
                                            confirm.YesConfirmed = Bridge.fn.combine(confirm.YesConfirmed, Bridge.fn.bind(this, function () {
                                                var $step = 0,
                                                    $task1, 
                                                    $taskResult1, 
                                                    $task2, 
                                                    $task3, 
                                                    $taskResult3, 
                                                    $task4, 
                                                    $jumpFromFinally, 
                                                    checks, 
                                                    confirmRequest, 
                                                    $t2, 
                                                    transportationNoLock, 
                                                    res, 
                                                    res1, 
                                                    $asyncBody = Bridge.fn.bind(this, function () {
                                                        for (;;) {
                                                            $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,11], $step);
                                                            switch ($step) {
                                                                case 0: {
                                                                    checks = System.Linq.Enumerable.from(listViewItems, TMS.API.Models.Transportation).where(function (x) {
                                                                        return x.IsLocked;
                                                                    }).toList(TMS.API.Models.Transportation);
                                                                    if (checks.Count > 0) {
                                                                        $step = 1;
                                                                        continue;
                                                                    } else  {
                                                                        $step = 6;
                                                                        continue;
                                                                    }
                                                                }
                                                                case 1: {
                                                                    confirmRequest = ($t2 = new Core.Components.Forms.ConfirmDialog(), $t2.NeedAnswer = true, $t2.ComType = "Textbox", $t2.Content = (System.String.format("\u0110\u00e3 c\u00f3 {0} DSVC b\u1ecb kh\u00f3a (H\u1ec7 th\u1ed1ng). B\u1ea1n c\u00f3 mu\u1ed1n g\u1eedi y\u00eau c\u1ea7u m\u1edf kh\u00f3a kh\u00f4ng?<br />", [Bridge.box(checks.Count, System.Int32)]) || "") + "H\u00e3y nh\u1eadp l\u00fd do", $t2);
                                                                    confirmRequest.Render();
                                                                    confirmRequest.YesConfirmed = Bridge.fn.combine(confirmRequest.YesConfirmed, Bridge.fn.bind(this, function () {
                                                                        var $step = 0,
                                                                            $task1, 
                                                                            $taskResult1, 
                                                                            $jumpFromFinally, 
                                                                            $t3, 
                                                                            item, 
                                                                            $t4, 
                                                                            $asyncBody = Bridge.fn.bind(this, function () {
                                                                                for (;;) {
                                                                                    $step = System.Array.min([0,1,2,3,4], $step);
                                                                                    switch ($step) {
                                                                                        case 0: {
                                                                                            $t3 = Bridge.getEnumerator(checks);
                                                                                            $step = 1;
                                                                                            continue;
                                                                                        }
                                                                                        case 1: {
                                                                                            if ($t3.moveNext()) {
                                                                                                item = $t3.Current;
                                                                                                $step = 2;
                                                                                                continue;
                                                                                            }
                                                                                            $step = 4;
                                                                                            continue;
                                                                                        }
                                                                                        case 2: {
                                                                                            item.ReasonUnLockAll = ($t4 = confirmRequest.Textbox) != null ? $t4.Text : null;
                                                                                            $task1 = new Core.Clients.Client.$ctor1("Transportation").PostAsync(TMS.API.Models.Transportation, item, "RequestUnLockAll");
                                                                                            $step = 3;
                                                                                            if ($task1.isCompleted()) {
                                                                                                continue;
                                                                                            }
                                                                                            $task1.continue($asyncBody);
                                                                                            return;
                                                                                        }
                                                                                        case 3: {
                                                                                            $taskResult1 = $task1.getAwaitedResult();
                                                                                            $step = 1;
                                                                                            continue;
                                                                                        }
                                                                                        case 4: {
                                                                                            return;
                                                                                        }
                                                                                        default: {
                                                                                            return;
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }, arguments);

                                                                        $asyncBody();
                                                                    }));
                                                                    transportationNoLock = System.Linq.Enumerable.from(listViewItems, TMS.API.Models.Transportation).where(function (x) {
                                                                        return x.IsLocked === false;
                                                                    }).toList(TMS.API.Models.Transportation);
                                                                    $task1 = new Core.Clients.Client.$ctor1("Transportation").PostAsync(System.Boolean, listViewItems, "UnLockRevenueTransportation");
                                                                    $step = 2;
                                                                    if ($task1.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task1.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 2: {
                                                                    $taskResult1 = $task1.getAwaitedResult();
                                                                    res = $taskResult1;
                                                                    if (res) {
                                                                        $step = 3;
                                                                        continue;
                                                                    } 
                                                                    $step = 5;
                                                                    continue;
                                                                }
                                                                case 3: {
                                                                    $task2 = gridView.ApplyFilter(true);
                                                                    $step = 4;
                                                                    if ($task2.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task2.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 4: {
                                                                    $task2.getAwaitedResult();
                                                                    $step = 5;
                                                                    continue;
                                                                }
                                                                case 5: {
                                                                    $step = 11;
                                                                    continue;
                                                                }
                                                                case 6: {
                                                                    $task3 = new Core.Clients.Client.$ctor1("Transportation").PostAsync(System.Boolean, listViewItems, "UnLockRevenueTransportation");
                                                                    $step = 7;
                                                                    if ($task3.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task3.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 7: {
                                                                    $taskResult3 = $task3.getAwaitedResult();
                                                                    res1 = $taskResult3;
                                                                    if (res1) {
                                                                        $step = 8;
                                                                        continue;
                                                                    } 
                                                                    $step = 10;
                                                                    continue;
                                                                }
                                                                case 8: {
                                                                    $task4 = gridView.ApplyFilter(true);
                                                                    $step = 9;
                                                                    if ($task4.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task4.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 9: {
                                                                    $task4.getAwaitedResult();
                                                                    $step = 10;
                                                                    continue;
                                                                }

                                                                case 11: {
                                                                    return;
                                                                }
                                                                default: {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }, arguments);

                                                $asyncBody();
                                            }));
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            UnLockTransportationNoCheck: function (transportations) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $task3, 
                    $taskResult3, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    checkRequests, 
                    confirmRequets, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,8], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = new Core.Clients.Client.$ctor1("TransportationRequest").GetRawList(TMS.API.Models.TransportationRequest, System.String.format("?$filter=Active eq true and TransportationId in ({0}) and IsRequestUnLockExploit eq true", [Core.Extensions.IEnumerableExtensions.Combine(System.Int32, System.Linq.Enumerable.from(transportations, TMS.API.Models.Transportation).select(function (x) {
                                            return x.Id;
                                        }))]));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        checkRequests = $taskResult1;
                                        if (checkRequests.Count > 0) {
                                            $step = 2;
                                            continue;
                                        } else  {
                                            $step = 4;
                                            continue;
                                        }
                                    }
                                    case 2: {
                                        confirmRequets = ($t = new Core.Components.Forms.ConfirmDialog(), $t.Content = System.String.format("C\u00f3 {0} y\u00eau c\u1ea7u c\u1ea7n duy\u1ec7t b\u1ea1n c\u00f3 mu\u1ed1n duy\u1ec7t m\u1edf kh\u00f3a to\u00e0n b\u1ed9 kh\u00f4ng ?", [Bridge.box(checkRequests.Count, System.Int32)]), $t);
                                        confirmRequets.Render();
                                        confirmRequets.YesConfirmed = Bridge.fn.combine(confirmRequets.YesConfirmed, Bridge.fn.bind(this, function () {
                                            var $step = 0,
                                                $task1, 
                                                $taskResult1, 
                                                $jumpFromFinally, 
                                                $asyncBody = Bridge.fn.bind(this, function () {
                                                    for (;;) {
                                                        $step = System.Array.min([0,1], $step);
                                                        switch ($step) {
                                                            case 0: {
                                                                $task1 = new Core.Clients.Client.$ctor1("Transportation").PostAsync(System.Boolean, transportations, "ApproveUnLockTransportation");
                                                                $step = 1;
                                                                if ($task1.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task1.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 1: {
                                                                $taskResult1 = $task1.getAwaitedResult();
                                                                return;
                                                            }
                                                            default: {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }, arguments);

                                            $asyncBody();
                                        }));
                                        $task2 = new Core.Clients.Client.$ctor1("Transportation").PostAsync(System.Boolean, System.Linq.Enumerable.from(transportations, TMS.API.Models.Transportation).where(function (x) {
                                            return x.IsRequestUnLockExploit === false;
                                        }), "UnLockTransportation");
                                        $step = 3;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        $step = 8;
                                        continue;
                                    }
                                    case 4: {
                                        if (checkRequests.Count <= 0) {
                                            $step = 5;
                                            continue;
                                        } 
                                        $step = 7;
                                        continue;
                                    }
                                    case 5: {
                                        $task3 = new Core.Clients.Client.$ctor1("Transportation").PostAsync(System.Boolean, transportations, "UnLockTransportation");
                                        $step = 6;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 6: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        $step = 7;
                                        continue;
                                    }

                                    case 8: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            UnLockAccountantTransportationNoCheck: function (transportations) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $task3, 
                    $taskResult3, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    checkRequests, 
                    confirmRequets, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,8], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = new Core.Clients.Client.$ctor1("TransportationRequest").GetRawList(TMS.API.Models.TransportationRequest, System.String.format("?$filter=Active eq true and TransportationId in ({0}) and IsRequestUnLockAccountant eq true", [Core.Extensions.IEnumerableExtensions.Combine(System.Int32, System.Linq.Enumerable.from(transportations, TMS.API.Models.Transportation).select(function (x) {
                                            return x.Id;
                                        }))]));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        checkRequests = $taskResult1;
                                        if (checkRequests.Count > 0) {
                                            $step = 2;
                                            continue;
                                        } else  {
                                            $step = 4;
                                            continue;
                                        }
                                    }
                                    case 2: {
                                        confirmRequets = ($t = new Core.Components.Forms.ConfirmDialog(), $t.Content = System.String.format("C\u00f3 {0} y\u00eau c\u1ea7u c\u1ea7n duy\u1ec7t b\u1ea1n c\u00f3 mu\u1ed1n duy\u1ec7t m\u1edf kh\u00f3a to\u00e0n b\u1ed9 kh\u00f4ng ?", [Bridge.box(checkRequests.Count, System.Int32)]), $t);
                                        confirmRequets.Render();
                                        confirmRequets.YesConfirmed = Bridge.fn.combine(confirmRequets.YesConfirmed, Bridge.fn.bind(this, function () {
                                            var $step = 0,
                                                $task1, 
                                                $taskResult1, 
                                                $jumpFromFinally, 
                                                $asyncBody = Bridge.fn.bind(this, function () {
                                                    for (;;) {
                                                        $step = System.Array.min([0,1], $step);
                                                        switch ($step) {
                                                            case 0: {
                                                                $task1 = new Core.Clients.Client.$ctor1("Transportation").PostAsync(System.Boolean, transportations, "ApproveUnLockAccountantTransportation");
                                                                $step = 1;
                                                                if ($task1.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task1.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 1: {
                                                                $taskResult1 = $task1.getAwaitedResult();
                                                                return;
                                                            }
                                                            default: {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }, arguments);

                                            $asyncBody();
                                        }));
                                        $task2 = new Core.Clients.Client.$ctor1("Transportation").PostAsync(System.Boolean, System.Linq.Enumerable.from(transportations, TMS.API.Models.Transportation).where(function (x) {
                                            return x.IsRequestUnLockAccountant === false;
                                        }), "UnLockAccountantTransportation");
                                        $step = 3;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        $step = 8;
                                        continue;
                                    }
                                    case 4: {
                                        if (checkRequests.Count <= 0) {
                                            $step = 5;
                                            continue;
                                        } 
                                        $step = 7;
                                        continue;
                                    }
                                    case 5: {
                                        $task3 = new Core.Clients.Client.$ctor1("Transportation").PostAsync(System.Boolean, transportations, "UnLockAccountantTransportation");
                                        $step = 6;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 6: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        $step = 7;
                                        continue;
                                    }

                                    case 8: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ReloadRevenue: function (transportation) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    grid, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        grid = Core.Components.Extensions.ComponentExt.FindComponentByName(Core.Components.GridView, this, "Revenue");
                                        grid.DataSourceFilter = System.String.format("?$filter=Active eq true and TransportationId eq {0}", [Bridge.box(transportation.Id, System.Int32)]);
                                        this.selected = transportation;
                                        $task1 = grid.ApplyFilter(true);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            BeforeCreatedRevenue: function (revenue) {
                var $t;
                if (this.selected == null) {
                    return;
                }
                if (this.selected.IsSubmit && (revenue.Name != null || revenue.LotNo != null || !Bridge.equals(revenue.LotDate, null) || (System.Nullable.liftne("ne", revenue.UnitPriceAfterTax, System.Decimal.lift(null)) && System.Nullable.liftne("ne", revenue.UnitPriceAfterTax, System.Decimal(0))) || (System.Nullable.liftne("ne", revenue.UnitPriceBeforeTax, System.Decimal.lift(null)) && System.Nullable.liftne("ne", revenue.UnitPriceBeforeTax, System.Decimal(0))) || (System.Nullable.liftne("ne", revenue.ReceivedPrice, System.Decimal.lift(null)) && System.Nullable.liftne("ne", revenue.ReceivedPrice, System.Decimal(0))) || (System.Nullable.liftne("ne", revenue.CollectOnBehaftPrice, System.Decimal.lift(null)) && System.Nullable.liftne("ne", revenue.CollectOnBehaftPrice, System.Decimal(0))) || revenue.NotePayment != null || revenue.Note != null || (System.Nullable.liftne("ne", revenue.RevenueAdjustment, System.Decimal.lift(null)) && System.Nullable.liftne("ne", revenue.RevenueAdjustment, System.Decimal(0))))) {
                    var confirm = ($t = new Core.Components.Forms.ConfirmDialog(), $t.NeedAnswer = true, $t.ComType = "Textbox", $t.Content = (System.String.format("DSVC n\u00e0y \u0111\u00e3 b\u1ecb kh\u00f3a (K\u1ebf to\u00e1n). B\u1ea1n c\u00f3 mu\u1ed1n g\u1eedi y\u00eau c\u1ea7u m\u1edf kh\u00f3a kh\u00f4ng?<br />", null) || "") + "H\u00e3y nh\u1eadp l\u00fd do", $t);
                    confirm.Render();
                    confirm.YesConfirmed = Bridge.fn.combine(confirm.YesConfirmed, Bridge.fn.bind(this, function () {
                        var $step = 0,
                            $task1, 
                            $taskResult1, 
                            $jumpFromFinally, 
                            $t1, 
                            $asyncBody = Bridge.fn.bind(this, function () {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            this.selected.ReasonUnLockAccountant = ($t1 = confirm.Textbox) != null ? $t1.Text : null;
                                            $task1 = new Core.Clients.Client.$ctor1("Transportation").PostAsync(TMS.API.Models.Transportation, this.selected, "RequestUnLockAccountant");
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            return;
                                        }
                                        default: {
                                            return;
                                        }
                                    }
                                }
                            }, arguments);

                        $asyncBody();
                    }));
                    return;
                }
                revenue.BossId = this.selected.BossId;
                revenue.ContainerNo = this.selected.ContainerNo;
                revenue.SealNo = this.selected.SealNo;
                revenue.ContainerTypeId = this.selected.ContainerTypeId;
                revenue.ClosingDate = this.selected.ClosingDate;
                revenue.TransportationId = this.selected.Id;
                revenue.Id = 0;
            },
            UpdateTransportationWhenUpdateRevenue: function () {
                window.clearTimeout(this.updateRevenue);
                this.updateRevenue = window.setTimeout(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.UpdateTransportationWhenUpdateRevenueAsync();
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }), 1000);
            },
            UpdateTransportationWhenUpdateRevenueAsync: function () {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    grid, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        grid = Core.Components.Extensions.ComponentExt.FindComponentByName(Core.Components.GridView, this, "TransportationAccountant");
                                        $task1 = grid.ApplyFilter(true);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ExportTransportationAndRevenue: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    gridView, 
                    listViewItems, 
                    $t, 
                    path, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                                            return Bridge.referenceEquals(x.GuiInfo.FieldName, "TransportationAccountant");
                                        }, null);
                                        if (gridView == null) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        listViewItems = ($t = System.Int32, System.Linq.Enumerable.from(gridView.SelectedIds, $t).toList($t));
                                        if (listViewItems.Count <= 0) {
                                            Core.Extensions.Toast.Warning("B\u1ea1n ch\u01b0a ch\u1ecdn d\u1eef li\u1ec7u");
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        $task1 = new Core.Clients.Client.$ctor1("Transportation").PostAsync(System.String, listViewItems, "ExportTransportationAndRevenue");
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        path = $taskResult1;
                                        Core.Clients.Client.Download(System.String.format("/excel/Download/{0}", [path]));
                                        Core.Extensions.Toast.Success("Xu\u1ea5t file th\u00e0nh c\u00f4ng");
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CheckRoleList: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = new Core.Clients.Client.$ctor1("FeaturePolicy").GetRawList(TMS.API.Models.FeaturePolicy, System.String.format("?$filter=Active eq true and EntityId eq 20 and RecordId in (18111, 17758, 17752, 17756, 18142, 17749, 17718, 17724) and RoleId in ({0})", [Core.Extensions.IEnumerableExtensions.Combine(System.Int32, this.Token.RoleIds)]));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult($taskResult1);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            GetPatchIsLockedEntity: function (transportation) {
                var $t;
                var details = new (System.Collections.Generic.List$1(Core.ViewModels.PatchUpdateDetail)).ctor();
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = Core.Extensions.Utils.IdField, $t.Value = Bridge.toString(transportation.Id), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "IsLocked", $t.Value = System.Boolean.toString(transportation.IsLocked), $t));
                return ($t = new Core.ViewModels.PatchUpdate(), $t.Changes = details, $t);
            },
            GetPatchIsKtEntity: function (transportation) {
                var $t;
                var details = new (System.Collections.Generic.List$1(Core.ViewModels.PatchUpdateDetail)).ctor();
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = Core.Extensions.Utils.IdField, $t.Value = Bridge.toString(transportation.Id), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "IsKt", $t.Value = System.Boolean.toString(transportation.IsKt), $t));
                return ($t = new Core.ViewModels.PatchUpdate(), $t.Changes = details, $t);
            },
            GetPatchIsSubmitEntity: function (transportation) {
                var $t;
                var details = new (System.Collections.Generic.List$1(Core.ViewModels.PatchUpdateDetail)).ctor();
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = Core.Extensions.Utils.IdField, $t.Value = Bridge.toString(transportation.Id), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "IsSubmit", $t.Value = System.Boolean.toString(transportation.IsSubmit), $t));
                return ($t = new Core.ViewModels.PatchUpdate(), $t.Changes = details, $t);
            },
            GetPatchIsLockedRevenueEntity: function (transportation) {
                var $t;
                var details = new (System.Collections.Generic.List$1(Core.ViewModels.PatchUpdateDetail)).ctor();
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = Core.Extensions.Utils.IdField, $t.Value = Bridge.toString(transportation.Id), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "IsLockedRevenue", $t.Value = System.Boolean.toString(transportation.IsLockedRevenue), $t));
                return ($t = new Core.ViewModels.PatchUpdate(), $t.Changes = details, $t);
            },
            GetPatchEntity: function (transportation) {
                var $t;
                var details = new (System.Collections.Generic.List$1(Core.ViewModels.PatchUpdateDetail)).ctor();
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = Core.Extensions.Utils.IdField, $t.Value = Bridge.toString(transportation.Id), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "IsLocked", $t.Value = System.Boolean.toString(transportation.IsLocked), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "IsKt", $t.Value = System.Boolean.toString(transportation.IsKt), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "IsSubmit", $t.Value = System.Boolean.toString(transportation.IsSubmit), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "IsRequestUnLockAll", $t.Value = System.Boolean.toString(transportation.IsRequestUnLockAll), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "IsRequestUnLockExploit", $t.Value = System.Boolean.toString(transportation.IsRequestUnLockExploit), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "IsRequestUnLockAccountant", $t.Value = System.Boolean.toString(transportation.IsRequestUnLockAccountant), $t));
                return ($t = new Core.ViewModels.PatchUpdate(), $t.Changes = details, $t);
            }
        }
    });

    Bridge.define("TMS.UI.Business.Manage.TransportationListSaleBL", {
        inherits: [Core.Components.Forms.TabEditor],
        fields: {
            selected: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "Transportation");
                this.Name = "Transportation List Sale";
            }
        },
        methods: {
            ReloadExpense: function (transportation) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    grid, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        grid = Core.Components.Extensions.ComponentExt.FindComponentByName(Core.Components.GridView, this, "Expense");
                                        grid.DataSourceFilter = System.String.format("?$filter=Active eq true and TransportationId eq {0} and IsReturn eq false and (ExpenseTypeId in (15981, 15939) eq false or IsPurchasedInsurance eq true) and RequestChangeId eq null", [Bridge.box(transportation.Id, System.Int32)]);
                                        this.selected = transportation;
                                        $task1 = grid.ApplyFilter(true);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("TMS.UI.Business.Manage.TransportationPlanEditorBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        fields: {
            containerId: 0,
            Awaiter: 0
        },
        props: {
            transportationPlanEntity: {
                get: function () {
                    return Bridge.as(this.Entity, TMS.API.Models.TransportationPlan);
                }
            }
        },
        ctors: {
            init: function () {
                this.containerId = 0;
            },
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "TransportationPlan");
                this.Name = "TransportationPlan Editor";

            }
        },
        methods: {
            SetGridView: function () {
                this.ToggleApprovalBtn(null);
            },
            ToggleApprovalBtn: function (entity) {
                if (entity === void 0) { entity = null; }
                var _gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(null, null);
                Core.Components.Extensions.ComponentExt.SetShow(this, false, ["btnSave", "btnCreate", "btnApprove", "btnSend", "btnReject"]);
                if (Core.Extensions.IEnumerableExtensions.Nothing(System.Object, _gridView.RowData.Data)) {
                    Core.Components.Extensions.ComponentExt.SetShow(this, true, ["btnCreate"]);
                    return;
                }
                var listViewItem = System.Linq.Enumerable.from(_gridView.RowData.Data).select(function (x) { return Bridge.cast(x, TMS.API.Models.TransportationPlan); }).orderByDescending(function (x) {
                    return x.Id;
                }).firstOrDefault(null, null);
                if (listViewItem == null) {
                    Core.Components.Extensions.ComponentExt.SetShow(this, true, ["btnCreate"]);
                    return;
                }
                if (System.Nullable.eq(listViewItem.StatusId, Core.Enums.ApprovalStatusEnum.New) || System.Nullable.eq(listViewItem.StatusId, Core.Enums.ApprovalStatusEnum.Rejected)) {
                    Core.Components.Extensions.ComponentExt.SetShow(this, true, ["btnSend"]);
                } else if (System.Nullable.eq(listViewItem.StatusId, Core.Enums.ApprovalStatusEnum.Approving)) {
                    Core.Components.Extensions.ComponentExt.SetShow(this, true, ["btnApprove", "btnReject"]);
                } else if (System.Nullable.eq(listViewItem.StatusId, Core.Enums.ApprovalStatusEnum.Approved) || listViewItem == null) {
                    Core.Components.Extensions.ComponentExt.SetShow(this, true, ["btnCreate"]);
                }
            },
            CalcContEditor: function () {
                if (System.Nullable.gt(this.transportationPlanEntity.TotalContainerUsing, this.transportationPlanEntity.TotalContainer)) {
                    Core.Extensions.Toast.Warning("S\u1ed1 Container s\u1eed d\u1ee5ng kh\u00f4ng \u0111\u01b0\u1ee3c l\u1edbn h\u01a1n s\u1ed1 l\u01b0\u1ee3ng Container");
                    this.transportationPlanEntity.TotalContainerUsing = this.transportationPlanEntity.TotalContainer;
                }
                this.transportationPlanEntity.TotalContainerRemain = Bridge.Int.clip32(System.Nullable.sub(this.transportationPlanEntity.TotalContainer, this.transportationPlanEntity.TotalContainerUsing));
                this.UpdateView();
            },
            CompareChanges: function (change, cutting) {
                var $t, $t1, $t2;
                if (change != null) {
                    var listItem = Bridge.Reflection.getMembers(Bridge.getType(change), 16, 28);
                    var content = Core.Components.Extensions.ComponentExt.FindComponentByName(Core.Components.Section, this, "Wrapper1");
                    var gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(null, null);
                    var listViewItem = System.Linq.Enumerable.from(gridView.GetListViewItems(change), Core.Components.ListViewItem).firstOrDefault(null, null);
                    Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, content.FilterChildren$1(function (x) {
                        return true;
                    }), function (x) {
                        Core.Extensions.HtmlElementExtension.RemoveClass(x.ParentElement, "bg-warning");
                    });
                    Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, listViewItem.FilterChildren$1(function (x) {
                        return true;
                    }), function (x) {
                        Core.Extensions.HtmlElementExtension.RemoveClass(x.Element, "text-warning");
                    });
                    $t = Bridge.getEnumerator(listItem);
                    try {
                        while ($t.moveNext()) {
                            var item = { v : $t.Current };
                            var a1 = change[item.v.n];
                            var a2 = cutting[item.v.n];
                            if (a1 == null && a2 == null) {
                                continue;
                            }

                            if (a1 != null && a2 == null || a1 == null && a2 != null || a1 != null && a2 != null && !Bridge.referenceEquals(Bridge.toString(a1), Bridge.toString(a2))) {
                                Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, content.FilterChildren$1((function ($me, item) {
                                    return function (x) {
                                        return Bridge.referenceEquals(x.Name, item.v.n);
                                    };
                                })(this, item)), function (x) {
                                    Core.Extensions.HtmlElementExtension.AddClass(x.ParentElement, "bg-warning");
                                });
                                ($t1 = System.Linq.Enumerable.from(listViewItem.FilterChildren$1((function ($me, item) {
                                        return function (x) {
                                            return Bridge.referenceEquals(x.Name, item.v.n);
                                        };
                                    })(this, item)), Core.Components.EditableComponent).firstOrDefault(null, null)) != null && ($t2 = $t1.Element) != null ? Core.Extensions.HtmlElementExtension.AddClass($t2, "text-warning") : null;
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                }
            },
            SelectedCompare: function (transportationPlan) {
                this.CompareChanges(transportationPlan, this.transportationPlanEntity);
            },
            CreateRequestChange: function (transportationPlan) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $task3, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    _gridView, 
                    checkExist, 
                    requestChange, 
                    rs, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3], $step);
                                switch ($step) {
                                    case 0: {
                                        _gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(null, null);
                                        $task1 = new Core.Clients.Client.$ctor1("TransportationPlan").FirstOrDefaultAsync(TMS.API.Models.TransportationPlan, System.String.format("?$orderby=Id desc&$filter=RequestChangeId eq {0} and StatusId in ({1},{2})", Bridge.box(transportationPlan.Id, System.Int32), Bridge.box(Core.Enums.ApprovalStatusEnum.New, System.Int32), Bridge.box(Core.Enums.ApprovalStatusEnum.Approving, System.Int32)));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        checkExist = $taskResult1;
                                        if (checkExist != null) {
                                            Core.Extensions.Toast.Warning("C\u00f3 k\u1ebf y\u00eau c\u1ea7u thay \u0111\u1ed5i \u0111\u00e3 \u0111\u01b0\u1ee3c t\u1ea1o tr\u01b0\u1edbc \u0111\u00f3 vui l\u00f2ng thay \u0111\u1ed5i \u1edf d\u01b0\u1edbi l\u00e0 g\u1eedi \u0111i");
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        requestChange = new TMS.API.Models.TransportationPlan();
                                        Core.Extensions.ReflectionExt.CopyPropFrom$1(requestChange, transportationPlan);
                                        requestChange.Id = 0;
                                        requestChange.StatusId = Core.Enums.ApprovalStatusEnum.New;
                                        requestChange.RequestChangeId = transportationPlan.Id;
                                        $task2 = new Core.Clients.Client.$ctor1("TransportationPlan").CreateAsync$1(requestChange);
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        rs = $taskResult2;
                                        $task3 = _gridView.ApplyFilter();
                                        $step = 3;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $task3.getAwaitedResult();
                                        Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.ListViewItem, _gridView.AllListViewItem, function (x) {
                                            Core.Components.Extensions.ComponentExt.SetDisabled(x, false);
                                        });
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            RequestApprove: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    isValid, 
                    _gridView, 
                    listViewItem, 
                    confirm, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.IsFormValid();
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        isValid = $taskResult1;
                                        if (!isValid) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        _gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(null, null);
                                        listViewItem = System.Linq.Enumerable.from(_gridView.RowData.Data).select(function (x) { return Bridge.cast(x, TMS.API.Models.TransportationPlan); }).firstOrDefault(function (x) {
                                            return System.Nullable.eq(x.StatusId, Core.Enums.ApprovalStatusEnum.New) || System.Nullable.eq(x.StatusId, Core.Enums.ApprovalStatusEnum.Rejected);
                                        }, null);
                                        if (listViewItem == null) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        confirm = ($t = new Core.Components.Forms.ConfirmDialog(), $t.Content = "B\u1ea1n c\u00f3 ch\u1eafc ch\u1eafn g\u1eedi y\u00eau c\u1ea7u ph\u00ea duy\u1ec7t?", $t);
                                        confirm.Render();
                                        confirm.YesConfirmed = Bridge.fn.combine(confirm.YesConfirmed, Bridge.fn.bind(this, function () {
                                            var $step = 0,
                                                $task1, 
                                                $taskResult1, 
                                                $task2, 
                                                $task3, 
                                                $task4, 
                                                $jumpFromFinally, 
                                                transportations, 
                                                expenses, 
                                                checkExpenses, 
                                                confirmExpenses, 
                                                $t1, 
                                                $asyncBody = Bridge.fn.bind(this, function () {
                                                    for (;;) {
                                                        $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,10,11,12,13], $step);
                                                        switch ($step) {
                                                            case 0: {
                                                                $task1 = new Core.Clients.Client.$ctor1("Transportation").GetRawList(TMS.API.Models.Transportation, System.String.format("?$expand=Expense&$filter=Active eq true and TransportationPlanId eq {0}", [Bridge.box(this.transportationPlanEntity.Id, System.Int32)]));
                                                                $step = 1;
                                                                if ($task1.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task1.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 1: {
                                                                $taskResult1 = $task1.getAwaitedResult();
                                                                transportations = $taskResult1;
                                                                if (transportations != null && System.Linq.Enumerable.from(transportations, TMS.API.Models.Transportation).any()) {
                                                                    $step = 2;
                                                                    continue;
                                                                } else  {
                                                                    $step = 11;
                                                                    continue;
                                                                }
                                                            }
                                                            case 2: {
                                                                expenses = System.Linq.Enumerable.from(transportations, TMS.API.Models.Transportation).selectMany(function (x) {
                                                                    return x.Expense;
                                                                }).toList(TMS.API.Models.Expense);
                                                                if (expenses != null && System.Linq.Enumerable.from(expenses, TMS.API.Models.Expense).any()) {
                                                                    $step = 3;
                                                                    continue;
                                                                } else  {
                                                                    $step = 8;
                                                                    continue;
                                                                }
                                                            }
                                                            case 3: {
                                                                checkExpenses = System.Linq.Enumerable.from(expenses, TMS.API.Models.Expense).where(function (x) {
                                                                    return x.IsPurchasedInsurance;
                                                                }).any();
                                                                if (checkExpenses) {
                                                                    $step = 4;
                                                                    continue;
                                                                } else  {
                                                                    $step = 5;
                                                                    continue;
                                                                }
                                                            }
                                                            case 4: {
                                                                confirmExpenses = ($t1 = new Core.Components.Forms.ConfirmDialog(), $t1.NeedAnswer = true, $t1.ComType = "Textbox", $t1.Content = (System.String.format("Cont n\u00e0y \u0111\u00e3 \u0111\u01b0\u1ee3c mua BH. B\u1ea1n c\u00f3 mu\u1ed1n ti\u1ebfp t\u1ee5c c\u1eadp nh\u1eadt th\u00f4ng tin kh\u00f4ng ?<br />", null) || "") + "H\u00e3y nh\u1eadp l\u00fd do", $t1);
                                                                confirmExpenses.Render();
                                                                confirmExpenses.YesConfirmed = Bridge.fn.combine(confirmExpenses.YesConfirmed, Bridge.fn.bind(this, function () {
                                                                    var $step = 0,
                                                                        $task1, 
                                                                        $jumpFromFinally, 
                                                                        $t2, 
                                                                        $asyncBody = Bridge.fn.bind(this, function () {
                                                                            for (;;) {
                                                                                $step = System.Array.min([0,1], $step);
                                                                                switch ($step) {
                                                                                    case 0: {
                                                                                        listViewItem.ReasonChange = ($t2 = confirmExpenses.Textbox) != null ? $t2.Text : null;
                                                                                        $task1 = this.ActionRequest(listViewItem);
                                                                                        $step = 1;
                                                                                        if ($task1.isCompleted()) {
                                                                                            continue;
                                                                                        }
                                                                                        $task1.continue($asyncBody);
                                                                                        return;
                                                                                    }
                                                                                    case 1: {
                                                                                        $task1.getAwaitedResult();
                                                                                        return;
                                                                                    }
                                                                                    default: {
                                                                                        return;
                                                                                    }
                                                                                }
                                                                            }
                                                                        }, arguments);

                                                                    $asyncBody();
                                                                }));
                                                                $step = 7;
                                                                continue;
                                                            }
                                                            case 5: {
                                                                $task2 = this.ActionRequest(listViewItem);
                                                                $step = 6;
                                                                if ($task2.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task2.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 6: {
                                                                $task2.getAwaitedResult();
                                                                $step = 7;
                                                                continue;
                                                            }
                                                            case 7: {
                                                                $step = 10;
                                                                continue;
                                                            }
                                                            case 8: {
                                                                $task3 = this.ActionRequest(listViewItem);
                                                                $step = 9;
                                                                if ($task3.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task3.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 9: {
                                                                $task3.getAwaitedResult();
                                                                $step = 10;
                                                                continue;
                                                            }
                                                            case 10: {
                                                                $step = 13;
                                                                continue;
                                                            }
                                                            case 11: {
                                                                $task4 = this.ActionRequest(listViewItem);
                                                                $step = 12;
                                                                if ($task4.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task4.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 12: {
                                                                $task4.getAwaitedResult();
                                                                $step = 13;
                                                                continue;
                                                            }
                                                            case 13: {
                                                                return;
                                                            }
                                                            default: {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }, arguments);

                                            $asyncBody();
                                        }));
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ActionRequest: function (listViewItem) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    res, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.RequestApprove$1(listViewItem);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        res = $taskResult1;
                                        this.ProcessEnumMessage(Bridge.box(res, System.Boolean, System.Boolean.toString));
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            Approve: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    isValid, 
                    confirm, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.IsFormValid();
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        isValid = $taskResult1;
                                        if (!isValid) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        confirm = ($t = new Core.Components.Forms.ConfirmDialog(), $t.Content = "B\u1ea1n c\u00f3 ch\u1eafc ch\u1eafn ph\u00ea duy\u1ec7t?", $t);
                                        confirm.Render();
                                        confirm.YesConfirmed = Bridge.fn.combine(confirm.YesConfirmed, Bridge.fn.bind(this, function () {
                                            var $step = 0,
                                                $task1, 
                                                $taskResult1, 
                                                $task2, 
                                                $taskResult2, 
                                                $task3, 
                                                $taskResult3, 
                                                $task4, 
                                                $taskResult4, 
                                                $task5, 
                                                $taskResult5, 
                                                $task6, 
                                                $taskResult6, 
                                                $task7, 
                                                $taskResult7, 
                                                $task8, 
                                                $taskResult8, 
                                                $task9, 
                                                $jumpFromFinally, 
                                                $returnValue, 
                                                _gridView, 
                                                listViewItem, 
                                                res, 
                                                containerTypeId, 
                                                commodidtyValue, 
                                                newCommodityValue, 
                                                transportations, 
                                                transportationIds, 
                                                expenseTypes, 
                                                expenseTypeIds, 
                                                expenses, 
                                                $async_e, 
                                                $async_e1, 
                                                $asyncBody = Bridge.fn.bind(this, function () {
                                                    try {
                                                        for (;;) {
                                                            $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,17,18,20], $step);
                                                            switch ($step) {
                                                                case 0: {
                                                                    _gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(null, null);
                                                                    listViewItem = System.Linq.Enumerable.from(_gridView.RowData.Data).select(function (x) { return Bridge.cast(x, TMS.API.Models.TransportationPlan); }).firstOrDefault(function (x) {
                                                                        return System.Nullable.eq(x.StatusId, Core.Enums.ApprovalStatusEnum.Approving);
                                                                    }, null);
                                                                    $task1 = this.Client.CreateAsync(System.Boolean, listViewItem, "Approve");
                                                                    $step = 1;
                                                                    if ($task1.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task1.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 1: {
                                                                    $taskResult1 = $task1.getAwaitedResult();
                                                                    res = $taskResult1;
                                                                    if (res) {
                                                                        $step = 2;
                                                                        continue;
                                                                    } 
                                                                    $step = 20;
                                                                    continue;
                                                                }
                                                                case 2: {
                                                                    this.ProcessEnumMessage(Bridge.box(res, System.Boolean, System.Boolean.toString));
                                                                    $step = 3;
                                                                    continue;
                                                                }
                                                                case 3: {
                                                                    $task2 = this.CheckContainerType(listViewItem);
                                                                    $step = 4;
                                                                    if ($task2.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task2.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 4: {
                                                                    $taskResult2 = $task2.getAwaitedResult();
                                                                    containerTypeId = $taskResult2;
                                                                    $task3 = new Core.Clients.Client.$ctor1("CommodityValue").FirstOrDefaultAsync(TMS.API.Models.CommodityValue, System.String.format("?$filter=Active eq true and BossId eq {0} and CommodityId eq {1} and ContainerId eq {2}", Bridge.box(listViewItem.BossId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), Bridge.box(listViewItem.CommodityId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), Bridge.box(containerTypeId, System.Int32)));
                                                                    $step = 5;
                                                                    if ($task3.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task3.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 5: {
                                                                    $taskResult3 = $task3.getAwaitedResult();
                                                                    commodidtyValue = $taskResult3;
                                                                    if (commodidtyValue == null && listViewItem.BossId != null && listViewItem.CommodityId != null && listViewItem.ContainerTypeId != null && listViewItem.IsCompany === false) {
                                                                        $step = 6;
                                                                        continue;
                                                                    } 
                                                                    $step = 9;
                                                                    continue;
                                                                }
                                                                case 6: {
                                                                    $task4 = this.CreateCommodityValue(listViewItem);
                                                                    $step = 7;
                                                                    if ($task4.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task4.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 7: {
                                                                    $taskResult4 = $task4.getAwaitedResult();
                                                                    newCommodityValue = $taskResult4;
                                                                    $task5 = new Core.Clients.Client.$ctor1("CommodityValue").CreateAsync(TMS.API.Models.CommodityValue, newCommodityValue);
                                                                    $step = 8;
                                                                    if ($task5.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task5.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 8: {
                                                                    $taskResult5 = $task5.getAwaitedResult();
                                                                    $step = 9;
                                                                    continue;
                                                                }
                                                                case 9: {
                                                                    $task6 = new Core.Clients.Client.$ctor1("Transportation").GetRawList(TMS.API.Models.Transportation, System.String.format("?$filter=Active eq true and TransportationPlanId eq {0}", [Bridge.box(this.transportationPlanEntity.Id, System.Int32)]));
                                                                    $step = 10;
                                                                    if ($task6.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task6.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 10: {
                                                                    $taskResult6 = $task6.getAwaitedResult();
                                                                    transportations = $taskResult6;
                                                                    if (transportations != null) {
                                                                        $step = 11;
                                                                        continue;
                                                                    } 
                                                                    $step = 17;
                                                                    continue;
                                                                }
                                                                case 11: {
                                                                    transportationIds = System.Linq.Enumerable.from(transportations, TMS.API.Models.Transportation).select(function (x) {
                                                                        return x.Id;
                                                                    }).toList(System.Int32);
                                                                    $task7 = new Core.Clients.Client.$ctor1("MasterData").GetRawList(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and ParentId eq 7577 and (contains(Name, 'B\u1ea3o hi\u1ec3m') or contains(Name, 'BH SOC'))", null));
                                                                    $step = 12;
                                                                    if ($task7.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task7.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 12: {
                                                                    $taskResult7 = $task7.getAwaitedResult();
                                                                    expenseTypes = $taskResult7;
                                                                    expenseTypeIds = System.Linq.Enumerable.from(expenseTypes, TMS.API.Models.MasterData).select(function (x) {
                                                                        return x.Id;
                                                                    }).toList(System.Int32);
                                                                    $task8 = new Core.Clients.Client.$ctor1("Expense").GetRawList(TMS.API.Models.Expense, System.String.format("?$filter=Active eq true and TransportationId in ({0}) and ExpenseTypeId in ({1}) and RequestChangeId eq null", Core.Extensions.IEnumerableExtensions.Combine(System.Int32, transportationIds), Core.Extensions.IEnumerableExtensions.Combine(System.Int32, expenseTypeIds)));
                                                                    $step = 13;
                                                                    if ($task8.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task8.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 13: {
                                                                    $taskResult8 = $task8.getAwaitedResult();
                                                                    expenses = $taskResult8;
                                                                    if (expenses != null) {
                                                                        $step = 14;
                                                                        continue;
                                                                    } 
                                                                    $step = 16;
                                                                    continue;
                                                                }
                                                                case 14: {
                                                                    $task9 = this.UpdateExpenses(expenses, listViewItem);
                                                                    $step = 15;
                                                                    if ($task9.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task9.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 15: {
                                                                    $task9.getAwaitedResult();
                                                                    $step = 16;
                                                                    continue;
                                                                }

                                                                case 17: {
                                                                    $step = 19;
                                                                    continue;
                                                                }
                                                                case 18: {
                                                                    $async_e = null;
                                                                    $step = 19;
                                                                    continue;
                                                                }

                                                                case 20: {
                                                                    return;
                                                                }
                                                                default: {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    } catch($async_e1) {
                                                        $async_e = System.Exception.create($async_e1);
                                                        if ( $step >= 3 && $step <= 17 ) {
                                                            $step = 18;
                                                            $asyncBody();
                                                            return;
                                                        }
                                                        throw $async_e;
                                                    }
                                                }, arguments);

                                            $asyncBody();
                                        }));
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            UpdateExpenses: function (expenses, listViewItem) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $task3, 
                    $task4, 
                    $taskResult4, 
                    $task5, 
                    $taskResult5, 
                    $task6, 
                    $taskResult6, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    expenseType, 
                    $t, 
                    item, 
                    requestChange, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = new Core.Clients.Client.$ctor1("MasterData").FirstOrDefaultAsync(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and ParentId eq 7577 and contains(Name, 'B\u1ea3o hi\u1ec3m')", null));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        expenseType = $taskResult1;
                                        $t = Bridge.getEnumerator(expenses);
                                        $step = 2;
                                        continue;
                                    }
                                    case 2: {
                                        if ($t.moveNext()) {
                                            item = $t.Current;
                                            $step = 3;
                                            continue;
                                        }
                                        $step = 17;
                                        continue;
                                    }
                                    case 3: {
                                        if (System.Nullable.neq(item.SaleId, listViewItem.UserId) || System.Nullable.neq(item.ContainerTypeId, listViewItem.ContainerTypeId) || System.Nullable.neq(item.BossId, listViewItem.BossId) || System.Nullable.neq(item.TransportationTypeId, listViewItem.TransportationTypeId) || (System.Nullable.neq(item.CommodityId, listViewItem.CommodityId) && System.Nullable.eq(item.ExpenseTypeId, expenseType.Id)) || System.Nullable.neq(item.JourneyId, item.JourneyId) || (!Bridge.equals(item.StartShip, listViewItem.ClosingDate) && (System.Nullable.eq(item.JourneyId, 12114) || System.Nullable.eq(item.JourneyId, 16001))) || System.Nullable.neq(item.RouteId, listViewItem.RouteId) || item.IsWet !== listViewItem.IsWet || item.IsBought !== listViewItem.IsBought || item.SteamingTerms !== listViewItem.SteamingTerms || item.BreakTerms !== listViewItem.BreakTerms || System.Nullable.neq(item.CustomerTypeId, item.CustomerTypeId) || System.Nullable.liftne("ne", item.CommodityValue, listViewItem.CommodityValue) || System.Nullable.neq(item.ReceivedId, listViewItem.ReceivedId)) {
                                            $step = 4;
                                            continue;
                                        } 
                                        $step = 16;
                                        continue;
                                    }
                                    case 4: {
                                        this.SetInfoChangeExpense(item, listViewItem, expenseType);
                                        if (item.IsPurchasedInsurance === false) {
                                            $step = 5;
                                            continue;
                                        } else  {
                                            $step = 12;
                                            continue;
                                        }
                                    }
                                    case 5: {
                                        if (System.Nullable.eq(item.ExpenseTypeId, expenseType.Id)) {
                                            $step = 6;
                                            continue;
                                        } else  {
                                            $step = 8;
                                            continue;
                                        }
                                    }
                                    case 6: {
                                        $task2 = this.CalcInsuranceFees(item, false);
                                        $step = 7;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 7: {
                                        $task2.getAwaitedResult();
                                        $step = 10;
                                        continue;
                                    }
                                    case 8: {
                                        $task3 = this.CalcInsuranceFees(item, true);
                                        $step = 9;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 9: {
                                        $task3.getAwaitedResult();
                                        $step = 10;
                                        continue;
                                    }
                                    case 10: {
                                        $task4 = new Core.Clients.Client.$ctor1("Expense").UpdateAsync(TMS.API.Models.Expense, item);
                                        $step = 11;
                                        if ($task4.isCompleted()) {
                                            continue;
                                        }
                                        $task4.continue($asyncBody);
                                        return;
                                    }
                                    case 11: {
                                        $taskResult4 = $task4.getAwaitedResult();
                                        $step = 15;
                                        continue;
                                    }
                                    case 12: {
                                        requestChange = new TMS.API.Models.Expense();
                                        Core.Extensions.ReflectionExt.CopyPropFrom$1(requestChange, item);
                                        requestChange.Id = 0;
                                        requestChange.StatusId = Core.Enums.ApprovalStatusEnum.Approving;
                                        requestChange.RequestChangeId = item.Id;
                                        requestChange.Reason = listViewItem.ReasonChange;
                                        item.StatusId = Core.Enums.ApprovalStatusEnum.Approving;
                                        $task5 = new Core.Clients.Client.$ctor1("Expense").PatchAsync(TMS.API.Models.Expense, this.GetPatchEntityApprove(item));
                                        $step = 13;
                                        if ($task5.isCompleted()) {
                                            continue;
                                        }
                                        $task5.continue($asyncBody);
                                        return;
                                    }
                                    case 13: {
                                        $taskResult5 = $task5.getAwaitedResult();
                                        $task6 = new Core.Clients.Client.$ctor1("Expense").PostAsync(System.Boolean, requestChange, "RequestApprove");
                                        $step = 14;
                                        if ($task6.isCompleted()) {
                                            continue;
                                        }
                                        $task6.continue($asyncBody);
                                        return;
                                    }
                                    case 14: {
                                        $taskResult6 = $task6.getAwaitedResult();
                                        $step = 15;
                                        continue;
                                    }

                                    case 16: {
                                        $step = 2;
                                        continue;
                                    }
                                    case 17: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            SetInfoChangeExpense: function (item, listViewItem, expenseType) {
                if (System.Nullable.neq(item.TransportationTypeId, listViewItem.TransportationTypeId)) {
                    item.TransportationTypeId = listViewItem.TransportationTypeId;
                }
                if (System.Nullable.neq(item.BossId, listViewItem.BossId)) {
                    item.BossId = listViewItem.BossId;
                }
                if (System.Nullable.neq(item.SaleId, listViewItem.UserId)) {
                    item.SaleId = listViewItem.UserId;
                }
                if (System.Nullable.neq(item.CommodityId, listViewItem.CommodityId) && System.Nullable.eq(item.ExpenseTypeId, expenseType.Id)) {
                    item.CommodityId = listViewItem.CommodityId;
                }
                if (System.Nullable.neq(item.RouteId, listViewItem.RouteId)) {
                    item.RouteId = listViewItem.RouteId;
                }
                if (System.Nullable.neq(item.ContainerTypeId, listViewItem.ContainerTypeId)) {
                    item.ContainerTypeId = listViewItem.ContainerTypeId;
                }
                if (System.Nullable.neq(item.JourneyId, listViewItem.JourneyId)) {
                    item.JourneyId = listViewItem.JourneyId;
                }
                if (!Bridge.equals(item.StartShip, listViewItem.ClosingDate) && (System.Nullable.eq(item.JourneyId, 12114) || System.Nullable.eq(item.JourneyId, 16001))) {
                    item.StartShip = listViewItem.ClosingDate;
                }
                if (item.IsBought !== listViewItem.IsBought) {
                    item.IsBought = listViewItem.IsBought;
                }
                if (item.IsWet !== listViewItem.IsWet) {
                    item.IsWet = listViewItem.IsWet;
                }
                if (item.SteamingTerms !== listViewItem.SteamingTerms) {
                    item.SteamingTerms = listViewItem.SteamingTerms;
                }
                if (item.BreakTerms !== listViewItem.BreakTerms) {
                    item.BreakTerms = listViewItem.BreakTerms;
                }
                if (System.Nullable.neq(item.CustomerTypeId, listViewItem.CustomerTypeId)) {
                    item.CustomerTypeId = listViewItem.CustomerTypeId;
                }
                if (System.Nullable.liftne("ne", item.CommodityValue, listViewItem.CommodityValue)) {
                    item.CommodityValue = listViewItem.CommodityValue;
                }
                if (System.Nullable.neq(item.ReceivedId, listViewItem.ReceivedId)) {
                    item.ReceivedId = listViewItem.ReceivedId;
                }
                if (item.IsCompany !== listViewItem.IsCompany) {
                    item.IsCompany = listViewItem.IsCompany;
                }
            },
            Reject: function () {
                var $t;
                var confirm = ($t = new Core.Components.Forms.ConfirmDialog(), $t.NeedAnswer = true, $t.ComType = "Textbox", $t.Content = (System.String.format("B\u1ea1n c\u00f3 ch\u1eafc ch\u1eafn mu\u1ed1n tr\u1ea3 v\u1ec1?<br />", null) || "") + "H\u00e3y nh\u1eadp l\u00fd do tr\u1ea3 v\u1ec1", $t);
                confirm.Render();
                confirm.YesConfirmed = Bridge.fn.combine(confirm.YesConfirmed, Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        _gridView, 
                        listViewItem, 
                        res, 
                        $t1, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        _gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(null, null);
                                        listViewItem = System.Linq.Enumerable.from(_gridView.RowData.Data).select(function (x) { return Bridge.cast(x, TMS.API.Models.TransportationPlan); }).firstOrDefault(function (x) {
                                            return System.Nullable.eq(x.StatusId, Core.Enums.ApprovalStatusEnum.Approving);
                                        }, null);
                                        Core.Extensions.ReflectionExt.ClearReferences(listViewItem);
                                        $task1 = this.Client.CreateAsync(System.Object, listViewItem, "Reject?reasonOfChange=" + ((($t1 = confirm.Textbox) != null ? $t1.Text : null) || ""));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        res = $taskResult1;
                                        this.ProcessEnumMessage(res);
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }));
            },
            Analysis: function (transportationPlan) {
                if (transportationPlan.TransportationTypeId == null || transportationPlan.BossId == null || transportationPlan.CommodityId == null || transportationPlan.ContainerTypeId == null || transportationPlan.RouteId == null) {
                    return;
                }
                window.clearTimeout(this.Awaiter);
                this.Awaiter = window.setTimeout(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $task2, 
                        $taskResult2, 
                        $task3, 
                        $taskResult3, 
                        $task4, 
                        $taskResult4, 
                        $task5, 
                        $taskResult5, 
                        $task6, 
                        $taskResult6, 
                        $task7, 
                        $jumpFromFinally, 
                        containerId, 
                        commodityValueDB, 
                        transportations, 
                        transportationIds, 
                        expenseTypes, 
                        expenseTypeIds, 
                        expenses, 
                        checkPurchasedInsurance, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7,8,9], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.CheckContainerType(transportationPlan);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        containerId = $taskResult1;
                                        $task2 = new Core.Clients.Client.$ctor1("CommodityValue").FirstOrDefaultAsync(TMS.API.Models.CommodityValue, System.String.format("?$filter=Active eq true and BossId eq {0} and CommodityId eq {1} and ContainerId eq {2}", Bridge.box(transportationPlan.BossId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), Bridge.box(transportationPlan.CommodityId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), Bridge.box(containerId, System.Int32)));
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        commodityValueDB = $taskResult2;
                                        if (commodityValueDB != null && transportationPlan.TransportationTypeId != null) {
                                            if (commodityValueDB != null) {
                                                transportationPlan.JourneyId = commodityValueDB.JourneyId;
                                                transportationPlan.IsWet = commodityValueDB.IsWet;
                                            } else {
                                                if (transportationPlan.TransportationTypeId != null) {
                                                    if (System.Nullable.neq(transportationPlan.TransportationTypeId, 11673)) {
                                                        transportationPlan.JourneyId = 12114;
                                                        transportationPlan.IsWet = false;
                                                    } else {
                                                        transportationPlan.JourneyId = null;
                                                    }
                                                }
                                            }
                                        }
                                        if (commodityValueDB != null) {
                                            transportationPlan.IsBought = commodityValueDB.IsBought;
                                            transportationPlan.CustomerTypeId = commodityValueDB.CustomerTypeId;
                                            transportationPlan.CommodityValue = commodityValueDB.TotalPrice;
                                            Core.Extensions.Toast.Success("GTHH \u0111\u00e3 t\u1ed3n t\u1ea1i trong h\u1ec7 th\u1ed1ng v\u1edbi gi\u00e1 tr\u1ecb l\u00e0: " + (Bridge.Int.format(System.Decimal(transportationPlan.CommodityValue.toString()), "N0") || ""));
                                        }
                                        $task3 = new Core.Clients.Client.$ctor1("TransportationPlan").PatchAsync(System.Object, this.GetPatchEntity(transportationPlan));
                                        $step = 3;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        $task4 = new Core.Clients.Client.$ctor1("Transportation").GetRawList(TMS.API.Models.Transportation, System.String.format("?$filter=Active eq true and TransportationPlanId eq {0}", [Bridge.box(this.transportationPlanEntity.Id, System.Int32)]));
                                        $step = 4;
                                        if ($task4.isCompleted()) {
                                            continue;
                                        }
                                        $task4.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $taskResult4 = $task4.getAwaitedResult();
                                        transportations = $taskResult4;
                                        transportationIds = System.Linq.Enumerable.from(transportations, TMS.API.Models.Transportation).select(function (x) {
                                            return x.Id;
                                        }).toList(System.Int32);
                                        $task5 = new Core.Clients.Client.$ctor1("MasterData").GetRawList(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and ParentId eq 7577 and (contains(Name, 'B\u1ea3o hi\u1ec3m') or contains(Name, 'SOC'))", null));
                                        $step = 5;
                                        if ($task5.isCompleted()) {
                                            continue;
                                        }
                                        $task5.continue($asyncBody);
                                        return;
                                    }
                                    case 5: {
                                        $taskResult5 = $task5.getAwaitedResult();
                                        expenseTypes = $taskResult5;
                                        expenseTypeIds = System.Linq.Enumerable.from(expenseTypes, TMS.API.Models.MasterData).select(function (x) {
                                            return x.Id;
                                        }).toList(System.Int32);
                                        $task6 = new Core.Clients.Client.$ctor1("Expense").GetRawList(TMS.API.Models.Expense, System.String.format("?$filter=Active eq true and TransportationId in ({0}) and ExpenseTypeId in ({1})", Core.Extensions.IEnumerableExtensions.Combine(System.Int32, transportationIds), Core.Extensions.IEnumerableExtensions.Combine(System.Int32, expenseTypeIds)));
                                        $step = 6;
                                        if ($task6.isCompleted()) {
                                            continue;
                                        }
                                        $task6.continue($asyncBody);
                                        return;
                                    }
                                    case 6: {
                                        $taskResult6 = $task6.getAwaitedResult();
                                        expenses = $taskResult6;
                                        checkPurchasedInsurance = System.Linq.Enumerable.from(expenses, TMS.API.Models.Expense).select(function (x) {
                                            return x.IsPurchasedInsurance === false;
                                        }).any();
                                        if ((commodityValueDB == null || (transportationPlan.TransportationTypeId != null && transportationPlan.JourneyId == null)) && checkPurchasedInsurance) {
                                            $step = 7;
                                            continue;
                                        } 
                                        $step = 9;
                                        continue;
                                    }
                                    case 7: {
                                        $task7 = this.SettingsCommodityValue(transportationPlan);
                                        $step = 8;
                                        if ($task7.isCompleted()) {
                                            continue;
                                        }
                                        $task7.continue($asyncBody);
                                        return;
                                    }
                                    case 8: {
                                        $task7.getAwaitedResult();
                                        $step = 9;
                                        continue;
                                    }
                                    case 9: {
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }), 500);
            },
            SettingsCommodityValue: function (transportationPlan) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "SettingsCommodityValue", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Setting.SettingsCommodityValueBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "C\u1ea5u h\u00ecnh b\u1ea3o hi\u1ec3m v\u00e0 GTHH";
                                            instance.Entity = transportationPlan;
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CheckContainerType: function (transportationPlan) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    containerTypes, 
                    containerTypeCodes, 
                    $t, 
                    containerTypeName, 
                    containers, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = new Core.Clients.Client.$ctor1("MasterData").GetRawList(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and ParentId eq 7565", null));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        containerTypes = $taskResult1;
                                        containerTypeCodes = ($t = TMS.API.Models.MasterData, System.Linq.Enumerable.from(containerTypes, $t).toDictionary(function (x) {
                                            return x.Id;
                                        }, null, System.Int32, $t));
                                        containerTypeName = System.Collections.Generic.CollectionExtensions.GetValueOrDefault(System.Int32, TMS.API.Models.MasterData, containerTypeCodes, System.Nullable.getValue(transportationPlan.ContainerTypeId));
                                        $task2 = new Core.Clients.Client.$ctor1("MasterData").GetRawList(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and (contains(Name, '40HC') or contains(Name, '20DC') or contains(Name, '45HC') or contains(Name, '50DC'))", null));
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        containers = $taskResult2;
                                        if (System.String.contains(containerTypeName.Description,"Cont 20")) {
                                            this.containerId = containers.Find(function (x) {
                                                return System.String.contains(x.Name,"20DC");
                                            }).Id;
                                        } else if (System.String.contains(containerTypeName.Description,"Cont 40")) {
                                            this.containerId = containers.Find(function (x) {
                                                return System.String.contains(x.Name,"40HC");
                                            }).Id;
                                        } else if (System.String.contains(containerTypeName.Description,"Cont 45")) {
                                            this.containerId = containers.Find(function (x) {
                                                return System.String.contains(x.Name,"45HC");
                                            }).Id;
                                        } else if (System.String.contains(containerTypeName.Description,"Cont 50")) {
                                            this.containerId = containers.Find(function (x) {
                                                return System.String.contains(x.Name,"50DC");
                                            }).Id;
                                        }
                                        $tcs.setResult(this.containerId);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            SetPolicy: function (transportationPlan) {
                window.clearTimeout(this.Awaiter);
                this.Awaiter = window.setTimeout(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $task2, 
                        $taskResult2, 
                        $task3, 
                        $taskResult3, 
                        $task4, 
                        $taskResult4, 
                        $jumpFromFinally, 
                        gridView, 
                        listViewItem, 
                        components, 
                        operators, 
                        settingPolicys, 
                        listpolicy, 
                        componentrs, 
                        operatorrs, 
                        query, 
                        rs, 
                        data, 
                        index, 
                        $t, 
                        item, 
                        detail, 
                        $t1, 
                        build, 
                        str, 
                        check, 
                        patchModel, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,10,11,13], $step);
                                switch ($step) {
                                    case 0: {
                                        gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(null, null);
                                        listViewItem = System.Linq.Enumerable.from(gridView.GetListViewItems(transportationPlan), Core.Components.ListViewItem).firstOrDefault(null, null);
                                        if (transportationPlan.RouteId != null || transportationPlan.BossId != null) {
                                            $step = 1;
                                            continue;
                                        } 
                                        $step = 13;
                                        continue;
                                    }
                                    case 1: {
                                        components = new Core.Clients.Client.$ctor1("GridPolicy").GetRawList(TMS.API.Models.GridPolicy, "?$filter=Id in (20268)");
                                        operators = new Core.Clients.Client.$ctor1("MasterData").GetRawList(TMS.API.Models.MasterData, "?$filter=Parent/Name eq 'Operator'");
                                        settingPolicys = new Core.Clients.Client.$ctor1("SettingPolicy").GetRawList(TMS.API.Models.SettingPolicy, System.String.format("?$expand=SettingPolicyDetail&$filter=TypeId eq 2 and TransportationTypeId ne 11677", null));
                                        $task1 = System.Threading.Tasks.Task.whenAll(components, operators, settingPolicys);
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $task1.getAwaitedResult();
                                        listpolicy = settingPolicys.getResult();
                                        componentrs = components.getResult();
                                        operatorrs = operators.getResult();
                                        query = new (System.Collections.Generic.List$1(System.String)).ctor();
                                        rs = System.Linq.Enumerable.from(listpolicy, TMS.API.Models.SettingPolicy).selectMany(function (item) {
                                            var $t;
                                            var detail = ($t = TMS.API.Models.SettingPolicyDetail, System.Linq.Enumerable.from(item.SettingPolicyDetail, $t).toList($t));
                                            var build = System.Linq.Enumerable.from(detail, TMS.API.Models.SettingPolicyDetail).groupBy(function (z) {
                                                return z.ComponentId;
                                            }).selectMany(function (y) {
                                                var group = System.Linq.Enumerable.from(y.toList(TMS.API.Models.SettingPolicyDetail), TMS.API.Models.SettingPolicyDetail).select(function (l) {
                                                    var $t1;
                                                    var component = System.Linq.Enumerable.from(componentrs, TMS.API.Models.GridPolicy).firstOrDefault(function (k) {
                                                        return System.Nullable.eq(k.Id, l.ComponentId);
                                                    }, null);
                                                    if (component == null) {
                                                        return null;
                                                    }
                                                    var ope = System.Linq.Enumerable.from(operatorrs, TMS.API.Models.MasterData).firstOrDefault(function (k) {
                                                        return System.Nullable.eq(k.Id, l.OperatorId);
                                                    }, null);
                                                    if (Bridge.referenceEquals(component.ComponentType, "Dropdown") || Bridge.referenceEquals(component.ComponentType, "SearchEntry")) {
                                                        var format = System.String.replaceAll(($t1 = component.FormatCell.split("}"))[System.Array.index(0, $t1)], "{", "");
                                                        return new Core.Clients.Client.$ctor1(component.RefName).GetRawList(System.Object, System.String.format(System.String.format("?$select=Id&$filter={0}", [ope.Name]), format, l.Value), false, false, false, component.RefName);
                                                    } else {
                                                        return null;
                                                    }
                                                });
                                                return group;
                                            }).toList(System.Threading.Tasks.Task$1(System.Collections.Generic.List$1(System.Object)));
                                            return build;
                                        }).where(function (x) {
                                            return x != null;
                                        }).toList(System.Threading.Tasks.Task$1(System.Collections.Generic.List$1(System.Object)));
                                        $task2 = System.Threading.Tasks.Task.whenAll(rs);
                                        $step = 3;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        data = $taskResult2;
                                        index = 0;
                                        $t = Bridge.getEnumerator(listpolicy);
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        if ($t.moveNext()) {
                                            item = $t.Current;
                                            $step = 5;
                                            continue;
                                        }
                                        $step = 12;
                                        continue;
                                    }
                                    case 5: {
                                        detail = ($t1 = TMS.API.Models.SettingPolicyDetail, System.Linq.Enumerable.from(item.SettingPolicyDetail, $t1).toList($t1));
                                        build = System.Linq.Enumerable.from(detail, TMS.API.Models.SettingPolicyDetail).groupBy(function (z) {
                                            return z.ComponentId;
                                        }).select(function (y) {
                                            var listAnd = new (System.Collections.Generic.List$1(System.String)).ctor();
                                            var group = System.Linq.Enumerable.from(y.toList(TMS.API.Models.SettingPolicyDetail), TMS.API.Models.SettingPolicyDetail).select(function (l) {
                                                var $t2;
                                                var component = System.Linq.Enumerable.from(componentrs, TMS.API.Models.GridPolicy).firstOrDefault(function (k) {
                                                    return System.Nullable.eq(k.Id, l.ComponentId);
                                                }, null);
                                                if (component == null) {
                                                    return null;
                                                }
                                                var ope = System.Linq.Enumerable.from(operatorrs, TMS.API.Models.MasterData).firstOrDefault(function (k) {
                                                    return System.Nullable.eq(k.Id, l.OperatorId);
                                                }, null);
                                                if (Bridge.referenceEquals(component.ComponentType, "Dropdown") || Bridge.referenceEquals(component.ComponentType, "SearchEntry")) {
                                                    var rsdynamic = data[System.Array.index(index, data)];
                                                    index = (index + 1) | 0;
                                                    if (System.Linq.Enumerable.from(rsdynamic, System.Object).any()) {
                                                        var ids = Core.Extensions.IEnumerableExtensions.Combine(System.Int32, System.Linq.Enumerable.from(rsdynamic, System.Object).select(function (x) {
                                                            return x.Id;
                                                        }).select(function (x) {{ return Bridge.cast(x, System.Int32); }}));
                                                        var format = System.String.replaceAll(($t2 = component.FormatCell.split("}"))[System.Array.index(0, $t2)], "{", "");
                                                        if (Bridge.referenceEquals(ope.Description, "Ch\u1ee9a") || Bridge.referenceEquals(ope.Description, "B\u1eb1ng")) {
                                                            return System.String.format("{0} in ({1})", component.FieldName, ids);
                                                        } else {
                                                            return System.String.format("{0} in ({1}) eq false", component.FieldName, ids);
                                                        }
                                                    } else {
                                                        return null;
                                                    }
                                                } else {
                                                    listAnd.add(System.String.format("{0}", [System.String.format(ope.Name, component.FieldName, l.Value)]));
                                                    return null;
                                                }
                                            }).where(function (x) {
                                                return !Bridge.referenceEquals(x, "()") && !Core.Extensions.StringExt.IsNullOrWhiteSpace(x);
                                            }).toList(System.String);
                                            return ((group.Count === 0 ? "" : System.String.format("({0})", [Core.Extensions.IEnumerableExtensions.Combine(System.String, System.Linq.Enumerable.from(group, System.String).where(function (x) {
                                                return !Bridge.referenceEquals(x, "()") && !Core.Extensions.StringExt.IsNullOrWhiteSpace(x);
                                            }), " or ")])) || "") + ((listAnd.Count === 0 ? "" : System.String.format(" {0}", [Core.Extensions.IEnumerableExtensions.Combine(System.String, System.Linq.Enumerable.from(listAnd, System.String).where(function (x) {
                                                return !Core.Extensions.StringExt.IsNullOrWhiteSpace(x);
                                            }), " and ")])) || "");
                                        }).toList(System.String);
                                        str = Core.Extensions.IEnumerableExtensions.Combine(System.String, System.Linq.Enumerable.from(build, System.String).where(function (x) {
                                            return !Bridge.referenceEquals(x, "()") && !Core.Extensions.StringExt.IsNullOrWhiteSpace(x);
                                        }), " or ");
                                        query.add(str);
                                        check = null;
                                        if (!System.String.isNullOrWhiteSpace(str)) {
                                            $step = 6;
                                            continue;
                                        } 
                                        $step = 8;
                                        continue;
                                    }
                                    case 6: {
                                        $task3 = new Core.Clients.Client.$ctor1("TransportationPlan").FirstOrDefaultAsync(TMS.API.Models.TransportationPlan, System.String.format("?$filter=Active eq true and Id eq {0} and ({1}) and RequestChangeId ne null and StatusId eq 2", Bridge.box(transportationPlan.Id, System.Int32), str));
                                        $step = 7;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 7: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        check = $taskResult3;
                                        $step = 8;
                                        continue;
                                    }
                                    case 8: {
                                        if (check != null) {
                                            $step = 9;
                                            continue;
                                        } 
                                        $step = 11;
                                        continue;
                                    }
                                    case 9: {
                                        transportationPlan.TransportationTypeId = item.TransportationTypeId;
                                        patchModel = this.GetPatchEntity(transportationPlan);
                                        $task4 = new Core.Clients.Client.$ctor1("TransportationPlan").PatchAsync(System.Object, patchModel);
                                        $step = 10;
                                        if ($task4.isCompleted()) {
                                            continue;
                                        }
                                        $task4.continue($asyncBody);
                                        return;
                                    }
                                    case 10: {
                                        $taskResult4 = $task4.getAwaitedResult();
                                        $step = 11;
                                        continue;
                                    }
                                    case 11: {
                                        $step = 4;
                                        continue;
                                    }

                                    case 13: {
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }), 500);
            },
            CalcInsuranceFees: function (expense, isSOC) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $task3, 
                    $taskResult3, 
                    $task4, 
                    $taskResult4, 
                    $task5, 
                    $taskResult5, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    isSubRatio, 
                    journeyId, 
                    insuranceFeesRateDB, 
                    getContainerType, 
                    insuranceFeesRateColdDB, 
                    extraInsuranceFeesRateDB, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,17,18,19], $step);
                                switch ($step) {
                                    case 0: {
                                        if (expense.TransportationTypeId == null || expense.JourneyId == null) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        isSubRatio = false;
                                        if (((expense.IsWet || expense.SteamingTerms || expense.BreakTerms) && expense.IsBought === false) || (expense.IsBought && expense.IsWet)) {
                                            isSubRatio = true;
                                        }
                                        journeyId = expense.JourneyId == null ? "" : "and JourneyId eq " + (System.Nullable.toString(expense.JourneyId, null) || "");
                                        insuranceFeesRateDB = null;
                                        if (expense.IsBought) {
                                            $step = 1;
                                            continue;
                                        } else  {
                                            $step = 3;
                                            continue;
                                        }
                                    }
                                    case 1: {
                                        $task1 = new Core.Clients.Client.$ctor1("InsuranceFeesRate").FirstOrDefaultAsync(TMS.API.Models.InsuranceFeesRate, System.String.format("?$filter=Active eq true and TransportationTypeId eq {0} {1} and IsBought eq {2} and IsSOC eq {3} and IsSubRatio eq {4}", Bridge.box(expense.TransportationTypeId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), journeyId, System.Boolean.toString(expense.IsBought).toLowerCase(), System.Boolean.toString(isSOC).toLowerCase(), System.Boolean.toString(isSubRatio).toLowerCase()));
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        insuranceFeesRateDB = $taskResult1;
                                        $step = 5;
                                        continue;
                                    }
                                    case 3: {
                                        $task2 = new Core.Clients.Client.$ctor1("InsuranceFeesRate").FirstOrDefaultAsync(TMS.API.Models.InsuranceFeesRate, System.String.format("?$filter=Active eq true and TransportationTypeId eq {0} {1} and IsBought eq {2} and IsSOC eq {3}", Bridge.box(expense.TransportationTypeId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), journeyId, System.Boolean.toString(expense.IsBought).toLowerCase(), System.Boolean.toString(isSOC).toLowerCase()));
                                        $step = 4;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        insuranceFeesRateDB = $taskResult2;
                                        $step = 5;
                                        continue;
                                    }
                                    case 5: {
                                        if (insuranceFeesRateDB != null) {
                                            $step = 6;
                                            continue;
                                        } else  {
                                            $step = 18;
                                            continue;
                                        }
                                    }
                                    case 6: {
                                        if (System.Nullable.eq(expense.ExpenseTypeId, 15981)) {
                                            $step = 7;
                                            continue;
                                        } else  {
                                            $step = 8;
                                            continue;
                                        }
                                    }
                                    case 7: {
                                        expense.InsuranceFeeRate = insuranceFeesRateDB.Rate;
                                        $step = 17;
                                        continue;
                                    }
                                    case 8: {
                                        $task3 = new Core.Clients.Client.$ctor1("MasterData").FirstOrDefaultAsync(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and Id eq {0}", [Bridge.box(expense.ContainerTypeId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]));
                                        $step = 9;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 9: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        getContainerType = $taskResult3;
                                        if (getContainerType != null && System.String.contains(getContainerType.Description.toLowerCase(),"l\u1ea1nh") && System.Nullable.eq(insuranceFeesRateDB.TransportationTypeId, 11673) && System.Nullable.eq(insuranceFeesRateDB.JourneyId, 12114)) {
                                            $step = 10;
                                            continue;
                                        } else  {
                                            $step = 12;
                                            continue;
                                        }
                                    }
                                    case 10: {
                                        $task4 = new Core.Clients.Client.$ctor1("MasterData").FirstOrDefaultAsync(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and Id eq 25391", null));
                                        $step = 11;
                                        if ($task4.isCompleted()) {
                                            continue;
                                        }
                                        $task4.continue($asyncBody);
                                        return;
                                    }
                                    case 11: {
                                        $taskResult4 = $task4.getAwaitedResult();
                                        insuranceFeesRateColdDB = $taskResult4;
                                        expense.InsuranceFeeRate = insuranceFeesRateColdDB != null ? System.Decimal(insuranceFeesRateColdDB.Name) : System.Decimal(0);
                                        $step = 13;
                                        continue;
                                    }
                                    case 12: {
                                        expense.InsuranceFeeRate = insuranceFeesRateDB.Rate;
                                        $step = 13;
                                        continue;
                                    }
                                    case 13: {
                                        if (insuranceFeesRateDB.IsSubRatio && expense.IsBought === false) {
                                            $step = 14;
                                            continue;
                                        } 
                                        $step = 16;
                                        continue;
                                    }
                                    case 14: {
                                        $task5 = new Core.Clients.Client.$ctor1("MasterData").GetRawList(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and ParentId eq 25374", null));
                                        $step = 15;
                                        if ($task5.isCompleted()) {
                                            continue;
                                        }
                                        $task5.continue($asyncBody);
                                        return;
                                    }
                                    case 15: {
                                        $taskResult5 = $task5.getAwaitedResult();
                                        extraInsuranceFeesRateDB = $taskResult5;
                                        extraInsuranceFeesRateDB.ForEach(function (x) {
                                            var prop = System.Linq.Enumerable.from(Bridge.Reflection.getMembers(Bridge.getType(expense), 16, 28), System.Reflection.PropertyInfo).where(function (y) {
                                                return Bridge.referenceEquals(y.n, x.Name) && System.Boolean.parse(Bridge.toString(Bridge.Reflection.midel(y.g, expense).apply(null, null)));
                                            }).firstOrDefault(null, null);
                                            if (prop != null) {
                                                expense.InsuranceFeeRate = System.Nullable.lift2("add", expense.InsuranceFeeRate, System.Decimal(x.Code));
                                            }
                                        });
                                        $step = 16;
                                        continue;
                                    }

                                    case 17: {
                                        $step = 19;
                                        continue;
                                    }
                                    case 18: {
                                        expense.InsuranceFeeRate = System.Decimal(0);
                                        expense.TotalPriceBeforeTax = System.Decimal(0);
                                        expense.TotalPriceAfterTax = System.Decimal(0);
                                        $step = 19;
                                        continue;
                                    }
                                    case 19: {
                                        if (insuranceFeesRateDB != null && System.Nullable.eq(insuranceFeesRateDB.IsVAT, true)) {
                                            this.CalcInsuranceFeeNoVAT(expense);
                                        } else if (insuranceFeesRateDB != null && System.Nullable.eq(insuranceFeesRateDB.IsVAT, false)) {
                                            this.CalcInsuranceFee(expense);
                                        }
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CalcInsuranceFee: function (expense) {
                expense.TotalPriceBeforeTax = System.Nullable.getValue(expense.InsuranceFeeRate).mul(System.Nullable.getValue(expense.CommodityValue)).div(System.Decimal(100));
                expense.TotalPriceAfterTax = expense.TotalPriceBeforeTax.add(System.Decimal.toDecimalPlaces(expense.TotalPriceBeforeTax.mul(expense.Vat).div(System.Decimal(100)), 0, 6));
            },
            CalcInsuranceFeeNoVAT: function (expense) {
                expense.TotalPriceAfterTax = System.Nullable.getValue(expense.InsuranceFeeRate).mul(System.Nullable.getValue(expense.CommodityValue)).div(System.Decimal(100));
                expense.TotalPriceBeforeTax = System.Decimal.toDecimalPlaces(expense.TotalPriceAfterTax.div(System.Decimal(1.1, 1)), 0, 6);
            },
            CreateCommodityValue: function (transportationPlan) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    startDate1, 
                    endDate1, 
                    startDate2, 
                    endDate2, 
                    containerId, 
                    newCommodityValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        startDate1 = System.DateTime.create(System.DateTime.getYear(System.DateTime.getNow()), 1, 1);
                                        endDate1 = System.DateTime.create(System.DateTime.getYear(System.DateTime.getNow()), 6, 30);
                                        startDate2 = System.DateTime.create(System.DateTime.getYear(System.DateTime.getNow()), 7, 1);
                                        endDate2 = System.DateTime.create(System.DateTime.getYear(System.DateTime.getNow()), 12, 31);
                                        $task1 = this.CheckContainerType(transportationPlan);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        containerId = $taskResult1;
                                        newCommodityValue = new TMS.API.Models.CommodityValue();
                                        Core.Extensions.ReflectionExt.CopyPropFrom$1(newCommodityValue, transportationPlan);
                                        newCommodityValue.Id = 0;
                                        newCommodityValue.ContainerId = containerId;
                                        newCommodityValue.TotalPrice = System.Nullable.getValue(transportationPlan.CommodityValue);
                                        newCommodityValue.SaleId = transportationPlan.UserId;
                                        newCommodityValue.StartDate = System.DateTime.getDate(System.DateTime.getNow());
                                        newCommodityValue.Notes = "";
                                        newCommodityValue.Active = true;
                                        newCommodityValue.InsertedDate = System.DateTime.getDate(System.DateTime.getNow());
                                        newCommodityValue.CreatedBy = transportationPlan.InsertedBy;
                                        if (System.DateTime.gte(System.DateTime.getDate(System.DateTime.getNow()), startDate1) && System.DateTime.lte(System.DateTime.getDate(System.DateTime.getNow()), endDate1)) {
                                            newCommodityValue.EndDate = endDate1;
                                        }
                                        if (System.DateTime.gte(System.DateTime.getDate(System.DateTime.getNow()), startDate2) && System.DateTime.lte(System.DateTime.getDate(System.DateTime.getNow()), endDate2)) {
                                            newCommodityValue.EndDate = endDate2;
                                        }
                                        $tcs.setResult(newCommodityValue);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            GetPatchEntity: function (transportationPlan) {
                var $t;
                var details = new (System.Collections.Generic.List$1(Core.ViewModels.PatchUpdateDetail)).ctor();
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = Core.Extensions.Utils.IdField, $t.Value = Bridge.toString(transportationPlan.Id), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "TransportationTypeId", $t.Value = System.Nullable.toString(transportationPlan.TransportationTypeId, null), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "IsWet", $t.Value = System.Boolean.toString(transportationPlan.IsWet), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "IsBought", $t.Value = System.Boolean.toString(transportationPlan.IsBought), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "JourneyId", $t.Value = System.Nullable.toString(transportationPlan.JourneyId, null), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "CustomerTypeId", $t.Value = System.Nullable.toString(transportationPlan.CustomerTypeId, null), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "CommodityValue", $t.Value = transportationPlan.CommodityValue.toString(), $t));
                return ($t = new Core.ViewModels.PatchUpdate(), $t.Changes = details, $t);
            },
            GetPatchEntityApprove: function (expense) {
                var $t;
                var details = new (System.Collections.Generic.List$1(Core.ViewModels.PatchUpdateDetail)).ctor();
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = Core.Extensions.Utils.IdField, $t.Value = Bridge.toString(expense.Id), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "StatusId", $t.Value = System.Nullable.toString(expense.StatusId, null), $t));
                return ($t = new Core.ViewModels.PatchUpdate(), $t.Changes = details, $t);
            }
        }
    });

    Bridge.define("TMS.UI.Business.Manage.TransportationPlanEditorMobileBL", {
        inherits: [Core.Components.Forms.TabEditor],
        props: {
            transportationPlanEntity: {
                get: function () {
                    return Bridge.as(this.Entity, TMS.API.Models.TransportationPlan);
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "TransportationPlan");
                this.Name = "TransportationPlan Editor Mobile";
            }
        },
        methods: {
            Save: function (entity) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $t, 
                    $t1, 
                    rs, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4], $step);
                                switch ($step) {
                                    case 0: {
                                        if (entity === void 0) { entity = null; }
                                        $task1 = this.IsFormValid();
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        if (!($taskResult1)) {
                                            $step = 2;
                                            continue;
                                        } 
                                        $step = 3;
                                        continue;
                                    }
                                    case 2: {
                                        $tcs.setResult(false);
                                        return;
                                    }
                                    case 3: {
                                        this.transportationPlanEntity.TotalContainerRemain = ($t = this.transportationPlanEntity.TotalContainerRemain, $t != null ? $t : this.transportationPlanEntity.TotalContainer);
                                        this.transportationPlanEntity.TotalContainerUsing = ($t1 = this.transportationPlanEntity.TotalContainerUsing, $t1 != null ? $t1 : 0);
                                        $task2 = Core.Components.Forms.TabEditor.prototype.Save.call(this, entity);
                                        $step = 4;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        rs = $taskResult2;
                                        this.Dispose();
                                        $tcs.setResult(rs);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("TMS.UI.Business.Manage.TransportationPlanListBL", {
        inherits: [Core.Components.Forms.TabEditor],
        statics: {
            methods: {
                UpdateListView: function (x, gridView) {
                    var listViewItem = System.Linq.Enumerable.from(gridView.GetListViewItems(x), Core.Components.ListViewItem).firstOrDefault(null, null);
                    if (listViewItem == null) {
                        return;
                    }
                    Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, listViewItem.FilterChildren$1(function (y) {
                        return !y.GuiInfo.Disabled;
                    }), function (y) {
                        y.Disabled = false;
                    });
                    if (x.IsTransportation) {
                        Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, listViewItem.FilterChildren$1(function (y) {
                            return !Bridge.referenceEquals(y.GuiInfo.FieldName, "btnRequestChange") && !y.GuiInfo.Disabled;
                        }), function (y) {
                            y.Disabled = true;
                        });
                    } else {
                        Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, listViewItem.FilterChildren$1(function (y) {
                            return Bridge.referenceEquals(y.GuiInfo.FieldName, "btnRequestChange") && !y.GuiInfo.Disabled;
                        }), function (y) {
                            y.Disabled = true;
                        });
                    }
                    Core.Extensions.HtmlElementExtension.RemoveClass(listViewItem.Element, "bg-host");
                    if (System.Nullable.eq(x.StatusId, Core.Enums.ApprovalStatusEnum.Approving)) {
                        Core.Extensions.HtmlElementExtension.AddClass(listViewItem.Element, "bg-host");
                    }
                },
                ListViewItemFilter: function (updatedData, x) {
                    if (Bridge.is(x, Core.Components.GroupViewItem)) {
                        return false;
                    }

                    return x.Entity != null && Bridge.referenceEquals(Bridge.Reflection.getTypeName(Bridge.getType(x.Entity)), Bridge.Reflection.getTypeName(Bridge.getType(updatedData))) && Bridge.referenceEquals(Bridge.toString(x.Entity[Core.Components.EditableComponent.IdField]), Bridge.toString(updatedData[Core.Components.EditableComponent.IdField]));
                }
            }
        },
        fields: {
            _uploader: null,
            containerId: 0,
            Awaiter: 0
        },
        ctors: {
            init: function () {
                this.containerId = 0;
            },
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "TransportationPlan");
                this.Name = "TransportationPlan List";
                this.DOMContentLoaded = Bridge.fn.combine(this.DOMContentLoaded, Bridge.fn.bind(this, function () {
                    Core.MVVM.Html.Take$1("Body").Form.Attr$1("method", "POST").Attr$1("enctype", "multipart/form-data").Display$1(false).Input.Event$1("change", Bridge.fn.bind(this, function (ev) {
                        var $step = 0,
                            $task1, 
                            $jumpFromFinally, 
                            $asyncBody = Bridge.fn.bind(this, function () {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = this.SelectedExcel(ev);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            return;
                                        }
                                        default: {
                                            return;
                                        }
                                    }
                                }
                            }, arguments);

                        $asyncBody();
                    })).Type$1("file").Id(System.String.format("id_{0}", [Bridge.box(Bridge.getHashCode(this), System.Int32)])).Attr$1("name", "fileImport").Attr$1("accept", ".xlsx");
                    this._uploader = Bridge.as(Core.MVVM.Html.Context, HTMLInputElement);
                }));
            }
        },
        methods: {
            EditTransportationPlan: function (entity) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "TransportationPlan Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Manage.TransportationPlanEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Ch\u1ec9nh s\u1eeda k\u1ebf ho\u1ea1ch v\u1eadn chuy\u1ec3n";
                                            instance.Entity = entity;
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            RequestChangeTransportationPlan: function (entity) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "TransportationPlan Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Manage.TransportationPlanEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Y\u00eau c\u1ea7u thay \u0111\u1ed5i k\u1ebf ho\u1ea1ch v\u1eadn chuy\u1ec3n";
                                            instance.Entity = entity;
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            AddTransportationPlan: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "TransportationPlan Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Manage.TransportationPlanEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Th\u00eam m\u1edbi k\u1ebf ho\u1ea1ch v\u1eadn chuy\u1ec3n";
                                            instance.Entity = new TMS.API.Models.TransportationPlan();
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CalcContainer: function (transportationPlan) {
                var $t;
                var gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(null, null);
                var listViewItem = System.Linq.Enumerable.from(gridView.GetListViewItems(transportationPlan), Core.Components.ListViewItem).firstOrDefault(null, null);
                transportationPlan.TotalContainerUsing = ($t = transportationPlan.TotalContainerUsing, $t != null ? $t : 0);
                transportationPlan.TotalContainerRemain = Bridge.Int.clip32(System.Nullable.sub(transportationPlan.TotalContainer, transportationPlan.TotalContainerUsing));
                Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.CellText, listViewItem.FilterChildren(Core.Components.CellText, function (x) {
                    return Bridge.referenceEquals(x.GuiInfo.FieldName, "TotalContainerUsing") || Bridge.referenceEquals(x.GuiInfo.FieldName, "TotalContainerRemain");
                }), function (x) {
                    x.Dirty = true;
                });
            },
            LockTransportation: function () {
                var gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(null, null);
                gridView.BodyContextMenuShow = Bridge.fn.combine(gridView.BodyContextMenuShow, Bridge.fn.bind(this, function () {
                    Core.Components.Forms.ContextMenu.Instance.MenuItems = Bridge.fn.bind(this, function (_o1) {
                            var $t;
                            _o1.add(($t = new Core.Components.Forms.ContextMenuItem(), $t.Icon = "fal fa-street-view", $t.Text = "Xem danh s\u00e1ch v\u1eadn chuy\u1ec3n", $t.Click = Bridge.fn.cacheBind(this, this.ViewTransportation), $t));
                            return _o1;
                        })(new (System.Collections.Generic.List$1(Core.Components.Forms.ContextMenuItem)).ctor());
                }));
                var listViewItems = System.Linq.Enumerable.from(gridView.RowData.Data).select(function (x) { return Bridge.cast(x, TMS.API.Models.TransportationPlan); }).toList(TMS.API.Models.TransportationPlan);
                listViewItems.ForEach(function (x) {
                    TMS.UI.Business.Manage.TransportationPlanListBL.UpdateListView(x, gridView);
                });
            },
            CreateTransportation: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $task3, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    gridView, 
                    selected, 
                    count, 
                    listAccept, 
                    listAcceptNoContract, 
                    $t, 
                    item, 
                    confirmDialog, 
                    $t1, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,10,11,12], $step);
                                switch ($step) {
                                    case 0: {
                                        gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(null, null);
                                        $task1 = gridView.GetRealTimeSelectedRows();
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        selected = System.Linq.Enumerable.from(($taskResult1)).select(function (x) { return Bridge.cast(x, TMS.API.Models.TransportationPlan); }).toList(TMS.API.Models.TransportationPlan);
                                        if (Core.Extensions.IEnumerableExtensions.Nothing(TMS.API.Models.TransportationPlan, selected)) {
                                            selected = System.Linq.Enumerable.from(gridView.GetFocusedRows()).select(function (x) { return Bridge.cast(x, TMS.API.Models.TransportationPlan); }).toList(TMS.API.Models.TransportationPlan);
                                        }
                                        if (Core.Extensions.IEnumerableExtensions.Nothing(TMS.API.Models.TransportationPlan, selected)) {
                                            Core.Extensions.Toast.Warning("Vui l\u00f2ng ch\u1ecdn k\u1ebft ho\u1ea1ch v\u1eadn chuy\u1ec3n");
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        if (System.Linq.Enumerable.from(selected, TMS.API.Models.TransportationPlan).any(function (x) {
                                            return x.ContainerTypeId == null;
                                        })) {
                                            Core.Extensions.Toast.Warning("Vui l\u00f2ng ch\u1ecdn lo\u1ea1i cont");
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        if (System.Linq.Enumerable.from(selected, TMS.API.Models.TransportationPlan).any(function (x) {
                                            return x.RouteId == null;
                                        })) {
                                            Core.Extensions.Toast.Warning("Vui l\u00f2ng ch\u1ecdn tuy\u1ebfn \u0111\u01b0\u1eddng");
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        if (System.Linq.Enumerable.from(selected, TMS.API.Models.TransportationPlan).any(function (x) {
                                            return x.BossId == null;
                                        })) {
                                            Core.Extensions.Toast.Warning("Vui l\u00f2ng ch\u1ecdn ch\u1ee7 h\u00e0ng");
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        if (System.Linq.Enumerable.from(selected, TMS.API.Models.TransportationPlan).any(function (x) {
                                            return x.CommodityId == null;
                                        })) {
                                            Core.Extensions.Toast.Warning("Vui l\u00f2ng ch\u1ecdn v\u1eadt t\u01b0 h\u00e0ng h\u00f3a");
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        if (System.Linq.Enumerable.from(selected, TMS.API.Models.TransportationPlan).any(function (x) {
                                            return x.TotalContainer == null || System.Nullable.eq(x.TotalContainer, 0);
                                        })) {
                                            Core.Extensions.Toast.Warning("Vui l\u00f2ng nh\u1eadp s\u1ed1 l\u01b0\u1ee3ng cont");
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        if (System.Linq.Enumerable.from(selected, TMS.API.Models.TransportationPlan).any(function (x) {
                                            return x.ReceivedId == null;
                                        })) {
                                            Core.Extensions.Toast.Warning("Vui l\u00f2ng ch\u1ecdn \u0111\u1ecba ch\u1ec9 nh\u1eadn h\u00e0ng");
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        if (System.Linq.Enumerable.from(selected, TMS.API.Models.TransportationPlan).any(function (x) {
                                            return Bridge.equals(x.ClosingDate, null);
                                        })) {
                                            Core.Extensions.Toast.Warning("Vui l\u00f2ng ch\u1ecdn ng\u00e0y \u0111\u00f3ng h\u00e0ng");
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        if (System.Linq.Enumerable.from(selected, TMS.API.Models.TransportationPlan).any(function (x) {
                                            return x.Id < 0;
                                        })) {
                                            Core.Extensions.Toast.Warning("Vui l\u00f2ng l\u01b0u tr\u01b0\u1edbc khi v\u1eadn chuy\u1ec3n");
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        //var settingsInsurances = gridView.GetSelectedRows().Cast<TransportationPlan>().Where(x => x.IsSettingsInsurance == false).ToList();
                                        //if (settingsInsurances.Count > 0)
                                        //{
                                        //    Toast.Warning($"CÃ³ {settingsInsurances.Count} KHVC chÆ°a ÄÆ°á»£c cáº¥u hÃ¬nh GTHH. Vui lÃ²ng cáº¥u hÃ¬nh trÆ°á»c khi váº­n chuyá»n");
                                        //    foreach (var item in settingsInsurances)
                                        //    {
                                        //        var listViewItem = gridView.GetListViewItems(item).FirstOrDefault();
                                        //        if (listViewItem is null)
                                        //        {
                                        //            return;
                                        //        }
                                        //        if (listViewItem != null)
                                        //        {
                                        //            listViewItem.Element.AddClass("bg-red1");
                                        //        }
                                        //    }
                                        //    return;
                                        //}
                                        selected = System.Linq.Enumerable.from(selected, TMS.API.Models.TransportationPlan).where(function (x) {
                                            return System.Nullable.gt(x.TotalContainerRemain, 0);
                                        }).toList(TMS.API.Models.TransportationPlan);
                                        count = 0;
                                        listAccept = new (System.Collections.Generic.List$1(TMS.API.Models.TransportationPlan)).ctor();
                                        listAcceptNoContract = new (System.Collections.Generic.List$1(TMS.API.Models.TransportationPlan)).ctor();
                                        $t = Bridge.getEnumerator(selected);
                                        $step = 2;
                                        continue;
                                    }
                                    case 2: {
                                        if ($t.moveNext()) {
                                            item = $t.Current;
                                            $step = 3;
                                            continue;
                                        }
                                        $step = 8;
                                        continue;
                                    }
                                    case 3: {
                                        $task2 = this.CheckContract(item);
                                        $step = 4;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        if (!$taskResult2) {
                                            $step = 5;
                                            continue;
                                        } else  {
                                            $step = 6;
                                            continue;
                                        }
                                    }
                                    case 5: {
                                        count = (count + 1) | 0;
                                        $step = 7;
                                        continue;
                                    }
                                    case 6: {
                                        listAccept.add(item);
                                        $step = 7;
                                        continue;
                                    }
                                    case 7: {
                                        $step = 2;
                                        continue;
                                    }
                                    case 8: {
                                        if (count > 0) {
                                            $step = 9;
                                            continue;
                                        } else  {
                                            $step = 10;
                                            continue;
                                        }
                                    }
                                    case 9: {
                                        confirmDialog = ($t1 = new Core.Components.Forms.ConfirmDialog(), $t1.Content = System.String.format("C\u00f3 {0} k\u1ebf ho\u1ea1ch ch\u01b0a c\u00f3 h\u1ee3p \u0111\u1ed3ng b\u1ea1n c\u00f3 mu\u1ed1n v\u1eadn chuy\u1ec3n kh\u00f4ng?", [Bridge.box(count, System.Int32)]), $t1);
                                        confirmDialog.YesConfirmed = Bridge.fn.combine(confirmDialog.YesConfirmed, Bridge.fn.bind(this, function () {
                                            var $step = 0,
                                                $task1, 
                                                $jumpFromFinally, 
                                                $asyncBody = Bridge.fn.bind(this, function () {
                                                    for (;;) {
                                                        $step = System.Array.min([0,1], $step);
                                                        switch ($step) {
                                                            case 0: {
                                                                $task1 = this.ActionCreateTransportation(selected);
                                                                $step = 1;
                                                                if ($task1.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task1.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 1: {
                                                                $task1.getAwaitedResult();
                                                                return;
                                                            }
                                                            default: {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }, arguments);

                                            $asyncBody();
                                        }));
                                        this.AddChild(confirmDialog);
                                        $step = 12;
                                        continue;
                                    }
                                    case 10: {
                                        $task3 = this.ActionCreateTransportation(selected);
                                        $step = 11;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 11: {
                                        $task3.getAwaitedResult();
                                        $step = 12;
                                        continue;
                                    }
                                    case 12: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ViewTransportation: function (arg) {
                var gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                        return Bridge.referenceEquals(x.GuiInfo.FieldName, "TransportationPlan");
                    }, null);
                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $task2, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        selected, 
                        coords, 
                        fe, 
                        gridView1, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1,2], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = gridView.GetRealTimeSelectedRows();
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            selected = ($taskResult1);
                                            if (Core.Extensions.IEnumerableExtensions.Nothing(System.Object, selected)) {
                                                selected = gridView.RowData.Data;
                                            }
                                            coords = System.Linq.Enumerable.from(System.Linq.Enumerable.from(selected).select(function (x) { return Bridge.cast(x, TMS.API.Models.TransportationPlan); }).toList(TMS.API.Models.TransportationPlan), TMS.API.Models.TransportationPlan).select(function (x) {
                                                return x.Id;
                                            }).distinct().toList(System.Int32);
                                            fe = System.Linq.Enumerable.from(Core.Components.Forms.TabEditor.Tabs, Core.Components.Forms.TabEditor).where(function (x) {
                                                return Bridge.referenceEquals(x.Name, "Transportation List");
                                            }).firstOrDefault(null, null);
                                            if (fe == null) {
                                                Core.Extensions.Toast.Warning("Vui l\u00f2ng m\u1edf m\u00e0n h\u00ecnh danh s\u00e1ch v\u1eadn chuy\u1ec3n");
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            gridView1 = System.Linq.Enumerable.from(fe.FilterChildren(Core.Components.GridView), Core.Components.GridView).firstOrDefault(function (x) {
                                                return x.GuiInfo.Id === 16016;
                                            }, null);
                                            if (gridView1 == null) {
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            gridView1.CellSelected.clear();
                                            gridView1.AdvSearchVM.Conditions.clear();
                                            coords.ForEach(function (x) {
                                                var $t;
                                                gridView1.CellSelected.add(($t = new Core.Models.CellSelected(), $t.FieldName = "TransportationPlanId", $t.FieldText = "M\u00e3 s\u1ed1", $t.ComponentType = "Number", $t.Value = Bridge.toString(x), $t.ValueText = Bridge.toString(x), $t.Operator = "in", $t.OperatorText = "Ch\u1ee9a", $t.IsSearch = false, $t.Logic = Core.Enums.LogicOperation.Or, $t));
                                            });
                                            fe.Focus();
                                            $task2 = gridView1.ActionFilter();
                                            $step = 2;
                                            if ($task2.isCompleted()) {
                                                continue;
                                            }
                                            $task2.continue($asyncBody);
                                            return;
                                        }
                                        case 2: {
                                            $task2.getAwaitedResult();
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            ActionCreateTransportation: function (selected) {
                var $step = 0,
                    $task1, 
                    $task2, 
                    $taskResult2, 
                    $task3, 
                    $taskResult3, 
                    $task4, 
                    $taskResult4, 
                    $task5, 
                    $taskResult5, 
                    $task6, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    gridView, 
                    containerTypeIds, 
                    containerTypeDb, 
                    containers, 
                    commodityTypeIds, 
                    bossIds, 
                    commodityValueDB, 
                    expenseTypeDB, 
                    masterDataDB, 
                    isWets, 
                    isBoughts, 
                    insuranceFeesRates, 
                    cont20Rs, 
                    cont40Rs, 
                    dir, 
                    $t, 
                    rs, 
                    insuranceFeesRateColdDB, 
                    extraInsuranceFeesRateDB, 
                    containerTypes, 
                    $t1, 
                    item, 
                    expense, 
                    isSubRatio, 
                    insuranceFeesRateDB, 
                    getContainerType, 
                    $t2, 
                    revenue, 
                    i, 
                    transportation, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,10,11,12,13], $step);
                                switch ($step) {
                                    case 0: {
                                        gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(null, null);
                                        containerTypeIds = System.Linq.Enumerable.from(selected, TMS.API.Models.TransportationPlan).where(function (x) {
                                            return x.ContainerTypeId != null;
                                        }).select(function (x) {
                                            return System.Nullable.getValue(x.ContainerTypeId);
                                        }).toList(System.Int32);
                                        containerTypeDb = new Core.Clients.Client.$ctor1("MasterData").GetRawListById(TMS.API.Models.MasterData, containerTypeIds);
                                        containers = new Core.Clients.Client.$ctor1("MasterData").GetRawList(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and (contains(Name, '40HC') or contains(Name, '20DC'))", null));
                                        commodityTypeIds = System.Linq.Enumerable.from(selected, TMS.API.Models.TransportationPlan).where(function (x) {
                                            return x.CommodityId != null;
                                        }).select(function (x) {
                                            return System.Nullable.getValue(x.CommodityId);
                                        }).toList(System.Int32);
                                        bossIds = System.Linq.Enumerable.from(selected, TMS.API.Models.TransportationPlan).where(function (x) {
                                            return x.BossId != null;
                                        }).select(function (x) {
                                            return System.Nullable.getValue(x.BossId);
                                        }).toList(System.Int32);
                                        commodityValueDB = new Core.Clients.Client.$ctor1("CommodityValue").FirstOrDefaultAsync(TMS.API.Models.CommodityValue, System.String.format("?$filter=Active eq true and BossId in ({0}) and CommodityId in ({1}) and ContainerId eq {2}", Core.Extensions.IEnumerableExtensions.Combine(System.Int32, bossIds), Core.Extensions.IEnumerableExtensions.Combine(System.Int32, commodityTypeIds), Bridge.box(this.containerId, System.Int32)));
                                        expenseTypeDB = new Core.Clients.Client.$ctor1("MasterData").FirstOrDefaultAsync(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and ParentId eq 7577 and contains(Name, 'B\u1ea3o hi\u1ec3m')", null));
                                        masterDataDB = new Core.Clients.Client.$ctor1("MasterData").FirstOrDefaultAsync(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and Id eq 11685", null));

                                        isWets = System.Linq.Enumerable.from(selected, TMS.API.Models.TransportationPlan).select(function (x) {
                                            return Core.Extensions.StringExt.ToLower(x.IsWet);
                                        }).distinct().toList(System.String);
                                        isBoughts = System.Linq.Enumerable.from(selected, TMS.API.Models.TransportationPlan).select(function (x) {
                                            return Core.Extensions.StringExt.ToLower(x.IsBought);
                                        }).distinct().toList(System.String);

                                        insuranceFeesRates = new Core.Clients.Client.$ctor1("InsuranceFeesRate").GetRawList(TMS.API.Models.InsuranceFeesRate, System.String.format("?$filter=Active eq true and IsSOC eq false", null));
                                        $task1 = System.Threading.Tasks.Task.whenAll(containerTypeDb, containers, commodityValueDB, expenseTypeDB, masterDataDB, insuranceFeesRates);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        cont20Rs = System.Linq.Enumerable.from(containers.getResult(), TMS.API.Models.MasterData).firstOrDefault(function (x) {
                                            return System.String.contains(x.Name,"20DC");
                                        }, null);
                                        cont40Rs = System.Linq.Enumerable.from(containers.getResult(), TMS.API.Models.MasterData).firstOrDefault(function (x) {
                                            return System.String.contains(x.Name,"40HC");
                                        }, null);
                                        dir = ($t = TMS.API.Models.MasterData, System.Linq.Enumerable.from(containerTypeDb.getResult(), $t).toDictionary(function (x) {
                                            return x.Id;
                                        }, null, System.Int32, $t));
                                        rs = new (System.Collections.Generic.List$1(TMS.API.Models.Transportation)).ctor();
                                        $task2 = new Core.Clients.Client.$ctor1("MasterData").FirstOrDefaultAsync(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and Id eq 25391", null));
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        insuranceFeesRateColdDB = $taskResult2;
                                        $task3 = new Core.Clients.Client.$ctor1("MasterData").GetRawList(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and ParentId eq 25374", null));
                                        $step = 3;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        extraInsuranceFeesRateDB = $taskResult3;
                                        $task4 = this.CheckContainerTypes(selected);
                                        $step = 4;
                                        if ($task4.isCompleted()) {
                                            continue;
                                        }
                                        $task4.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $taskResult4 = $task4.getAwaitedResult();
                                        containerTypes = new (System.Collections.Generic.List$1(System.Int32)).$ctor1($taskResult4);
                                        $t1 = Bridge.getEnumerator(selected);
                                        $step = 5;
                                        continue;
                                    }
                                    case 5: {
                                        if ($t1.moveNext()) {
                                            item = $t1.Current;
                                            $step = 6;
                                            continue;
                                        }
                                        $step = 12;
                                        continue;
                                    }
                                    case 6: {
                                        expense = { v : new TMS.API.Models.Expense() };
                                        Core.Extensions.ReflectionExt.CopyPropFrom$1(expense.v, item);
                                        expense.v.Id = 0;
                                        expense.v.Quantity = System.Decimal(1);
                                        expense.v.ExpenseTypeId = expenseTypeDB.getResult().Id; //Báº£o hiá»m
                                        expense.v.Vat = masterDataDB == null ? System.Decimal(0) : System.Decimal(masterDataDB.getResult().Name);
                                        expense.v.SaleId = item.UserId;
                                        expense.v.Notes = "";
                                        if (System.Nullable.eq(expense.v.JourneyId, 12114) || System.Nullable.eq(expense.v.JourneyId, 16001)) {
                                            expense.v.StartShip = item.ClosingDate;
                                        }
                                        isSubRatio = { v : false };
                                        if (((expense.v.IsWet || expense.v.SteamingTerms || expense.v.BreakTerms) && expense.v.IsBought === false) || (expense.v.IsBought && expense.v.IsWet)) {
                                            isSubRatio.v = true;
                                        }
                                        insuranceFeesRateDB = null;
                                        if (expense.v.IsBought) {
                                            insuranceFeesRateDB = System.Linq.Enumerable.from(insuranceFeesRates.getResult(), TMS.API.Models.InsuranceFeesRate).firstOrDefault((function ($me, expense, isSubRatio) {
                                                return function (x) {
                                                    return System.Nullable.eq(x.TransportationTypeId, expense.v.TransportationTypeId) && System.Nullable.eq(x.JourneyId, expense.v.JourneyId) && x.IsBought === expense.v.IsBought && System.Nullable.eq(x.IsSOC, false) && x.IsSubRatio === isSubRatio.v;
                                                };
                                            })(this, expense, isSubRatio), null);
                                        } else {
                                            insuranceFeesRateDB = System.Linq.Enumerable.from(insuranceFeesRates.getResult(), TMS.API.Models.InsuranceFeesRate).firstOrDefault((function ($me, expense) {
                                                return function (x) {
                                                    return System.Nullable.eq(x.TransportationTypeId, expense.v.TransportationTypeId) && System.Nullable.eq(x.JourneyId, expense.v.JourneyId) && x.IsBought === expense.v.IsBought && System.Nullable.eq(x.IsSOC, false);
                                                };
                                            })(this, expense), null);
                                        }
                                        if (insuranceFeesRateDB != null) {
                                            getContainerType = System.Collections.Generic.CollectionExtensions.GetValueOrDefault(System.Int32, TMS.API.Models.MasterData, dir, ($t2 = expense.v.ContainerTypeId, $t2 != null ? $t2 : 0));
                                            if (getContainerType != null && System.String.contains(getContainerType.Description.toLowerCase(),"l\u1ea1nh") && System.Nullable.eq(insuranceFeesRateDB.TransportationTypeId, 11673) && System.Nullable.eq(insuranceFeesRateDB.JourneyId, 12114)) {
                                                expense.v.InsuranceFeeRate = insuranceFeesRateColdDB != null ? System.Decimal(insuranceFeesRateColdDB.Name) : System.Decimal(0);
                                            } else {
                                                expense.v.InsuranceFeeRate = insuranceFeesRateDB.Rate;
                                            }
                                            if (isSubRatio.v && insuranceFeesRateDB.IsSubRatio && expense.v.IsBought === false) {
                                                extraInsuranceFeesRateDB.ForEach((function ($me, expense) {
                                                    return function (x) {
                                                        var prop = System.Linq.Enumerable.from(Bridge.Reflection.getMembers(Bridge.getType(expense.v), 16, 28), System.Reflection.PropertyInfo).where(function (y) {
                                                            return Bridge.referenceEquals(y.n, x.Name) && System.Boolean.parse(Bridge.toString(Bridge.Reflection.midel(y.g, expense.v).apply(null, null)));
                                                        }).firstOrDefault(null, null);
                                                        if (prop != null) {
                                                            expense.v.InsuranceFeeRate = System.Nullable.lift2("add", expense.v.InsuranceFeeRate, System.Decimal(x.Code));
                                                        }
                                                    };
                                                })(this, expense));
                                            }
                                        } else {
                                            expense.v.InsuranceFeeRate = System.Decimal(0);
                                        }
                                        if (insuranceFeesRateDB != null && System.Nullable.eq(insuranceFeesRateDB.IsVAT, true)) {
                                            expense.v.TotalPriceAfterTax = System.Nullable.getValue(expense.v.InsuranceFeeRate).mul(System.Nullable.getValue(expense.v.CommodityValue)).div(System.Decimal(100));
                                            expense.v.TotalPriceBeforeTax = System.Decimal.toDecimalPlaces(expense.v.TotalPriceAfterTax.div(System.Decimal(1.1, 1)), 0, 6);
                                        } else if (insuranceFeesRateDB != null && System.Nullable.eq(insuranceFeesRateDB.IsVAT, false)) {
                                            expense.v.TotalPriceBeforeTax = System.Nullable.getValue(expense.v.InsuranceFeeRate).mul(System.Nullable.getValue(expense.v.CommodityValue)).div(System.Decimal(100));
                                            expense.v.TotalPriceAfterTax = expense.v.TotalPriceBeforeTax.add(System.Decimal.toDecimalPlaces(expense.v.TotalPriceBeforeTax.mul(expense.v.Vat).div(System.Decimal(100)), 0, 6));
                                        }
                                        revenue = new TMS.API.Models.Revenue();
                                        revenue.BossId = item.BossId;
                                        revenue.ContainerTypeId = item.ContainerTypeId;
                                        revenue.ClosingDate = item.ClosingDate;
                                        i = 0;
                                        $step = 7;
                                        continue;
                                    }
                                    case 7: {
                                        if ( System.Nullable.lt(i, item.TotalContainerRemain) ) {
                                            $step = 8;
                                            continue;
                                        }
                                        $step = 11;
                                        continue;
                                    }
                                    case 8: {
                                        transportation = new TMS.API.Models.Transportation();
                                        Core.Extensions.ReflectionExt.CopyPropFrom$1(transportation, item, ["Contact2Id"]);
                                        transportation.Id = 0;
                                        transportation.TransportationPlanId = item.Id;
                                        transportation.Notes = null;
                                        transportation.ClosingNotes = item.Notes;
                                        transportation.ExportListId = Core.Clients.Client.Token.Vendor.Id;
                                        System.Array.add(transportation.Expense, expense.v, TMS.API.Models.Expense);
                                        System.Array.add(transportation.Revenue, revenue, TMS.API.Models.Revenue);
                                        $task5 = new Core.Clients.Client.$ctor1("Transportation").CreateAsync(TMS.API.Models.Transportation, transportation);
                                        $step = 9;
                                        if ($task5.isCompleted()) {
                                            continue;
                                        }
                                        $task5.continue($asyncBody);
                                        return;
                                    }
                                    case 9: {
                                        $taskResult5 = $task5.getAwaitedResult();
                                        $step = 10;
                                        continue;
                                    }
                                    case 10: {
                                        i = (i + 1) | 0;
                                        $step = 7;
                                        continue;
                                    }
                                    case 11: {
                                        $step = 5;
                                        continue;
                                    }
                                    case 12: {
                                        Core.Extensions.Toast.Success("T\u1ea1o chuy\u1ebfn xe th\u00e0nh c\u00f4ng");
                                        $task6 = gridView.ApplyFilter(true);
                                        $step = 13;
                                        if ($task6.isCompleted()) {
                                            continue;
                                        }
                                        $task6.continue($asyncBody);
                                        return;
                                    }
                                    case 13: {
                                        $task6.getAwaitedResult();
                                        Core.Extensions.Toast.Success("Kh\u00f3a k\u1ebf ho\u1ea1ch v\u1eadn chuy\u1ec3n th\u00e0nh c\u00f4ng");
                                        gridView.ClearSelected();
                                        window.setTimeout(Bridge.fn.bind(this, function () {
                                            var $step = 0,
                                                $task1, 
                                                $taskResult1, 
                                                $task2, 
                                                $taskResult2, 
                                                $task3, 
                                                $taskResult3, 
                                                $jumpFromFinally, 
                                                $returnValue, 
                                                index, 
                                                commodidtyValues, 
                                                $t3, 
                                                item1, 
                                                containerTypeId, 
                                                commodidtyValue, 
                                                newCommodityValue, 
                                                $async_e, 
                                                $async_e1, 
                                                $asyncBody = Bridge.fn.bind(this, function () {
                                                    try {
                                                        for (;;) {
                                                            $step = System.Array.min([1,2,3,4,5,6,7,8,9,10,11], $step);
                                                            switch ($step) {

                                                                case 1: {
                                                                    index = 0;
                                                                    $task1 = new Core.Clients.Client.$ctor1("CommodityValue").GetRawList(TMS.API.Models.CommodityValue, System.String.format("?$filter=Active eq true and BossId in ({0}) and CommodityId in ({1})", Core.Extensions.IEnumerableExtensions.Combine(System.Int32, bossIds), Core.Extensions.IEnumerableExtensions.Combine(System.Int32, commodityTypeIds)));
                                                                    $step = 2;
                                                                    if ($task1.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task1.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 2: {
                                                                    $taskResult1 = $task1.getAwaitedResult();
                                                                    commodidtyValues = $taskResult1;
                                                                    $t3 = Bridge.getEnumerator(selected);
                                                                    $step = 3;
                                                                    continue;
                                                                }
                                                                case 3: {
                                                                    if ($t3.moveNext()) {
                                                                        item1 = { v : $t3.Current };
                                                                        $step = 4;
                                                                        continue;
                                                                    }
                                                                    $step = 9;
                                                                    continue;
                                                                }
                                                                case 4: {
                                                                    containerTypeId = { v : System.Linq.Enumerable.from(containerTypes, System.Int32).elementAt(index) };
                                                                    commodidtyValue = System.Linq.Enumerable.from(commodidtyValues, TMS.API.Models.CommodityValue).firstOrDefault((function ($me, item1, containerTypeId) {
                                                                        return function (x) {
                                                                            return System.Nullable.eq(x.BossId, item1.v.BossId) && System.Nullable.eq(x.CommodityId, item1.v.CommodityId) && System.Nullable.eq(x.ContainerId, containerTypeId.v);
                                                                        };
                                                                    })(this, item1, containerTypeId), null);
                                                                    if (commodidtyValue == null && item1.v.BossId != null && item1.v.CommodityId != null && item1.v.ContainerTypeId != null && item1.v.IsCompany === false) {
                                                                        $step = 5;
                                                                        continue;
                                                                    } 
                                                                    $step = 8;
                                                                    continue;
                                                                }
                                                                case 5: {
                                                                    $task2 = this.CreateCommodityValue(item1.v);
                                                                    $step = 6;
                                                                    if ($task2.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task2.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 6: {
                                                                    $taskResult2 = $task2.getAwaitedResult();
                                                                    newCommodityValue = $taskResult2;
                                                                    $task3 = new Core.Clients.Client.$ctor1("CommodityValue").CreateAsync(TMS.API.Models.CommodityValue, newCommodityValue);
                                                                    $step = 7;
                                                                    if ($task3.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task3.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 7: {
                                                                    $taskResult3 = $task3.getAwaitedResult();
                                                                    $step = 8;
                                                                    continue;
                                                                }
                                                                case 8: {
                                                                    index = (index + 1) | 0;
                                                                    $step = 3;
                                                                    continue;
                                                                }
                                                                case 9: {
                                                                    $step = 11;
                                                                    continue;
                                                                }
                                                                case 10: {
                                                                    $async_e = null;
                                                                    $step = 11;
                                                                    continue;
                                                                }
                                                                case 11: {
                                                                    return;
                                                                }
                                                                default: {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    } catch($async_e1) {
                                                        $async_e = System.Exception.create($async_e1);
                                                        if ( $step >= 1 && $step <= 9 ) {
                                                            $step = 10;
                                                            $asyncBody();
                                                            return;
                                                        }
                                                        throw $async_e;
                                                    }
                                                }, arguments);

                                            $asyncBody();
                                        }), 100);
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CheckClosingDate: function (transportationPlan) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    gridView, 
                    confirmDialog, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(null, null);
                                        $task1 = this.CheckContract(transportationPlan);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        gridView = gridView || System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(null, null);
                                        if (System.DateTime.lt(System.DateTime.getDate(System.Nullable.getValue(transportationPlan.ClosingDate)), System.DateTime.getDate(System.DateTime.getNow()))) {
                                            confirmDialog = ($t = new Core.Components.Forms.ConfirmDialog(), $t.Content = "Ng\u00e0y \u0111\u00f3ng h\u00e0ng nh\u1ecf h\u01a1n ng\u00e0y hi\u1ec7n t\u1ea1i?", $t);
                                            confirmDialog.NoConfirmed = Bridge.fn.combine(confirmDialog.NoConfirmed, Bridge.fn.bind(this, function () {
                                                var $step = 0,
                                                    $task1, 
                                                    $jumpFromFinally, 
                                                    $asyncBody = Bridge.fn.bind(this, function () {
                                                        for (;;) {
                                                            $step = System.Array.min([0,1], $step);
                                                            switch ($step) {
                                                                case 0: {
                                                                    gridView = gridView || System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(null, null);
                                                                    transportationPlan.ClosingDate = null;
                                                                    $task1 = gridView.AddOrUpdateRow(transportationPlan);
                                                                    $step = 1;
                                                                    if ($task1.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task1.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 1: {
                                                                    $task1.getAwaitedResult();
                                                                    return;
                                                                }
                                                                default: {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }, arguments);

                                                $asyncBody();
                                            }));
                                            this.AddChild(confirmDialog);
                                        }
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CheckContract: function (transportationPlan) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    contact, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4], $step);
                                switch ($step) {
                                    case 0: {
                                        if (transportationPlan.BossId != null && !Bridge.equals(transportationPlan.ClosingDate, null)) {
                                            $step = 1;
                                            continue;
                                        } else  {
                                            $step = 3;
                                            continue;
                                        }
                                    }
                                    case 1: {
                                        $task1 = new Core.Clients.Client.$ctor1("TransportationContract").FirstOrDefaultAsync(TMS.API.Models.TransportationContract, System.String.format("?$filter=BossId eq {0} and cast(StartDate,Edm.DateTimeOffset) lt {1} and cast(EndDate,Edm.DateTimeOffset) gt {2}", Bridge.box(transportationPlan.BossId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), Core.Extensions.DateTimeExt.ToOdataFormat(System.Nullable.getValue(transportationPlan.ClosingDate)), Core.Extensions.DateTimeExt.ToOdataFormat(System.Nullable.getValue(transportationPlan.ClosingDate))));
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        contact = $taskResult1;
                                        if (contact == null) {
                                            Core.Extensions.Toast.Warning("Kh\u00e1ch h\u00e0ng ch\u01b0a c\u00f3 h\u1ee3p \u0111\u1ed3ng vui l\u00f2ng b\u1ed5 sung h\u1ee3p \u0111\u1ed3ng");
                                            $tcs.setResult(false);
                                            return;
                                        } else {
                                            $tcs.setResult(true);
                                            return;
                                        }
                                        $step = 4;
                                        continue;
                                    }
                                    case 3: {
                                        $tcs.setResult(false);
                                        return;
                                    }
                                    case 4: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            BeforeCreated: function (transportationPlan) {
                var gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(null, null);
                var listViewItem = System.Linq.Enumerable.from(gridView.GetListViewItems(transportationPlan), Core.Components.ListViewItem).firstOrDefault(null, null);
                if (listViewItem == null) {
                    transportationPlan.IsTransportation = false;
                    transportationPlan.TotalContainerUsing = 0;
                    transportationPlan.TotalContainerRemain = transportationPlan.TotalContainer;
                    transportationPlan.PlanDate = System.DateTime.getNow();
                    return;
                }
            },
            SelectedExcel: function (e) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    files, 
                    uploadForm, 
                    formData, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        files = Bridge.as(e.target.files, FileList);
                                        if (Core.Extensions.IEnumerableExtensions.Nothing(File, files)) {
                                            $tcs.setResult(null);
                                            return;
                                        }

                                        uploadForm = Bridge.as(this._uploader.parentElement, HTMLFormElement);
                                        formData = new FormData(uploadForm);
                                        $task1 = this.Client.SubmitAsync(System.Collections.Generic.List$1(TMS.API.Models.TransportationPlan), ($t = new Core.Clients.XHRWrapper(), $t.FormData = formData, $t.Url = "ImportExcel", $t.Method = Core.Enums.HttpMethod.POST, $t.ResponseMimeType = Core.Extensions.Utils.GetMimeType("xlsx"), $t));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ImportExcel: function () {
                this._uploader.click();
            },
            CheckQuotationTransportation: function () {
                var gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(null, null);
                var listViewItems = System.Linq.Enumerable.from(gridView.RowData.Data).select(function (x) { return Bridge.cast(x, TMS.API.Models.Transportation); }).toList(TMS.API.Models.Transportation);
                if (!Bridge.referenceEquals(this.EditForm.Name, "Transportation Return Plan List")) {
                    listViewItems.ForEach(function (x) {
                        var listViewItem = System.Linq.Enumerable.from(gridView.GetListViewItems(x), Core.Components.ListViewItem).firstOrDefault(null, null);
                        if (listViewItem == null) {
                            return;
                        }
                        Core.Extensions.HtmlElementExtension.RemoveClass(listViewItem.Element, "bg-red");
                        if (!x.IsQuotationReturn) {
                            Core.Extensions.HtmlElementExtension.AddClass(listViewItem.Element, "bg-red");
                        }
                    });
                }
            },
            Analysis: function (transportationPlan) {
                if (transportationPlan.TransportationTypeId == null || transportationPlan.BossId == null || transportationPlan.CommodityId == null || transportationPlan.ContainerTypeId == null || transportationPlan.RouteId == null) {
                    return;
                }
                window.clearTimeout(this.Awaiter);
                this.Awaiter = window.setTimeout(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $task2, 
                        $taskResult2, 
                        $task3, 
                        $taskResult3, 
                        $task4, 
                        $jumpFromFinally, 
                        containerId, 
                        commodityValueDB, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.CheckContainerType(transportationPlan);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        containerId = $taskResult1;
                                        $task2 = new Core.Clients.Client.$ctor1("CommodityValue").FirstOrDefaultAsync(TMS.API.Models.CommodityValue, System.String.format("?$filter=Active eq true and BossId eq {0} and CommodityId eq {1} and ContainerId eq {2}", Bridge.box(transportationPlan.BossId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), Bridge.box(transportationPlan.CommodityId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), Bridge.box(containerId, System.Int32)));
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        commodityValueDB = $taskResult2;
                                        if (transportationPlan.TransportationTypeId != null || commodityValueDB != null) {
                                            if (commodityValueDB != null) {
                                                transportationPlan.JourneyId = commodityValueDB.JourneyId;
                                                transportationPlan.IsWet = commodityValueDB.IsWet;
                                            } else {
                                                if (transportationPlan.TransportationTypeId != null) {
                                                    if (System.Nullable.neq(transportationPlan.TransportationTypeId, 11673)) {
                                                        transportationPlan.JourneyId = 12114;
                                                        transportationPlan.IsWet = false;
                                                    } else {
                                                        transportationPlan.JourneyId = null;
                                                    }
                                                }
                                            }
                                        }
                                        if (commodityValueDB != null) {
                                            transportationPlan.SteamingTerms = commodityValueDB.SteamingTerms;
                                            transportationPlan.BreakTerms = commodityValueDB.BreakTerms;
                                            transportationPlan.IsBought = commodityValueDB.IsBought;
                                            transportationPlan.CustomerTypeId = commodityValueDB.CustomerTypeId;
                                            transportationPlan.CommodityValue = commodityValueDB.TotalPrice;
                                            transportationPlan.IsSettingsInsurance = true;
                                            Core.Extensions.Toast.Success("GTHH \u0111\u00e3 t\u1ed3n t\u1ea1i trong h\u1ec7 th\u1ed1ng v\u1edbi gi\u00e1 tr\u1ecb l\u00e0: " + (Bridge.Int.format(System.Decimal(transportationPlan.CommodityValue.toString()), "N0") || ""));
                                        }
                                        $task3 = new Core.Clients.Client.$ctor1("TransportationPlan").PatchAsync(System.Object, this.GetPatchEntity(transportationPlan));
                                        $step = 3;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        if (commodityValueDB == null || (transportationPlan.TransportationTypeId != null && transportationPlan.JourneyId == null)) {
                                            $step = 4;
                                            continue;
                                        } 
                                        $step = 6;
                                        continue;
                                    }
                                    case 4: {
                                        $task4 = this.SettingsCommodityValue(transportationPlan);
                                        $step = 5;
                                        if ($task4.isCompleted()) {
                                            continue;
                                        }
                                        $task4.continue($asyncBody);
                                        return;
                                    }
                                    case 5: {
                                        $task4.getAwaitedResult();
                                        $step = 6;
                                        continue;
                                    }
                                    case 6: {
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }), 500);
            },
            SettingsCommodityValue: function (transportationPlan) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "SettingsCommodityValue", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Setting.SettingsCommodityValueBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "C\u1ea5u h\u00ecnh b\u1ea3o hi\u1ec3m v\u00e0 GTHH";
                                            instance.Entity = transportationPlan;
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CheckContainerTypes: function (transportationPlans) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    containerTypes, 
                    containerTypeCodes, 
                    $t, 
                    containerTypeIds, 
                    containers, 
                    $t1, 
                    item, 
                    containerTypeName, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = new Core.Clients.Client.$ctor1("MasterData").GetRawList(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and ParentId eq 7565", null));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        containerTypes = $taskResult1;
                                        containerTypeCodes = ($t = TMS.API.Models.MasterData, System.Linq.Enumerable.from(containerTypes, $t).toDictionary(function (x) {
                                            return x.Id;
                                        }, null, System.Int32, $t));
                                        containerTypeIds = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                                        $task2 = new Core.Clients.Client.$ctor1("MasterData").GetRawList(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and (contains(Name, '40HC') or contains(Name, '20DC') or contains(Name, '45HC') or contains(Name, '50DC'))", null));
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        containers = $taskResult2;
                                        $t1 = Bridge.getEnumerator(transportationPlans);
                                        try {
                                            while ($t1.moveNext()) {
                                                item = $t1.Current;
                                                containerTypeName = System.Collections.Generic.CollectionExtensions.GetValueOrDefault(System.Int32, TMS.API.Models.MasterData, containerTypeCodes, System.Nullable.getValue(item.ContainerTypeId));
                                                if (System.String.contains(containerTypeName.Description,"Cont 20")) {
                                                    this.containerId = containers.Find(function (x) {
                                                        return System.String.contains(x.Name,"20DC");
                                                    }).Id;
                                                } else if (System.String.contains(containerTypeName.Description,"Cont 40")) {
                                                    this.containerId = containers.Find(function (x) {
                                                        return System.String.contains(x.Name,"40HC");
                                                    }).Id;
                                                } else if (System.String.contains(containerTypeName.Description,"Cont 45")) {
                                                    this.containerId = containers.Find(function (x) {
                                                        return System.String.contains(x.Name,"45HC");
                                                    }).Id;
                                                } else if (System.String.contains(containerTypeName.Description,"Cont 50")) {
                                                    this.containerId = containers.Find(function (x) {
                                                        return System.String.contains(x.Name,"50DC");
                                                    }).Id;
                                                }
                                                containerTypeIds.add(this.containerId);
                                            }
                                        } finally {
                                            if (Bridge.is($t1, System.IDisposable)) {
                                                $t1.System$IDisposable$Dispose();
                                            }
                                        }
                                        $tcs.setResult(containerTypeIds);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CheckContainerType: function (transportationPlan) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    containerTypes, 
                    containerTypeCodes, 
                    $t, 
                    containerTypeName, 
                    containers, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = new Core.Clients.Client.$ctor1("MasterData").GetRawList(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and ParentId eq 7565", null));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        containerTypes = $taskResult1;
                                        containerTypeCodes = ($t = TMS.API.Models.MasterData, System.Linq.Enumerable.from(containerTypes, $t).toDictionary(function (x) {
                                            return x.Id;
                                        }, null, System.Int32, $t));
                                        containerTypeName = System.Collections.Generic.CollectionExtensions.GetValueOrDefault(System.Int32, TMS.API.Models.MasterData, containerTypeCodes, System.Nullable.getValue(transportationPlan.ContainerTypeId));
                                        $task2 = new Core.Clients.Client.$ctor1("MasterData").GetRawList(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and (contains(Name, '40HC') or contains(Name, '20DC') or contains(Name, '45HC') or contains(Name, '50DC'))", null));
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        containers = $taskResult2;
                                        if (System.String.contains(containerTypeName.Description,"Cont 20")) {
                                            this.containerId = containers.Find(function (x) {
                                                return System.String.contains(x.Name,"20DC");
                                            }).Id;
                                        } else if (System.String.contains(containerTypeName.Description,"Cont 40")) {
                                            this.containerId = containers.Find(function (x) {
                                                return System.String.contains(x.Name,"40HC");
                                            }).Id;
                                        } else if (System.String.contains(containerTypeName.Description,"Cont 45")) {
                                            this.containerId = containers.Find(function (x) {
                                                return System.String.contains(x.Name,"45HC");
                                            }).Id;
                                        } else if (System.String.contains(containerTypeName.Description,"Cont 50")) {
                                            this.containerId = containers.Find(function (x) {
                                                return System.String.contains(x.Name,"50DC");
                                            }).Id;
                                        }
                                        $tcs.setResult(this.containerId);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            SetPolicy: function (transportationPlan) {
                window.clearTimeout(this.Awaiter);
                this.Awaiter = window.setTimeout(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $task2, 
                        $taskResult2, 
                        $task3, 
                        $taskResult3, 
                        $task4, 
                        $taskResult4, 
                        $jumpFromFinally, 
                        gridView, 
                        listViewItem, 
                        components, 
                        operators, 
                        settingPolicys, 
                        listpolicy, 
                        componentrs, 
                        operatorrs, 
                        query, 
                        rs, 
                        data, 
                        index, 
                        $t, 
                        item, 
                        detail, 
                        $t1, 
                        build, 
                        str, 
                        check, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,10,11,13], $step);
                                switch ($step) {
                                    case 0: {
                                        gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(null, null);
                                        listViewItem = System.Linq.Enumerable.from(gridView.GetListViewItems(transportationPlan), Core.Components.ListViewItem).firstOrDefault(null, null);
                                        if (transportationPlan.RouteId != null || transportationPlan.BossId != null) {
                                            $step = 1;
                                            continue;
                                        } 
                                        $step = 13;
                                        continue;
                                    }
                                    case 1: {
                                        components = new Core.Clients.Client.$ctor1("GridPolicy").GetRawList(TMS.API.Models.GridPolicy, "?$filter=Id in (20511)");
                                        operators = new Core.Clients.Client.$ctor1("MasterData").GetRawList(TMS.API.Models.MasterData, "?$filter=Parent/Name eq 'Operator'");
                                        settingPolicys = new Core.Clients.Client.$ctor1("SettingPolicy").GetRawList(TMS.API.Models.SettingPolicy, System.String.format("?$expand=SettingPolicyDetail&$filter=TypeId eq 2 and TransportationTypeId ne 11677", null));
                                        $task1 = System.Threading.Tasks.Task.whenAll(components, operators, settingPolicys);
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $task1.getAwaitedResult();
                                        listpolicy = settingPolicys.getResult();
                                        componentrs = components.getResult();
                                        operatorrs = operators.getResult();
                                        query = new (System.Collections.Generic.List$1(System.String)).ctor();
                                        rs = System.Linq.Enumerable.from(listpolicy, TMS.API.Models.SettingPolicy).selectMany(function (item) {
                                            var $t;
                                            var detail = ($t = TMS.API.Models.SettingPolicyDetail, System.Linq.Enumerable.from(item.SettingPolicyDetail, $t).toList($t));
                                            var build = System.Linq.Enumerable.from(detail, TMS.API.Models.SettingPolicyDetail).groupBy(function (z) {
                                                return z.ComponentId;
                                            }).selectMany(function (y) {
                                                var group = System.Linq.Enumerable.from(y.toList(TMS.API.Models.SettingPolicyDetail), TMS.API.Models.SettingPolicyDetail).select(function (l) {
                                                    var $t1;
                                                    var component = System.Linq.Enumerable.from(componentrs, TMS.API.Models.GridPolicy).firstOrDefault(function (k) {
                                                        return System.Nullable.eq(k.Id, l.ComponentId);
                                                    }, null);
                                                    if (component == null) {
                                                        return null;
                                                    }
                                                    var ope = System.Linq.Enumerable.from(operatorrs, TMS.API.Models.MasterData).firstOrDefault(function (k) {
                                                        return System.Nullable.eq(k.Id, l.OperatorId);
                                                    }, null);
                                                    if (Bridge.referenceEquals(component.ComponentType, "Dropdown") || Bridge.referenceEquals(component.ComponentType, "SearchEntry")) {
                                                        var format = System.String.replaceAll(($t1 = component.FormatCell.split("}"))[System.Array.index(0, $t1)], "{", "");
                                                        return new Core.Clients.Client.$ctor1(component.RefName).GetRawList(System.Object, System.String.format(System.String.format("?$select=Id&$filter={0}", [ope.Name]), format, l.Value), false, false, false, component.RefName);
                                                    } else {
                                                        return null;
                                                    }
                                                });
                                                return group;
                                            }).toList(System.Threading.Tasks.Task$1(System.Collections.Generic.List$1(System.Object)));
                                            return build;
                                        }).where(function (x) {
                                            return x != null;
                                        }).toList(System.Threading.Tasks.Task$1(System.Collections.Generic.List$1(System.Object)));
                                        $task2 = System.Threading.Tasks.Task.whenAll(rs);
                                        $step = 3;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        data = $taskResult2;
                                        index = 0;
                                        $t = Bridge.getEnumerator(listpolicy);
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        if ($t.moveNext()) {
                                            item = $t.Current;
                                            $step = 5;
                                            continue;
                                        }
                                        $step = 12;
                                        continue;
                                    }
                                    case 5: {
                                        detail = ($t1 = TMS.API.Models.SettingPolicyDetail, System.Linq.Enumerable.from(item.SettingPolicyDetail, $t1).toList($t1));
                                        build = System.Linq.Enumerable.from(detail, TMS.API.Models.SettingPolicyDetail).groupBy(function (z) {
                                            return z.ComponentId;
                                        }).select(function (y) {
                                            var listAnd = new (System.Collections.Generic.List$1(System.String)).ctor();
                                            var group = System.Linq.Enumerable.from(y.toList(TMS.API.Models.SettingPolicyDetail), TMS.API.Models.SettingPolicyDetail).select(function (l) {
                                                var $t2;
                                                var component = System.Linq.Enumerable.from(componentrs, TMS.API.Models.GridPolicy).firstOrDefault(function (k) {
                                                    return System.Nullable.eq(k.Id, l.ComponentId);
                                                }, null);
                                                if (component == null) {
                                                    return null;
                                                }
                                                var ope = System.Linq.Enumerable.from(operatorrs, TMS.API.Models.MasterData).firstOrDefault(function (k) {
                                                    return System.Nullable.eq(k.Id, l.OperatorId);
                                                }, null);
                                                if (Bridge.referenceEquals(component.ComponentType, "Dropdown") || Bridge.referenceEquals(component.ComponentType, "SearchEntry")) {
                                                    var rsdynamic = data[System.Array.index(index, data)];
                                                    index = (index + 1) | 0;
                                                    if (System.Linq.Enumerable.from(rsdynamic, System.Object).any()) {
                                                        var ids = Core.Extensions.IEnumerableExtensions.Combine(System.Int32, System.Linq.Enumerable.from(rsdynamic, System.Object).select(function (x) {
                                                            return x.Id;
                                                        }).select(function (x) {{ return Bridge.cast(x, System.Int32); }}));
                                                        var format = System.String.replaceAll(($t2 = component.FormatCell.split("}"))[System.Array.index(0, $t2)], "{", "");
                                                        if (Bridge.referenceEquals(ope.Description, "Ch\u1ee9a") || Bridge.referenceEquals(ope.Description, "B\u1eb1ng")) {
                                                            return System.String.format("{0} in ({1})", component.FieldName, ids);
                                                        } else {
                                                            return System.String.format("{0} in ({1}) eq false", component.FieldName, ids);
                                                        }
                                                    } else {
                                                        return null;
                                                    }
                                                } else {
                                                    listAnd.add(System.String.format("{0}", [System.String.format(ope.Name, component.FieldName, l.Value)]));
                                                    return null;
                                                }
                                            }).where(function (x) {
                                                return !Bridge.referenceEquals(x, "()") && !Core.Extensions.StringExt.IsNullOrWhiteSpace(x);
                                            }).toList(System.String);
                                            return ((group.Count === 0 ? "" : System.String.format("({0})", [Core.Extensions.IEnumerableExtensions.Combine(System.String, System.Linq.Enumerable.from(group, System.String).where(function (x) {
                                                return !Bridge.referenceEquals(x, "()") && !Core.Extensions.StringExt.IsNullOrWhiteSpace(x);
                                            }), " or ")])) || "") + ((listAnd.Count === 0 ? "" : System.String.format(" {0}", [Core.Extensions.IEnumerableExtensions.Combine(System.String, System.Linq.Enumerable.from(listAnd, System.String).where(function (x) {
                                                return !Core.Extensions.StringExt.IsNullOrWhiteSpace(x);
                                            }), " and ")])) || "");
                                        }).toList(System.String);
                                        str = Core.Extensions.IEnumerableExtensions.Combine(System.String, System.Linq.Enumerable.from(build, System.String).where(function (x) {
                                            return !Bridge.referenceEquals(x, "()") && !Core.Extensions.StringExt.IsNullOrWhiteSpace(x);
                                        }), " or ");
                                        query.add(str);
                                        check = null;
                                        if (!System.String.isNullOrWhiteSpace(str)) {
                                            $step = 6;
                                            continue;
                                        } 
                                        $step = 8;
                                        continue;
                                    }
                                    case 6: {
                                        $task3 = new Core.Clients.Client.$ctor1("TransportationPlan").FirstOrDefaultAsync(TMS.API.Models.TransportationPlan, System.String.format("?$filter=Active eq true and Id eq {0} and ({1}) and RequestChangeId eq null", Bridge.box(transportationPlan.Id, System.Int32), str));
                                        $step = 7;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 7: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        check = $taskResult3;
                                        $step = 8;
                                        continue;
                                    }
                                    case 8: {
                                        if (check != null) {
                                            $step = 9;
                                            continue;
                                        } 
                                        $step = 11;
                                        continue;
                                    }
                                    case 9: {
                                        transportationPlan.TransportationTypeId = item.TransportationTypeId;
                                        $task4 = new Core.Clients.Client.$ctor1("TransportationPlan").PatchAsync(TMS.API.Models.TransportationPlan, this.GetPatchEntityTransportationType(transportationPlan));
                                        $step = 10;
                                        if ($task4.isCompleted()) {
                                            continue;
                                        }
                                        $task4.continue($asyncBody);
                                        return;
                                    }
                                    case 10: {
                                        $taskResult4 = $task4.getAwaitedResult();
                                        $step = 11;
                                        continue;
                                    }
                                    case 11: {
                                        $step = 4;
                                        continue;
                                    }

                                    case 13: {
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }), 500);
            },
            AfterPatchUpdateTransportationPlan: function (transportationPlan, patchUpdate, listViewItem) {
                if (listViewItem == null) {
                    return;
                }
                Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, listViewItem.FilterChildren$1(function (y) {
                    return !y.GuiInfo.Disabled;
                }), function (y) {
                    y.Disabled = false;
                });
                if (transportationPlan.IsTransportation) {
                    Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, listViewItem.FilterChildren$1(function (y) {
                        return !Bridge.referenceEquals(y.GuiInfo.FieldName, "btnRequestChange") && !y.GuiInfo.Disabled;
                    }), function (y) {
                        y.Disabled = true;
                    });
                } else {
                    Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, listViewItem.FilterChildren$1(function (y) {
                        return Bridge.referenceEquals(y.GuiInfo.FieldName, "btnRequestChange") && !y.GuiInfo.Disabled;
                    }), function (y) {
                        y.Disabled = true;
                    });
                }
                Core.Extensions.HtmlElementExtension.RemoveClass(listViewItem.Element, "bg-host");
                if (System.Nullable.eq(transportationPlan.StatusId, Core.Enums.ApprovalStatusEnum.Approving)) {
                    Core.Extensions.HtmlElementExtension.AddClass(listViewItem.Element, "bg-host");
                }
                if (Bridge.referenceEquals(listViewItem.ListViewSection.ListView.GuiInfo.FieldName, "TransportationPlan2") && transportationPlan.IsTransportation) {
                    listViewItem.ListViewSection.ListView.RemoveRowById(transportationPlan.Id);
                    listViewItem.ListViewSection.ListView.SelectedIds.remove(transportationPlan.Id);
                }
                this.SetPolicy(transportationPlan);
                this.Analysis(transportationPlan);
            },
            CreateCommodityValue: function (transportationPlan) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    startDate1, 
                    endDate1, 
                    startDate2, 
                    endDate2, 
                    containerId, 
                    newCommodityValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        startDate1 = System.DateTime.create(System.DateTime.getYear(System.DateTime.getNow()), 1, 1);
                                        endDate1 = System.DateTime.create(System.DateTime.getYear(System.DateTime.getNow()), 6, 30);
                                        startDate2 = System.DateTime.create(System.DateTime.getYear(System.DateTime.getNow()), 7, 1);
                                        endDate2 = System.DateTime.create(System.DateTime.getYear(System.DateTime.getNow()), 12, 31);
                                        $task1 = this.CheckContainerType(transportationPlan);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        containerId = $taskResult1;
                                        newCommodityValue = new TMS.API.Models.CommodityValue();
                                        Core.Extensions.ReflectionExt.CopyPropFrom$1(newCommodityValue, transportationPlan);
                                        newCommodityValue.Id = 0;
                                        newCommodityValue.ContainerId = containerId;
                                        newCommodityValue.TotalPrice = System.Nullable.getValue(transportationPlan.CommodityValue);
                                        newCommodityValue.SaleId = transportationPlan.UserId;
                                        newCommodityValue.StartDate = System.DateTime.getDate(System.DateTime.getNow());
                                        newCommodityValue.Notes = "";
                                        newCommodityValue.Active = true;
                                        newCommodityValue.InsertedDate = System.DateTime.getDate(System.DateTime.getNow());
                                        newCommodityValue.CreatedBy = transportationPlan.InsertedBy;
                                        if (System.DateTime.gte(System.DateTime.getDate(System.DateTime.getNow()), startDate1) && System.DateTime.lte(System.DateTime.getDate(System.DateTime.getNow()), endDate1)) {
                                            newCommodityValue.EndDate = endDate1;
                                        }
                                        if (System.DateTime.gte(System.DateTime.getDate(System.DateTime.getNow()), startDate2) && System.DateTime.lte(System.DateTime.getDate(System.DateTime.getNow()), endDate2)) {
                                            newCommodityValue.EndDate = endDate2;
                                        }
                                        $tcs.setResult(newCommodityValue);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            GetPatchEntityTransportationType: function (transportationPlan) {
                var $t;
                var details = function (_o1) {
                        var $t;
                        _o1.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = Core.Extensions.Utils.IdField, $t.Value = Bridge.toString(transportationPlan.Id), $t));
                        _o1.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "TransportationTypeId", $t.Value = System.Nullable.toString(transportationPlan.TransportationTypeId, null), $t));
                        return _o1;
                    }(new (System.Collections.Generic.List$1(Core.ViewModels.PatchUpdateDetail)).ctor());
                return ($t = new Core.ViewModels.PatchUpdate(), $t.Changes = details, $t);
            },
            GetPatchEntity: function (transportationPlan) {
                var $t;
                var details = function (_o1) {
                        var $t;
                        _o1.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = Core.Extensions.Utils.IdField, $t.Value = Bridge.toString(transportationPlan.Id), $t));
                        _o1.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "TransportationTypeId", $t.Value = System.Nullable.toString(transportationPlan.TransportationTypeId, null), $t));
                        _o1.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "IsWet", $t.Value = System.Boolean.toString(transportationPlan.IsWet), $t));
                        _o1.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "SteamingTerms", $t.Value = System.Boolean.toString(transportationPlan.SteamingTerms), $t));
                        _o1.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "BreakTerms", $t.Value = System.Boolean.toString(transportationPlan.BreakTerms), $t));
                        _o1.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "IsBought", $t.Value = System.Boolean.toString(transportationPlan.IsBought), $t));
                        _o1.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "JourneyId", $t.Value = System.Nullable.toString(transportationPlan.JourneyId, null), $t));
                        _o1.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "CustomerTypeId", $t.Value = System.Nullable.toString(transportationPlan.CustomerTypeId, null), $t));
                        _o1.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "CommodityValue", $t.Value = transportationPlan.CommodityValue.toString(), $t));
                        _o1.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "IsSettingsInsurance", $t.Value = System.Boolean.toString(transportationPlan.IsSettingsInsurance), $t));
                        return _o1;
                    }(new (System.Collections.Generic.List$1(Core.ViewModels.PatchUpdateDetail)).ctor());
                return ($t = new Core.ViewModels.PatchUpdate(), $t.Changes = details, $t);
            }
        }
    });

    Bridge.define("TMS.UI.Business.Manage.TransportationPlanListMobileBL", {
        inherits: [Core.Components.Forms.TabEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "TransportationPlan");
                this.Name = "TransportationPlan Mobile List";
            }
        },
        methods: {
            EditTransportationPlan: function (entity) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    id, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        id = "EditTransportationPlanMobile" + entity.Id;
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenTab$1(this, id, "TransportationPlan Editor Mobile", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Manage.TransportationPlanEditorMobileBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.TabEditor);
                                            instance.Title = "Ch\u1ec9nh s\u1eeda KHVC";
                                            instance.Icon = "fal fa-sitemap mr-1";
                                            instance.Entity = entity;
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            AddTransportationPlan: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenTab$1(this, "AddTransportationPlanMobile", "TransportationPlan Editor Mobile", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Manage.TransportationPlanEditorMobileBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.TabEditor);
                                            instance.Title = "Th\u00eam m\u1edbi KHVC";
                                            instance.Icon = "fal fa-sitemap mr-1";
                                            instance.Entity = new TMS.API.Models.TransportationPlan();
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("TMS.UI.Business.Manage.TransportationReturnEditorBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        fields: {
            gridView: null
        },
        props: {
            TransportationEntity: {
                get: function () {
                    return Bridge.as(this.Entity, TMS.API.Models.Transportation);
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "Transportation");
                this.Name = "Transportation Return Editor";
            }
        },
        methods: {
            BeforeCreatedExpense: function (expense) {
                if (this.TransportationEntity == null) {
                    Core.Extensions.Toast.Warning("Vui l\u00f2ng ch\u1ecdn cont c\u1ea7n nh\u1eadp");
                    return;
                }
                expense.ContainerNo = this.TransportationEntity.ContainerNo;
                expense.SealNo = this.TransportationEntity.SealNo;
                expense.BossId = this.TransportationEntity.BossId;
                expense.CommodityId = this.TransportationEntity.CommodityId;
                expense.ContainerTypeId = this.TransportationEntity.ContainerTypeId;
                expense.RouteId = this.TransportationEntity.RouteId;
                expense.YearText = this.TransportationEntity.YearText;
                expense.MonthText = this.TransportationEntity.MonthText;
                expense.TransportationId = this.TransportationEntity.Id;
                expense.Id = 0;
                expense.Quantity = System.Decimal(1);
                expense.IsReturn = true;
            },
            AfterCreatedExpense: function (expense, patchUpdate, listViewItem1) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $task3, 
                    $taskResult3, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    transportations, 
                    expenseTypeIds, 
                    expenseTypes, 
                    notTotal, 
                    $t, 
                    item, 
                    details, 
                    expenses, 
                    $t1, 
                    itemDetail, 
                    expenseTypeThisIds, 
                    totalThisValue, 
                    $t2, 
                    path, 
                    $t3, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = new Core.Clients.Client.$ctor1("Transportation").GetRawList(TMS.API.Models.Transportation, System.String.format("?$expand=Expense&$filter=Active eq true and Id in ({0})", [([Bridge.box(this.TransportationEntity.Id, System.Int32)]).join(",")]));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        transportations = $taskResult1;
                                        expenseTypeIds = System.Linq.Enumerable.from(transportations, TMS.API.Models.Transportation).selectMany(function (x) {
                                            return x.Expense;
                                        }).where(function (x) {
                                            return x.ExpenseTypeId != null;
                                        }).select(function (x) {
                                            return System.Nullable.getValue(x.ExpenseTypeId);
                                        }).distinct().toList(System.Int32);
                                        $task2 = new Core.Clients.Client.$ctor1("MasterData").GetRawListById(TMS.API.Models.MasterData, expenseTypeIds);
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        expenseTypes = $taskResult2;
                                        notTotal = System.Linq.Enumerable.from(expenseTypes, TMS.API.Models.MasterData).where(function (x) {
                                            return Core.Extensions.StringExt.IsNullOrWhiteSpace(x.Additional);
                                        }).select(function (x) {
                                            return x.Id;
                                        }).toList(System.Int32);
                                        $t = Bridge.getEnumerator(transportations);
                                        $step = 3;
                                        continue;
                                    }
                                    case 3: {
                                        if ($t.moveNext()) {
                                            item = { v : $t.Current };
                                            $step = 4;
                                            continue;
                                        }
                                        $step = 6;
                                        continue;
                                    }
                                    case 4: {
                                        details = (function ($me, item) {
                                            return function (_o1) {
                                                var $t1;
                                                _o1.add(($t1 = new Core.ViewModels.PatchUpdateDetail(), $t1.Field = Core.Extensions.Utils.IdField, $t1.Value = Bridge.toString(item.v.Id), $t1));
                                                return _o1;
                                            };
                                        })(this, item)(new (System.Collections.Generic.List$1(Core.ViewModels.PatchUpdateDetail)).ctor());
                                        expenses = item.v.Expense;
                                        $t1 = Bridge.getEnumerator(System.Linq.Enumerable.from(expenseTypes, TMS.API.Models.MasterData).select(function (x) {
                                            return x.Additional;
                                        }).distinct().toList(System.String));
                                        try {
                                            while ($t1.moveNext()) {
                                                itemDetail = { v : $t1.Current };
                                                expenseTypeThisIds = { v : System.Linq.Enumerable.from(expenseTypes, TMS.API.Models.MasterData).where((function ($me, itemDetail) {
                                                    return function (x) {
                                                        return Bridge.referenceEquals(x.Additional, itemDetail.v);
                                                    };
                                                })(this, itemDetail)).select(function (x) {
                                                    return x.Id;
                                                }).distinct().toList(System.Int32) };
                                                totalThisValue = System.Linq.Enumerable.from(expenses, TMS.API.Models.Expense).where((function ($me, expenseTypeThisIds) {
                                                    return function (x) {
                                                        return expenseTypeThisIds.v.contains(System.Nullable.getValue(x.ExpenseTypeId));
                                                    };
                                                })(this, expenseTypeThisIds)).sum(function (x) {
                                                    return x.TotalPriceAfterTax;
                                                }, System.Decimal.Zero);
                                                details.add(($t2 = new Core.ViewModels.PatchUpdateDetail(), $t2.Field = itemDetail.v, $t2.Value = totalThisValue.toString(), $t2));
                                            }
                                        } finally {
                                            if (Bridge.is($t1, System.IDisposable)) {
                                                $t1.System$IDisposable$Dispose();
                                            }
                                        }
                                        path = ($t2 = new Core.ViewModels.PatchUpdate(), $t2.Changes = ($t3 = Core.ViewModels.PatchUpdateDetail, System.Linq.Enumerable.from(Core.Extensions.BridgeExt.DistinctBy(Core.ViewModels.PatchUpdateDetail, System.String, System.Linq.Enumerable.from(details, Core.ViewModels.PatchUpdateDetail).where(function (x) {
                                            return x.Field != null && !Bridge.referenceEquals(x.Field, "null") && !Bridge.referenceEquals(x.Field, "");
                                        }), function (x) {
                                            return x.Field;
                                        }), $t3).toList($t3)), $t2);
                                        $task3 = new Core.Clients.Client.$ctor1("Transportation").PatchAsync(TMS.API.Models.Transportation, path, "", "true", false, false);
                                        $step = 5;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 5: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        $step = 3;
                                        continue;
                                    }
                                    case 6: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CalcTax: function (expense) {
                var grid = Core.Components.Extensions.ComponentExt.FindComponentByName(Core.Components.GridView, this, "Expense");
                var listViewItem = System.Linq.Enumerable.from(grid.GetListViewItems(expense), Core.Components.ListViewItem).firstOrDefault(null, null);
                expense.TotalPriceBeforeTax = expense.UnitPrice.mul(expense.Quantity);
                expense.TotalPriceAfterTax = expense.TotalPriceBeforeTax.add(expense.TotalPriceBeforeTax.mul(expense.Vat).div(System.Decimal(100)));
                if (listViewItem != null) {
                    listViewItem.UpdateView();
                    var updated = listViewItem.FilterChildren$1(function (x) {
                        return Bridge.referenceEquals(x.GuiInfo.FieldName, "TotalPriceBeforeTax") || Bridge.referenceEquals(x.GuiInfo.FieldName, "TotalPriceAfterTax");
                    });
                    Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, updated, function (x) {
                        x.Dirty = true;
                    });
                }
            }
        }
    });

    Bridge.define("TMS.UI.Business.Manage.UpdateStartShipBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        props: {
            TransportationEntity: {
                get: function () {
                    return Bridge.as(this.Entity, TMS.API.Models.Transportation);
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "Transportation");
                this.Name = "Update Start Ship";
            }
        },
        methods: {
            ApplyChanges: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $task3, 
                    $taskResult3, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    transportations, 
                    $t, 
                    patchModel, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.IsFormValid();
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        if (!$taskResult1) {
                                            $step = 2;
                                            continue;
                                        } 
                                        $step = 3;
                                        continue;
                                    }
                                    case 2: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    case 3: {
                                        if (Core.Extensions.IEnumerableExtensions.Nothing(System.Int32, this.TransportationEntity.RouteIds)) {
                                            Core.Extensions.Toast.Warning("Vui l\u00f2ng ch\u1ecdn tuy\u1ebfn \u0111\u01b0\u1eddng c\u1ea7n c\u1eadp");
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        $task2 = new Core.Clients.Client.$ctor1("Transportation").GetRawList(TMS.API.Models.Transportation, (System.String.format("?$filter=Active eq true ", null) || "") + (System.String.format(" and {0} eq {1}", "ShipId", Bridge.box(this.TransportationEntity.ShipId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)) || "") + (System.String.format(" and {0} eq '{1}'", "Trip", this.TransportationEntity.Trip) || "") + (System.String.format(" and {0} in ({1})", "RouteId", Core.Extensions.IEnumerableExtensions.Combine(System.Int32, this.TransportationEntity.RouteIds)) || "") + (System.String.format(" and cast(ShipDate,Edm.DateTimeOffset) eq {0}", [!Bridge.equals(($t = this.TransportationEntity.ShipDate), null) ? Core.Extensions.DateTimeExt.ToOdataFormat($t) : null]) || "") + (System.String.format(" and PortLiftId eq {0}", [(this.TransportationEntity.PortLiftId == null ? "null" : System.Nullable.toString(this.TransportationEntity.PortLiftId, null))]) || ""));
                                        $step = 4;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        transportations = $taskResult2;
                                        if (transportations.Count === 0) {
                                            Core.Extensions.Toast.Warning("Kh\u00f4ng t\u00ecm th\u1ea5y d\u1eef li\u1ec7u t\u01b0\u01a1ng \u1ee9ng");
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        patchModel = System.Linq.Enumerable.from(transportations, TMS.API.Models.Transportation).select(Bridge.fn.bind(this, function (x) {
                                            return this.GetPathEntityUpdate(x);
                                        })).toList(Core.ViewModels.PatchUpdate);
                                        $task3 = new Core.Clients.Client.$ctor1("Transportation").PatchAsync$1(System.Object, patchModel);
                                        $step = 5;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 5: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        Core.Extensions.Toast.Success(System.String.format("C\u1eadp nh\u1eadt ng\u00e0y t\u00e0u c\u1eadp th\u00e0nh c\u00f4ng {0} cont", [Bridge.box(transportations.Count, System.Int32)]));
                                        this.Dirty = false;
                                        this.Dispose();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ChangeShip: function (transportation, ship) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    trans, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = new Core.Clients.Client.$ctor1("Transportation").FirstOrDefaultAsync(TMS.API.Models.Transportation, System.String.format("?$filter=Active eq true and {0} eq {1}  and ShipDate ne null", "ShipId", Bridge.box(this.TransportationEntity.ShipId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        trans = $taskResult1;
                                        this.TransportationEntity.Trip = trans.Trip;
                                        this.UpdateView$1(false, ["Trip"]);
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            GetPathEntity: function (transportation) {
                var $t, $t1;
                var details = new (System.Collections.Generic.List$1(Core.ViewModels.PatchUpdateDetail)).ctor();
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = Core.Extensions.Utils.IdField, $t.Value = Bridge.toString(transportation.Id), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "ShipDate", $t.Value = !Bridge.equals(($t1 = this.TransportationEntity.ShipDate), null) ? System.DateTime.format(System.DateTime.getDate($t1), "yyyy/MM/dd HH:mm:ss") : null, $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "PortLiftId", $t.Value = System.Nullable.toString(this.TransportationEntity.PortLiftId, null), $t));
                return ($t = new Core.ViewModels.PatchUpdate(), $t.Changes = details, $t);
            },
            GetPathEntityUpdate: function (transportation) {
                var $t, $t1;
                var details = new (System.Collections.Generic.List$1(Core.ViewModels.PatchUpdateDetail)).ctor();
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = Core.Extensions.Utils.IdField, $t.Value = Bridge.toString(transportation.Id), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "ShipDate", $t.Value = !Bridge.equals(($t1 = this.TransportationEntity.ShipDateNew), null) ? System.DateTime.format(System.DateTime.getDate($t1), "yyyy/MM/dd HH:mm:ss") : null, $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "PortLiftId", $t.Value = System.Nullable.toString(this.TransportationEntity.PortLiftNewId, null), $t));
                return ($t = new Core.ViewModels.PatchUpdate(), $t.Changes = details, $t);
            }
        }
    });

    Bridge.define("TMS.UI.Business.MenuComponent", {
        inherits: [Core.Components.EditableComponent],
        statics: {
            fields: {
                ActiveClass: null,
                ASIDE_WIDTH: null,
                _timeperiodToExit: 0,
                TranslateY50: null,
                _main: null,
                _instance: null,
                _lastTimeBackPress: null
            },
            props: {
                Instance: {
                    get: function () {
                        if (TMS.UI.Business.MenuComponent._instance == null) {
                            TMS.UI.Business.MenuComponent._instance = new TMS.UI.Business.MenuComponent();
                        }

                        return TMS.UI.Business.MenuComponent._instance;
                    }
                }
            },
            ctors: {
                init: function () {
                    this._lastTimeBackPress = System.DateTime.getDefaultValue();
                    this.ActiveClass = "active";
                    this.ASIDE_WIDTH = "44px";
                    this._timeperiodToExit = 2000;
                    this.TranslateY50 = "translateY(-50%)";
                }
            },
            methods: {
                PressToExit: function () {
                    if (typeof(navigator.app) === 'undefined') return;
                    var time = System.DateTime.subdd(System.DateTime.getNow(), TMS.UI.Business.MenuComponent._lastTimeBackPress);
                    if (time.getTotalMilliseconds() < 2000) {
                        navigator.app.exitApp();
                        return;
                    }
                    TMS.UI.Business.MenuComponent._lastTimeBackPress = System.DateTime.getNow();
                    Core.Extensions.Toast.Small("B\u1ea5m quay l\u1ea1i 2 l\u1ea7n \u0111\u1ec3 tho\u00e1t", 1000);
                },
                OpenFeature: function (feature) {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        type, 
                        id, 
                        exists, 
                        instance, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            if (feature == null || feature.ViewClass == null && feature.Entity == null) {
                                                $tcs.setResult(null);
                                                return;
                                            }

                                            $task1 = Core.Components.Extensions.ComponentExt.LoadFeatureComponent(feature);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            feature = $taskResult1;
                                            if (feature.ViewClass != null) {
                                                type = Bridge.Reflection.getType(feature.ViewClass);
                                            } else {
                                                type = Core.Components.Forms.TabEditor;
                                            }
                                            id = (feature.Name || "") + feature.Id;
                                            exists = System.Linq.Enumerable.from(Core.Components.Forms.TabEditor.Tabs, Core.Components.Forms.TabEditor).firstOrDefault(function (x) {
                                                return Bridge.referenceEquals(x.Id, id);
                                            }, null);
                                            if (exists != null) {
                                                exists.UpdateView();
                                                exists.Focus();
                                            } else {
                                                instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.EditForm);
                                                instance.Name = feature.Name;
                                                instance.Id = id;
                                                instance.Icon = feature.Icon;
                                                instance.Feature = feature;
                                                instance.Render();
                                            }
                                            if (!Core.Components.EditableComponent.IsSmallUp) {
                                                TMS.UI.Business.MenuComponent.Instance.Show = false;
                                            }
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }
            }
        },
        fields: {
            _feature: null,
            _hasRender: false,
            _btnBack: null,
            _btnToggle: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.EditableComponent.ctor.call(this, null);
            }
        },
        methods: {
            BuildFeatureTree: function () {
                var $t;
                var dic = System.Linq.Enumerable.from(this._feature, Core.Models.Feature).where(function (f) {
                        return f.IsMenu;
                    }).toDictionary(function (f) {
                        return f.Id;
                    }, null, System.Int32, Core.Models.Feature);
                $t = Bridge.getEnumerator(dic.Values);
                try {
                    while ($t.moveNext()) {
                        var menu = $t.Current;
                        if (menu.ParentId != null && dic.containsKey(System.Nullable.getValue(menu.ParentId))) {
                            var parent = dic.getItem(System.Nullable.getValue(menu.ParentId));
                            if (parent.InverseParent == null) {
                                parent.InverseParent = new (System.Collections.Generic.List$1(Core.Models.Feature)).ctor();
                            } else {
                                System.Array.add(parent.InverseParent, menu, Core.Models.Feature);
                            }
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                this._feature = System.Linq.Enumerable.from(this._feature, Core.Models.Feature).where(function (f) {
                        return f.ParentId == null && f.IsMenu;
                    }).toList(Core.Models.Feature);
            },
            ReloadMenu: function (focusedParentFeatureId) {
                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        featureTask, 
                        feature, 
                        $t, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            featureTask = new Core.Clients.Client.$ctor1("Feature").GetRawList(Core.Models.Feature, "?$expand=Entity($select=Name)&$filter=Active eq true and IsMenu eq true&$orderby=Order");
                                            $task1 = featureTask;
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            feature = $taskResult1;
                                            this._feature = feature;
                                            this.BuildFeatureTree();
                                            Core.MVVM.Html.Take$1(".nav-sidebar").Clear();
                                            this.RenderMenuItems(this._feature);
                                            !Bridge.staticEquals(($t = this.DOMContentLoaded), null) ? $t() : null;
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            Render: function () {
                var $t;
                if (this._hasRender) {
                    return;
                }

                this._hasRender = true;
                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $task2, 
                        $taskResult2, 
                        $task3, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        featureTask, 
                        roles, 
                        startAppTask, 
                        feature, 
                        startApps, 
                        featureParam, 
                        currentFeature, 
                        $t, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1,2,3,4,5], $step);
                                    switch ($step) {
                                        case 0: {
                                            featureTask = new Core.Clients.Client.$ctor1("Feature").GetRawList(Core.Models.Feature, "?$expand=Entity($select=Name)&$filter=Active eq true and IsMenu eq true&$orderby=Order");
                                            roles = Bridge.toArray(Core.Clients.Client.Token.RoleIds).join("\\");
                                            startAppTask = new Core.Clients.Client.$ctor1("UserSetting").GetRawList(Core.Models.UserSetting, "?$filter=Name eq 'StartApp'");
                                            $task1 = System.Threading.Tasks.Task.whenAll(featureTask, startAppTask);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            feature = featureTask.getResult();
                                            startApps = System.Linq.Enumerable.from(startAppTask.getResult(), Core.Models.UserSetting).select(function (x) {
                                                return x.Value;
                                            }).where(function (x) {
                                                return !Core.Extensions.StringExt.IsNullOrWhiteSpace(x);
                                            }).select(function (x) {
                                                return x.split(",");
                                            }).selectMany(function (x) {
                                                return x;
                                            }).select(function (x) {
                                                return Core.Extensions.Utils.TryParseInt(x);
                                            }).where(function (x) {
                                                return System.Nullable.hasValue(x);
                                            });
                                            this._feature = feature;
                                            this.BuildFeatureTree();
                                            Core.MVVM.Html.Take$1("#menu");
                                            this.RenderMenuItems(this._feature);
                                            this.RenderMenuMobileItems(this._feature, true);
                                            $task2 = Core.Extensions.IEnumerableExtensions.ForEachAsync(Core.Models.Feature, System.Linq.Enumerable.from(feature, Core.Models.Feature).where(function (x) {
                                                return startApps.contains(x.Id) || x.StartUp;
                                            }), TMS.UI.Business.MenuComponent.OpenFeature);
                                            $step = 2;
                                            if ($task2.isCompleted()) {
                                                continue;
                                            }
                                            $task2.continue($asyncBody);
                                            return;
                                        }
                                        case 2: {
                                            $taskResult2 = $task2.getAwaitedResult();
                                            featureParam = System.String.replaceAll(System.String.replaceAll(window.location.pathname, "/", ""), "-", " ");
                                            if (!Core.Extensions.StringExt.IsNullOrWhiteSpace(featureParam)) {
                                                $step = 3;
                                                continue;
                                            } 
                                            $step = 5;
                                            continue;
                                        }
                                        case 3: {
                                            currentFeature = System.Linq.Enumerable.from(feature, Core.Models.Feature).firstOrDefault(function (x) {
                                                return Bridge.referenceEquals(x.Name, featureParam);
                                            }, null);
                                            $task3 = TMS.UI.Business.MenuComponent.OpenFeature(currentFeature);
                                            $step = 4;
                                            if ($task3.isCompleted()) {
                                                continue;
                                            }
                                            $task3.continue($asyncBody);
                                            return;
                                        }
                                        case 4: {
                                            $task3.getAwaitedResult();
                                            $step = 5;
                                            continue;
                                        }
                                        case 5: {
                                            !Bridge.staticEquals(($t = this.DOMContentLoaded), null) ? $t() : null;
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
                this._btnBack = document.getElementById("btnBack");
                this._btnToggle = ($t = HTMLElement, System.Linq.Enumerable.from(document.getElementsByClassName("sidebar-toggle"), $t).ToArray($t));
                if (this._btnBack == null) {
                    return;
                }

                this._btnBack.addEventListener("click", Bridge.fn.cacheBind(this, this.RoutingHandler));
                this._btnToggle.forEach(Bridge.fn.bind(this, function (btn) {
                        btn.addEventListener("click", Bridge.fn.bind(this, function () {
                            this.Show = !this.Show;
                        }));
                    }));
            },
            RoutingHandler: function () {
                TMS.UI.Business.MenuComponent.PressToExit();
                var currentTab;
                if (((currentTab = Core.Components.Forms.TabEditor.ActiveTab)) != null) {
                    currentTab.DirtyCheckAndCancel();
                }
            },
            RenderMenuItems: function (menuItems) {
                var html = Core.Components.Renderer.ClassName(Core.MVVM.Html.Instance.Ul.Id("menuHorizontal"), "navbar-nav navbar-nav-highlight flex-wrap d-none d-xl-flex");
                html.ForEach$2(Core.Models.Feature, menuItems, Bridge.fn.bind(this, function (item, index) {
                    var $t;
                    var check = item.InverseParent != null && System.Array.getCount(item.InverseParent, Core.Models.Feature) > 0;
                    Core.Components.Renderer.Title(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.MVVM.Html.Instance.Li, "nav-item dropdown").DataAttr$1("feature", Bridge.toString(item.Id)).A.Href(check ? "javascript:void(0);" : ("?f=" + (System.String.replaceAll(item.Name, " ", "-") || "") + "&Id=" + item.Id)), "navbar-nav-link" + ((check ? " dropdown-toggle" : "") || "")).DataAttr$1("toggle", "dropdown").Attr$1("aria-expanded", "false").AsyncEvent$3(Core.Models.Feature, "click", Bridge.fn.cacheBind(this, this.MenuItemClick), item).Event$4(Core.Models.Feature, "contextmenu", Bridge.fn.cacheBind(this, this.FeatureContextMenu), item), item.Label).Render();
                    Core.Components.Renderer.IText(Core.MVVM.Html.Instance.Span, item.Label).Style$1("margin-left: 19px;margin-top: 4px;").EndOf(Core.MVVM.ElementType.a).Render();
                    if (check) {
                        this.RenderSubMenu(($t = Core.Models.Feature, System.Linq.Enumerable.from(item.InverseParent, $t).toList($t)));
                    }
                    Core.MVVM.Html.Instance.EndOf(Core.MVVM.ElementType.li);
                }));
            },
            RenderMenuMobileItems: function (menuItems, nest) {
                if (nest === void 0) { nest = false; }
                Core.MVVM.Html.Take$1(".card-sidebar-mobile");
                var html = Core.Components.Renderer.ClassName(Core.MVVM.Html.Instance.Ul, "nav nav-sidebar").DataAttr$1("nav-type", nest ? "accordion" : "");
                html.ForEach$2(Core.Models.Feature, menuItems, Bridge.fn.bind(this, function (item, index) {
                    var $t;
                    var check = item.InverseParent != null && System.Array.getCount(item.InverseParent, Core.Models.Feature) > 0;
                    Core.Components.Renderer.Title(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.MVVM.Html.Instance.Li, "nav-item" + ((check ? " nav-item-submenu" : "") || "")).DataAttr$1("feature", Bridge.toString(item.Id)).A.Href("javascript:void(0);"), "nav-link").AsyncEvent$3(Core.Models.Feature, "click", Bridge.fn.cacheBind(this, this.MenuItemClick), item).Event$4(Core.Models.Feature, "contextmenu", Bridge.fn.cacheBind(this, this.FeatureContextMenu), item), item.Label).Render();
                    Core.Components.Renderer.IText(Core.MVVM.Html.Instance.Span, item.Label).Style$1("margin-left: 19px;margin-top: 4px;").EndOf(Core.MVVM.ElementType.a).Render();
                    if (check) {
                        this.RenderSubMobileMenu(($t = Core.Models.Feature, System.Linq.Enumerable.from(item.InverseParent, $t).toList($t)));
                    }
                    Core.MVVM.Html.Instance.EndOf(Core.MVVM.ElementType.li);
                }));
            },
            RenderSubMobileMenu: function (menuItems) {
                Core.Components.Renderer.ClassName(Core.MVVM.Html.Instance.Ul, "nav nav-group-sub");
                Core.MVVM.Html.Instance.ForEach$2(Core.Models.Feature, menuItems, Bridge.fn.bind(this, function (item, index) {
                    var $t, $t1;
                    var check = item.InverseParent != null && System.Array.getCount(item.InverseParent, Core.Models.Feature) > 0;
                    Core.Components.Renderer.IText(Core.Components.Renderer.Title(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.MVVM.Html.Instance.Li, "nav-item").A.Href("javascript:void(0);"), "nav-link").AsyncEvent$3(Core.Models.Feature, "click", Bridge.fn.cacheBind(this, this.MenuItemClick), item).Event$4(Core.Models.Feature, "contextmenu", Bridge.fn.cacheBind(this, this.FeatureContextMenu), item).I, ($t = item.Icon, $t != null ? $t : "")).End, item.Label).Span, item.Label).End.End.Render();
                    if (check) {
                        this.RenderSubMenu(($t1 = Core.Models.Feature, System.Linq.Enumerable.from(item.InverseParent, $t1).toList($t1)));
                    }
                }));
            },
            RenderSubMenu: function (menuItems) {
                Core.Components.Renderer.ClassName(Core.MVVM.Html.Instance.Div, "dropdown-menu");
                Core.MVVM.Html.Instance.ForEach$2(Core.Models.Feature, menuItems, Bridge.fn.bind(this, function (item, index) {
                    var $t, $t1;
                    var check = item.InverseParent != null && System.Array.getCount(item.InverseParent, Core.Models.Feature) > 0;
                    if (check) {
                        Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.MVVM.Html.Instance.Div, "dropdown-submenu").A.Href("javascript:void(0);"), "dropdown-item" + ((check ? " dropdown-toggle" : "") || ""));
                    } else {
                        Core.Components.Renderer.ClassName(Core.MVVM.Html.Instance.A.Href("javascript:void(0);"), "dropdown-item" + ((check ? " dropdown-toggle" : "") || ""));
                    }
                    Core.Components.Renderer.IText(Core.Components.Renderer.Title(Core.Components.Renderer.ClassName(Core.MVVM.Html.Instance.AsyncEvent$3(Core.Models.Feature, "click", Bridge.fn.cacheBind(this, this.MenuItemClick), item).Event$4(Core.Models.Feature, "contextmenu", Bridge.fn.cacheBind(this, this.FeatureContextMenu), item).I, ($t = item.Icon, $t != null ? $t : "")).End, item.Label).Span, item.Label).End.Render();
                    if (check) {
                        Core.MVVM.Html.Instance.End.Render();
                        this.RenderSubMenu(($t1 = Core.Models.Feature, System.Linq.Enumerable.from(item.InverseParent, $t1).toList($t1)));
                    }
                }));
            },
            FeatureContextMenu: function (e, feature) {
                if (!Core.Clients.Client.SystemRole) {
                    return;
                }

                e.preventDefault();
                var ctxMenu = Core.Components.Forms.ContextMenu.Instance;
                {
                    ctxMenu.Top = Core.Extensions.EventExt.Top(e);
                    ctxMenu.Left = Core.Extensions.EventExt.Left(e);
                    ctxMenu.MenuItems = Bridge.fn.bind(this, function (_o1) {
                            var $t;
                            _o1.add(($t = new Core.Components.Forms.ContextMenuItem(), $t.Icon = "fa fa-plus", $t.Text = "New feature", $t.Click = Bridge.fn.cacheBind(this, this.EditFeature), $t.Parameter = new Core.Models.Feature(), $t));
                            _o1.add(($t = new Core.Components.Forms.ContextMenuItem(), $t.Icon = "fa fa-ban", $t.Text = "Deactivate this feature", $t.Click = Bridge.fn.cacheBind(this, this.Deactivate), $t.Parameter = feature, $t));
                            _o1.add(($t = new Core.Components.Forms.ContextMenuItem(), $t.Icon = "fa fa-clone", $t.Text = "Clone this feature", $t.Click = Bridge.fn.cacheBind(this, this.CloneFeature), $t.Parameter = feature, $t));
                            _o1.add(($t = new Core.Components.Forms.ContextMenuItem(), $t.Icon = "fa fa-list", $t.Text = "Manage features", $t.Click = Bridge.fn.cacheBind(this, this.FeatureManagement), $t));
                            _o1.add(($t = new Core.Components.Forms.ContextMenuItem(), $t.Icon = "fa fa-wrench", $t.Text = "Properties", $t.Click = Bridge.fn.cacheBind(this, this.EditFeature), $t.Parameter = feature, $t));
                            return _o1;
                        })(new (System.Collections.Generic.List$1(Core.Components.Forms.ContextMenuItem)).ctor());
                }
                ;
                this.AddChild(ctxMenu);
            },
            EditFeature: function (ev) {
                var feature = Bridge.as(ev, Core.Models.Feature);
                var id = (feature.Name || "") + "Prop" + feature.Id;
                Core.Components.Extensions.ComponentExt.OpenTab(this, id, function () {
                    var $t, $t1, $t2;
                    return ($t = new Core.Components.Framework.FeatureDetailBL(), $t.Id = id, $t.Entity = feature, $t.Title = System.String.format("Feature {0}", [($t1 = feature.Name, $t1 != null ? $t1 : ($t2 = feature.Label, $t2 != null ? $t2 : feature.Description))]), $t);
                });
            },
            CloneFeature: function (ev) {
                var $t;
                var feature = Bridge.as(ev, Core.Models.Feature);
                var confirmDialog = ($t = new Core.Components.Forms.ConfirmDialog(), $t.Content = "B\u1ea1n c\u00f3 mu\u1ed1n clone feature n\u00e0y?", $t);
                confirmDialog.YesConfirmed = Bridge.fn.combine(confirmDialog.YesConfirmed, Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        client, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        client = new Core.Clients.Client.$ctor1("Feature");
                                        $task1 = client.CloneFeatureAsync(feature.Id);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        this.ReloadMenu(feature.ParentId);
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }));
                this.AddChild(confirmDialog);
            },
            FeatureManagement: function (ev) {
                var id = Bridge.toString(Bridge.getHashCode(this));
                Core.Components.Extensions.ComponentExt.OpenTab(this, id, Bridge.fn.bind(this, function () {
                    var $t;
                    return ($t = new Core.Components.Framework.FeatureBL(), $t.Id = Bridge.toString(Bridge.getHashCode(this)), $t);
                }));
            },
            Deactivate: function (ev) {
                var feature = Bridge.as(ev, Core.Models.Feature);
                var confirmDialog = new Core.Components.Forms.ConfirmDialog();
                confirmDialog.YesConfirmed = Bridge.fn.combine(confirmDialog.YesConfirmed, Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        client, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        client = new Core.Clients.Client.$ctor1("Feature");
                                        $task1 = client.DeactivateAsync(function (_o1) {
                                            _o1.add(feature.Id);
                                            return _o1;
                                        }(new (System.Collections.Generic.List$1(System.Int32)).ctor()));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }));
                this.AddChild(confirmDialog);
            },
            MenuItemClick: function (feature, e) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        e.preventDefault();
                                        if (Core.Extensions.IEnumerableExtensions.Nothing(Core.Models.Feature, feature.InverseParent)) {
                                            $('body').removeClass('sidebar-mobile-main');
                                        }
                                        this.FocusFeature(feature);
                                        $task1 = TMS.UI.Business.MenuComponent.OpenFeature(feature);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            FindMenuItemByID: function (id) {
                var $t;
                var activeLi = document.querySelectorAll(".card-sidebar-mobile .nav-link");
                $t = Bridge.getEnumerator(activeLi, "getEnumerator");
                try {
                    while ($t.moveNext()) {
                        var active = Bridge.cast($t.Current, HTMLElement);
                        if (System.String.equals(active.parentElement.getAttribute("data-feature"), Bridge.toString(id))) {
                            return active;
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                return null;
            },
            FocusFeature: function (feature) {
                var $t;
                var li = this.FindMenuItemByID(feature.Id);
                if (li != null) {
                    var activeLi = System.Linq.Enumerable.from(document.querySelectorAll(".card-sidebar-mobile .active"), Node).union(document.querySelectorAll(".card-sidebar-mobile .nav-item-open"));
                    $t = Bridge.getEnumerator(activeLi);
                    try {
                        while ($t.moveNext()) {
                            var active = Bridge.cast($t.Current, HTMLElement);
                            if (active.contains(li)) {
                                continue;
                            }
                            Core.Extensions.HtmlElementExtension.RemoveClass(active, TMS.UI.Business.MenuComponent.ActiveClass);
                            Core.Extensions.HtmlElementExtension.RemoveClass(active, "nav-item-open");
                            if (Core.Extensions.HtmlElementExtension.HasClass(li, "child-link")) {
                                Core.Extensions.HtmlElementExtension.RemoveClass(active.parentElement, "nav-item-open");
                            } else {
                                Core.Extensions.HtmlElementExtension.RemoveClass(active.parentElement.parentElement.parentElement, "nav-item-open");
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    if (Core.Extensions.HtmlElementExtension.HasClass(li, "child-link")) {
                        Core.Extensions.HtmlElementExtension.AddClass(li.parentElement.parentElement.parentElement, "nav-item-open");
                    }
                    Core.Extensions.HtmlElementExtension.AddClass(li, TMS.UI.Business.MenuComponent.ActiveClass);
                }
            },
            UpdateView: function (force, dirty, componentNames) {
                if (force === void 0) { force = false; }
                if (dirty === void 0) { dirty = null; }
                if (componentNames === void 0) { componentNames = []; }
                // not to do anything here
            }
        }
    });

    Bridge.define("TMS.UI.Business.Setting.EntityDetailBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "Entity");
                this.Entity = new TMS.API.Models.Entity();
                this.Name = "Entity Detail";
                this.Title = "Entity Detail";
            }
        }
    });

    Bridge.define("TMS.UI.Business.Setting.GridPolicyDetailBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "GridPolicy");
                this.Entity = new TMS.API.Models.GridPolicy();
                this.Name = "GridDetail";
                this.Title = "Grid Detail";
            }
        }
    });

    Bridge.define("TMS.UI.Business.Setting.MasterDataBL", {
        inherits: [Core.Components.Forms.TabEditor],
        fields: {
            _uploaderExpense: null,
            _uploaderExpensePrice: null,
            _uploaderCommodity: null,
            _uploaderShipBrand: null,
            _uploaderQuotation: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "MasterData");
                this.Name = "Master Data";
                this.DOMContentLoaded = Bridge.fn.combine(this.DOMContentLoaded, Bridge.fn.bind(this, function () {
                    Core.MVVM.Html.Take$1("Body").Form.Attr$1("method", "POST").Attr$1("enctype", "multipart/form-data").Display$1(false).Input.Event$1("change", Bridge.fn.bind(this, function (ev) {
                        var $step = 0,
                            $task1, 
                            $jumpFromFinally, 
                            $asyncBody = Bridge.fn.bind(this, function () {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = this.SelectedExcelExpense(ev);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            return;
                                        }
                                        default: {
                                            return;
                                        }
                                    }
                                }
                            }, arguments);

                        $asyncBody();
                    })).Type$1("file").Id(System.String.format("id_{0}", [Bridge.box(Bridge.getHashCode(this), System.Int32)])).Attr$1("name", "fileImport").Attr$1("accept", ".xlsx");
                    this._uploaderExpense = Bridge.as(Core.MVVM.Html.Context, HTMLInputElement);
                }));
                this.DOMContentLoaded = Bridge.fn.combine(this.DOMContentLoaded, Bridge.fn.bind(this, function () {
                    Core.MVVM.Html.Take$1("Body").Form.Attr$1("method", "POST").Attr$1("enctype", "multipart/form-data").Display$1(false).Input.Event$1("change", Bridge.fn.bind(this, function (ev) {
                        var $step = 0,
                            $task1, 
                            $jumpFromFinally, 
                            $asyncBody = Bridge.fn.bind(this, function () {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = this.SelectedExcelExpensePrice(ev);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            return;
                                        }
                                        default: {
                                            return;
                                        }
                                    }
                                }
                            }, arguments);

                        $asyncBody();
                    })).Type$1("file").Id(System.String.format("id_{0}", [Bridge.box(Bridge.getHashCode(this), System.Int32)])).Attr$1("name", "fileImport").Attr$1("accept", ".xlsx");
                    this._uploaderExpensePrice = Bridge.as(Core.MVVM.Html.Context, HTMLInputElement);
                }));
                this.DOMContentLoaded = Bridge.fn.combine(this.DOMContentLoaded, Bridge.fn.bind(this, function () {
                    Core.MVVM.Html.Take$1("Body").Form.Attr$1("method", "POST").Attr$1("enctype", "multipart/form-data").Display$1(false).Input.Event$1("change", Bridge.fn.bind(this, function (ev) {
                        var $step = 0,
                            $task1, 
                            $jumpFromFinally, 
                            $asyncBody = Bridge.fn.bind(this, function () {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = this.SelectedExcelCommodity(ev);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            return;
                                        }
                                        default: {
                                            return;
                                        }
                                    }
                                }
                            }, arguments);

                        $asyncBody();
                    })).Type$1("file").Id(System.String.format("id_{0}", [Bridge.box(Bridge.getHashCode(this), System.Int32)])).Attr$1("name", "fileImport").Attr$1("accept", ".xlsx");
                    this._uploaderCommodity = Bridge.as(Core.MVVM.Html.Context, HTMLInputElement);
                }));
                this.DOMContentLoaded = Bridge.fn.combine(this.DOMContentLoaded, Bridge.fn.bind(this, function () {
                    Core.MVVM.Html.Take$1("Body").Form.Attr$1("method", "POST").Attr$1("enctype", "multipart/form-data").Display$1(false).Input.Event$1("change", Bridge.fn.bind(this, function (ev) {
                        var $step = 0,
                            $task1, 
                            $jumpFromFinally, 
                            $asyncBody = Bridge.fn.bind(this, function () {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = this.SelectedExcelShipBrand(ev);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            return;
                                        }
                                        default: {
                                            return;
                                        }
                                    }
                                }
                            }, arguments);

                        $asyncBody();
                    })).Type$1("file").Id(System.String.format("id_{0}", [Bridge.box(Bridge.getHashCode(this), System.Int32)])).Attr$1("name", "fileImport").Attr$1("accept", ".xlsx");
                    this._uploaderShipBrand = Bridge.as(Core.MVVM.Html.Context, HTMLInputElement);
                }));
                this.DOMContentLoaded = Bridge.fn.combine(this.DOMContentLoaded, Bridge.fn.bind(this, function () {
                    Core.MVVM.Html.Take$1("Body").Form.Attr$1("method", "POST").Attr$1("enctype", "multipart/form-data").Display$1(false).Input.Event$1("change", Bridge.fn.bind(this, function (ev) {
                        var $step = 0,
                            $task1, 
                            $jumpFromFinally, 
                            $asyncBody = Bridge.fn.bind(this, function () {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = this.SelectedExcelQuotationType(ev);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            return;
                                        }
                                        default: {
                                            return;
                                        }
                                    }
                                }
                            }, arguments);

                        $asyncBody();
                    })).Type$1("file").Id(System.String.format("id_{0}", [Bridge.box(Bridge.getHashCode(this), System.Int32)])).Attr$1("name", "fileImport").Attr$1("accept", ".xlsx");
                    this._uploaderQuotation = Bridge.as(Core.MVVM.Html.Context, HTMLInputElement);
                }));
            }
        },
        methods: {
            EditMasterData: function (masterData) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "MasterData Detail", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Setting.MasterDataDetailsBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Update tham chi\u1ebfu";
                                            instance.Entity = masterData || new TMS.API.Models.MasterData();
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CreateMasterData: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "MasterData Detail", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Setting.MasterDataDetailsBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Th\u00eam tham chi\u1ebfu m\u1edbi";
                                            instance.Entity = new TMS.API.Models.MasterData();
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            UpdatePath: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = new Core.Clients.Client.$ctor1("MasterData").PostAsync(System.Boolean, null, System.String.format("UpdatePath", null));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            EditMasterDataParent: function (parent) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    masterData, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = new Core.Clients.Client.$ctor1("MasterData").FirstOrDefaultAsync(TMS.API.Models.MasterData, System.String.format("?$filter=Id eq {0}", [Bridge.box(parent.ParentId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        masterData = $taskResult1;
                                        $task2 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "MasterData Detail", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Setting.MasterDataDetailsBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Update tham chi\u1ebfu";
                                            instance.Entity = masterData;
                                            return instance;
                                        }, false, false);
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            SelectedExcelExpense: function (e) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    files, 
                    uploadForm, 
                    formData, 
                    response, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        files = Bridge.as(e.target.files, FileList);
                                        if (Core.Extensions.IEnumerableExtensions.Nothing(File, files)) {
                                            $tcs.setResult(null);
                                            return;
                                        }

                                        uploadForm = Bridge.as(this._uploaderExpense.parentElement, HTMLFormElement);
                                        formData = new FormData(uploadForm);
                                        $task1 = this.Client.SubmitAsync(System.Collections.Generic.List$1(TMS.API.Models.MasterData), ($t = new Core.Clients.XHRWrapper(), $t.FormData = formData, $t.Url = "ImportExpenseType", $t.Method = Core.Enums.HttpMethod.POST, $t.ResponseMimeType = Core.Extensions.Utils.GetMimeType("xlsx"), $t));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        response = $taskResult1;
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ImportExpenseType: function () {
                this._uploaderExpense.click();
            },
            SelectedExcelExpensePrice: function (e) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    files, 
                    uploadForm, 
                    formData, 
                    response, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        files = Bridge.as(e.target.files, FileList);
                                        if (Core.Extensions.IEnumerableExtensions.Nothing(File, files)) {
                                            $tcs.setResult(null);
                                            return;
                                        }

                                        uploadForm = Bridge.as(this._uploaderExpensePrice.parentElement, HTMLFormElement);
                                        formData = new FormData(uploadForm);
                                        $task1 = this.Client.SubmitAsync(System.Collections.Generic.List$1(TMS.API.Models.MasterData), ($t = new Core.Clients.XHRWrapper(), $t.FormData = formData, $t.Url = "ImportExpensePrice", $t.Method = Core.Enums.HttpMethod.POST, $t.ResponseMimeType = Core.Extensions.Utils.GetMimeType("xlsx"), $t));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        response = $taskResult1;
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ImportExpensePrice: function () {
                this._uploaderExpensePrice.click();
            },
            SelectedExcelCommodity: function (e) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    files, 
                    uploadForm, 
                    formData, 
                    response, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        files = Bridge.as(e.target.files, FileList);
                                        if (Core.Extensions.IEnumerableExtensions.Nothing(File, files)) {
                                            $tcs.setResult(null);
                                            return;
                                        }

                                        uploadForm = Bridge.as(this._uploaderCommodity.parentElement, HTMLFormElement);
                                        formData = new FormData(uploadForm);
                                        $task1 = this.Client.SubmitAsync(System.Collections.Generic.List$1(TMS.API.Models.MasterData), ($t = new Core.Clients.XHRWrapper(), $t.FormData = formData, $t.Url = "ImportCommodityType", $t.Method = Core.Enums.HttpMethod.POST, $t.ResponseMimeType = Core.Extensions.Utils.GetMimeType("xlsx"), $t));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        response = $taskResult1;
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ImportCommodityType: function () {
                this._uploaderCommodity.click();
            },
            SelectedExcelShipBrand: function (e) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    files, 
                    uploadForm, 
                    formData, 
                    response, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        files = Bridge.as(e.target.files, FileList);
                                        if (Core.Extensions.IEnumerableExtensions.Nothing(File, files)) {
                                            $tcs.setResult(null);
                                            return;
                                        }

                                        uploadForm = Bridge.as(this._uploaderShipBrand.parentElement, HTMLFormElement);
                                        formData = new FormData(uploadForm);
                                        $task1 = this.Client.SubmitAsync(System.Collections.Generic.List$1(TMS.API.Models.Vendor), ($t = new Core.Clients.XHRWrapper(), $t.FormData = formData, $t.Url = "ImportShipBrand", $t.Method = Core.Enums.HttpMethod.POST, $t.ResponseMimeType = Core.Extensions.Utils.GetMimeType("xlsx"), $t));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        response = $taskResult1;
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ImportShipBrand: function () {
                this._uploaderShipBrand.click();
            },
            SelectedExcelQuotationType: function (e) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    files, 
                    uploadForm, 
                    formData, 
                    response, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        files = Bridge.as(e.target.files, FileList);
                                        if (Core.Extensions.IEnumerableExtensions.Nothing(File, files)) {
                                            $tcs.setResult(null);
                                            return;
                                        }

                                        uploadForm = Bridge.as(this._uploaderQuotation.parentElement, HTMLFormElement);
                                        formData = new FormData(uploadForm);
                                        $task1 = this.Client.SubmitAsync(System.Collections.Generic.List$1(TMS.API.Models.MasterData), ($t = new Core.Clients.XHRWrapper(), $t.FormData = formData, $t.Url = "ImportQuotationType", $t.Method = Core.Enums.HttpMethod.POST, $t.ResponseMimeType = Core.Extensions.Utils.GetMimeType("xlsx"), $t));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        response = $taskResult1;
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ImportQuotationType: function () {
                this._uploaderQuotation.click();
            }
        }
    });

    Bridge.define("TMS.UI.Business.Setting.MasterDataDetailsBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "MasterData");
                this.Name = "MasterData Detail";
                this.Entity = new TMS.API.Models.MasterData();
            }
        }
    });

    Bridge.define("TMS.UI.Business.Setting.RoleDetailBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "Role");
                this.Entity = new TMS.API.Models.Role();
                this.Name = "Role Detail";
                this.Title = "Chi ti\u1ebft lo\u1ea1i quy\u1ec1n h\u1ea1n";
            }
        }
    });

    Bridge.define("TMS.UI.Business.Setting.SettingDataBL", {
        inherits: [Core.Components.Forms.TabEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "Entity");
                this.Name = "Data List";
                this.Title = this.Name;
            }
        },
        methods: {
            EditEntity: function (entity) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "EntityDetail", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Setting.EntityDetailBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = entity == null ? "Th\u00eam cot du lieu moi" : "Update cot du lieu";
                                            instance.Entity = entity || new TMS.API.Models.Entity();
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            EditGridPolicy: function (gridPolicy) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "GridDetail", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Setting.GridPolicyDetailBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = gridPolicy == null ? "Th\u00eam cot du lieu moi" : "Update cot du lieu";
                                            instance.Entity = gridPolicy || new TMS.API.Models.GridPolicy();
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("TMS.UI.Business.Setting.SettingsCommodityValueBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        fields: {
            containerId: 0
        },
        props: {
            transportationPlanEntity: {
                get: function () {
                    return Bridge.as(this.Entity, TMS.API.Models.TransportationPlan);
                }
            }
        },
        ctors: {
            init: function () {
                this.containerId = 0;
            },
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "TransportationPlan");
                this.Name = "SettingsCommodityValue";
            }
        },
        methods: {
            ToggleApprovalBtn: function (entity) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    containerId, 
                    commodityValueDB, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        for (;;) {
                            $step = System.Array.min([0,1,2], $step);
                            switch ($step) {
                                case 0: {
                                    if (entity === void 0) { entity = null; }
                                    $task1 = this.CheckContainerType(this.transportationPlanEntity);
                                    $step = 1;
                                    if ($task1.isCompleted()) {
                                        continue;
                                    }
                                    $task1.continue($asyncBody);
                                    return;
                                }
                                case 1: {
                                    $taskResult1 = $task1.getAwaitedResult();
                                    containerId = $taskResult1;
                                    $task2 = new Core.Clients.Client.$ctor1("CommodityValue").FirstOrDefaultAsync(TMS.API.Models.CommodityValue, System.String.format("?$filter=Active eq true and BossId eq {0} and CommodityId eq {1} and ContainerId eq {2}", Bridge.box(this.transportationPlanEntity.BossId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), Bridge.box(this.transportationPlanEntity.CommodityId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), Bridge.box(containerId, System.Int32)));
                                    $step = 2;
                                    if ($task2.isCompleted()) {
                                        continue;
                                    }
                                    $task2.continue($asyncBody);
                                    return;
                                }
                                case 2: {
                                    $taskResult2 = $task2.getAwaitedResult();
                                    commodityValueDB = $taskResult2;
                                    if (commodityValueDB != null && this.transportationPlanEntity.JourneyId == null) {
                                        Core.Components.Extensions.ComponentExt.SetDisabled$1(this, true, ["CustomerTypeId", "IsWet", "IsBought", "CommodityValue", "IsCompany", "SteamingTerms", "BreakTerms"]);
                                    }
                                    Core.Components.Forms.PopupEditor.prototype.ToggleApprovalBtn.call(this, entity);
                                    return;
                                }
                                default: {
                                    return;
                                }
                            }
                        }
                    }, arguments);

                $asyncBody();
            },
            CheckContainerType: function (transportationPlan) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    containerTypes, 
                    containerTypeCodes, 
                    $t, 
                    containerTypeName, 
                    containers, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = new Core.Clients.Client.$ctor1("MasterData").GetRawList(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and ParentId eq 7565", null));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        containerTypes = $taskResult1;
                                        containerTypeCodes = ($t = TMS.API.Models.MasterData, System.Linq.Enumerable.from(containerTypes, $t).toDictionary(function (x) {
                                            return x.Id;
                                        }, null, System.Int32, $t));
                                        containerTypeName = System.Collections.Generic.CollectionExtensions.GetValueOrDefault(System.Int32, TMS.API.Models.MasterData, containerTypeCodes, System.Nullable.getValue(transportationPlan.ContainerTypeId));
                                        $task2 = new Core.Clients.Client.$ctor1("MasterData").GetRawList(TMS.API.Models.MasterData, System.String.format("?$filter=Active eq true and (contains(Name, '40HC') or contains(Name, '20DC'))", null));
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        containers = $taskResult2;
                                        if (System.String.contains(containerTypeName.Description,"Cont 20")) {
                                            this.containerId = containers.Find(function (x) {
                                                return System.String.contains(x.Name,"20DC");
                                            }).Id;
                                        } else if (System.String.contains(containerTypeName.Description,"Cont 40")) {
                                            this.containerId = containers.Find(function (x) {
                                                return System.String.contains(x.Name,"40HC");
                                            }).Id;
                                        }
                                        $tcs.setResult(this.containerId);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            UpdateTransportationPlan: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $task3, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    isSubRatio, 
                    insuranceFeesRate, 
                    confirm, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7,8,9], $step);
                                switch ($step) {
                                    case 0: {
                                        if (this.transportationPlanEntity.IsWet && this.transportationPlanEntity.SteamingTerms && this.transportationPlanEntity.BreakTerms) {
                                            Core.Extensions.Toast.Warning("Kh\u00f4ng th\u1ec3 c\u00f9ng l\u00fac c\u00f3 nhi\u1ec1u h\u01a1n 2 \u0111i\u1ec1u kho\u1ea3n");
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        if (this.transportationPlanEntity.JourneyId == null) {
                                            Core.Extensions.Toast.Warning("H\u00e0nh tr\u00ecnh v\u1eadn chuy\u1ec3n kh\u00f4ng \u0111\u01b0\u1ee3c tr\u1ed1ng");
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        isSubRatio = false;
                                        if (((this.transportationPlanEntity.IsWet || this.transportationPlanEntity.SteamingTerms || this.transportationPlanEntity.BreakTerms) && this.transportationPlanEntity.IsBought === false) || (this.transportationPlanEntity.IsBought && this.transportationPlanEntity.IsWet)) {
                                            isSubRatio = true;
                                        }
                                        insuranceFeesRate = null;
                                        if (this.transportationPlanEntity.IsBought) {
                                            $step = 1;
                                            continue;
                                        } else  {
                                            $step = 3;
                                            continue;
                                        }
                                    }
                                    case 1: {
                                        $task1 = new Core.Clients.Client.$ctor1("InsuranceFeesRate").FirstOrDefaultAsync(TMS.API.Models.InsuranceFeesRate, System.String.format("?$filter=Active eq true and TransportationTypeId eq {0} and JourneyId eq {1} and IsBought eq {2} and IsSOC eq false and IsSubRatio eq {3}", Bridge.box(this.transportationPlanEntity.TransportationTypeId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), Bridge.box(this.transportationPlanEntity.JourneyId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), System.Boolean.toString(this.transportationPlanEntity.IsBought).toLowerCase(), System.Boolean.toString(isSubRatio).toLowerCase()));
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        insuranceFeesRate = $taskResult1;
                                        $step = 5;
                                        continue;
                                    }
                                    case 3: {
                                        $task2 = new Core.Clients.Client.$ctor1("InsuranceFeesRate").FirstOrDefaultAsync(TMS.API.Models.InsuranceFeesRate, System.String.format("?$filter=Active eq true and TransportationTypeId eq {0} and JourneyId eq {1} and IsBought eq {2} and IsSOC eq false", Bridge.box(this.transportationPlanEntity.TransportationTypeId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), Bridge.box(this.transportationPlanEntity.JourneyId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), System.Boolean.toString(this.transportationPlanEntity.IsBought).toLowerCase()));
                                        $step = 4;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        insuranceFeesRate = $taskResult2;
                                        $step = 5;
                                        continue;
                                    }
                                    case 5: {
                                        if (insuranceFeesRate == null) {
                                            Core.Extensions.Toast.Warning("Hi\u1ec7n t\u1ea1i ch\u01b0a c\u00f3 m\u1ee9c t\u1ef7 l\u1ec7 ph\u00ed ph\u00f9 h\u1ee3p cho c\u00e1c \u0111i\u1ec1u ki\u1ec7n n\u00e0y. Vui l\u00f2ng c\u1ea5u h\u00ecnh l\u1ea1i !!!");
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        if (System.Nullable.lifteq("equals", this.transportationPlanEntity.CommodityValue, System.Decimal(0))) {
                                            $step = 6;
                                            continue;
                                        } else  {
                                            $step = 7;
                                            continue;
                                        }
                                    }
                                    case 6: {
                                        confirm = ($t = new Core.Components.Forms.ConfirmDialog(), $t.Content = "B\u1ea1n c\u00f3 ch\u1eafc ch\u1eafn mu\u1ed1n l\u01b0u khi GTHH b\u1eb1ng 0 kh\u00f4ng?", $t);
                                        confirm.Render();
                                        confirm.YesConfirmed = Bridge.fn.combine(confirm.YesConfirmed, Bridge.fn.bind(this, function () {
                                            var $step = 0,
                                                $task1, 
                                                $jumpFromFinally, 
                                                $asyncBody = Bridge.fn.bind(this, function () {
                                                    for (;;) {
                                                        $step = System.Array.min([0,1], $step);
                                                        switch ($step) {
                                                            case 0: {
                                                                $task1 = this.SaveTransportationPlanAsync();
                                                                $step = 1;
                                                                if ($task1.isCompleted()) {
                                                                    continue;
                                                                }
                                                                $task1.continue($asyncBody);
                                                                return;
                                                            }
                                                            case 1: {
                                                                $task1.getAwaitedResult();
                                                                return;
                                                            }
                                                            default: {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }, arguments);

                                            $asyncBody();
                                        }));
                                        $step = 9;
                                        continue;
                                    }
                                    case 7: {
                                        $task3 = this.SaveTransportationPlanAsync();
                                        $step = 8;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 8: {
                                        $task3.getAwaitedResult();
                                        $step = 9;
                                        continue;
                                    }
                                    case 9: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            SaveTransportationPlanAsync: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    rs, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        this.transportationPlanEntity.IsSettingsInsurance = true;
                                        $task1 = new Core.Clients.Client.$ctor1("TransportationPlan").PatchAsync(System.Object, this.GetPatchEntity(this.transportationPlanEntity));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        rs = $taskResult1;
                                        if (rs != null) {
                                            Core.Extensions.Toast.Success("\u0110\u00e3 c\u1eadp nh\u1eadt th\u00e0nh c\u00f4ng");
                                        } else {
                                            Core.Extensions.Toast.Warning("Ch\u01b0a c\u1eadp nh\u1eadt th\u00e0nh c\u00f4ng");
                                        }
                                        this.Dispose();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CheckCommodityValue: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4], $step);
                                switch ($step) {
                                    case 0: {
                                        if (this.transportationPlanEntity.IsCompany) {
                                            $step = 1;
                                            continue;
                                        } else  {
                                            $step = 3;
                                            continue;
                                        }
                                    }
                                    case 1: {
                                        $task1 = this.SetPolicy(this.transportationPlanEntity);
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        this.transportationPlanEntity.CommodityValue = $taskResult1;
                                        $step = 4;
                                        continue;
                                    }
                                    case 3: {
                                        this.transportationPlanEntity.CommodityValue = System.Decimal(0);
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        this.UpdateView$1(false, ["CommodityValue"]);
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            SetPolicy: function (transportationPlan) {
                var $step = 0,
                    $task1, 
                    $task2, 
                    $taskResult2, 
                    $task3, 
                    $taskResult3, 
                    $task4, 
                    $taskResult4, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    gridView, 
                    listViewItem, 
                    components, 
                    operators, 
                    settingPolicys, 
                    listpolicy, 
                    componentrs, 
                    operatorrs, 
                    query, 
                    rs, 
                    data, 
                    index, 
                    $t, 
                    item, 
                    detail, 
                    $t1, 
                    build, 
                    str, 
                    check, 
                    checks, 
                    data1, 
                    indexOf, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,10,11], $step);
                                switch ($step) {
                                    case 0: {
                                        gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this.Parent), Core.Components.GridView).firstOrDefault(function (x) {
                                            return Bridge.referenceEquals(x.GuiInfo.FieldName, "TransportationPlan");
                                        }, null);
                                        listViewItem = System.Linq.Enumerable.from(gridView.GetListViewItems(transportationPlan), Core.Components.ListViewItem).firstOrDefault(null, null);
                                        if (transportationPlan.RouteId != null || transportationPlan.BossId != null) {
                                            $step = 1;
                                            continue;
                                        } 
                                        $step = 11;
                                        continue;
                                    }
                                    case 1: {
                                        components = new Core.Clients.Client.$ctor1("GridPolicy").GetRawList(TMS.API.Models.GridPolicy, "?$filter=Id in (17792, 17791)");
                                        operators = new Core.Clients.Client.$ctor1("MasterData").GetRawList(TMS.API.Models.MasterData, "?$filter=Parent/Name eq 'Operator'");
                                        settingPolicys = new Core.Clients.Client.$ctor1("SettingPolicy").GetRawList(TMS.API.Models.SettingPolicy, System.String.format("?$expand=SettingPolicyDetail&$filter=TypeId eq 3", null));
                                        $task1 = System.Threading.Tasks.Task.whenAll(components, operators, settingPolicys);
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $task1.getAwaitedResult();
                                        listpolicy = settingPolicys.getResult();
                                        componentrs = components.getResult();
                                        operatorrs = operators.getResult();
                                        query = new (System.Collections.Generic.List$1(System.String)).ctor();
                                        rs = System.Linq.Enumerable.from(listpolicy, TMS.API.Models.SettingPolicy).selectMany(function (item) {
                                            var $t;
                                            var detail = ($t = TMS.API.Models.SettingPolicyDetail, System.Linq.Enumerable.from(item.SettingPolicyDetail, $t).toList($t));
                                            var build = System.Linq.Enumerable.from(detail, TMS.API.Models.SettingPolicyDetail).groupBy(function (z) {
                                                return z.ComponentId;
                                            }).selectMany(function (y) {
                                                var group = System.Linq.Enumerable.from(y.toList(TMS.API.Models.SettingPolicyDetail), TMS.API.Models.SettingPolicyDetail).select(function (l) {
                                                    var $t1;
                                                    var component = System.Linq.Enumerable.from(componentrs, TMS.API.Models.GridPolicy).firstOrDefault(function (k) {
                                                        return System.Nullable.eq(k.Id, l.ComponentId);
                                                    }, null);
                                                    if (component == null) {
                                                        return null;
                                                    }
                                                    var ope = System.Linq.Enumerable.from(operatorrs, TMS.API.Models.MasterData).firstOrDefault(function (k) {
                                                        return System.Nullable.eq(k.Id, l.OperatorId);
                                                    }, null);
                                                    if (Bridge.referenceEquals(component.ComponentType, "Dropdown") || Bridge.referenceEquals(component.ComponentType, "SearchEntry")) {
                                                        var format = System.String.replaceAll(($t1 = component.FormatCell.split("}"))[System.Array.index(0, $t1)], "{", "");
                                                        if (System.String.contains(ope.Name,"eq")) {
                                                            return new Core.Clients.Client.$ctor1(component.RefName).GetRawList(System.Object, (System.String.format("?$select=Id&$filter=contains({0},'", [format]) || "") + (l.Value || "") + "')", false, false, false, component.RefName);
                                                        } else if (System.String.contains(ope.Name,"ne")) {
                                                            return new Core.Clients.Client.$ctor1(component.RefName).GetRawList(System.Object, (System.String.format("?$select=Id&$filter=contains({0},'", [format]) || "") + (l.Value || "") + "') eq false", false, false, false, component.RefName);
                                                        } else {
                                                            return null;
                                                        }
                                                    } else {
                                                        return null;
                                                    }
                                                });
                                                return group;
                                            }).toList(System.Threading.Tasks.Task$1(System.Collections.Generic.List$1(System.Object)));
                                            return build;
                                        }).where(function (x) {
                                            return x != null;
                                        }).toList(System.Threading.Tasks.Task$1(System.Collections.Generic.List$1(System.Object)));
                                        $task2 = System.Threading.Tasks.Task.whenAll(rs);
                                        $step = 3;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        data = $taskResult2;
                                        index = 0;
                                        $t = Bridge.getEnumerator(listpolicy);
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        if ($t.moveNext()) {
                                            item = $t.Current;
                                            $step = 5;
                                            continue;
                                        }
                                        $step = 9;
                                        continue;
                                    }
                                    case 5: {
                                        detail = ($t1 = TMS.API.Models.SettingPolicyDetail, System.Linq.Enumerable.from(item.SettingPolicyDetail, $t1).toList($t1));
                                        build = System.Linq.Enumerable.from(detail, TMS.API.Models.SettingPolicyDetail).groupBy(function (z) {
                                            return z.ComponentId;
                                        }).select(function (y) {
                                            var listAnd = new (System.Collections.Generic.List$1(System.String)).ctor();
                                            var group = System.Linq.Enumerable.from(y.toList(TMS.API.Models.SettingPolicyDetail), TMS.API.Models.SettingPolicyDetail).select(function (l) {
                                                var $t2;
                                                var component = System.Linq.Enumerable.from(componentrs, TMS.API.Models.GridPolicy).firstOrDefault(function (k) {
                                                    return System.Nullable.eq(k.Id, l.ComponentId);
                                                }, null);
                                                if (component == null) {
                                                    return null;
                                                }
                                                var ope = System.Linq.Enumerable.from(operatorrs, TMS.API.Models.MasterData).firstOrDefault(function (k) {
                                                    return System.Nullable.eq(k.Id, l.OperatorId);
                                                }, null);
                                                if (Bridge.referenceEquals(component.ComponentType, "Dropdown") || Bridge.referenceEquals(component.ComponentType, "SearchEntry")) {
                                                    var rsdynamic = data[System.Array.index(index, data)];
                                                    index = (index + 1) | 0;
                                                    if (System.Linq.Enumerable.from(rsdynamic, System.Object).any()) {
                                                        var ids = Core.Extensions.IEnumerableExtensions.Combine(System.Int32, System.Linq.Enumerable.from(rsdynamic, System.Object).select(function (x) {
                                                            return x.Id;
                                                        }).select(function (x) {{ return Bridge.cast(x, System.Int32); }}));
                                                        var format = System.String.replaceAll(($t2 = component.FormatCell.split("}"))[System.Array.index(0, $t2)], "{", "");
                                                        return System.String.format("{0} in ({1})", component.FieldName, ids);
                                                    } else {
                                                        return null;
                                                    }
                                                } else {
                                                    listAnd.add(System.String.format("{0}", [System.String.format(ope.Name, component.FieldName, l.Value)]));
                                                    return null;
                                                }
                                            }).where(function (x) {
                                                return !Bridge.referenceEquals(x, "()") && !Core.Extensions.StringExt.IsNullOrWhiteSpace(x);
                                            }).toList(System.String);
                                            return ((group.Count === 0 ? "" : System.String.format("({0})", [Core.Extensions.IEnumerableExtensions.Combine(System.String, System.Linq.Enumerable.from(group, System.String).where(function (x) {
                                                return !Bridge.referenceEquals(x, "()") && !Core.Extensions.StringExt.IsNullOrWhiteSpace(x);
                                            }), " or ")])) || "") + ((listAnd.Count === 0 ? "" : System.String.format(" {0}", [Core.Extensions.IEnumerableExtensions.Combine(System.String, System.Linq.Enumerable.from(listAnd, System.String).where(function (x) {
                                                return !Core.Extensions.StringExt.IsNullOrWhiteSpace(x);
                                            }), " and ")])) || "");
                                        }).toList(System.String);
                                        str = Core.Extensions.IEnumerableExtensions.Combine(System.String, System.Linq.Enumerable.from(build, System.String).where(function (x) {
                                            return !Bridge.referenceEquals(x, "()") && !Core.Extensions.StringExt.IsNullOrWhiteSpace(x);
                                        }), " and ");
                                        query.add(str);
                                        check = null;
                                        if (!System.String.isNullOrWhiteSpace(str)) {
                                            $step = 6;
                                            continue;
                                        } 
                                        $step = 8;
                                        continue;
                                    }
                                    case 6: {
                                        $task3 = new Core.Clients.Client.$ctor1("TransportationPlan").FirstOrDefaultAsync(TMS.API.Models.TransportationPlan, System.String.format("?$filter=Active eq true and Id eq {0} and ({1}) and RequestChangeId eq null", Bridge.box(transportationPlan.Id, System.Int32), str));
                                        $step = 7;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 7: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        check = $taskResult3;
                                        $step = 8;
                                        continue;
                                    }
                                    case 8: {
                                        $step = 4;
                                        continue;
                                    }
                                    case 9: {
                                        checks = System.Linq.Enumerable.from(query, System.String).where(function (x) {
                                            return !Core.Extensions.StringExt.IsNullOrWhiteSpace(x);
                                        }).select(function (x) {
                                            return new Core.Clients.Client.$ctor1("TransportationPlan").FirstOrDefaultAsync(TMS.API.Models.TransportationPlan, System.String.format("?$filter=Active eq true and Id eq {0} and ({1}) and RequestChangeId eq null", Bridge.box(transportationPlan.Id, System.Int32), x));
                                        }).toList(System.Threading.Tasks.Task$1(TMS.API.Models.TransportationPlan));
                                        $task4 = System.Threading.Tasks.Task.whenAll(checks);
                                        $step = 10;
                                        if ($task4.isCompleted()) {
                                            continue;
                                        }
                                        $task4.continue($asyncBody);
                                        return;
                                    }
                                    case 10: {
                                        $taskResult4 = $task4.getAwaitedResult();
                                        data1 = $taskResult4;
                                        indexOf = Core.Extensions.IEnumerableExtensions.IndexOf(TMS.API.Models.TransportationPlan, data1, function (x) {
                                            return x != null;
                                        });
                                        if (indexOf === -1) {
                                            transportationPlan.CommodityValue = System.Decimal(0);
                                        } else {
                                            transportationPlan.CommodityValue = listpolicy.getItem(indexOf).UnitPrice;
                                        }
                                        $step = 11;
                                        continue;
                                    }
                                    case 11: {
                                        $tcs.setResult(System.Nullable.getValue(transportationPlan.CommodityValue));
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            GetPatchEntity: function (transportationPlan) {
                var $t;
                var details = new (System.Collections.Generic.List$1(Core.ViewModels.PatchUpdateDetail)).ctor();
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = Core.Extensions.Utils.IdField, $t.Value = Bridge.toString(transportationPlan.Id), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "TransportationTypeId", $t.Value = System.Nullable.toString(transportationPlan.TransportationTypeId, null), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "JourneyId", $t.Value = System.Nullable.toString(transportationPlan.JourneyId, null), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "CustomerTypeId", $t.Value = System.Nullable.toString(transportationPlan.CustomerTypeId, null), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "IsBought", $t.Value = System.Boolean.toString(transportationPlan.IsBought), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "IsWet", $t.Value = System.Boolean.toString(transportationPlan.IsWet), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "CommodityValue", $t.Value = transportationPlan.CommodityValue.toString(), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "IsCompany", $t.Value = System.Boolean.toString(transportationPlan.IsCompany), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "IsSettingsInsurance", $t.Value = System.Boolean.toString(transportationPlan.IsSettingsInsurance), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "SteamingTerms", $t.Value = System.Boolean.toString(transportationPlan.SteamingTerms), $t));
                details.add(($t = new Core.ViewModels.PatchUpdateDetail(), $t.Field = "BreakTerms", $t.Value = System.Boolean.toString(transportationPlan.BreakTerms), $t));
                return ($t = new Core.ViewModels.PatchUpdate(), $t.Changes = details, $t);
            }
        }
    });

    Bridge.define("TMS.UI.Business.Setting.SettingsTrainScheduleBL", {
        inherits: [Core.Components.Forms.TabEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "MasterData");
                this.Name = "Settings Train Schedule";
            }
        },
        methods: {
            CreateSettingsETAHPH: function (masterData) {
                masterData.Level = 2;
                masterData.ParentId = 25219;
                masterData.Path = "\\25218\\25219\\";
            },
            CreateSettingsETADAN: function (masterData) {
                masterData.Level = 2;
                masterData.ParentId = 25220;
                masterData.Path = "\\25218\\25220\\";
            },
            CreateSettingsETACLO: function (masterData) {
                masterData.Level = 2;
                masterData.ParentId = 25221;
                masterData.Path = "\\25218\\25221\\";
            },
            CreateSettingsREMARK: function (masterData) {
                masterData.Level = 2;
                masterData.ParentId = 25222;
                masterData.Path = "\\25218\\25222\\";
            }
        }
    });

    Bridge.define("TMS.UI.Business.Setting.UpdateBetAmountBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "MasterData");
                this.Name = "UpdateBetAmount";
            }
        }
    });

    Bridge.define("TMS.UI.Business.Setting.UpdateVATInsuranceFeesBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "MasterData");
                this.Name = "UpdateVATInsuranceFees";
            }
        }
    });

    Bridge.define("TMS.UI.Business.Setting.UserSeqBL", {
        inherits: [Core.Components.Forms.TabEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "UserSeq");
                this.Name = "User Seq";
                this.Title = this.Name;
            }
        }
    });

    Bridge.define("TMS.UI.Business.Settings.ApiException", {
        inherits: [System.Exception],
        props: {
            StatusCode: 0
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                System.Exception.ctor.call(this);
            },
            $ctor1: function (message) {
                this.$initialize();
                System.Exception.ctor.call(this, message);
            },
            $ctor2: function (message, innerException) {
                this.$initialize();
                System.Exception.ctor.call(this, message, innerException);
            }
        }
    });

    Bridge.define("TMS.UI.Business.Settings.BrandShipEditorBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "BrandShip");
                this.Name = "BrandShip Editor";
            }
        }
    });

    Bridge.define("TMS.UI.Business.Settings.BrandShipListBL", {
        inherits: [Core.Components.Forms.TabEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "BrandShip");
                this.Name = "BrandShip List";
            }
        },
        methods: {
            EditBrandShip: function (entity) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "BrandShip Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Settings.BrandShipEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Ch\u1ec9nh s\u1eeda h\u00e3ng t\u00e0u";
                                            instance.Entity = entity;
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            AddBrandShip: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "BrandShip Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Settings.BrandShipEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Th\u00eam m\u1edbi h\u00e3ng t\u00e0u";
                                            instance.Entity = new TMS.API.Models.BrandShip();
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("TMS.UI.Business.Settings.CommodityEditorBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        props: {
            masterDataEntity: {
                get: function () {
                    return Bridge.as(this.Entity, TMS.API.Models.MasterData);
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "MasterData");
                this.Name = "Commodity Editor";
            }
        },
        methods: {
            CheckParentId: function (masterData) {
                if (System.Nullable.eq(masterData.ParentId, 7651)) {
                    Core.Components.Extensions.ComponentExt.SetDisabled$1(this, true, ["ParentId"]);
                }
            },
            BeforeMasterData: function (masterData) {
                masterData.ParentId = this.masterDataEntity.Id;
                masterData.Path = "\\7651\\" + this.masterDataEntity.Id + "\\";
                masterData.Level = 2;
            }
        }
    });

    Bridge.define("TMS.UI.Business.Settings.CommodityListBL", {
        inherits: [Core.Components.Forms.TabEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "MasterData");
                this.Name = "Commodity List";
            }
        },
        methods: {
            EditCommodity: function (entity) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Commodity Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Settings.CommodityEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Ch\u1ec9nh s\u1eeda v\u1eadt t\u01b0 h\u00e0ng h\u00f3a";
                                            instance.Entity = entity;
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            AddCommodity: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    gridView, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5], $step);
                                switch ($step) {
                                    case 0: {
                                        gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(null, null);
                                        if (System.String.contains(gridView.Name,"CommodityLevel2")) {
                                            $step = 1;
                                            continue;
                                        } else  {
                                            $step = 3;
                                            continue;
                                        }
                                    }
                                    case 1: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Commodity Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Settings.CommodityEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Th\u00eam m\u1edbi v\u1eadt t\u01b0 h\u00e0ng h\u00f3a";
                                            instance.Entity = new TMS.API.Models.MasterData();
                                            return instance;
                                        }, false, false);
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $step = 5;
                                        continue;
                                    }
                                    case 3: {
                                        $task2 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Commodity Editor", function () {
                                            var $t;
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Settings.CommodityEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Th\u00eam m\u1edbi v\u1eadt t\u01b0 h\u00e0ng h\u00f3a";
                                            instance.Entity = ($t = new TMS.API.Models.MasterData(), $t.ParentId = 7651, $t);
                                            return instance;
                                        }, false, false);
                                        $step = 4;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        $step = 5;
                                        continue;
                                    }
                                    case 5: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            BeforeMasterData: function (masterData) {
                masterData.ParentId = 7651;
                masterData.Path = "\\7651\\";
                masterData.Level = 1;
            }
        }
    });

    Bridge.define("TMS.UI.Business.Settings.CommodityValueOfCompanyBL", {
        inherits: [Core.Components.Forms.TabEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "SettingPolicy");
                this.Name = "CommodityValueOfCompany List";
            }
        },
        methods: {
            EditCommodityValueOfCompany: function (entity) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "CommodityValueOfCompany Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Settings.CommodityValueOfCompanyEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Ch\u1ec9nh s\u1eeda c\u1ea5u h\u00ecnh GTHH theo m\u1ee9c c\u00f4ng ty";
                                            instance.Entity = entity;
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            SetTypeId: function (settingPolicy) {
                settingPolicy.TypeId = 3;
            }
        }
    });

    Bridge.define("TMS.UI.Business.Settings.CommodityValueOfCompanyEditorBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "SettingPolicy");
                this.Name = "CommodityValueOfCompany Editor";
            }
        }
    });

    Bridge.define("TMS.UI.Business.Settings.ContainerTypeEditorBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "MasterData");
                this.Name = "ContainerType Editor";
            }
        }
    });

    Bridge.define("TMS.UI.Business.Settings.ContainerTypeListBL", {
        inherits: [Core.Components.Forms.TabEditor],
        fields: {
            _uploader: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "MasterData");
                this.Name = "Container Type List";
                this.DOMContentLoaded = Bridge.fn.combine(this.DOMContentLoaded, Bridge.fn.bind(this, function () {
                    Core.MVVM.Html.Take$1("Body").Form.Attr$1("method", "POST").Attr$1("enctype", "multipart/form-data").Display$1(false).Input.Event$1("change", Bridge.fn.bind(this, function (ev) {
                        var $step = 0,
                            $task1, 
                            $jumpFromFinally, 
                            $asyncBody = Bridge.fn.bind(this, function () {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = this.SelectedExcelContainer(ev);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            return;
                                        }
                                        default: {
                                            return;
                                        }
                                    }
                                }
                            }, arguments);

                        $asyncBody();
                    })).Type$1("file").Id(System.String.format("id_{0}", [Bridge.box(Bridge.getHashCode(this), System.Int32)])).Attr$1("name", "fileImport").Attr$1("accept", ".xlsx");
                    this._uploader = Bridge.as(Core.MVVM.Html.Context, HTMLInputElement);
                }));
            }
        },
        methods: {
            BeforeCreatedMasterData: function (masterData) {
                masterData.ParentId = 7565;
            },
            EditContainerType: function (entity) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "ContainerType Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Settings.ContainerTypeEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Ch\u1ec9nh s\u1eeda lo\u1ea1i xe c\u00f4ng";
                                            instance.Entity = entity;
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            AddContainerType: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "ContainerType Editor", function () {
                                            var $t;
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Settings.ContainerTypeEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Th\u00eam m\u1edbi lo\u1ea1i xe c\u00f4ng";
                                            instance.Entity = ($t = new TMS.API.Models.MasterData(), $t.ParentId = 7565, $t);
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            SelectedExcelContainer: function (e) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    files, 
                    uploadForm, 
                    formData, 
                    response, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        files = Bridge.as(e.target.files, FileList);
                                        if (Core.Extensions.IEnumerableExtensions.Nothing(File, files)) {
                                            $tcs.setResult(null);
                                            return;
                                        }

                                        uploadForm = Bridge.as(this._uploader.parentElement, HTMLFormElement);
                                        formData = new FormData(uploadForm);
                                        $task1 = this.Client.SubmitAsync(System.Collections.Generic.List$1(TMS.API.Models.MasterData), ($t = new Core.Clients.XHRWrapper(), $t.FormData = formData, $t.Url = "ImportContainerType", $t.Method = Core.Enums.HttpMethod.POST, $t.ResponseMimeType = Core.Extensions.Utils.GetMimeType("xlsx"), $t));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        response = $taskResult1;
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ImportContainerType: function () {
                this._uploader.click();
            }
        }
    });

    Bridge.define("TMS.UI.Business.Settings.GetOrderEditorBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        props: {
            VendorEntity: {
                get: function () {
                    return Bridge.as(this.Entity, TMS.API.Models.Vendor);
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "Vendor");
                this.Name = "GetOrder Editor";
            }
        }
    });

    Bridge.define("TMS.UI.Business.Settings.LocationEditorBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        statics: {
            fields: {
                GOOGLE_MAP_PLACES: null
            },
            ctors: {
                init: function () {
                    this.GOOGLE_MAP_PLACES = "https://maps.googleapis.com/maps/api/js?key=AIzaSyBfVrTUFatsZTyqaCKwRzbj09DD72VxSwc&libraries=places";
                }
            }
        },
        fields: {
            gridView: null
        },
        props: {
            LocationEntity: {
                get: function () {
                    return Bridge.as(this.Entity, TMS.API.Models.Location);
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "Location");
                this.Name = "Location Editor";
                this.DOMContentLoaded = Bridge.fn.combine(this.DOMContentLoaded, Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.ApplyMap();
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }));
            }
        },
        methods: {
            ApplyMap: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Clients.Client.LoadScript(TMS.UI.Business.Settings.LocationEditorBL.GOOGLE_MAP_PLACES);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        this.InitMap();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            InitMap: function () {
                var $t;
                var locationEntity = Bridge.as(this.Entity, TMS.API.Models.Location);
                var input = Core.Components.Extensions.ComponentExt.FindComponentByName(Core.Components.Textbox, this, "DescriptionEn").Element;
                var mapElement = Core.Components.Extensions.ComponentExt.FindComponentByName(Core.Components.Section, this, "Map").Element;
                var lat = this.LocationEntity.Lat == null ? 0 : this.LocationEntity.Lat;
                var lng = this.LocationEntity.Long == null ? 0 : this.LocationEntity.Long;
                var map = new google.maps.Map(mapElement, { center: new google.maps.LatLng(lat, lng), zoom: 15, mapTypeId: google.maps.MapTypeId.ROADMAP });
                var marker1 = new google.maps.Marker({ position: new google.maps.LatLng(lat, lng), map: map, draggable: true });

                marker1.addListener("dragend", Bridge.fn.bind(this, function (e) {
                    var latitude = marker1.getPosition().lat();
                    var longitude = marker1.getPosition().lng();
                    this.LocationEntity.Lat = latitude;
                    this.LocationEntity.Long = longitude;
                    this.UpdateView$1(false, ["Long", "Lat"]);
                }));
                var searchBox = new google.maps.places.SearchBox(input);
                ($t = map.controls)[System.Array.index(google.maps.ControlPosition.TOP_LEFT, $t)].push(input);
                map.addListener("bounds_changed", function (e) {
                    searchBox.setBounds(map.getBounds());
                });

                var markers = System.Array.init([], google.maps.Marker);
                searchBox.addListener("places_changed", Bridge.fn.bind(this, function (e) {
                    var places = searchBox.getPlaces();
                    if (places.length === 0) {
                        return;
                    }
                    markers.forEach(function (marker) {
                            marker.setMap(null);
                        });
                    var bounds = new google.maps.LatLngBounds();
                    places.forEach(Bridge.fn.bind(this, function (place) {
                            this.LocationEntity.Lat = place.geometry.location.lat();
                            this.LocationEntity.Long = place.geometry.location.lng();
                            this.LocationEntity.DescriptionEn = input.value;
                            if (Core.Extensions.StringExt.IsNullOrWhiteSpace(this.LocationEntity.Description1)) {
                                this.LocationEntity.Description1 = input.value;
                                this.UpdateView$1(false, ["Description1"]);
                            } else if (!Core.Extensions.StringExt.IsNullOrWhiteSpace(this.LocationEntity.Description1) && Core.Extensions.StringExt.IsNullOrWhiteSpace(this.LocationEntity.Description2)) {
                                this.LocationEntity.Description2 = input.value;
                                this.UpdateView$1(false, ["Description2"]);
                            } else if (!Core.Extensions.StringExt.IsNullOrWhiteSpace(this.LocationEntity.Description1) && !Core.Extensions.StringExt.IsNullOrWhiteSpace(this.LocationEntity.Description1) && Core.Extensions.StringExt.IsNullOrWhiteSpace(this.LocationEntity.Description3)) {
                                this.LocationEntity.Description3 = input.value;
                                this.UpdateView$1(false, ["Description3"]);
                            } else if (place.geometry == null) {
                                System.Console.WriteLine("Returned place contains no geometry");
                                return;
                            }
                            markers.push(new google.maps.Marker({ map: map, title: place.name, position: place.geometry.location }));
                            markers.forEach(Bridge.fn.bind(this, function (x) {
                                    x.addListener("dragend", Bridge.fn.bind(this, function (r) {
                                        var latitude = marker1.getPosition().lat();
                                        var longitude = marker1.getPosition().lng();
                                        this.LocationEntity.Lat = latitude;
                                        this.LocationEntity.Long = longitude;
                                        Core.Components.Extensions.ComponentExt.FindComponentByName(Core.Components.Number, this, "Long").UpdateView();
                                        Core.Components.Extensions.ComponentExt.FindComponentByName(Core.Components.Number, this, "Lat").UpdateView();
                                    }));
                                }));

                            if (place.geometry.viewport != null) {
                                bounds.union(place.geometry.viewport);
                            } else {
                                bounds.extend(place.geometry.location);
                            }
                            this.Dirty = true;
                        }));
                    map.fitBounds(bounds);
                }));
            },
            CheckLocation: function (locationService, masterData) {
                this.gridView = this.gridView || System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(null, null);
                if (System.Linq.Enumerable.from(this.LocationEntity.LocationService, TMS.API.Models.LocationService).any(function (x) {
                        return x.Id !== locationService.Id && System.Nullable.eq(x.ServiceId, masterData.Id);
                    })) {
                    Core.Extensions.Toast.Warning("D\u1eef li\u1ec7u n\u00e0y \u0111\u00e3 t\u1ed3n t\u1ea1i !!!");
                    this.gridView.RemoveRow(locationService);
                }
            }
        }
    });

    Bridge.define("TMS.UI.Business.Settings.LocationListBL", {
        inherits: [Core.Components.Forms.TabEditor],
        fields: {
            _uploader: null,
            _uploaderPortLowerliftGoods: null,
            _uploaderPortLowerliftHollow: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "Location");
                this.Name = "Location List";
                this.DOMContentLoaded = Bridge.fn.combine(this.DOMContentLoaded, Bridge.fn.bind(this, function () {
                    Core.MVVM.Html.Take$1("Body").Form.Attr$1("method", "POST").Attr$1("enctype", "multipart/form-data").Display$1(false).Input.Event$1("change", Bridge.fn.bind(this, function (ev) {
                        var $step = 0,
                            $task1, 
                            $jumpFromFinally, 
                            $asyncBody = Bridge.fn.bind(this, function () {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = this.SelectedExcel(ev);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            return;
                                        }
                                        default: {
                                            return;
                                        }
                                    }
                                }
                            }, arguments);

                        $asyncBody();
                    })).Type$1("file").Id(System.String.format("id_{0}", [Bridge.box(Bridge.getHashCode(this), System.Int32)])).Attr$1("name", "fileImport").Attr$1("accept", ".xlsx");
                    this._uploader = Bridge.as(Core.MVVM.Html.Context, HTMLInputElement);
                }));
                this.DOMContentLoaded = Bridge.fn.combine(this.DOMContentLoaded, Bridge.fn.bind(this, function () {
                    Core.MVVM.Html.Take$1("Body").Form.Attr$1("method", "POST").Attr$1("enctype", "multipart/form-data").Display$1(false).Input.Event$1("change", Bridge.fn.bind(this, function (ev) {
                        var $step = 0,
                            $task1, 
                            $jumpFromFinally, 
                            $asyncBody = Bridge.fn.bind(this, function () {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = this.SelectedExcelPortLowerliftGoods(ev);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            return;
                                        }
                                        default: {
                                            return;
                                        }
                                    }
                                }
                            }, arguments);

                        $asyncBody();
                    })).Type$1("file").Id(System.String.format("id_{0}", [Bridge.box(Bridge.getHashCode(this), System.Int32)])).Attr$1("name", "fileImport").Attr$1("accept", ".xlsx");
                    this._uploaderPortLowerliftGoods = Bridge.as(Core.MVVM.Html.Context, HTMLInputElement);
                }));
                this.DOMContentLoaded = Bridge.fn.combine(this.DOMContentLoaded, Bridge.fn.bind(this, function () {
                    Core.MVVM.Html.Take$1("Body").Form.Attr$1("method", "POST").Attr$1("enctype", "multipart/form-data").Display$1(false).Input.Event$1("change", Bridge.fn.bind(this, function (ev) {
                        var $step = 0,
                            $task1, 
                            $jumpFromFinally, 
                            $asyncBody = Bridge.fn.bind(this, function () {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = this.SelectedExcelPortLowerliftHollow(ev);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            return;
                                        }
                                        default: {
                                            return;
                                        }
                                    }
                                }
                            }, arguments);

                        $asyncBody();
                    })).Type$1("file").Id(System.String.format("id_{0}", [Bridge.box(Bridge.getHashCode(this), System.Int32)])).Attr$1("name", "fileImport").Attr$1("accept", ".xlsx");
                    this._uploaderPortLowerliftHollow = Bridge.as(Core.MVVM.Html.Context, HTMLInputElement);
                }));
            }
        },
        methods: {
            EditLocation: function (entity) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Location Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Settings.LocationEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Ch\u1ec9nh s\u1eeda \u0111\u1ecba \u0111i\u1ec3m";
                                            instance.Entity = entity;
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            AddLocation: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Location Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Settings.LocationEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Th\u00eam m\u1edbi \u0111\u1ecba \u0111i\u1ec3m";
                                            instance.Entity = new TMS.API.Models.Location();
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            SelectedExcel: function (e) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    files, 
                    uploadForm, 
                    formData, 
                    response, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        files = Bridge.as(e.target.files, FileList);
                                        if (Core.Extensions.IEnumerableExtensions.Nothing(File, files)) {
                                            $tcs.setResult(null);
                                            return;
                                        }

                                        uploadForm = Bridge.as(this._uploader.parentElement, HTMLFormElement);
                                        formData = new FormData(uploadForm);
                                        $task1 = this.Client.SubmitAsync(System.Collections.Generic.List$1(TMS.API.Models.Location), ($t = new Core.Clients.XHRWrapper(), $t.FormData = formData, $t.Url = "ImportLocation", $t.Method = Core.Enums.HttpMethod.POST, $t.ResponseMimeType = Core.Extensions.Utils.GetMimeType("xlsx"), $t));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        response = $taskResult1;
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ImportLocation: function () {
                this._uploader.click();
            },
            SelectedExcelPortLowerliftGoods: function (e) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    files, 
                    uploadForm, 
                    formData, 
                    response, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        files = Bridge.as(e.target.files, FileList);
                                        if (Core.Extensions.IEnumerableExtensions.Nothing(File, files)) {
                                            $tcs.setResult(null);
                                            return;
                                        }

                                        uploadForm = Bridge.as(this._uploaderPortLowerliftGoods.parentElement, HTMLFormElement);
                                        formData = new FormData(uploadForm);
                                        $task1 = this.Client.SubmitAsync(System.Collections.Generic.List$1(TMS.API.Models.Location), ($t = new Core.Clients.XHRWrapper(), $t.FormData = formData, $t.Url = "ImportPortLowerliftGoods", $t.Method = Core.Enums.HttpMethod.POST, $t.ResponseMimeType = Core.Extensions.Utils.GetMimeType("xlsx"), $t));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        response = $taskResult1;
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ImportPortLowerliftGoods: function () {
                this._uploaderPortLowerliftGoods.click();
            },
            SelectedExcelPortLowerliftHollow: function (e) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    files, 
                    uploadForm, 
                    formData, 
                    response, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        files = Bridge.as(e.target.files, FileList);
                                        if (Core.Extensions.IEnumerableExtensions.Nothing(File, files)) {
                                            $tcs.setResult(null);
                                            return;
                                        }

                                        uploadForm = Bridge.as(this._uploaderPortLowerliftHollow.parentElement, HTMLFormElement);
                                        formData = new FormData(uploadForm);
                                        $task1 = this.Client.SubmitAsync(System.Collections.Generic.List$1(TMS.API.Models.Location), ($t = new Core.Clients.XHRWrapper(), $t.FormData = formData, $t.Url = "ImportPortLowerliftHollow", $t.Method = Core.Enums.HttpMethod.POST, $t.ResponseMimeType = Core.Extensions.Utils.GetMimeType("xlsx"), $t));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        response = $taskResult1;
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ImportPortLowerliftHollow: function () {
                this._uploaderPortLowerliftHollow.click();
            }
        }
    });

    Bridge.define("TMS.UI.Business.Settings.PackingReturnEditorBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        fields: {
            gridView: null
        },
        props: {
            VendorEntity: {
                get: function () {
                    return Bridge.as(this.Entity, TMS.API.Models.Vendor);
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "Vendor");
                this.Name = "Packing Return Editor";
            }
        },
        methods: {
            Check_PackingReturn: function (vendorService, masterData) {
                this.gridView = this.gridView || System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(null, null);

                if (System.Linq.Enumerable.from(this.VendorEntity.VendorService, TMS.API.Models.VendorService).any(function (x) {
                        return x.Id !== vendorService.Id && System.Nullable.eq(x.ServiceId, masterData.Id);
                    })) {
                    Core.Extensions.Toast.Warning("\u0110\u01a1n v\u1ecb n\u00e0y \u0111\u00e3 \u0111\u01b0\u1ee3c ch\u1ecdn !!!");
                    this.gridView.RemoveRow(vendorService);
                }
            }
        }
    });

    Bridge.define("TMS.UI.Business.Settings.PackingReturnListBL", {
        inherits: [Core.Components.Forms.TabEditor],
        fields: {
            _uploaderLine: null,
            _uploaderVendor: null,
            _uploaderList: null,
            _uploaderGetOrder: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "Vendor");
                this.Name = "Packing Return List";
                this.DOMContentLoaded = Bridge.fn.combine(this.DOMContentLoaded, Bridge.fn.bind(this, function () {
                    Core.MVVM.Html.Take$1("Body").Form.Attr$1("method", "POST").Attr$1("enctype", "multipart/form-data").Display$1(false).Input.Event$1("change", Bridge.fn.bind(this, function (ev) {
                        var $step = 0,
                            $task1, 
                            $jumpFromFinally, 
                            $asyncBody = Bridge.fn.bind(this, function () {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = this.SelectedExcelLine(ev);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            return;
                                        }
                                        default: {
                                            return;
                                        }
                                    }
                                }
                            }, arguments);

                        $asyncBody();
                    })).Type$1("file").Id(System.String.format("id_{0}", [Bridge.box(Bridge.getHashCode(this), System.Int32)])).Attr$1("name", "fileImport").Attr$1("accept", ".xlsx");
                    this._uploaderLine = Bridge.as(Core.MVVM.Html.Context, HTMLInputElement);
                }));
                this.DOMContentLoaded = Bridge.fn.combine(this.DOMContentLoaded, Bridge.fn.bind(this, function () {
                    Core.MVVM.Html.Take$1("Body").Form.Attr$1("method", "POST").Attr$1("enctype", "multipart/form-data").Display$1(false).Input.Event$1("change", Bridge.fn.bind(this, function (ev) {
                        var $step = 0,
                            $task1, 
                            $jumpFromFinally, 
                            $asyncBody = Bridge.fn.bind(this, function () {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = this.SelectedExcelVendor(ev);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            return;
                                        }
                                        default: {
                                            return;
                                        }
                                    }
                                }
                            }, arguments);

                        $asyncBody();
                    })).Type$1("file").Id(System.String.format("id_{0}", [Bridge.box(Bridge.getHashCode(this), System.Int32)])).Attr$1("name", "fileImport").Attr$1("accept", ".xlsx");
                    this._uploaderVendor = Bridge.as(Core.MVVM.Html.Context, HTMLInputElement);
                }));
                this.DOMContentLoaded = Bridge.fn.combine(this.DOMContentLoaded, Bridge.fn.bind(this, function () {
                    Core.MVVM.Html.Take$1("Body").Form.Attr$1("method", "POST").Attr$1("enctype", "multipart/form-data").Display$1(false).Input.Event$1("change", Bridge.fn.bind(this, function (ev) {
                        var $step = 0,
                            $task1, 
                            $jumpFromFinally, 
                            $asyncBody = Bridge.fn.bind(this, function () {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = this.SelectedExcelList(ev);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            return;
                                        }
                                        default: {
                                            return;
                                        }
                                    }
                                }
                            }, arguments);

                        $asyncBody();
                    })).Type$1("file").Id(System.String.format("id_{0}", [Bridge.box(Bridge.getHashCode(this), System.Int32)])).Attr$1("name", "fileImport").Attr$1("accept", ".xlsx");
                    this._uploaderList = Bridge.as(Core.MVVM.Html.Context, HTMLInputElement);
                }));
                this.DOMContentLoaded = Bridge.fn.combine(this.DOMContentLoaded, Bridge.fn.bind(this, function () {
                    Core.MVVM.Html.Take$1("Body").Form.Attr$1("method", "POST").Attr$1("enctype", "multipart/form-data").Display$1(false).Input.Event$1("change", Bridge.fn.bind(this, function (ev) {
                        var $step = 0,
                            $task1, 
                            $jumpFromFinally, 
                            $asyncBody = Bridge.fn.bind(this, function () {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = this.SelectedExcelGetOrder(ev);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            return;
                                        }
                                        default: {
                                            return;
                                        }
                                    }
                                }
                            }, arguments);

                        $asyncBody();
                    })).Type$1("file").Id(System.String.format("id_{0}", [Bridge.box(Bridge.getHashCode(this), System.Int32)])).Attr$1("name", "fileImport").Attr$1("accept", ".xlsx");
                    this._uploaderGetOrder = Bridge.as(Core.MVVM.Html.Context, HTMLInputElement);
                }));
            }
        },
        methods: {
            EditPackingReturn: function (entity) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    gridView, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5], $step);
                                switch ($step) {
                                    case 0: {
                                        gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(null, null);
                                        if (System.String.contains(gridView.Name,"Location8")) {
                                            $step = 1;
                                            continue;
                                        } else  {
                                            $step = 3;
                                            continue;
                                        }
                                    }
                                    case 1: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "GetOrder Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Settings.GetOrderEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Ch\u1ec9nh s\u1eeda \u0111\u01a1n v\u1ecb nh\u1eadn l\u1ec7nh";
                                            instance.Entity = entity;
                                            return instance;
                                        }, false, false);
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $step = 5;
                                        continue;
                                    }
                                    case 3: {
                                        $task2 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Packing Return Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Settings.PackingReturnEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Ch\u1ec9nh s\u1eeda \u0111\u01a1n v\u1ecb \u0111\u00f3ng h\u1ea1 h\u00e0ng";
                                            instance.Entity = entity;
                                            return instance;
                                        }, false, false);
                                        $step = 4;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        $step = 5;
                                        continue;
                                    }
                                    case 5: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            AddPackingReturn: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    gridView, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5], $step);
                                switch ($step) {
                                    case 0: {
                                        gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(null, null);
                                        if (System.String.contains(gridView.Name,"Location8") === false) {
                                            $step = 1;
                                            continue;
                                        } else  {
                                            $step = 3;
                                            continue;
                                        }
                                    }
                                    case 1: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Packing Return Editor", function () {
                                            var $t;
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Settings.PackingReturnEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Th\u00eam m\u1edbi \u0111\u01a1n v\u1ecb \u0111\u00f3ng h\u1ea1 h\u00e0ng";
                                            instance.Entity = ($t = new TMS.API.Models.Vendor(), $t.TypeId = TMS.API.Enums.VendorTypeEnum.Partner, $t);
                                            return instance;
                                        }, false, false);
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $step = 5;
                                        continue;
                                    }
                                    case 3: {
                                        $task2 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "GetOrder Editor", function () {
                                            var $t;
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Settings.GetOrderEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Th\u00eam m\u1edbi \u0111\u01a1n v\u1ecb nh\u1eadn l\u1ec7nh";
                                            var vendor = ($t = new TMS.API.Models.Vendor(), $t.TypeId = TMS.API.Enums.VendorTypeEnum.Partner, $t);
                                            var vendorService = ($t = new TMS.API.Models.VendorService(), $t.ServiceId = 11839, $t);
                                            System.Array.add(vendor.VendorService, vendorService, TMS.API.Models.VendorService);
                                            instance.Entity = vendor;
                                            return instance;
                                        }, false, false);
                                        $step = 4;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        $step = 5;
                                        continue;
                                    }
                                    case 5: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            SelectedExcelLine: function (e) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    files, 
                    uploadForm, 
                    formData, 
                    response, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        files = Bridge.as(e.target.files, FileList);
                                        if (Core.Extensions.IEnumerableExtensions.Nothing(File, files)) {
                                            $tcs.setResult(null);
                                            return;
                                        }

                                        uploadForm = Bridge.as(this._uploaderLine.parentElement, HTMLFormElement);
                                        formData = new FormData(uploadForm);
                                        $task1 = this.Client.SubmitAsync(System.Collections.Generic.List$1(TMS.API.Models.Vendor), ($t = new Core.Clients.XHRWrapper(), $t.FormData = formData, $t.Url = "ImportLine", $t.Method = Core.Enums.HttpMethod.POST, $t.ResponseMimeType = Core.Extensions.Utils.GetMimeType("xlsx"), $t));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        response = $taskResult1;
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ImportLine: function () {
                this._uploaderLine.click();
            },
            SelectedExcelVendor: function (e) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    files, 
                    uploadForm, 
                    formData, 
                    response, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        files = Bridge.as(e.target.files, FileList);
                                        if (Core.Extensions.IEnumerableExtensions.Nothing(File, files)) {
                                            $tcs.setResult(null);
                                            return;
                                        }

                                        uploadForm = Bridge.as(this._uploaderVendor.parentElement, HTMLFormElement);
                                        formData = new FormData(uploadForm);
                                        $task1 = this.Client.SubmitAsync(System.Collections.Generic.List$1(TMS.API.Models.Vendor), ($t = new Core.Clients.XHRWrapper(), $t.FormData = formData, $t.Url = "ImportVendorLocation", $t.Method = Core.Enums.HttpMethod.POST, $t.ResponseMimeType = Core.Extensions.Utils.GetMimeType("xlsx"), $t));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        response = $taskResult1;
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ImportVendorLocation: function () {
                this._uploaderVendor.click();
            },
            SelectedExcelList: function (e) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    files, 
                    uploadForm, 
                    formData, 
                    response, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        files = Bridge.as(e.target.files, FileList);
                                        if (Core.Extensions.IEnumerableExtensions.Nothing(File, files)) {
                                            $tcs.setResult(null);
                                            return;
                                        }

                                        uploadForm = Bridge.as(this._uploaderList.parentElement, HTMLFormElement);
                                        formData = new FormData(uploadForm);
                                        $task1 = this.Client.SubmitAsync(System.Collections.Generic.List$1(TMS.API.Models.Vendor), ($t = new Core.Clients.XHRWrapper(), $t.FormData = formData, $t.Url = "ImportList", $t.Method = Core.Enums.HttpMethod.POST, $t.ResponseMimeType = Core.Extensions.Utils.GetMimeType("xlsx"), $t));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        response = $taskResult1;
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ImportList: function () {
                this._uploaderList.click();
            },
            SelectedExcelGetOrder: function (e) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    files, 
                    uploadForm, 
                    formData, 
                    response, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        files = Bridge.as(e.target.files, FileList);
                                        if (Core.Extensions.IEnumerableExtensions.Nothing(File, files)) {
                                            $tcs.setResult(null);
                                            return;
                                        }

                                        uploadForm = Bridge.as(this._uploaderGetOrder.parentElement, HTMLFormElement);
                                        formData = new FormData(uploadForm);
                                        $task1 = this.Client.SubmitAsync(System.Collections.Generic.List$1(TMS.API.Models.Vendor), ($t = new Core.Clients.XHRWrapper(), $t.FormData = formData, $t.Url = "ImportGetOrder", $t.Method = Core.Enums.HttpMethod.POST, $t.ResponseMimeType = Core.Extensions.Utils.GetMimeType("xlsx"), $t));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        response = $taskResult1;
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ImportGetOrder: function () {
                this._uploaderGetOrder.click();
            }
        }
    });

    Bridge.define("TMS.UI.Business.Settings.QuotationAdjustmentEditorBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "Quotation");
                this.Name = "QuotationAdjustment Editor";
            }
        }
    });

    Bridge.define("TMS.UI.Business.Settings.QuotationAdjustmentListBL", {
        inherits: [Core.Components.Forms.TabEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "Quotation");
                this.Name = "QuotationAdjustment List";
            }
        },
        methods: {
            EditQuotationAdjustment: function (entity) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "QuotationAdjustment Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Settings.QuotationAdjustmentEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Ch\u1ec9nh s\u1eeda \u0111i\u1ec1u ch\u1ec9nh c\u01b0\u1edbc t\u00e0u";
                                            instance.Entity = entity;
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            AddQuotationAdjustment: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "QuotationAdjustment Editor", function () {
                                            var $t;
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Settings.QuotationAdjustmentEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Th\u00eam m\u1edbi \u0111i\u1ec1u ch\u1ec9nh c\u01b0\u1edbc t\u00e0u";
                                            instance.Entity = ($t = new TMS.API.Models.Quotation(), $t.TypeId = 11483, $t);
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("TMS.UI.Business.Settings.QuotationEditorBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        fields: {
            gridView: null
        },
        props: {
            QuotationEntity: {
                get: function () {
                    return Bridge.as(this.Entity, TMS.API.Models.Quotation);
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "Quotation");
                this.Name = "Quotation Editor";
            }
        },
        methods: {
            CheckQuotation: function (quotationExpense, masterData) {
                this.gridView = this.gridView || System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(null, null);

                if (System.Linq.Enumerable.from(this.QuotationEntity.QuotationExpense, TMS.API.Models.QuotationExpense).any(function (x) {
                        return x.Id !== quotationExpense.Id && System.Nullable.eq(x.ExpenseTypeId, masterData.Id);
                    })) {
                    Core.Extensions.Toast.Warning("Lo\u1ea1i ph\u00ed n\u00e0y \u0111\u00e3 \u0111\u01b0\u1ee3c ch\u1ecdn !!!");
                    this.gridView.RemoveRow(quotationExpense);
                }
            },
            AddQuotation: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        this.QuotationEntity.Id = 0;
                                        $task1 = this.Save(this.QuotationEntity);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        this.Dispose();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("TMS.UI.Business.Settings.QuotationExpenseEditorBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        props: {
            QuotationExpenseEntity: {
                get: function () {
                    return Bridge.as(this.Entity, TMS.API.Models.QuotationExpense);
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "QuotationExpense");
                this.Name = "QuotationExpense Editor";
            }
        }
    });

    Bridge.define("TMS.UI.Business.Settings.QuotationExpenseListBL", {
        inherits: [Core.Components.Forms.TabEditor],
        fields: {
            _uploader: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "QuotationExpense");
                this.Name = "QuotationExpense List";
                this.DOMContentLoaded = Bridge.fn.combine(this.DOMContentLoaded, Bridge.fn.bind(this, function () {
                    Core.MVVM.Html.Take$1("Body").Form.Attr$1("method", "POST").Attr$1("enctype", "multipart/form-data").Display$1(false).Input.Event$1("change", Bridge.fn.bind(this, function (ev) {
                        var $step = 0,
                            $task1, 
                            $jumpFromFinally, 
                            $asyncBody = Bridge.fn.bind(this, function () {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = this.SelectedExcel(ev);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            return;
                                        }
                                        default: {
                                            return;
                                        }
                                    }
                                }
                            }, arguments);

                        $asyncBody();
                    })).Type$1("file").Id(System.String.format("id_{0}", [Bridge.box(Bridge.getHashCode(this), System.Int32)])).Attr$1("name", "fileImport").Attr$1("accept", ".xlsx");
                    this._uploader = Bridge.as(Core.MVVM.Html.Context, HTMLInputElement);
                }));
            }
        },
        methods: {
            EditQuotationExpense: function (entity) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "QuotationExpense Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Settings.QuotationExpenseEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Ch\u1ec9nh s\u1eeda c\u1ea5u h\u00ecnh ch\u00ednh s\u00e1ch";
                                            instance.Entity = entity;
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            AddQuotationExpense: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "QuotationExpense Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Settings.QuotationExpenseEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Th\u00eam m\u1edbi c\u1ea5u h\u00ecnh ch\u00ednh s\u00e1ch";
                                            instance.Entity = new TMS.API.Models.QuotationExpense();
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            SelectedExcel: function (e) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    files, 
                    uploadForm, 
                    formData, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        files = Bridge.as(e.target.files, FileList);
                                        if (Core.Extensions.IEnumerableExtensions.Nothing(File, files)) {
                                            $tcs.setResult(null);
                                            return;
                                        }

                                        uploadForm = Bridge.as(this._uploader.parentElement, HTMLFormElement);
                                        formData = new FormData(uploadForm);
                                        $task1 = this.Client.SubmitAsync(System.Collections.Generic.List$1(TMS.API.Models.Transportation), ($t = new Core.Clients.XHRWrapper(), $t.FormData = formData, $t.Url = "ImportExcel", $t.Method = Core.Enums.HttpMethod.POST, $t.ResponseMimeType = Core.Extensions.Utils.GetMimeType("xlsx"), $t));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ImportExcel: function () {
                this._uploader.click();
            }
        }
    });

    Bridge.define("TMS.UI.Business.Settings.QuotationListBL", {
        inherits: [Core.Components.Forms.TabEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "Quotation");
                this.Name = "Quotation List";
            }
        },
        methods: {
            EditQuotationRegion: function (entity) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    parent, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5], $step);
                                switch ($step) {
                                    case 0: {
                                        parent = new TMS.API.Models.Quotation();
                                        if (entity.ParentId != null) {
                                            $step = 1;
                                            continue;
                                        } else  {
                                            $step = 3;
                                            continue;
                                        }
                                    }
                                    case 1: {
                                        $task1 = new Core.Clients.Client.$ctor1("Quotation").FirstOrDefaultAsync(TMS.API.Models.Quotation, System.String.format("?$filter=Active eq true and Id eq {0}", [Bridge.box(System.Nullable.getValue(entity.ParentId), System.Int32)]));
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        parent = $taskResult1;
                                        $step = 4;
                                        continue;
                                    }
                                    case 3: {
                                        parent = entity;
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        $task2 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Quotation Region Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Settings.QuotationRegionEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Ch\u1ec9nh s\u1eeda b\u1ea3ng gi\u00e1";
                                            instance.Entity = parent;
                                            return instance;
                                        }, false, false);
                                        $step = 5;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 5: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            AddQuotationRegion: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Quotation Region Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Settings.QuotationRegionEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Th\u00eam m\u1edbi b\u1ea3ng gi\u00e1";
                                            instance.Entity = new TMS.API.Models.Quotation();
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            BeforeCreatedTab1: function (quotation) {
                // CVC (ÄÃ³ng hÃ ng)
                quotation.TypeId = 7592;
            },
            BeforeCreatedTab2: function (quotation) {
                // CVC Tráº£ hÃ ng
                quotation.TypeId = 7593;
            },
            BeforeCreatedTab3: function (quotation) {
                // NÃ¢ng rá»ng
                quotation.TypeId = 7594;
            },
            BeforeCreatedTab4: function (quotation) {
                // Háº¡ rá»ng
                quotation.TypeId = 7595;
            },
            BeforeCreatedTab5: function (quotation) {
                // NÃ¢ng rá»ng
                quotation.TypeId = 7596;
            },
            BeforeCreatedTab6: function (quotation) {
                // Háº¡ rá»ng
                quotation.TypeId = 7597;
            },
            BeforeCreatedTab7: function (quotation) {
                // CÆ°á»c tÃ u
                quotation.TypeId = 7598;
            },
            BeforeCreatedTab8: function (quotation) {
                // Äiá»u chá»nh cÆ°á»c tÃ u
                quotation.TypeId = 11483;
            },
            BeforeCreatedTab9: function (quotation) {
                // Chi phÃ­ káº¿t há»£p
                quotation.TypeId = 12071;
            },
            UpdateQuotation: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Quotation Update Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Manage.QuotationUpdateEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "\u0110i\u1ec1u ch\u1ec9nh b\u00e1o gi\u00e1";
                                            instance.Entity = new TMS.API.Models.QuotationUpdate();
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("TMS.UI.Business.Settings.QuotationRegionEditorBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        props: {
            QEntity: {
                get: function () {
                    return Bridge.as(this.Entity, TMS.API.Models.Quotation);
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "Quotation");
                this.Name = "Quotation Region Editor";
            }
        },
        methods: {
            BeforeCreatedQuotationRegion: function (quotation) {
                quotation.PackingId = this.QEntity.PackingId;
                quotation.ContainerTypeId = this.QEntity.ContainerTypeId;
                quotation.RegionId = this.QEntity.RegionId;
                quotation.StartDate = this.QEntity.StartDate;
                quotation.TypeId = this.QEntity.TypeId;
            }
        }
    });

    Bridge.define("TMS.UI.Business.Settings.RegionEditorBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        props: {
            masterDataEntity: {
                get: function () {
                    return Bridge.as(this.Entity, TMS.API.Models.MasterData);
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "MasterData");
                this.Name = "Region Editor";
            }
        },
        methods: {
            CheckParentId: function (masterData) {
                if (System.Nullable.eq(masterData.ParentId, 7569)) {
                    Core.Components.Extensions.ComponentExt.SetDisabled$1(this, true, ["ParentId"]);
                }
            },
            BeforeMasterData: function (masterData) {
                masterData.ParentId = this.masterDataEntity.Id;
                masterData.Path = "\\7569\\" + this.masterDataEntity.Id + "\\";
                masterData.Level = 2;
            }
        }
    });

    Bridge.define("TMS.UI.Business.Settings.RegionListBL", {
        inherits: [Core.Components.Forms.TabEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "MasterData");
                this.Name = "Region List";
            }
        },
        methods: {
            EditRegion: function (entity) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Region Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Settings.RegionEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Ch\u1ec9nh s\u1eeda khu v\u1ef1c";
                                            instance.Entity = entity;
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            AddRegion: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    gridView, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5], $step);
                                switch ($step) {
                                    case 0: {
                                        gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(null, null);
                                        if (System.String.contains(gridView.Name,"RegionLevel2")) {
                                            $step = 1;
                                            continue;
                                        } else  {
                                            $step = 3;
                                            continue;
                                        }
                                    }
                                    case 1: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Region Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Settings.RegionEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Th\u00eam m\u1edbi khu v\u1ef1c";
                                            instance.Entity = new TMS.API.Models.MasterData();
                                            return instance;
                                        }, false, false);
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $step = 5;
                                        continue;
                                    }
                                    case 3: {
                                        $task2 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Region Editor", function () {
                                            var $t;
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Settings.RegionEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Th\u00eam m\u1edbi khu v\u1ef1c";
                                            instance.Entity = ($t = new TMS.API.Models.MasterData(), $t.ParentId = 7569, $t);
                                            return instance;
                                        }, false, false);
                                        $step = 4;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        $step = 5;
                                        continue;
                                    }
                                    case 5: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            BeforeMasterData: function (masterData) {
                masterData.ParentId = 7651;
                masterData.Path = "\\7651\\";
                masterData.Level = 1;
            }
        }
    });

    Bridge.define("TMS.UI.Business.Settings.RouteEditorBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "Route");
                this.Name = "Route Editor";
            }
        }
    });

    Bridge.define("TMS.UI.Business.Settings.RouteListBL", {
        inherits: [Core.Components.Forms.TabEditor],
        fields: {
            _uploader: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "Route");
                this.Name = "Route List";
                this.DOMContentLoaded = Bridge.fn.combine(this.DOMContentLoaded, Bridge.fn.bind(this, function () {
                    Core.MVVM.Html.Take$1("Body").Form.Attr$1("method", "POST").Attr$1("enctype", "multipart/form-data").Display$1(false).Input.Event$1("change", Bridge.fn.bind(this, function (ev) {
                        var $step = 0,
                            $task1, 
                            $jumpFromFinally, 
                            $asyncBody = Bridge.fn.bind(this, function () {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = this.SelectedExcel(ev);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            return;
                                        }
                                        default: {
                                            return;
                                        }
                                    }
                                }
                            }, arguments);

                        $asyncBody();
                    })).Type$1("file").Id(System.String.format("id_{0}", [Bridge.box(Bridge.getHashCode(this), System.Int32)])).Attr$1("name", "fileImport").Attr$1("accept", ".xlsx");
                    this._uploader = Bridge.as(Core.MVVM.Html.Context, HTMLInputElement);
                }));
            }
        },
        methods: {
            EditRoute: function (entity) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Route Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Settings.RouteEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Ch\u1ec9nh s\u1eeda tuy\u1ebfn v\u1eadn chuy\u1ec3n";
                                            instance.Entity = entity;
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            AddRoute: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Route Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Settings.RouteEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Th\u00eam m\u1edbi tuy\u1ebfn v\u1eadn chuy\u1ec3n";
                                            instance.Entity = new TMS.API.Models.Route();
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            SelectedExcel: function (e) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    files, 
                    uploadForm, 
                    formData, 
                    response, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        files = Bridge.as(e.target.files, FileList);
                                        if (Core.Extensions.IEnumerableExtensions.Nothing(File, files)) {
                                            $tcs.setResult(null);
                                            return;
                                        }

                                        uploadForm = Bridge.as(this._uploader.parentElement, HTMLFormElement);
                                        formData = new FormData(uploadForm);
                                        $task1 = this.Client.SubmitAsync(System.Collections.Generic.List$1(TMS.API.Models.Route), ($t = new Core.Clients.XHRWrapper(), $t.FormData = formData, $t.Url = "ImportRoute", $t.Method = Core.Enums.HttpMethod.POST, $t.ResponseMimeType = Core.Extensions.Utils.GetMimeType("xlsx"), $t));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        response = $taskResult1;
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ImportRoute: function () {
                this._uploader.click();
            }
        }
    });

    Bridge.define("TMS.UI.Business.Settings.SettingPolicyEditorBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        props: {
            SettingPolicyEntity: {
                get: function () {
                    return Bridge.as(this.Entity, TMS.API.Models.SettingPolicy);
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "SettingPolicy");
                this.Name = "SettingPolicy Editor";
            }
        }
    });

    Bridge.define("TMS.UI.Business.Settings.SettingPolicyListBL", {
        inherits: [Core.Components.Forms.TabEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "SettingPolicy");
                this.Name = "SettingPolicy List";
            }
        },
        methods: {
            EditSettingPolicy: function (entity) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "SettingPolicy Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Settings.SettingPolicyEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Ch\u1ec9nh s\u1eeda chi ph\u00ed b\u00e1o gi\u00e1";
                                            instance.Entity = entity;
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            AddSettingPolicy: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "SettingPolicy Editor", function () {
                                            var $t;
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Settings.SettingPolicyEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Th\u00eam m\u1edbi chi ph\u00ed b\u00e1o gi\u00e1";
                                            instance.Entity = ($t = new TMS.API.Models.SettingPolicy(), $t.TypeId = 1, $t);
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("TMS.UI.Business.Settings.SettingTransportationEditorBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "SettingTransportation");
                this.Name = "SettingTransportation Editor";
            }
        }
    });

    Bridge.define("TMS.UI.Business.Settings.SettingTransportationListBL", {
        inherits: [Core.Components.Forms.TabEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "SettingTransportation");
                this.Name = "SettingTransportation List";
            }
        },
        methods: {
            EditSettingTransportation: function (entity) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "SettingTransportation Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Settings.SettingTransportationEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Ch\u1ec9nh s\u1eeda c\u1ea5u h\u00ecnh v\u1eadn chuy\u1ec3n";
                                            instance.Entity = entity;
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            AddSettingTransportation: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "SettingTransportation Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Settings.SettingTransportationEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Th\u00eam m\u1edbi c\u1ea5u h\u00ecnh v\u1eadn chuy\u1ec3n";
                                            instance.Entity = new TMS.API.Models.SettingTransportation();
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("TMS.UI.Business.Settings.ShipEditorBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "Ship");
                this.Name = "Ship Editor";
            }
        }
    });

    Bridge.define("TMS.UI.Business.Settings.ShipListBL", {
        inherits: [Core.Components.Forms.TabEditor],
        fields: {
            _uploader: null,
            _uploaderShip: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "Ship");
                this.Name = "Ship List";
                this.DOMContentLoaded = Bridge.fn.combine(this.DOMContentLoaded, Bridge.fn.bind(this, function () {
                    Core.MVVM.Html.Take$1("Body").Form.Attr$1("method", "POST").Attr$1("enctype", "multipart/form-data").Display$1(false).Input.Event$1("change", Bridge.fn.bind(this, function (ev) {
                        var $step = 0,
                            $task1, 
                            $jumpFromFinally, 
                            $asyncBody = Bridge.fn.bind(this, function () {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = this.SelectedExcelShip(ev);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            return;
                                        }
                                        default: {
                                            return;
                                        }
                                    }
                                }
                            }, arguments);

                        $asyncBody();
                    })).Type$1("file").Id(System.String.format("id_{0}", [Bridge.box(Bridge.getHashCode(this), System.Int32)])).Attr$1("name", "fileImport").Attr$1("accept", ".xlsx");
                    this._uploader = Bridge.as(Core.MVVM.Html.Context, HTMLInputElement);
                }));
                this.DOMContentLoaded = Bridge.fn.combine(this.DOMContentLoaded, Bridge.fn.bind(this, function () {
                    Core.MVVM.Html.Take$1("Body").Form.Attr$1("method", "POST").Attr$1("enctype", "multipart/form-data").Display$1(false).Input.Event$1("change", Bridge.fn.bind(this, function (ev) {
                        var $step = 0,
                            $task1, 
                            $jumpFromFinally, 
                            $asyncBody = Bridge.fn.bind(this, function () {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = this.SelectedExcelShipNew(ev);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            return;
                                        }
                                        default: {
                                            return;
                                        }
                                    }
                                }
                            }, arguments);

                        $asyncBody();
                    })).Type$1("file").Id(System.String.format("id_{0}", [Bridge.box(Bridge.getHashCode(this), System.Int32)])).Attr$1("name", "fileImport").Attr$1("accept", ".xlsx");
                    this._uploaderShip = Bridge.as(Core.MVVM.Html.Context, HTMLInputElement);
                }));
            }
        },
        methods: {
            EditShip: function (entity) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Ship Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Settings.ShipEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Ch\u1ec9nh s\u1eeda t\u00e0u";
                                            instance.Entity = entity;
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            AddShip: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Ship Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Settings.ShipEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Th\u00eam m\u1edbi t\u00e0u";
                                            instance.Entity = new TMS.API.Models.Ship();
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            SelectedExcelShip: function (e) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    files, 
                    uploadForm, 
                    formData, 
                    response, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        files = Bridge.as(e.target.files, FileList);
                                        if (Core.Extensions.IEnumerableExtensions.Nothing(File, files)) {
                                            $tcs.setResult(null);
                                            return;
                                        }

                                        uploadForm = Bridge.as(this._uploader.parentElement, HTMLFormElement);
                                        formData = new FormData(uploadForm);
                                        $task1 = this.Client.SubmitAsync(System.Collections.Generic.List$1(TMS.API.Models.Ship), ($t = new Core.Clients.XHRWrapper(), $t.FormData = formData, $t.Url = "ImportShip", $t.Method = Core.Enums.HttpMethod.POST, $t.ResponseMimeType = Core.Extensions.Utils.GetMimeType("xlsx"), $t));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        response = $taskResult1;
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ImportShip: function () {
                this._uploader.click();
            },
            SelectedExcelShipNew: function (e) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    files, 
                    uploadForm, 
                    formData, 
                    response, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        files = Bridge.as(e.target.files, FileList);
                                        if (Core.Extensions.IEnumerableExtensions.Nothing(File, files)) {
                                            $tcs.setResult(null);
                                            return;
                                        }

                                        uploadForm = Bridge.as(this._uploaderShip.parentElement, HTMLFormElement);
                                        formData = new FormData(uploadForm);
                                        $task1 = this.Client.SubmitAsync(System.Collections.Generic.List$1(TMS.API.Models.Ship), ($t = new Core.Clients.XHRWrapper(), $t.FormData = formData, $t.Url = "ImportShipNew", $t.Method = Core.Enums.HttpMethod.POST, $t.ResponseMimeType = Core.Extensions.Utils.GetMimeType("xlsx"), $t));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        response = $taskResult1;
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ImportShipNew: function () {
                this._uploaderShip.click();
            }
        }
    });

    Bridge.define("TMS.UI.Business.Settings.TransportationTypeBL", {
        inherits: [Core.Components.Forms.TabEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "SettingPolicy");
                this.Name = "TransportationType List";
            }
        },
        methods: {
            EditTransportationType: function (entity) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "TransportationType Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Settings.TransportationTypeEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Ch\u1ec9nh s\u1eeda c\u1ea5u h\u00ecnh lo\u1ea1i v\u1eadn chuy\u1ec3n";
                                            instance.Entity = entity;
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            AddTransportationType: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "TransportationType Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Settings.TransportationTypeEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Th\u00eam m\u1edbi c\u1ea5u h\u00ecnh lo\u1ea1i v\u1eadn chuy\u1ec3n";
                                            instance.Entity = new TMS.API.Models.BrandShip();
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            SetTypeId: function (settingPolicy) {
                settingPolicy.TypeId = 2;
            }
        }
    });

    Bridge.define("TMS.UI.Business.Settings.TransportationTypeEditorBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "SettingPolicy");
                this.Name = "TransportationType Editor";
            }
        }
    });

    Bridge.define("TMS.UI.Business.Settings.VendorContactEditorBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        props: {
            vendorContactEntity: {
                get: function () {
                    return Bridge.as(this.Entity, TMS.API.Models.VendorContact);
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "VendorContact");
                this.Name = "VendorContact Editor";
            }
        }
    });

    Bridge.define("TMS.UI.Business.Settings.VendorContactListBL", {
        inherits: [Core.Components.Forms.TabEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "VendorContact");
                this.Name = "VendorContact List";
            }
        },
        methods: {
            EditVendorContact: function (entity) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "VendorContact Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Settings.VendorContactEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Th\u00f4ng tin li\u00ean h\u1ec7";
                                            instance.Entity = entity;
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            AddVendorContact: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "VendorContact Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Settings.VendorContactEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Th\u00eam m\u1edbi th\u00f4ng tin li\u00ean h\u1ec7";
                                            instance.Entity = new TMS.API.Models.VendorContact();
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("TMS.UI.Business.Shop.VendorBL", {
        inherits: [Core.Components.Forms.TabEditor],
        fields: {
            gridView: null,
            index: null,
            _uploader: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "Vendor");
                this.Name = "Vendor List";
                this.DOMContentLoaded = Bridge.fn.combine(this.DOMContentLoaded, Bridge.fn.bind(this, function () {
                    Core.MVVM.Html.Take$1("Body").Form.Attr$1("method", "POST").Attr$1("enctype", "multipart/form-data").Display$1(false).Input.Event$1("change", Bridge.fn.bind(this, function (ev) {
                        var $step = 0,
                            $task1, 
                            $jumpFromFinally, 
                            $asyncBody = Bridge.fn.bind(this, function () {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = this.SelectedExcel(ev);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            return;
                                        }
                                        default: {
                                            return;
                                        }
                                    }
                                }
                            }, arguments);

                        $asyncBody();
                    })).Type$1("file").Id(System.String.format("id_{0}", [Bridge.box(Bridge.getHashCode(this), System.Int32)])).Attr$1("name", "fileImport").Attr$1("accept", ".xlsx");
                    this._uploader = Bridge.as(Core.MVVM.Html.Context, HTMLInputElement);
                }));
            }
        },
        methods: {
            CheckQuotationTransportation: function () {
                var gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                        return Bridge.referenceEquals(x.GuiInfo.FieldName, "Transportation");
                    }, null);
                if (gridView == null) {
                    return;
                }
                gridView.BodyContextMenuShow = Bridge.fn.combine(gridView.BodyContextMenuShow, Bridge.fn.bind(this, function () {
                    Core.Components.Forms.ContextMenu.Instance.MenuItems = Bridge.fn.bind(this, function (_o1) {
                            var $t;
                            _o1.add(($t = new Core.Components.Forms.ContextMenuItem(), $t.Icon = "fas fa-pen", $t.Text = "G\u1ed9p kh\u00e1ch h\u00e0ng", $t.Click = Bridge.fn.cacheBind(this, this.CompareCustomer), $t));
                            return _o1;
                        })(new (System.Collections.Generic.List$1(Core.Components.Forms.ContextMenuItem)).ctor());
                }));
            },
            CompareCustomer: function (arg) {

            },
            EditVendor: function (entity) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Vendor Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Shop.VendorEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Ch\u1ec9nh s\u1eeda ch\u1ee7 h\u00e0ng";
                                            instance.Entity = entity;
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            SetSale: function (vendor) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    fullName, 
                    name, 
                    lastVendor, 
                    count, 
                    $t, 
                    index1, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        this.gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(null, null);
                                        vendor.TypeId = TMS.API.Enums.VendorTypeEnum.Boss;
                                        vendor.UserId = Core.Clients.Client.Token.UserId;
                                        fullName = Core.Clients.Client.Token.FullName;
                                        if (fullName == null || !Core.Extensions.StringExt.IsNullOrEmpty(vendor.Code)) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        name = Bridge.toArray(System.Linq.Enumerable.from(System.String.split(fullName, [32].map(function (i) {{ return String.fromCharCode(i); }})), System.String).select(function (x) {
                                            return String.fromCharCode(x.charCodeAt(0)).toUpperCase();
                                        })).join("");
                                        lastVendor = new Core.Clients.Client.$ctor1("Vendor").FirstOrDefaultAsync(TMS.API.Models.Vendor, System.String.format("?$filter=UserId eq {0} and TypeId eq {1}&$orderby=Id desc&$take=1", Bridge.box(vendor.UserId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), Bridge.box(TMS.API.Enums.VendorTypeEnum.Boss, System.Int32)));
                                        ;
                                        count = new Core.Clients.Client.$ctor1("Vendor").GetList(TMS.API.Models.Vendor, System.String.format("?$filter=UserId eq {0} and TypeId eq {1}&$count=true", Bridge.box(vendor.UserId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), Bridge.box(TMS.API.Enums.VendorTypeEnum.Boss, System.Int32)));
                                        $task1 = System.Threading.Tasks.Task.whenAll(lastVendor, count);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        this.index = ($t = this.index, $t != null ? $t : count.getResult().Odata.Count);
                                        this.index = Bridge.Int.clip32(System.Nullable.add(this.index, 1));
                                        if (lastVendor.getResult() != null && System.String.contains(lastVendor.getResult().Code,name)) {
                                            index1 = System.Int32.parse(System.String.replaceAll(lastVendor.getResult().Code, name, ""));
                                            if (System.Nullable.lte(this.index, index1)) {
                                                this.index = Bridge.Int.clip32(System.Nullable.add(Bridge.Int.clip32(System.Nullable.sub(Bridge.Int.clip32(System.Nullable.add(this.index, index1)), this.index)), 1));
                                            }
                                        }
                                        vendor.Code = vendor.Code == null || Bridge.referenceEquals(vendor.Code, "") ? (name || "") + System.Nullable.toString(this.index, null) : vendor.Code;
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            AddVendor: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Vendor Editor", function () {
                                            var $t;
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Shop.VendorEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Th\u00eam m\u1edbi ch\u1ee7 h\u00e0ng";
                                            instance.Entity = ($t = new TMS.API.Models.Vendor(), $t.TypeId = TMS.API.Enums.VendorTypeEnum.Boss, $t);
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            SelectedExcel: function (e) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    files, 
                    uploadForm, 
                    formData, 
                    response, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        files = Bridge.as(e.target.files, FileList);
                                        if (Core.Extensions.IEnumerableExtensions.Nothing(File, files)) {
                                            $tcs.setResult(null);
                                            return;
                                        }

                                        uploadForm = Bridge.as(this._uploader.parentElement, HTMLFormElement);
                                        formData = new FormData(uploadForm);
                                        $task1 = this.Client.SubmitAsync(System.Collections.Generic.List$1(TMS.API.Models.Vendor), ($t = new Core.Clients.XHRWrapper(), $t.FormData = formData, $t.Url = "ImportVendor", $t.Method = Core.Enums.HttpMethod.POST, $t.ResponseMimeType = Core.Extensions.Utils.GetMimeType("xlsx"), $t));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        response = $taskResult1;
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ImportVendor: function () {
                this._uploader.click();
            },
            DOMContentLoadedVendor: function () {
                var gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                        return Bridge.referenceEquals(x.GuiInfo.FieldName, "Vendor");
                    }, null);
                if (gridView == null) {
                    return;
                }
                gridView.BodyContextMenuShow = Bridge.fn.combine(gridView.BodyContextMenuShow, Bridge.fn.bind(this, function () {
                    Core.Components.Forms.ContextMenu.Instance.MenuItems = Bridge.fn.bind(this, function (_o1) {
                            var $t;
                            _o1.add(($t = new Core.Components.Forms.ContextMenuItem(), $t.Icon = "fas fa-pen", $t.Text = "G\u1ed9p ch\u1ee7 h\u00e0ng", $t.Click = Bridge.fn.cacheBind(this, this.CompareVendor), $t));
                            return _o1;
                        })(new (System.Collections.Generic.List$1(Core.Components.Forms.ContextMenuItem)).ctor());
                }));
            },
            CompareVendor: function (arg) {
                var gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                        return Bridge.referenceEquals(x.GuiInfo.FieldName, "Vendor");
                    }, null);
                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        rs, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = this.Client.PostAsync(System.Boolean, System.Linq.Enumerable.from(gridView.GetSelectedRows(), System.Object).firstOrDefault(null, null), "CompareVendor");
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            rs = $taskResult1;
                                            if (rs) {
                                                Core.Extensions.Toast.Success("H\u1ee3p nh\u1ea5t ch\u1ee7 h\u00e0ng th\u00e0nh c\u00f4ng!");
                                            } else {
                                                Core.Extensions.Toast.Success("Ch\u01b0a ch\u1ecdn ch\u1ee7 h\u00e0ng g\u1ed1c!");
                                            }
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            }
        }
    });

    Bridge.define("TMS.UI.Business.Shop.VendorEditorBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        props: {
            vendorEntity: {
                get: function () {
                    return Bridge.as(this.Entity, TMS.API.Models.Vendor);
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "Vendor");
                this.Name = "Vendor Editor";
                this.DOMContentLoaded = Bridge.fn.combine(this.DOMContentLoaded, Bridge.fn.bind(this, function () {
                    this.Entity.TypeId = Bridge.box(7551, System.Int32);
                    if (this.vendorEntity.Id > 0) {
                        Core.Components.Extensions.ComponentExt.SetDisabled$1(this, true, ["CustomerTypeId"]);
                        Core.Components.Extensions.ComponentExt.SetDisabled$1(this, true, ["IsBought"]);
                    }
                }));
            }
        }
    });

    Bridge.define("TMS.UI.Business.User.ApprovalConfigBL", {
        inherits: [Core.Components.Forms.TabEditor],
        fields: {
            _appForm: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "ApprovalConfig");
                this.Entity = new TMS.API.Models.ApprovalConfig();
                this.Name = "ApprovalConfig";
            }
        },
        methods: {
            CreateApprovalConfig: function () {
                var $t;
                this._appForm = ($t = new Core.Components.Forms.PopupEditor("ApprovalConfig"), $t.Entity = new TMS.API.Models.ApprovalConfig(), $t.Name = "ApprovalConfig Detail", $t.Title = "Create ph\u00ea duy\u1ec7t", $t.ParentElement = this.TabEditor.Element, $t);
                this.AddChild(this._appForm);
            },
            EditApprovalConfig: function (app) {
                var $t;
                this._appForm = ($t = new Core.Components.Forms.PopupEditor("ApprovalConfig"), $t.Entity = app, $t.Name = "ApprovalConfig Detail", $t.Title = "Ch\u1ec9nh s\u1eeda ph\u00ea duy\u1ec7t", $t.ParentElement = this.TabEditor.Element, $t);
                this.AddChild(this._appForm);
            }
        }
    });

    Bridge.define("TMS.UI.Business.User.ChangePasswordBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "User");
                this.Name = "ChangePassword";
                this.Entity = new Core.ViewModels.UserProfileVM();
            }
        },
        methods: {
            Save: function (entity) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    vm, 
                    saved, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        vm = Bridge.as(this.Entity, Core.ViewModels.UserProfileVM);
                                        Core.Extensions.ReflectionExt.ClearReferences(vm);
                                        $task1 = this.Client.UpdateAsync(System.Boolean, vm, "UpdateProfile");
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        saved = $taskResult1;
                                        if (saved) {
                                            Core.Extensions.Toast.Success("Update profile succeeded!");
                                        } else {
                                            Core.Extensions.Toast.Warning("Update profile failed!");
                                        }
                                        $tcs.setResult(saved);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("TMS.UI.Business.User.RegistrationBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        props: {
            VM: {
                get: function () {
                    return Bridge.as(this.Entity, Core.ViewModels.RegistrationVM);
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "User");
                this.Entity = new Core.ViewModels.RegistrationVM();
                this.Name = "Registration";
                this.Title = this.Name;
                this.Public = true;
            }
        },
        methods: {
            Register: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    isValid, 
                    result, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.IsFormValid();
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        isValid = $taskResult1;
                                        if (!isValid) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        $task2 = this.Client.PostAsync(System.Boolean, this.VM, "Register", true);
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        result = $taskResult2;
                                        if (result) {
                                            this.ShowDialog();
                                        }
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ShowDialog: function () {
                var $t;
                this._confirm = ($t = new Core.Components.Forms.ConfirmDialog(), $t.Content = (System.String.format("B\u1ea1n \u0111\u00e3 \u0111\u0103ng k\u00fd success, 1 email \u0111\u00e3 \u0111\u01b0\u1ee3c g\u1edfi v\u00e0o \u0111\u1ecba ch\u1ec9 {0}.<br />", [this.VM.Email]) || "") + (System.String.format("Vui l\u00f2ng ki\u1ec3m tra email \u0111\u1ec3 x\u00e1c nh\u1eadn vi\u1ec7c \u0111\u0103ng k\u00fd.<br />", null) || "") + (System.String.format("Email g\u1edfi \u0111\u1ebfn c\u00f3 th\u1ec3 n\u1eb1m trong th\u00f9ng r\u00e1c.<br />", null) || "") + (System.String.format("Xin l\u01b0u \u00fd, duy\u1ec7t t\u00e0i kho\u1ea3n c\u1ee7a b\u1ea1n c\u00f3 th\u1ec3 di\u1ec5n ra trong 1 - 3 ng\u00e0y l\u00e0m vi\u1ec7c.", null) || ""), $t);
                this._confirm.YesText = "\u0110\u1ed3ng \u00fd";
                this._confirm.YesConfirmed = Bridge.fn.combine(this._confirm.YesConfirmed, Bridge.fn.cacheBind(this, this.Dispose));
                this._confirm.Canceled = Bridge.fn.combine(this._confirm.Canceled, Bridge.fn.cacheBind(this, this.Dispose));
                this._confirm.IgnoreNoButton = true;
                this._confirm.Render();
            },
            Dispose: function () {
                this._confirm != null ? this._confirm.Dispose() : null;
                Core.Components.Forms.PopupEditor.prototype.Dispose.call(this);
            }
        }
    });

    Bridge.define("TMS.UI.Business.User.TaskNotificationDetailBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "TaskNotification");
                this.Name = "Create TaskNotification";
            }
        },
        methods: {
            Save: function (entity) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    rs, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4], $step);
                                switch ($step) {
                                    case 0: {
                                        if (entity === void 0) { entity = null; }
                                        $task1 = this.IsFormValid();
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        if (!$taskResult1) {
                                            $step = 2;
                                            continue;
                                        } 
                                        $step = 3;
                                        continue;
                                    }
                                    case 2: {
                                        $tcs.setResult(false);
                                        return;
                                    }
                                    case 3: {
                                        $task2 = new Core.Clients.Client.$ctor1("TaskNotification").PostAsync(System.Boolean, this.Entity, "SendRequest");
                                        $step = 4;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        rs = $taskResult2;
                                        if (rs) {
                                            Core.Extensions.Toast.Success("Th\u00eam m\u1edbi th\u00e0nh c\u00f4ng");
                                            $tcs.setResult(true);
                                            return;
                                        } else {
                                            $tcs.setResult(false);
                                            return;
                                        }
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("TMS.UI.Business.User.UserBL", {
        inherits: [Core.Components.Forms.TabEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "User");
                this.Name = "User List";
                this.Title = this.Name;
            }
        },
        methods: {
            EditUser: function (user) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.InitUserForm(user);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CreateUser: function () {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.InitUserForm(new TMS.API.Models.User());
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CreateTaskNotification: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Create TaskNotification", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.User.TaskNotificationDetailBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Th\u00eam m\u1edbi th\u00f4ng b\u00e1o";
                                            instance.Entity = new TMS.API.Models.TaskNotification();
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            InitUserForm: function (user) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "User Detail", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.User.UserDetailBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = user.Id <= 0 ? "Add user" : "Edit user";
                                            instance.Entity = user;
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("TMS.UI.Business.User.UserDetailBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        fields: {
            gridView: null
        },
        props: {
            UserEntity: {
                get: function () {
                    return Bridge.as(this.Entity, TMS.API.Models.User);
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "User");
                this.Entity = new TMS.API.Models.User();
                this.Name = "User Detail";
            }
        },
        methods: {
            ReSend: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    client, 
                    res, 
                    dialog, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        client = new Core.Clients.Client.$ctor1("User");
                                        $task1 = client.GetAsync$1(System.String, System.String.format("/ReSendUser/{0}", [Bridge.box(this.UserEntity.Id, System.Int32)]));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        res = $taskResult1;
                                        dialog = ($t = new Core.Components.Forms.ConfirmDialog(), $t.Title = System.String.format("\u0110\u1ed5i m\u1eadt kh\u1ea9u cho user {0}", [this.UserEntity.UserName]), $t.Content = System.String.format("\u0110\u1ed5i m\u1eadt kh\u1ea9u cho user success.<br />M\u1eadt kh\u1ea9u m\u1edbi l\u00e0 {0}", [res]), $t);
                                        dialog.IgnoreNoButton = true;
                                        dialog.Render();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            PrintDebitCredit: function () {
                var preview = Core.Components.Extensions.ComponentExt.FindComponentByName(Core.Components.Section, this, "ViewA4");
                var print = window.open("", "_blank");
                var shtml = "<html>";
                shtml = (shtml || "") + "<link rel='stylesheet' type='text/css' href='./css/styleprint.css' />";
                shtml = (shtml || "") + "<link href='./css/font-awesome.css' rel='stylesheet' />";
                shtml = (shtml || "") + "<link href='./css/metro-all.css' rel='stylesheet' />";
                shtml = (shtml || "") + "<link href='./css/main.css' rel='stylesheet' />";
                shtml = (shtml || "") + "<link href='./css/LineIcons.css' rel='stylesheet' />";
                shtml = (shtml || "") + "<body onload=\"window.print();\">";
                shtml = (shtml || "") + "<div style='padding:7pt'>";
                shtml = (shtml || "") + (preview.ParentElement.innerHTML || "");
                shtml = (shtml || "") + "</div>";
                shtml = (shtml || "") + "</body>";
                shtml = (shtml || "") + "</html>";
                print.document.write(shtml);
                print.document.close();
            },
            Check_User: function (userRole, role) {
                this.gridView = this.gridView || System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(null, null);
                if (System.Linq.Enumerable.from(this.UserEntity.UserRole, TMS.API.Models.UserRole).any(function (x) {
                        return x.Id !== userRole.Id && x.RoleId === role.Id;
                    })) {
                    Core.Extensions.Toast.Warning("T\u00e0i kho\u1ea3n n\u00e0y \u0111\u00e3 t\u1ed3n t\u1ea1i !!!");
                    this.gridView.RemoveRow(userRole);
                }
            }
        }
    });

    Bridge.define("TMS.UI.Business.User.UserProfileBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        props: {
            UserEntity: {
                get: function () {
                    return Bridge.as(this.Entity, TMS.API.Models.User);
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "User");
                this.Name = "UserProfile";
                this.DOMContentLoaded = Bridge.fn.combine(this.DOMContentLoaded, Bridge.fn.bind(this, function () {
                    this.CheckShowNative();
                }));
            }
        },
        methods: {
            OpenSetting: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "UserSetting", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.User.UserSettingBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "User Setting";
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            OpenChangePassword: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "ChangePassword", Bridge.fn.bind(this, function () {
                                            var $t;
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.User.ChangePasswordBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Entity = ($t = new Core.ViewModels.UserProfileVM(), $t.Id = this.UserEntity.Id, $t);
                                            instance.Title = "Change Password";
                                            return instance;
                                        }), false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ShowButtonNative: function () {
                Core.Components.Extensions.ComponentExt.FindComponentByName(Core.Components.Button, this, "btnNative").Show = false;
                Core.Components.Extensions.ComponentExt.FindComponentByName(Core.Components.Section, this, "Image").UpdateView();
            },
            ShowNative: function () {
                Notification.requestPermission()
            },
            CheckShowNative: function () {
                if(Notification.permission === "granted")
                        this.ShowButtonNative()
                else if(Notification.permission === "denied")
                Core.Extensions.Toast.Warning("Vui l\u00f2ng g\u1ee1 block th\u00f4ng b\u00e1o cho trang n\u00e0y!");
            }
        }
    });

    Bridge.define("TMS.UI.Business.User.UserSettingBL", {
        inherits: [Core.Components.Forms.PopupEditor],
        props: {
            Vendor: {
                get: function () {
                    return Bridge.as(this.Parent.Entity, TMS.API.Models.Vendor);
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.PopupEditor.ctor.call(this, "UserSetting");
                this.Name = "UserSetting";
                this.DOMContentLoaded = Bridge.fn.combine(this.DOMContentLoaded, Bridge.fn.bind(this, function () {
                    if (this.Vendor != null) {
                        return;
                    }
                    Core.Components.Extensions.ComponentExt.SetDataSourceGridView(this, "UserSetting", System.String.format("?$filter=Active eq true and UserId eq {0}", [Bridge.box(this.Vendor.Id, System.Int32)]));
                }));
            }
        },
        methods: {
            Surcharge_AfterRowCreated: function (user) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    surchargeGrid, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        user.UserId = Core.Clients.Client.Token.UserId;
                                        surchargeGrid = Core.Components.Extensions.ComponentExt.FindComponentByName(Core.Components.GridView, this, "UserSetting");
                                        $task1 = surchargeGrid.AddOrUpdateRow(user);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("TMS.UI.Notifications.NotificationBL", {
        inherits: [Core.Components.EditableComponent],
        statics: {
            fields: {
                _instance: null,
                _countNtf: null,
                _countUser: null
            },
            props: {
                Notifications: null,
                UserActive: null,
                Instance: {
                    get: function () {
                        if (TMS.UI.Notifications.NotificationBL._instance == null) {
                            TMS.UI.Notifications.NotificationBL._instance = new TMS.UI.Notifications.NotificationBL();
                        }
                        return TMS.UI.Notifications.NotificationBL._instance;
                    }
                }
            }
        },
        fields: {
            _profile: null,
            _task: null,
            _countBadge: null
        },
        props: {
            CurrentUser: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.EditableComponent.ctor.call(this, null);
                TMS.UI.Notifications.NotificationBL.Notifications = new (Core.MVVM.ObservableList$1(TMS.API.Models.TaskNotification)).ctor();
                TMS.UI.Notifications.NotificationBL.UserActive = new (Core.MVVM.ObservableList$1(TMS.API.Models.User)).ctor();
                TMS.UI.Notifications.NotificationBL._countNtf = new (Core.MVVM.Observable$1(System.String)).ctor();
                TMS.UI.Notifications.NotificationBL._countUser = new (Core.MVVM.Observable$1(System.String)).ctor();
                Core.Components.Forms.EditForm.NotificationClient != null ? Core.Components.Forms.EditForm.NotificationClient.AddListener$1("TaskNotification", Bridge.fn.cacheBind(this, this.ProcessIncomMessage)) : null;
            }
        },
        methods: {
            ProcessIncomMessage: function (obj) {
                var $t, $t1;
                if (obj == null) {
                    return;
                }

                var task = Bridge.cast(obj, TMS.API.Models.TaskNotification);
                if (task == null) {
                    return;
                }

                var existTask = System.Linq.Enumerable.from(TMS.UI.Notifications.NotificationBL.Notifications.Data, TMS.API.Models.TaskNotification).firstOrDefault(function (x) {
                        return x.Id === task.Id;
                    }, null);
                if (existTask == null) {
                    TMS.UI.Notifications.NotificationBL.Notifications.Add(task, 0);
                    this.ToggleBageCount(TMS.UI.Notifications.NotificationBL.Notifications.Data.Count);
                    this.PopupNotification(task);
                }
                this.SetBadgeNumber();
                var entity = Core.Extensions.Utils.GetEntity(($t = task.EntityId, $t != null ? $t : 0));
                task.Entity = ($t1 = new TMS.API.Models.Entity(), $t1.Id = entity.Id, $t1.Name = entity.Name, $t1);
                if (typeof(Notification) !== 'undefined' && Notification.permission === "granted") {
                    this.ShowNativeNtf(task);
                } else if (typeof(Notification) !== 'undefined' && Notification.permission !== "denied") {
                    Notification.requestPermission().then((permission) => {
                        if (permission !== 'granted') {
                        }
                        else this.ShowNativeNtf(task);
                    });
                }
                this.ShowToast(task);
            },
            SetBadgeNumber: function () {
                var unreadCount = System.Linq.Enumerable.from(TMS.UI.Notifications.NotificationBL.Notifications.Data, TMS.API.Models.TaskNotification).count(function (x) {
                        return System.Nullable.eq(x.StatusId, Core.Enums.TaskStateEnum.UnreadStatus);
                    });
                TMS.UI.Notifications.NotificationBL._countNtf.Data = unreadCount > 9 ? "9+" : Bridge.toString(unreadCount);
                TMS.UI.Notifications.NotificationBL._countUser.Data = Bridge.toString(TMS.UI.Notifications.NotificationBL.UserActive.Data.Count);
                var badge = unreadCount > 9 ? 9 : unreadCount;
                if (typeof(cordova) !== 'undefined' &&
                    typeof(cordova.plugins) !== 'undefined' &&
                    typeof(cordova.plugins.notification) !== 'undefined') {
                    cordova.plugins.notification.badge.set(badge);
                }
                return badge;
            },
            ShowNativeNtf: function (task) {
                if (task == null) {
                    return;
                }

                var nativeNtf = null;
                var nativeNtf = new Notification(task.Title,
                {
                    body: task.Description,
                    icon: task.Attachment,
                    vibrate: [200, 100, 200],
                    badge: "./favicon.ico"
                });
                nativeNtf.addEventListener('click', () => this.OpenNotification(task));
                window.setTimeout(function () {
                    nativeNtf.close();
                }, 7000);
            },
            ShowToast: function (task) {
                if (System.Nullable.eq(task.EntityId, Core.Extensions.Utils.GetEntity$1("Entity").Id)) {
                    Swal.fire({
                            icon: 'error',
                            title: task.Title,
                            text: task.Description,
                            footer: '<a href="#">ChÃºc 1 ngÃ y lÃ m viá»c hiá»u quáº£</a>'
                        })
                } else {
                    Core.Extensions.Toast.Success(System.String.format("Th\u00f4ng b\u00e1o h\u1ec7 th\u1ed1ng <br /> {0} - {1}", task.Title, task.Description));
                }
            },
            Render: function () {
                System.Threading.Tasks.Task.run(Bridge.fn.cacheBind(this, this.RenderAsync));
            },
            RenderAsync: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    notifications, 
                    userActive, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2], $step);
                                switch ($step) {
                                    case 0: {
                                        Core.MVVM.Html.Take$1("#notification-list").Clear();
                                        Core.MVVM.Html.Take$1("#user-active").Clear();
                                        $task1 = new Core.Clients.Client.$ctor1("TaskNotification").GetRawList(TMS.API.Models.TaskNotification, System.String.format("?$expand=Entity&$orderby=InsertedDate desc&$top=50", null));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        notifications = $taskResult1;
                                        $task2 = new Core.Clients.Client.$ctor1("TaskNotification").PostAsync(System.Collections.Generic.List$1(TMS.API.Models.User), null, System.String.format("GetUserActive", null));
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        userActive = $taskResult2;
                                        TMS.UI.Notifications.NotificationBL.Notifications.Data = notifications;
                                        TMS.UI.Notifications.NotificationBL.UserActive.Data = userActive;
                                        this.SetBadgeNumber();
                                        this.CurrentUser = Core.Clients.Client.Token;
                                        this.CurrentUser.Avatar = (Core.Clients.Client.Origin || "") + ((Core.Extensions.StringExt.IsNullOrWhiteSpace(this.CurrentUser.Avatar) ? "./image/chinese.jfif" : this.CurrentUser.Avatar) || "");
                                        this.RenderNotification();
                                        this.RenderUserActive();
                                        this.RenderProfile(".profile-info1");
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            RenderProfile: function (classname) {
                var has = Core.Extensions.HtmlElementExtension.HasClass(document.querySelector("body"), "theme-1");
                var isSave = window.localStorage.getItem("isSave");
                Core.MVVM.Html.Take$1(classname).Clear();
                var html = Core.MVVM.Html.Take$1(classname);
                Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(html.A, "navbar-nav-link d-flex align-items-center dropdown-toggle").DataAttr$1("toggle", "dropdown").Span, "text-truncate").Text(this.CurrentUser.FullName).EndOf(Core.MVVM.ElementType.a).Div, "dropdown-menu dropdown-menu-right notClose mt-0 border-0").Style$1("border-top-left-radius: 0;border-top-right-radius: 0").A, "dropdown-item").AsyncEvent$1("click", Bridge.fn.cacheBind(this, this.ViewProfile)).I, "far fa-user").End.Text("Account (" + (this.CurrentUser.UserName || "") + ")").EndOf(Core.MVVM.ElementType.a);
                Core.Components.Renderer.ClassName(html.Div, "dropdown-divider").EndOf(Core.MVVM.ElementType.div);
                if (has) {
                    Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(html.A, "dropdown-item ui-mode").Event("click", Bridge.fn.cacheBind(this, this.DarkMode)).I, "fal fa-moon").End.Text("Dark mode").EndOf(Core.MVVM.ElementType.a);
                } else {
                    Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(html.A, "dropdown-item ui-mode").Event("click", Bridge.fn.cacheBind(this, this.LightMode)).I, "fal fa-adjust").End.Text("Light mode").EndOf(Core.MVVM.ElementType.a);
                }
                if (isSave == null) {
                    Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(html.A, "dropdown-item ui-mode").Event("click", Bridge.fn.cacheBind(this, this.RemoveSetting)).I, "fal fa-trash").End.Text("Remove settings").EndOf(Core.MVVM.ElementType.a);
                } else {
                    Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(html.A, "dropdown-item ui-mode").Event("click", Bridge.fn.cacheBind(this, this.SaveSetting)).I, "fal fa-save").End.Text("Save settings").EndOf(Core.MVVM.ElementType.a);
                }
                Core.Components.Renderer.ClassName(html.Div, "dropdown-divider").EndOf(Core.MVVM.ElementType.div);
                var langSelect = new Core.Components.LangSelect(new Core.Models.Component(), html.GetContext());
                langSelect.Render();
                Core.Components.Renderer.ClassName(html.Div, "dropdown-divider").EndOf(Core.MVVM.ElementType.div);
                Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(html.A.AsyncEvent$1("click", Bridge.fn.cacheBind(this, this.SignOut)), "dropdown-item").I, "far fa-power-off").End.Text("Logout").EndOf(Core.MVVM.ElementType.a);

                Core.MVVM.Html.Take$1(".btn-logout").AsyncEvent$1("click", Bridge.fn.cacheBind(this, this.SignOut));
            },
            LightMode: function () {
                Core.Extensions.HtmlElementExtension.ReplaceClass(document.querySelector("body"), "theme-2", "theme-1");
                this.RenderProfile(".profile-info1");
                Core.Clients.LocalStorage.SetItem(System.String, "theme", "theme-1");
                TMS.UI.App.InitTheme();
            },
            DarkMode: function () {
                Core.Extensions.HtmlElementExtension.ReplaceClass(document.querySelector("body"), "theme-1", "theme-2");
                this.RenderProfile(".profile-info1");
                Core.Clients.LocalStorage.SetItem(System.String, "theme", "theme-2");
                TMS.UI.App.InitTheme();
            },
            RemoveSetting: function () {
                window.localStorage.setItem("isSave", true);
                this.RenderProfile(".profile-info1");
            },
            SaveSetting: function () {
                window.localStorage.removeItem("isSave");
                this.RenderProfile(".profile-info1");
            },
            ShowProfile: function () {
                this._profile.style.display = "block";
                this._profile.focus();
            },
            SignOut: function (e) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    client, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        e.preventDefault();
                                        client = new Core.Clients.Client.$ctor1("User");
                                        $task1 = client.CreateAsync(System.Boolean, Core.Clients.Client.Token, "SignOut");
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        Core.Extensions.Toast.Success("Logout success!");
                                        Core.Clients.Client.Token = null;
                                        Core.Clients.LocalStorage.RemoveItem("UserInfo");
                                        window.location.reload();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ViewProfile: function (e) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    user, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = new Core.Clients.Client.$ctor1("User").FirstOrDefaultAsync(TMS.API.Models.User, System.String.format("?$filter=Active eq true and Id eq {0}", [Bridge.box(this.CurrentUser.UserId, System.Int32)]));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        user = $taskResult1;
                                        $task2 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "UserProfile", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.User.UserProfileBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "User Profile";
                                            instance.Entity = user;
                                            return instance;
                                        }, false, false);
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            RenderNotification: function () {
                var html = Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.MVVM.Html.Take$1("#notification-list").A, "navbar-nav-link").DataAttr$1("toggle", "dropdown").I, "far fa-bell fa-lg").EndOf(Core.MVVM.ElementType.i);
                if (!Bridge.referenceEquals(TMS.UI.Notifications.NotificationBL._countNtf.Data, "")) {
                    Core.Components.Renderer.ClassName(html.Span, "badge badge-pill bg-warning-400 ml-auto ml-md-0").Text$1(System.String, TMS.UI.Notifications.NotificationBL._countNtf);
                    this._countBadge = Core.MVVM.Html.Context;
                }
                ;
                html.EndOf(Core.MVVM.ElementType.a);
                Core.Components.Renderer.ClassName(html.Div.Style$1("border-top-left-radius: 0;border-top-right-radius: 0"), "dropdown-menu dropdown-menu-right dropdown-content wmin-md-300 mt-0").Style$1("border-top-left-radius: 0;border-top-right-radius: 0");
                html.ForEach(TMS.API.Models.TaskNotification, TMS.UI.Notifications.NotificationBL.Notifications, Bridge.fn.bind(this, function (task, index) {
                    if (task == null) {
                        return;
                    }

                    var className = System.Nullable.eq(task.StatusId, Core.Enums.TaskStateEnum.UnreadStatus) ? "text-danger" : "text-muted";
                    Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(html.A, "dropdown-item").Div, "media").Event$1("click", Bridge.fn.bind(this, function (e) {
                        var $step = 0,
                            $task1, 
                            $jumpFromFinally, 
                            $asyncBody = Bridge.fn.bind(this, function () {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = this.OpenNotification(task, e);
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            return;
                                        }
                                        default: {
                                            return;
                                        }
                                    }
                                }
                            }, arguments);

                        $asyncBody();
                    })).Div, "media-body").H3, "dropdown-item-title").Text(task.Title).Span, "float-right text-sm " + (className || "")).I, "fas fa-star").End.End.End.P, "text-sm").Text(task.Description).End.P, "text-sm text-muted").I, "far fa-clock mr-1").End.Text(System.DateTime.format(task.Deadline, "dd/MM/yyyy HH:mm")).EndOf(Core.MVVM.ElementType.a);
                }));
                Core.Components.Renderer.ClassName(html.A, "dropdown-item dropdown-footer").AsyncEvent$1("click", Bridge.fn.cacheBind(this, this.SeeMore)).Text("See more").EndOf(Core.MVVM.ElementType.a);
                TMS.UI.Notifications.NotificationBL.Notifications.Data.ForEach(Bridge.fn.cacheBind(this, this.PopupNotification));
            },
            RenderUserActive: function () {
                var html = Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.MVVM.Html.Take$1("#user-active").A, "navbar-nav-link").DataAttr$1("toggle", "dropdown").I, "fal fa-users fa-lg").EndOf(Core.MVVM.ElementType.i);
                if (!Bridge.referenceEquals(TMS.UI.Notifications.NotificationBL._countUser.Data, "")) {
                    Core.Components.Renderer.ClassName(html.Span, "badge badge-pill bg-warning-400 ml-auto ml-md-0").Text$1(System.String, TMS.UI.Notifications.NotificationBL._countUser);
                    this._countBadge = Core.MVVM.Html.Context;
                }
                ;
                html.EndOf(Core.MVVM.ElementType.a);
                Core.Components.Renderer.ClassName(html.Div.Style$1("border-top-left-radius: 0;border-top-right-radius: 0"), "dropdown-menu dropdown-menu-right dropdown-content wmin-md-300 mt-0").Style$1("border-top-left-radius: 0;border-top-right-radius: 0");
                html.ForEach(TMS.API.Models.User, TMS.UI.Notifications.NotificationBL.UserActive, function (task, index) {
                    if (task == null) {
                        return;
                    }
                    Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(Core.Components.Renderer.ClassName(html.A, "dropdown-item").Div, "media").Div, "media-body").H3, "dropdown-item-title").Text(task.FullName).Span, "float-right text-sm text-sucssess").I, "fas fa-star").End.End.End.P, "text-sm").Text("").End.P, "text-sm text-muted").I, "fal fa-tablet mr-1").End.Text(task.Recover).EndOf(Core.MVVM.ElementType.a);
                });
            },
            ToggleBageCount: function (count) {
                this._countBadge.style.display = count === 0 ? "none" : "inline-block";
            },
            PopupNotification: function (task) {
                if (System.Nullable.neq(task.StatusId, Core.Enums.TaskStateEnum.UnreadStatus)) {
                    return;
                }
            },
            ToggleNotification: function () {
                this._task.style.display = "block";
                this._task.focus();
            },
            SeeMore: function (e) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    lastSeenTask, 
                    lastSeenDate, 
                    $t, 
                    olderTasks, 
                    taskList, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        lastSeenTask = System.Linq.Enumerable.from(TMS.UI.Notifications.NotificationBL.Notifications.Data, TMS.API.Models.TaskNotification).lastOrDefault(null, null);
                                        lastSeenDate = ($t = (lastSeenTask != null ? lastSeenTask.InsertedDate : null), $t != null ? $t : System.DateTime.getNow());
                                        $task1 = new Core.Clients.Client.$ctor1("TaskNotification").GetRawList(TMS.API.Models.TaskNotification, System.String.format("?$filter=InsertedDate lt {0}&$expand=Entity&$orderby=InsertedDate desc&$top=50", [Core.Extensions.DateTimeExt.ToISOFormat(lastSeenDate)]));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        olderTasks = $taskResult1;
                                        taskList = System.Linq.Enumerable.from(TMS.UI.Notifications.NotificationBL.Notifications.Data, TMS.API.Models.TaskNotification).union(olderTasks).toList(TMS.API.Models.TaskNotification);
                                        TMS.UI.Notifications.NotificationBL.Notifications.Data = taskList;
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            MarkAllAsRead: function (e) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    client, 
                    res, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        e.preventDefault();
                                        client = new Core.Clients.Client.$ctor1("TaskNotification");
                                        $task1 = client.PostAsync(System.Boolean, client, "MarkAllAsRead");
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        res = $taskResult1;
                                        this.ToggleBageCount(TMS.UI.Notifications.NotificationBL.Notifications.Data.Count);
                                        Core.Extensions.IEnumerableExtensions.ForEach(Node, this._task.querySelectorAll(".text-danger"), function (task) {
                                            Core.Extensions.HtmlElementExtension.ReplaceClass(task, "text-danger", "text-muted");
                                        });
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            OpenNotification: function (notification, e) {
                var $step = 0,
                    $task1, 
                    $task2, 
                    $taskResult2, 
                    $task3, 
                    $taskResult3, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    element, 
                    entity, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.MarkAsRead(notification);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        element = Bridge.as(e.target, HTMLElement);
                                        Core.Extensions.HtmlElementExtension.ReplaceClass(element.firstChild, "fa-bell", "fa-bell-slash");
                                        if (System.Nullable.eq(notification.EntityId, Core.Extensions.Utils.GetEntity$1("TransportationPlan").Id)) {
                                            $step = 2;
                                            continue;
                                        } 
                                        $step = 5;
                                        continue;
                                    }
                                    case 2: {
                                        $task2 = new Core.Clients.Client.$ctor1("TransportationPlan").GetRawAsync(System.Nullable.getValue(notification.RecordId));
                                        $step = 3;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        entity = $taskResult2;
                                        $task3 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "TransportationPlan Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Manage.TransportationPlanEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Ch\u1ec9nh s\u1eeda k\u1ebf ho\u1ea1ch v\u1eadn chuy\u1ec3n";
                                            instance.Entity = entity;
                                            return instance;
                                        }, false, false);
                                        $step = 4;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        $step = 5;
                                        continue;
                                    }
                                    case 5: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            RemoveDOM: function () {
                Core.MVVM.Html.Take$1("#notification").Clear();
            },
            MarkAsRead: function (task) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        task.StatusId = Core.Enums.TaskStateEnum.Read;
                                        $task1 = new Core.Clients.Client.$ctor1("TaskNotification").UpdateAsync(TMS.API.Models.TaskNotification, task);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        this.SetBadgeNumber();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            Dispose: function () {
                Core.Extensions.HtmlElementExtension.AddClass(this._task, "hide");
            }
        }
    });

    Bridge.define("TMS.UI.Notifications.TaskNotificationListBL", {
        inherits: [Core.Components.Forms.TabEditor],
        ctors: {
            ctor: function () {
                this.$initialize();
                Core.Components.Forms.TabEditor.ctor.call(this, "TaskNotification");
                this.Name = "TaskNotification List";
                this.Entity = new TMS.API.Models.TaskNotification();
            }
        }
    });

    Bridge.define("TMS.UI.Business.Manage.ReturnPlanListBL", {
        inherits: [TMS.UI.Business.Manage.TransportationListBL],
        ctors: {
            ctor: function () {
                this.$initialize();
                TMS.UI.Business.Manage.TransportationListBL.ctor.call(this);
                this.Name = "ReturnPlan List";
            }
        },
        methods: {
            CheckQuotationExpense: function (transportation, masterData) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    gridView, 
                    listViewItem, 
                    confirm, 
                    $t, 
                    quotationExpense, 
                    updated, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4], $step);
                                switch ($step) {
                                    case 0: {
                                        if (transportation.ContainerTypeId == null || transportation.BrandShipId == null) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                                            return Bridge.referenceEquals(x.Name, "Transportation");
                                        }, null);
                                        listViewItem = System.Linq.Enumerable.from(gridView.GetListViewItems(transportation), Core.Components.ListViewItem).firstOrDefault(null, null);
                                        if (masterData == null) {
                                            $step = 1;
                                            continue;
                                        } else  {
                                            $step = 2;
                                            continue;
                                        }
                                    }
                                    case 1: {
                                        confirm = ($t = new Core.Components.Forms.ConfirmDialog(), $t.Content = "B\u1ea1n c\u00f3 mu\u1ed1n x\u00f3a ph\u00ed kh\u00f4ng?", $t);
                                        confirm.Render();
                                        confirm.YesConfirmed = Bridge.fn.combine(confirm.YesConfirmed, function () {
                                            var $t1;
                                            transportation.ReturnVs = System.Decimal(0);
                                            listViewItem.UpdateView();
                                            var updated = ($t1 = Core.Components.Number, System.Linq.Enumerable.from(listViewItem.FilterChildren(Core.Components.Number, function (x) {
                                                return Bridge.referenceEquals(x.GuiInfo.FieldName, "ReturnVs");
                                            }), $t1).toList($t1));
                                            updated.ForEach(function (x) {
                                                x.Dirty = true;
                                            });
                                        });
                                        $step = 4;
                                        continue;
                                    }
                                    case 2: {
                                        $task1 = new Core.Clients.Client.$ctor1("QuotationExpense").FirstOrDefaultAsync(TMS.API.Models.QuotationExpense, System.String.format("?$filter=Active eq true and BrandShipId eq {0} and ExpenseTypeId eq {1} and BranchId eq {2}", Bridge.box(transportation.BrandShipId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), Bridge.box(masterData.Id, System.Int32), Bridge.box(transportation.ExportListId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)));
                                        $step = 3;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        quotationExpense = $taskResult1;
                                        if (quotationExpense == null) {
                                            transportation.ReturnVs = System.Decimal(0);
                                        } else {
                                            if (transportation.Cont20.gt(System.Decimal(0))) {
                                                transportation.ReturnVs = quotationExpense.VS20UnitPrice;
                                            } else if (transportation.Cont40.gt(System.Decimal(0))) {
                                                transportation.ReturnVs = quotationExpense.VS40UnitPrice;
                                            }
                                        }
                                        listViewItem.UpdateView();
                                        updated = ($t = Core.Components.Number, System.Linq.Enumerable.from(listViewItem.FilterChildren(Core.Components.Number, function (x) {
                                            return Bridge.referenceEquals(x.GuiInfo.FieldName, "ReturnVs");
                                        }), $t).toList($t));
                                        updated.ForEach(function (x) {
                                            x.Dirty = true;
                                        });
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            UpdateQuotation: function (arg) {
                var gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                        return Bridge.referenceEquals(x.GuiInfo.FieldName, "Transportation");
                    }, null);

                System.Threading.Tasks.Task.run(Bridge.fn.bind(this, function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $task2, 
                        $taskResult2, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        selected, 
                        coords, 
                        quotation, 
                        $t, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1,2], $step);
                                    switch ($step) {
                                        case 0: {
                                            selected = gridView.LastListViewItem;
                                            if (selected == null) {
                                                Core.Extensions.Toast.Warning("Vui l\u00f2ng ch\u1ecdn cont c\u1ea7n c\u1eadp nh\u1eadt gi\u00e1!");
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            coords = Bridge.unbox(selected.Entity);
                                            $task1 = new Core.Clients.Client.$ctor1("Quotation").FirstOrDefaultAsync(TMS.API.Models.Quotation, System.String.format("?$filter=TypeId eq 7593 and BossId eq {0} and ContainerTypeId eq {1} and LocationId eq {2} and StartDate le {3} and PackingId eq {4}&$orderby=StartDate desc", Bridge.box(coords.BossId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), Bridge.box(coords.ContainerTypeId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), Bridge.box(coords.ReturnId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), Core.Extensions.DateTimeExt.ToOdataFormat(System.Nullable.getValue(coords.ReturnDate)), Bridge.box(coords.ReturnVendorId, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)));
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            quotation = $taskResult1;
                                            if (quotation == null) {
                                                quotation = ($t = new TMS.API.Models.Quotation(), $t.TypeId = 7593, $t.BossId = coords.BossId, $t.ContainerTypeId = coords.ContainerTypeId, $t.LocationId = coords.ReturnId, $t.StartDate = coords.ReturnDate, $t.PackingId = coords.ReturnVendorId, $t);
                                            }
                                            $task2 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Quotation Editor", function () {
                                                var type = Bridge.Reflection.getType("TMS.UI.Business.Settings.QuotationEditorBL");
                                                var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                                instance.Title = "Ch\u1ec9nh s\u1eeda b\u1ea3ng gi\u00e1 tr\u1ea3 h\u00e0ng";
                                                instance.Entity = quotation;
                                                return instance;
                                            }, false, false);
                                            $step = 2;
                                            if ($task2.isCompleted()) {
                                                continue;
                                            }
                                            $task2.continue($asyncBody);
                                            return;
                                        }
                                        case 2: {
                                            $taskResult2 = $task2.getAwaitedResult();
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }));
            },
            CheckStatusQuotationReturn: function () {
                var gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                        return Bridge.referenceEquals(x.GuiInfo.FieldName, "Transportation");
                    }, null);
                if (gridView == null) {
                    return;
                }
                gridView.BodyContextMenuShow = Bridge.fn.combine(gridView.BodyContextMenuShow, Bridge.fn.bind(this, function () {
                    Core.Components.Forms.ContextMenu.Instance.MenuItems = Bridge.fn.bind(this, function (_o1) {
                            var $t;
                            _o1.add(($t = new Core.Components.Forms.ContextMenuItem(), $t.Icon = "fas fa-pen", $t.Text = "C\u1eadp nh\u1eadt gi\u00e1", $t.Click = Bridge.fn.cacheBind(this, this.UpdateQuotation), $t));
                            _o1.add(($t = new Core.Components.Forms.ContextMenuItem(), $t.Icon = "fal fa-street-view", $t.Text = "Xem k\u1ebf ho\u1ea1ch", $t.Click = Bridge.fn.cacheBind(this, this.ViewTransportationPlan), $t));
                            return _o1;
                        })(new (System.Collections.Generic.List$1(Core.Components.Forms.ContextMenuItem)).ctor());
                }));
                var listViewItems = System.Linq.Enumerable.from(gridView.RowData.Data).select(function (x) { return Bridge.cast(x, TMS.API.Models.Transportation); }).toList(TMS.API.Models.Transportation);
                this.ChangeBackgroudColorReturn(listViewItems);
            },
            ChangeBackgroudColorReturn: function (listViewItems) {
                var gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                        return Bridge.referenceEquals(x.GuiInfo.FieldName, "Transportation");
                    }, null);
                if (gridView == null) {
                    return;
                }
                listViewItems.ForEach(function (x) {
                    var listViewItem = System.Linq.Enumerable.from(gridView.AllListViewItem, Core.Components.ListViewItem).firstOrDefault(function (y) {
                            return Bridge.referenceEquals(Bridge.toString(y.Entity[Core.Components.EditableComponent.IdField]), Bridge.toString(x.Id));
                        }, null);
                    if (listViewItem == null) {
                        return;
                    }
                    Core.Extensions.HtmlElementExtension.RemoveClass(listViewItem.Element, "bg-red1");
                    if (!Bridge.equals(x.DemDate, null) && !Bridge.equals(x.ReturnDate, null) && System.DateTime.gt(System.DateTime.getDate(System.Convert.toDateTime(Bridge.box(System.Nullable.getValue(x.ReturnDate), System.DateTime, System.DateTime.format))), System.DateTime.getDate(System.Convert.toDateTime(Bridge.box(System.Nullable.getValue(x.DemDate), System.DateTime, System.DateTime.format))))) {
                        Core.Extensions.HtmlElementExtension.AddClass(listViewItem.Element, "bg-red1");
                    }
                });
            },
            AfterPatchUpdateTransportationReturn: function (transportation, patchUpdate, listViewItem) {
                if (listViewItem == null) {
                    return;
                }
                Core.Extensions.HtmlElementExtension.RemoveClass(listViewItem.Element, "bg-red1");
                Core.Extensions.HtmlElementExtension.RemoveClass(listViewItem.Element, "bg-red");
                if (!Bridge.equals(transportation.DemDate, null) && !Bridge.equals(transportation.ReturnDate, null) && System.DateTime.gt(System.DateTime.getDate(System.Convert.toDateTime(Bridge.box(System.Nullable.getValue(transportation.ReturnDate), System.DateTime, System.DateTime.format))), System.DateTime.getDate(System.Convert.toDateTime(Bridge.box(System.Nullable.getValue(transportation.DemDate), System.DateTime, System.DateTime.format))))) {
                    Core.Extensions.HtmlElementExtension.AddClass(listViewItem.Element, "bg-red1");
                }
                if (!transportation.IsQuotationReturn) {
                    Core.Extensions.HtmlElementExtension.AddClass(listViewItem.Element, "bg-red");
                }
            },
            Allotment: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    gridView, 
                    selected, 
                    fees, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2], $step);
                                switch ($step) {
                                    case 0: {
                                        gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(function (x) {
                                            return Bridge.referenceEquals(x.GuiInfo.FieldName, "Transportation");
                                        }, null);
                                        $task1 = gridView.GetRealTimeSelectedRows();
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        selected = System.Linq.Enumerable.from(($taskResult1)).select(function (x) { return Bridge.cast(x, TMS.API.Models.Transportation); }).where(function (x) {
                                            return x.Id > 0;
                                        }).toList(TMS.API.Models.Transportation);
                                        if (Core.Extensions.IEnumerableExtensions.Nothing(TMS.API.Models.Transportation, selected)) {
                                            Core.Extensions.Toast.Warning("Vui l\u00f2ng ch\u1ecdn cont c\u1ea7n ph\u00e2n b\u1ed5");
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        fees = System.Linq.Enumerable.from(selected, TMS.API.Models.Transportation).select(function (x) {
                                            var $t;
                                            return ($t = new TMS.API.Models.Expense(), $t.ExpenseTypeId = null, $t.UnitPrice = System.Decimal(0), $t.Quantity = System.Decimal(1), $t.IsReturn = true, $t.TotalPriceAfterTax = System.Decimal(0), $t.TotalPriceBeforeTax = System.Decimal(0), $t.Vat = System.Decimal(0), $t.ContainerNo = x.ContainerNo, $t.SealNo = x.SealNo, $t.BossId = x.BossId, $t.CommodityId = x.CommodityId, $t.ClosingDate = x.ClosingDate, $t.ReturnDate = x.ReturnDate, $t.TransportationId = x.Id, $t);
                                        }).toList(TMS.API.Models.Expense);
                                        $task2 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Allotment Editor", function () {
                                            var $t;
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Manage.AllotmentEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Ph\u00e2n b\u1ed5 chi ph\u00ed tr\u1ea3 h\u00e0ng";
                                            instance.Entity = ($t = new TMS.API.Models.Allotment(), $t.Expense = fees, $t);
                                            return instance;
                                        }, false, false);
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CheckFee: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    routeIds, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        routeIds = Core.Clients.LocalStorage.GetItem(System.Collections.Generic.List$1(System.Int32), "RouteCheckFeeClosing");
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "CheckFee Form", function () {
                                            var $t;
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Manage.CheckFeeFormBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Ki\u1ec3m tra b\u1ea3ng k\u00ea";
                                            instance.Entity = ($t = new TMS.API.Models.CheckFeeHistory(), $t.RouteIds = routeIds, $t.TypeId = 2, $t);
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ViewCheckFee: function (entity) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenTab$1(this, "CheckFee Return Editor" + entity.Id, "CheckFee Return Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Manage.CheckFeeReturnEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.TabEditor);
                                            instance.Title = "Ki\u1ec3m tra ph\u00ed tr\u1ea3 h\u00e0ng";
                                            instance.Icon = "fal fa-sitemap mr-1";
                                            instance.Entity = entity;
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            EditTransportation: function (entity) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    gridView, 
                    gridView1, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        this.selected = entity;
                                        gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this, function (x) {
                                            return Bridge.referenceEquals(x.GuiInfo.RefName, "Transportation");
                                        }), Core.Components.GridView).firstOrDefault(null, null);
                                        gridView1 = Core.Components.Extensions.ComponentExt.FindComponentByName(Core.Components.GridView, this.TabEditor, "Expense");
                                        if (this._expensePopup != null && gridView1 != null) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        this._expensePopup != null ? this._expensePopup.Dispose() : null;
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(gridView, "Transportation Return Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Manage.TransportationReturnEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Xem chi ph\u00ed";
                                            instance.Entity = entity;
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        this._expensePopup = $taskResult1;
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ReloadExpense: function (entity) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    gridView1, 
                    gridView, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        this.selected = entity;
                                        gridView1 = Core.Components.Extensions.ComponentExt.FindComponentByName(Core.Components.GridView, this.TabEditor, "Expense");
                                        if (this._expensePopup == null || gridView1 == null) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        this._expensePopup != null ? this._expensePopup.Dispose() : null;
                                        gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this, function (x) {
                                            return Bridge.referenceEquals(x.GuiInfo.RefName, "Transportation");
                                        }), Core.Components.GridView).firstOrDefault(null, null);
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(gridView, "Transportation Return Editor", function () {
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Manage.TransportationReturnEditorBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "Xem chi ph\u00ed";
                                            instance.Entity = entity;
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        this._expensePopup = $taskResult1;
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CheckReturnDate: function (Transportation) {
                var $t;
                var gridView = System.Linq.Enumerable.from(Core.Components.Extensions.ComponentExt.FindActiveComponent(Core.Components.GridView, this), Core.Components.GridView).firstOrDefault(null, null);
                var listViewItem = System.Linq.Enumerable.from(gridView.GetListViewItems(Transportation), Core.Components.ListViewItem).firstOrDefault(null, null);
                if (!Bridge.equals(Transportation.ReturnDate, null) && System.DateTime.lt(System.DateTime.getDate(System.Nullable.getValue(Transportation.ReturnDate)), System.DateTime.getDate(System.Nullable.getValue(Transportation.ShipDate)))) {
                    var confirmDialog = ($t = new Core.Components.Forms.ConfirmDialog(), $t.Content = "Ng\u00e0y \u0111\u00f3ng h\u00e0ng nh\u1ecf h\u01a1n ng\u00e0y t\u00e0u c\u1eadp?", $t);
                    confirmDialog.NoConfirmed = Bridge.fn.combine(confirmDialog.NoConfirmed, function () {
                        Transportation.ReturnDate = null;
                        Core.Extensions.IEnumerableExtensions.ForEach(Core.Components.EditableComponent, listViewItem.FilterChildren(Core.Components.EditableComponent, function (x) {
                            return Bridge.referenceEquals(x.GuiInfo.FieldName, "ReturnDate");
                        }), function (x) {
                            x.Dirty = true;
                        });
                    });
                    this.AddChild(confirmDialog);
                }
            },
            RequestUnClosing: function (transportation, patch) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    tran, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        tran = new TMS.UI.Business.Manage.TransportationListAccountantBL();
                                        $task1 = tran.RequestUnClosing(transportation, patch);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ProductionReport: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Core.Components.Extensions.ComponentExt.OpenPopup(this, "Production Report", function () {
                                            var $t;
                                            var type = Bridge.Reflection.getType("TMS.UI.Business.Manage.ProductionReportFormBL");
                                            var instance = Bridge.as(Bridge.createInstance(type), Core.Components.Forms.PopupEditor);
                                            instance.Title = "B\u00e1o c\u00e1o s\u1ea3n l\u01b0\u1ee3ng";
                                            instance.Entity = ($t = new TMS.API.ViewModels.ReportGroupVM(), $t.Return = true, $t);
                                            return instance;
                                        }, false, false);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });
});
