name: CI/CD Pipeline

on:
  push:
    branches:
      - staging

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Extract metadata for Docker
        id: meta
        run: |
          echo "date=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT
          echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # CoreAPI Build with Cache
      - name: Build and Push CoreAPI Docker Image
        uses: docker/build-push-action@v4
        with:
          context: ./CoreAPI
          platforms: linux/amd64
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/corejs-coreapi:latest
            ${{ secrets.DOCKER_USERNAME }}/corejs-coreapi:${{ steps.meta.outputs.date }}-${{ steps.meta.outputs.sha_short }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/corejs-coreapi:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/corejs-coreapi:buildcache,mode=max

      # Frontend Build with Cache and Dependencies
      - name: Cache Node.js dependencies
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies for frontend
        run: |
          cd frontend
          npm ci

      - name: Build and Push Frontend Docker Image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          platforms: linux/amd64
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/corejs-frontend:latest
            ${{ secrets.DOCKER_USERNAME }}/corejs-frontend:${{ steps.meta.outputs.date }}-${{ steps.meta.outputs.sha_short }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/corejs-frontend:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/corejs-frontend:buildcache,mode=max
          build-args: |
            NODE_ENV=production

      - name: Generate and Run Deployment Script
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
          USERNAME: ${{ secrets.USERNAME }}
          SERVER: ${{ secrets.SERVER }}
          PORT: ${{ secrets.PORT }}
          DESTINATION_PATH: "/home/${{ secrets.USERNAME }}/deployments/corejs"
          IMAGE_TAG: "${{ steps.meta.outputs.date }}-${{ steps.meta.outputs.sha_short }}"
        run: |
          cat <<EOF > deploy.sh
          #!/bin/bash
          set -e

          echo "Checking if Docker Compose is installed..."
          if ! command -v docker-compose &> /dev/null; then
            echo "Docker Compose not found. Installing..."
            sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-\$(uname -s)-\$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            docker-compose --version
          else
            echo "Docker Compose is already installed."
          fi

          echo "Logging into Docker Hub..."
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

          echo "Pulling Docker images..."
          docker pull $DOCKER_USERNAME/corejs-coreapi:${IMAGE_TAG}
          docker pull $DOCKER_USERNAME/corejs-frontend:${IMAGE_TAG}

          echo "Generating docker-compose.yml..."
          cat <<COMPOSE > docker-compose.yml
          version: '3.8'

          services:
            coreapi:
              image: $DOCKER_USERNAME/corejs-coreapi:${IMAGE_TAG}
              ports:
                - "8000:8000"
              restart: unless-stopped

            frontend:
              image: $DOCKER_USERNAME/corejs-frontend:${IMAGE_TAG}
              ports:
                - "3000:3000"
              restart: unless-stopped
          COMPOSE

          echo "Starting the application..."
          docker compose up -d
          
          # Save deployment info to a file
          echo "Deployment completed on $(date)" > deployment_info.txt
          echo "Images:" >> deployment_info.txt
          echo "CoreAPI: $DOCKER_USERNAME/corejs-coreapi:${IMAGE_TAG}" >> deployment_info.txt
          echo "Frontend: $DOCKER_USERNAME/corejs-frontend:${IMAGE_TAG}" >> deployment_info.txt
          EOF

          chmod +x deploy.sh

          # Install sshpass for password-based authentication
          sudo apt-get update && sudo apt-get install -y sshpass

          # First create the directory, then copy the deployment script to the target server
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no -p $PORT $USERNAME@$SERVER "mkdir -p $DESTINATION_PATH"
          sshpass -p "$SSH_PASSWORD" scp -o StrictHostKeyChecking=no -P $PORT deploy.sh $USERNAME@$SERVER:$DESTINATION_PATH/

          # Run the deployment script on the target server and clean up
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no -p $PORT $USERNAME@$SERVER "
            chmod +x $DESTINATION_PATH/deploy.sh &&
            cd $DESTINATION_PATH &&
            bash $DESTINATION_PATH/deploy.sh &&
            rm -f $DESTINATION_PATH/deploy.sh
          "